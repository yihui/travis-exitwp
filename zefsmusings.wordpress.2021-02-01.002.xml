<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

<!-- generator="WordPress.com" created="2021-02-01 08:48"-->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.2/"
>

<channel>
	<title>Zef’s Musings 🤔</title>
	<link>http://zef.me</link>
	<description>Structure. Reflect. Adapt.</description>
	<pubDate>Mon, 01 Feb 2021 08:48:22 +0000</pubDate>
	<language></language>
	<wp:wxr_version>1.2</wp:wxr_version>
	<wp:base_site_url>http://wordpress.com/</wp:base_site_url>
	<wp:base_blog_url>http://zef.me</wp:base_blog_url>

	<wp:author><wp:author_id>1424196</wp:author_id><wp:author_login><![CDATA[zef83]]></wp:author_login><wp:author_email><![CDATA[zefhemel@gmail.com]]></wp:author_email><wp:author_display_name><![CDATA[Zef Hemel]]></wp:author_display_name><wp:author_first_name><![CDATA[Zef]]></wp:author_first_name><wp:author_last_name><![CDATA[Hemel]]></wp:author_last_name></wp:author>

	<wp:category><wp:term_id>651</wp:term_id><wp:category_nicename>articles</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Articles]]></wp:cat_name>
</wp:category>
	<wp:category><wp:term_id>178</wp:term_id><wp:category_nicename>books</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Books]]></wp:cat_name>
</wp:category>
	<wp:category><wp:term_id>1214</wp:term_id><wp:category_nicename>communication</wp:category_nicename><wp:category_parent>articles</wp:category_parent><wp:cat_name><![CDATA[Communication]]></wp:cat_name>
</wp:category>
	<wp:category><wp:term_id>54</wp:term_id><wp:category_nicename>general</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[General]]></wp:cat_name>
</wp:category>
	<wp:category><wp:term_id>10954</wp:term_id><wp:category_nicename>mindset</wp:category_nicename><wp:category_parent>articles</wp:category_parent><wp:cat_name><![CDATA[Mindset]]></wp:cat_name>
</wp:category>
	<wp:category><wp:term_id>11161</wp:term_id><wp:category_nicename>technique</wp:category_nicename><wp:category_parent>articles</wp:category_parent><wp:cat_name><![CDATA[Technique]]></wp:cat_name>
</wp:category>
	<wp:tag><wp:term_id>666631939</wp:term_id><wp:tag_slug>100xengineer</wp:tag_slug><wp:tag_name><![CDATA[100xengineer]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>160666</wp:term_id><wp:tag_slug>1981</wp:tag_slug><wp:tag_name><![CDATA[1981]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>3974</wp:term_id><wp:tag_slug>adwords</wp:tag_slug><wp:tag_name><![CDATA[Adwords]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>11287</wp:term_id><wp:tag_slug>agile</wp:tag_slug><wp:tag_name><![CDATA[Agile]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>6602</wp:term_id><wp:tag_slug>amazon</wp:tag_slug><wp:tag_name><![CDATA[Amazon]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>641922</wp:term_id><wp:tag_slug>android</wp:tag_slug><wp:tag_name><![CDATA[Android]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>35344</wp:term_id><wp:tag_slug>apology</wp:tag_slug><wp:tag_name><![CDATA[Apology]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>1219353</wp:term_id><wp:tag_slug>appengine</wp:tag_slug><wp:tag_name><![CDATA[Appengine]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>291</wp:term_id><wp:tag_slug>apple</wp:tag_slug><wp:tag_name><![CDATA[Apple]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>223029</wp:term_id><wp:tag_slug>aretha-franklin</wp:tag_slug><wp:tag_name><![CDATA[Aretha Franklin]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>2128715</wp:term_id><wp:tag_slug>async</wp:tag_slug><wp:tag_name><![CDATA[Async]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>874083</wp:term_id><wp:tag_slug>asynchronous</wp:tag_slug><wp:tag_name><![CDATA[Asynchronous]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>22584</wp:term_id><wp:tag_slug>attitude</wp:tag_slug><wp:tag_name><![CDATA[Attitude]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>2908</wp:term_id><wp:tag_slug>awesome</wp:tag_slug><wp:tag_name><![CDATA[Awesome]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>144203</wp:term_id><wp:tag_slug>aws</wp:tag_slug><wp:tag_name><![CDATA[AWS]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>93435</wp:term_id><wp:tag_slug>because-i-care</wp:tag_slug><wp:tag_name><![CDATA[Because I Care]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>10347</wp:term_id><wp:tag_slug>best-of</wp:tag_slug><wp:tag_name><![CDATA[Best Of]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>2185</wp:term_id><wp:tag_slug>best-practices</wp:tag_slug><wp:tag_name><![CDATA[Best Practices]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>36507086</wp:term_id><wp:tag_slug>bitcoin</wp:tag_slug><wp:tag_name><![CDATA[Bitcoin]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>31280</wp:term_id><wp:tag_slug>bluetooth</wp:tag_slug><wp:tag_name><![CDATA[Bluetooth]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>178</wp:term_id><wp:tag_slug>books</wp:tag_slug><wp:tag_name><![CDATA[Books]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>104422</wp:term_id><wp:tag_slug>bots</wp:tag_slug><wp:tag_name><![CDATA[Bots]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>50734</wp:term_id><wp:tag_slug>britney</wp:tag_slug><wp:tag_name><![CDATA[Britney]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>138</wp:term_id><wp:tag_slug>browser</wp:tag_slug><wp:tag_name><![CDATA[Browser]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>20483</wp:term_id><wp:tag_slug>buzz</wp:tag_slug><wp:tag_name><![CDATA[Buzz]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>2027236</wp:term_id><wp:tag_slug>caelum</wp:tag_slug><wp:tag_name><![CDATA[Caelum]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>168865</wp:term_id><wp:tag_slug>cappuccino</wp:tag_slug><wp:tag_name><![CDATA[Cappuccino]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>97521</wp:term_id><wp:tag_slug>career-advice</wp:tag_slug><wp:tag_name><![CDATA[Career Advice]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>306</wp:term_id><wp:tag_slug>cats</wp:tag_slug><wp:tag_name><![CDATA[Cats]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>1204277</wp:term_id><wp:tag_slug>chatbots</wp:tag_slug><wp:tag_name><![CDATA[Chatbots]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>15607</wp:term_id><wp:tag_slug>christmas</wp:tag_slug><wp:tag_name><![CDATA[Christmas]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>367314</wp:term_id><wp:tag_slug>chrome</wp:tag_slug><wp:tag_name><![CDATA[Chrome]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>5738990</wp:term_id><wp:tag_slug>clojure</wp:tag_slug><wp:tag_name><![CDATA[Clojure]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>69816</wp:term_id><wp:tag_slug>cloud</wp:tag_slug><wp:tag_name><![CDATA[Cloud]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>1715866</wp:term_id><wp:tag_slug>cloud-computing</wp:tag_slug><wp:tag_name><![CDATA[Cloud Computing]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>52213559</wp:term_id><wp:tag_slug>cloud9ide</wp:tag_slug><wp:tag_name><![CDATA[Cloud9ide]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>1691</wp:term_id><wp:tag_slug>cocoa</wp:tag_slug><wp:tag_name><![CDATA[Cocoa]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>87035</wp:term_id><wp:tag_slug>code-generation</wp:tag_slug><wp:tag_name><![CDATA[Code Generation]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>1214</wp:term_id><wp:tag_slug>communication</wp:tag_slug><wp:tag_name><![CDATA[Communication]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>166035</wp:term_id><wp:tag_slug>communication-skills</wp:tag_slug><wp:tag_name><![CDATA[Communication Skills]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>91765</wp:term_id><wp:tag_slug>company-culture</wp:tag_slug><wp:tag_name><![CDATA[Company Culture]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>100030</wp:term_id><wp:tag_slug>compiler</wp:tag_slug><wp:tag_name><![CDATA[Compiler]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>141472534</wp:term_id><wp:tag_slug>compiles-to-javascript</wp:tag_slug><wp:tag_name><![CDATA[Compiles To Javascript]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>30702</wp:term_id><wp:tag_slug>complain</wp:tag_slug><wp:tag_name><![CDATA[Complain]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>214618</wp:term_id><wp:tag_slug>concurrency</wp:tag_slug><wp:tag_name><![CDATA[Concurrency]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>33525</wp:term_id><wp:tag_slug>conference</wp:tag_slug><wp:tag_name><![CDATA[Conference]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>14660</wp:term_id><wp:tag_slug>conservative</wp:tag_slug><wp:tag_name><![CDATA[Conservative]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>447884</wp:term_id><wp:tag_slug>continuous-improvement</wp:tag_slug><wp:tag_name><![CDATA[Continuous Improvement]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>1786871</wp:term_id><wp:tag_slug>couchdb</wp:tag_slug><wp:tag_name><![CDATA[Couchdb]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>50653</wp:term_id><wp:tag_slug>cranky</wp:tag_slug><wp:tag_name><![CDATA[Cranky]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>169</wp:term_id><wp:tag_slug>css</wp:tag_slug><wp:tag_name><![CDATA[CSS]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>325481</wp:term_id><wp:tag_slug>dart</wp:tag_slug><wp:tag_name><![CDATA[Dart]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>475</wp:term_id><wp:tag_slug>database</wp:tag_slug><wp:tag_name><![CDATA[Database]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>8479328</wp:term_id><wp:tag_slug>datalog</wp:tag_slug><wp:tag_name><![CDATA[Datalog]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>2974</wp:term_id><wp:tag_slug>dave-winer</wp:tag_slug><wp:tag_name><![CDATA[Dave Winer]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>67837</wp:term_id><wp:tag_slug>decision-making</wp:tag_slug><wp:tag_name><![CDATA[Decision Making]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>12167</wp:term_id><wp:tag_slug>decisions</wp:tag_slug><wp:tag_name><![CDATA[decisions]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>148</wp:term_id><wp:tag_slug>design</wp:tag_slug><wp:tag_name><![CDATA[Design]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>28070474</wp:term_id><wp:tag_slug>devops</wp:tag_slug><wp:tag_name><![CDATA[DevOps]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>2377</wp:term_id><wp:tag_slug>digg</wp:tag_slug><wp:tag_name><![CDATA[Digg]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>82814</wp:term_id><wp:tag_slug>dilbert</wp:tag_slug><wp:tag_name><![CDATA[Dilbert]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>19475</wp:term_id><wp:tag_slug>discipline</wp:tag_slug><wp:tag_name><![CDATA[Discipline]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>131459</wp:term_id><wp:tag_slug>distributed</wp:tag_slug><wp:tag_name><![CDATA[Distributed]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>4504191</wp:term_id><wp:tag_slug>docker</wp:tag_slug><wp:tag_name><![CDATA[Docker]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>305</wp:term_id><wp:tag_slug>dog</wp:tag_slug><wp:tag_name><![CDATA[Dog]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>58204</wp:term_id><wp:tag_slug>dsl</wp:tag_slug><wp:tag_name><![CDATA[Dsl]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>1155713</wp:term_id><wp:tag_slug>dynamo</wp:tag_slug><wp:tag_name><![CDATA[Dynamo]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>1719</wp:term_id><wp:tag_slug>ebook</wp:tag_slug><wp:tag_name><![CDATA[eBook]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>11362</wp:term_id><wp:tag_slug>emacs</wp:tag_slug><wp:tag_name><![CDATA[Emacs]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>25393</wp:term_id><wp:tag_slug>engineering</wp:tag_slug><wp:tag_name><![CDATA[Engineering]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>12582611</wp:term_id><wp:tag_slug>engineering-mangement</wp:tag_slug><wp:tag_name><![CDATA[Engineering Mangement]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>396254</wp:term_id><wp:tag_slug>epub</wp:tag_slug><wp:tag_name><![CDATA[Epub]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>5677904</wp:term_id><wp:tag_slug>error-detection</wp:tag_slug><wp:tag_name><![CDATA[Error Detection]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>45920</wp:term_id><wp:tag_slug>essentials</wp:tag_slug><wp:tag_name><![CDATA[Essentials]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>924</wp:term_id><wp:tag_slug>event</wp:tag_slug><wp:tag_name><![CDATA[Event]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>81819</wp:term_id><wp:tag_slug>facebook</wp:tag_slug><wp:tag_name><![CDATA[Facebook]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>112207</wp:term_id><wp:tag_slug>fail</wp:tag_slug><wp:tag_name><![CDATA[Fail]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>2284</wp:term_id><wp:tag_slug>feed</wp:tag_slug><wp:tag_name><![CDATA[Feed]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>87</wp:term_id><wp:tag_slug>feedback</wp:tag_slug><wp:tag_name><![CDATA[Feedback]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>793571</wp:term_id><wp:tag_slug>file-system</wp:tag_slug><wp:tag_name><![CDATA[File System]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>9765081</wp:term_id><wp:tag_slug>firefoxos</wp:tag_slug><wp:tag_name><![CDATA[Firefoxos]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>31386126</wp:term_id><wp:tag_slug>flattr</wp:tag_slug><wp:tag_name><![CDATA[Flattr]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>7136</wp:term_id><wp:tag_slug>framework</wp:tag_slug><wp:tag_name><![CDATA[Framework]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>1827</wp:term_id><wp:tag_slug>free</wp:tag_slug><wp:tag_name><![CDATA[Free]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>684</wp:term_id><wp:tag_slug>funny</wp:tag_slug><wp:tag_name><![CDATA[Funny]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>2850</wp:term_id><wp:tag_slug>future</wp:tag_slug><wp:tag_name><![CDATA[Future]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>21</wp:term_id><wp:tag_slug>game</wp:tag_slug><wp:tag_name><![CDATA[Game]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>54</wp:term_id><wp:tag_slug>general</wp:tag_slug><wp:tag_name><![CDATA[General]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>209196</wp:term_id><wp:tag_slug>git</wp:tag_slug><wp:tag_name><![CDATA[Git]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>90510</wp:term_id><wp:tag_slug>gizmodo</wp:tag_slug><wp:tag_name><![CDATA[Gizmodo]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>1110</wp:term_id><wp:tag_slug>gmail</wp:tag_slug><wp:tag_name><![CDATA[Gmail]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>75873</wp:term_id><wp:tag_slug>goal-setting</wp:tag_slug><wp:tag_name><![CDATA[Goal Setting]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>27540178</wp:term_id><wp:tag_slug>golang</wp:tag_slug><wp:tag_name><![CDATA[Golang]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>81</wp:term_id><wp:tag_slug>google</wp:tag_slug><wp:tag_name><![CDATA[Google]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>1193803</wp:term_id><wp:tag_slug>google-gears</wp:tag_slug><wp:tag_name><![CDATA[Google Gears]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>82795923</wp:term_id><wp:tag_slug>google-glass</wp:tag_slug><wp:tag_name><![CDATA[Google Glass]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>20948031</wp:term_id><wp:tag_slug>google-wave</wp:tag_slug><wp:tag_name><![CDATA[Google Wave]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>1247</wp:term_id><wp:tag_slug>gtd</wp:tag_slug><wp:tag_name><![CDATA[Gtd]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>8332934</wp:term_id><wp:tag_slug>hashtable</wp:tag_slug><wp:tag_name><![CDATA[Hashtable]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>31281</wp:term_id><wp:tag_slug>headset</wp:tag_slug><wp:tag_name><![CDATA[Headset]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>4977067</wp:term_id><wp:tag_slug>heroku</wp:tag_slug><wp:tag_name><![CDATA[Heroku]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>294490</wp:term_id><wp:tag_slug>highlight</wp:tag_slug><wp:tag_name><![CDATA[highlight]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>113932</wp:term_id><wp:tag_slug>hiring</wp:tag_slug><wp:tag_name><![CDATA[Hiring]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>15631</wp:term_id><wp:tag_slug>hobby</wp:tag_slug><wp:tag_name><![CDATA[Hobby]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>706342650</wp:term_id><wp:tag_slug>hog-hlight</wp:tag_slug><wp:tag_name><![CDATA[hog hlight]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>53242</wp:term_id><wp:tag_slug>html5</wp:tag_slug><wp:tag_name><![CDATA[Html5]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>44112433</wp:term_id><wp:tag_slug>ia-writer</wp:tag_slug><wp:tag_name><![CDATA[Ia Writer]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>7746</wp:term_id><wp:tag_slug>ide</wp:tag_slug><wp:tag_name><![CDATA[Ide]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>374</wp:term_id><wp:tag_slug>ideas</wp:tag_slug><wp:tag_name><![CDATA[Ideas]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>1611378</wp:term_id><wp:tag_slug>imob</wp:tag_slug><wp:tag_name><![CDATA[Imob]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>5344</wp:term_id><wp:tag_slug>important</wp:tag_slug><wp:tag_name><![CDATA[Important]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>187492</wp:term_id><wp:tag_slug>incident-management</wp:tag_slug><wp:tag_name><![CDATA[Incident Management]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>16804</wp:term_id><wp:tag_slug>interaction</wp:tag_slug><wp:tag_name><![CDATA[Interaction]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>6624</wp:term_id><wp:tag_slug>interaction-design</wp:tag_slug><wp:tag_name><![CDATA[Interaction Design]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>11788</wp:term_id><wp:tag_slug>interview</wp:tag_slug><wp:tag_name><![CDATA[Interview]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>324281</wp:term_id><wp:tag_slug>ios</wp:tag_slug><wp:tag_name><![CDATA[iOS]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>580102</wp:term_id><wp:tag_slug>ipad</wp:tag_slug><wp:tag_name><![CDATA[iPad]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>106595</wp:term_id><wp:tag_slug>iphone</wp:tag_slug><wp:tag_name><![CDATA[iPhone]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>30677</wp:term_id><wp:tag_slug>iphoto</wp:tag_slug><wp:tag_name><![CDATA[Iphoto]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>1353</wp:term_id><wp:tag_slug>ipod</wp:tag_slug><wp:tag_name><![CDATA[iPod]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>314325</wp:term_id><wp:tag_slug>jaiku</wp:tag_slug><wp:tag_name><![CDATA[Jaiku]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>1017</wp:term_id><wp:tag_slug>java</wp:tag_slug><wp:tag_name><![CDATA[Java]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>457</wp:term_id><wp:tag_slug>javascript</wp:tag_slug><wp:tag_name><![CDATA[JavaScript]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>316</wp:term_id><wp:tag_slug>journalism</wp:tag_slug><wp:tag_name><![CDATA[Journalism]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>461295</wp:term_id><wp:tag_slug>jvm</wp:tag_slug><wp:tag_name><![CDATA[JVM]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>33435750</wp:term_id><wp:tag_slug>kotlin</wp:tag_slug><wp:tag_name><![CDATA[Kotlin]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>46713213</wp:term_id><wp:tag_slug>kubernetes</wp:tag_slug><wp:tag_name><![CDATA[Kubernetes]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>1934</wp:term_id><wp:tag_slug>language</wp:tag_slug><wp:tag_name><![CDATA[Language]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>5527368</wp:term_id><wp:tag_slug>language-design</wp:tag_slug><wp:tag_name><![CDATA[Language Design]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>26060</wp:term_id><wp:tag_slug>layout</wp:tag_slug><wp:tag_name><![CDATA[Layout]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>7885</wp:term_id><wp:tag_slug>leadership</wp:tag_slug><wp:tag_name><![CDATA[Leadership]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>5711</wp:term_id><wp:tag_slug>lectures</wp:tag_slug><wp:tag_name><![CDATA[Lectures]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>2501</wp:term_id><wp:tag_slug>life-lessons</wp:tag_slug><wp:tag_name><![CDATA[Life Lessons]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>80962</wp:term_id><wp:tag_slug>linkedin</wp:tag_slug><wp:tag_name><![CDATA[LinkedIn]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>310381</wp:term_id><wp:tag_slug>linus-torvalds</wp:tag_slug><wp:tag_name><![CDATA[Linus Torvalds]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>610</wp:term_id><wp:tag_slug>linux</wp:tag_slug><wp:tag_name><![CDATA[Linux]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>11457</wp:term_id><wp:tag_slug>lisp</wp:tag_slug><wp:tag_name><![CDATA[Lisp]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>308482107</wp:term_id><wp:tag_slug>logicblox</wp:tag_slug><wp:tag_name><![CDATA[Logicblox]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>808</wp:term_id><wp:tag_slug>mac</wp:tag_slug><wp:tag_name><![CDATA[Mac]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>4236</wp:term_id><wp:tag_slug>management</wp:tag_slug><wp:tag_name><![CDATA[Management]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>749815</wp:term_id><wp:tag_slug>management-and-leadership</wp:tag_slug><wp:tag_name><![CDATA[Management And Leadership]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>140810</wp:term_id><wp:tag_slug>markdown</wp:tag_slug><wp:tag_name><![CDATA[Markdown]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>21686</wp:term_id><wp:tag_slug>medium</wp:tag_slug><wp:tag_name><![CDATA[Medium]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>1209</wp:term_id><wp:tag_slug>meetings</wp:tag_slug><wp:tag_name><![CDATA[Meetings]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>220805</wp:term_id><wp:tag_slug>mercurial</wp:tag_slug><wp:tag_name><![CDATA[Mercurial]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>108919</wp:term_id><wp:tag_slug>messaging</wp:tag_slug><wp:tag_name><![CDATA[Messaging]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>171</wp:term_id><wp:tag_slug>meta</wp:tag_slug><wp:tag_name><![CDATA[Meta]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>17060625</wp:term_id><wp:tag_slug>microservices</wp:tag_slug><wp:tag_name><![CDATA[Microservices]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>637</wp:term_id><wp:tag_slug>microsoft</wp:tag_slug><wp:tag_name><![CDATA[Microsoft]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>666631941</wp:term_id><wp:tag_slug>mobidsl</wp:tag_slug><wp:tag_name><![CDATA[Mobidsl]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>120</wp:term_id><wp:tag_slug>mobile</wp:tag_slug><wp:tag_name><![CDATA[Mobile]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>132464</wp:term_id><wp:tag_slug>mobile-web</wp:tag_slug><wp:tag_name><![CDATA[Mobile Web]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>29772602</wp:term_id><wp:tag_slug>mobl</wp:tag_slug><wp:tag_name><![CDATA[Mobl]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>8846</wp:term_id><wp:tag_slug>model</wp:tag_slug><wp:tag_name><![CDATA[Model]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>19878</wp:term_id><wp:tag_slug>modeling</wp:tag_slug><wp:tag_name><![CDATA[Modeling]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>21954763</wp:term_id><wp:tag_slug>mongodb</wp:tag_slug><wp:tag_name><![CDATA[Mongodb]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>14247</wp:term_id><wp:tag_slug>mono</wp:tag_slug><wp:tag_name><![CDATA[Mono]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>257605</wp:term_id><wp:tag_slug>mwc</wp:tag_slug><wp:tag_name><![CDATA[MWC]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>4419</wp:term_id><wp:tag_slug>mysql</wp:tag_slug><wp:tag_name><![CDATA[MySQL]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>142027</wp:term_id><wp:tag_slug>native</wp:tag_slug><wp:tag_name><![CDATA[Native]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>2698</wp:term_id><wp:tag_slug>newspaper</wp:tag_slug><wp:tag_name><![CDATA[Newspaper]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>28813524</wp:term_id><wp:tag_slug>nexus-one</wp:tag_slug><wp:tag_name><![CDATA[Nexus One]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>9749</wp:term_id><wp:tag_slug>nix</wp:tag_slug><wp:tag_name><![CDATA[Nix]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>1869026</wp:term_id><wp:tag_slug>nixos</wp:tag_slug><wp:tag_name><![CDATA[Nixos]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>688181</wp:term_id><wp:tag_slug>nonviolent-communication</wp:tag_slug><wp:tag_name><![CDATA[Nonviolent Communication]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>22319505</wp:term_id><wp:tag_slug>nosql</wp:tag_slug><wp:tag_name><![CDATA[NoSQL]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>3607</wp:term_id><wp:tag_slug>nostalgia</wp:tag_slug><wp:tag_name><![CDATA[Nostalgia]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>376320</wp:term_id><wp:tag_slug>obama</wp:tag_slug><wp:tag_name><![CDATA[Obama]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>12117</wp:term_id><wp:tag_slug>objective-c</wp:tag_slug><wp:tag_name><![CDATA[Objective C]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>7827840</wp:term_id><wp:tag_slug>objective-j</wp:tag_slug><wp:tag_name><![CDATA[Objective J]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>315</wp:term_id><wp:tag_slug>office</wp:tag_slug><wp:tag_name><![CDATA[Office]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>13235</wp:term_id><wp:tag_slug>offline</wp:tag_slug><wp:tag_name><![CDATA[Offline]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>2696354</wp:term_id><wp:tag_slug>olx</wp:tag_slug><wp:tag_name><![CDATA[olx]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>25</wp:term_id><wp:tag_slug>open-source</wp:tag_slug><wp:tag_name><![CDATA[Open Source]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>352</wp:term_id><wp:tag_slug>opinion</wp:tag_slug><wp:tag_name><![CDATA[Opinion]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>43230</wp:term_id><wp:tag_slug>orm</wp:tag_slug><wp:tag_name><![CDATA[Orm]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>1438933</wp:term_id><wp:tag_slug>paas</wp:tag_slug><wp:tag_name><![CDATA[Paas]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>1515</wp:term_id><wp:tag_slug>palm</wp:tag_slug><wp:tag_name><![CDATA[Palm]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>162814</wp:term_id><wp:tag_slug>paradigm</wp:tag_slug><wp:tag_name><![CDATA[Paradigm]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>29092830</wp:term_id><wp:tag_slug>paredit</wp:tag_slug><wp:tag_name><![CDATA[Paredit]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>1930</wp:term_id><wp:tag_slug>performance</wp:tag_slug><wp:tag_name><![CDATA[Performance]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>77740</wp:term_id><wp:tag_slug>performance-management</wp:tag_slug><wp:tag_name><![CDATA[Performance Management]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>356435</wp:term_id><wp:tag_slug>performance-reviews</wp:tag_slug><wp:tag_name><![CDATA[Performance Reviews]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>64</wp:term_id><wp:tag_slug>personal</wp:tag_slug><wp:tag_name><![CDATA[Personal]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>36914</wp:term_id><wp:tag_slug>phone</wp:tag_slug><wp:tag_name><![CDATA[Phone]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>458</wp:term_id><wp:tag_slug>php</wp:tag_slug><wp:tag_name><![CDATA[PHP]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>27137</wp:term_id><wp:tag_slug>pico</wp:tag_slug><wp:tag_name><![CDATA[Pico]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>666631942</wp:term_id><wp:tag_slug>picoblogging</wp:tag_slug><wp:tag_name><![CDATA[Picoblogging]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>109814</wp:term_id><wp:tag_slug>pil</wp:tag_slug><wp:tag_name><![CDATA[Pil]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>1198520</wp:term_id><wp:tag_slug>pipl</wp:tag_slug><wp:tag_name><![CDATA[Pipl]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>24652</wp:term_id><wp:tag_slug>plus</wp:tag_slug><wp:tag_name><![CDATA[Plus]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>1142</wp:term_id><wp:tag_slug>podcast</wp:tag_slug><wp:tag_name><![CDATA[Podcast]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>4340</wp:term_id><wp:tag_slug>poland</wp:tag_slug><wp:tag_name><![CDATA[Poland]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>298125158</wp:term_id><wp:tag_slug>polyconf</wp:tag_slug><wp:tag_name><![CDATA[Polyconf]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>192336</wp:term_id><wp:tag_slug>pre</wp:tag_slug><wp:tag_name><![CDATA[Pre]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>17903</wp:term_id><wp:tag_slug>presentation</wp:tag_slug><wp:tag_name><![CDATA[Presentation]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>27683</wp:term_id><wp:tag_slug>president</wp:tag_slug><wp:tag_name><![CDATA[President]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>2704</wp:term_id><wp:tag_slug>productivity</wp:tag_slug><wp:tag_name><![CDATA[Productivity]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>28502150</wp:term_id><wp:tag_slug>program-transformation</wp:tag_slug><wp:tag_name><![CDATA[Program Transformation]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>196</wp:term_id><wp:tag_slug>programming</wp:tag_slug><wp:tag_name><![CDATA[Programming]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>13215</wp:term_id><wp:tag_slug>programming-languages</wp:tag_slug><wp:tag_name><![CDATA[Programming Languages]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>1548</wp:term_id><wp:tag_slug>public-speaking</wp:tag_slug><wp:tag_name><![CDATA[Public Speaking]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>17121134</wp:term_id><wp:tag_slug>pubsubhubbub</wp:tag_slug><wp:tag_name><![CDATA[Pubsubhubbub]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>3231</wp:term_id><wp:tag_slug>purpose</wp:tag_slug><wp:tag_name><![CDATA[Purpose]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>157148</wp:term_id><wp:tag_slug>push</wp:tag_slug><wp:tag_name><![CDATA[Push]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>473</wp:term_id><wp:tag_slug>puzzle</wp:tag_slug><wp:tag_name><![CDATA[Puzzle]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>832</wp:term_id><wp:tag_slug>python</wp:tag_slug><wp:tag_name><![CDATA[Python]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>62664</wp:term_id><wp:tag_slug>quality-assurance</wp:tag_slug><wp:tag_name><![CDATA[Quality Assurance]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>320212</wp:term_id><wp:tag_slug>rackspace</wp:tag_slug><wp:tag_name><![CDATA[Rackspace]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>6652</wp:term_id><wp:tag_slug>rails</wp:tag_slug><wp:tag_name><![CDATA[Rails]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>53815206</wp:term_id><wp:tag_slug>reactive-programming</wp:tag_slug><wp:tag_name><![CDATA[Reactive Programming]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>1473</wp:term_id><wp:tag_slug>reading</wp:tag_slug><wp:tag_name><![CDATA[Reading]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>262916</wp:term_id><wp:tag_slug>readinglist</wp:tag_slug><wp:tag_name><![CDATA[Readinglist]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>169819</wp:term_id><wp:tag_slug>readme</wp:tag_slug><wp:tag_name><![CDATA[Readme]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>4471403</wp:term_id><wp:tag_slug>real-time-web</wp:tag_slug><wp:tag_name><![CDATA[Real Time Web]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>8452</wp:term_id><wp:tag_slug>recruiting</wp:tag_slug><wp:tag_name><![CDATA[Recruiting]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>40179</wp:term_id><wp:tag_slug>reddit</wp:tag_slug><wp:tag_name><![CDATA[Reddit]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>8408</wp:term_id><wp:tag_slug>reflection</wp:tag_slug><wp:tag_name><![CDATA[reflection]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>445937</wp:term_id><wp:tag_slug>remote-working</wp:tag_slug><wp:tag_name><![CDATA[Remote Working]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>668</wp:term_id><wp:tag_slug>research</wp:tag_slug><wp:tag_name><![CDATA[Research]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>340215</wp:term_id><wp:tag_slug>resilience</wp:tag_slug><wp:tag_name><![CDATA[Resilience]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>590257</wp:term_id><wp:tag_slug>retrospectives</wp:tag_slug><wp:tag_name><![CDATA[Retrospectives]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>59966</wp:term_id><wp:tag_slug>rhetoric</wp:tag_slug><wp:tag_name><![CDATA[Rhetoric]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>4497</wp:term_id><wp:tag_slug>robert-scoble</wp:tag_slug><wp:tag_name><![CDATA[Robert Scoble]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>823</wp:term_id><wp:tag_slug>rpg</wp:tag_slug><wp:tag_name><![CDATA[Rpg]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>1518</wp:term_id><wp:tag_slug>rss</wp:tag_slug><wp:tag_name><![CDATA[RSS]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>4872</wp:term_id><wp:tag_slug>ruby</wp:tag_slug><wp:tag_name><![CDATA[Ruby]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>7094</wp:term_id><wp:tag_slug>sales</wp:tag_slug><wp:tag_name><![CDATA[Sales]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>913</wp:term_id><wp:tag_slug>sarcasm</wp:tag_slug><wp:tag_name><![CDATA[Sarcasm]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>312256</wp:term_id><wp:tag_slug>scala</wp:tag_slug><wp:tag_name><![CDATA[Scala]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>320209</wp:term_id><wp:tag_slug>scaling</wp:tag_slug><wp:tag_name><![CDATA[Scaling]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>46805</wp:term_id><wp:tag_slug>scrum</wp:tag_slug><wp:tag_name><![CDATA[Scrum]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>298</wp:term_id><wp:tag_slug>server</wp:tag_slug><wp:tag_name><![CDATA[Server]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>2092318</wp:term_id><wp:tag_slug>serverless</wp:tag_slug><wp:tag_name><![CDATA[Serverless]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>420629263</wp:term_id><wp:tag_slug>serverless-architecture</wp:tag_slug><wp:tag_name><![CDATA[Serverless Architecture]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>485178</wp:term_id><wp:tag_slug>sissies</wp:tag_slug><wp:tag_name><![CDATA[Sissies]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>2301</wp:term_id><wp:tag_slug>software-development</wp:tag_slug><wp:tag_name><![CDATA[Software Development]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>11176</wp:term_id><wp:tag_slug>software-engineering</wp:tag_slug><wp:tag_name><![CDATA[Software Engineering]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>12703</wp:term_id><wp:tag_slug>speech</wp:tag_slug><wp:tag_name><![CDATA[Speech]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>188375757</wp:term_id><wp:tag_slug>spoofax</wp:tag_slug><wp:tag_name><![CDATA[Spoofax]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>4621</wp:term_id><wp:tag_slug>startup</wp:tag_slug><wp:tag_name><![CDATA[Startup]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>8337</wp:term_id><wp:tag_slug>steve</wp:tag_slug><wp:tag_name><![CDATA[Steve]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>652625</wp:term_id><wp:tag_slug>stratego</wp:tag_slug><wp:tag_name><![CDATA[Stratego]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>77702553</wp:term_id><wp:tag_slug>stratifiedjs</wp:tag_slug><wp:tag_name><![CDATA[Stratifiedjs]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>7409</wp:term_id><wp:tag_slug>support</wp:tag_slug><wp:tag_name><![CDATA[Support]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>596263</wp:term_id><wp:tag_slug>swift</wp:tag_slug><wp:tag_name><![CDATA[Swift]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>21233</wp:term_id><wp:tag_slug>switch</wp:tag_slug><wp:tag_name><![CDATA[Switch]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>159841</wp:term_id><wp:tag_slug>tables</wp:tag_slug><wp:tag_name><![CDATA[Tables]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>42375</wp:term_id><wp:tag_slug>talk</wp:tag_slug><wp:tag_name><![CDATA[Talk]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>129845</wp:term_id><wp:tag_slug>tcp</wp:tag_slug><wp:tag_name><![CDATA[Tcp]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>12722</wp:term_id><wp:tag_slug>teamwork</wp:tag_slug><wp:tag_name><![CDATA[Teamwork]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>318</wp:term_id><wp:tag_slug>tech</wp:tag_slug><wp:tag_name><![CDATA[Tech]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>159055</wp:term_id><wp:tag_slug>techmeme</wp:tag_slug><wp:tag_name><![CDATA[Techmeme]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>6481581</wp:term_id><wp:tag_slug>techradar</wp:tag_slug><wp:tag_name><![CDATA[Techradar]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>3786</wp:term_id><wp:tag_slug>thinking</wp:tag_slug><wp:tag_name><![CDATA[Thinking]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>462</wp:term_id><wp:tag_slug>tv</wp:tag_slug><wp:tag_name><![CDATA[TV]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>2918658</wp:term_id><wp:tag_slug>twhirl</wp:tag_slug><wp:tag_name><![CDATA[Twhirl]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>599182</wp:term_id><wp:tag_slug>twitter</wp:tag_slug><wp:tag_name><![CDATA[Twitter]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>2136418</wp:term_id><wp:tag_slug>uncov</wp:tag_slug><wp:tag_name><![CDATA[Uncov]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>8525</wp:term_id><wp:tag_slug>urban-planning</wp:tag_slug><wp:tag_name><![CDATA[Urban Planning]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>1077603</wp:term_id><wp:tag_slug>url-shortening</wp:tag_slug><wp:tag_name><![CDATA[Url Shortening]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>9280</wp:term_id><wp:tag_slug>user-experience</wp:tag_slug><wp:tag_name><![CDATA[User Experience]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>6171</wp:term_id><wp:tag_slug>user-interface</wp:tag_slug><wp:tag_name><![CDATA[User Interface]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>464436</wp:term_id><wp:tag_slug>v8</wp:tag_slug><wp:tag_name><![CDATA[V8]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>32862</wp:term_id><wp:tag_slug>vba</wp:tag_slug><wp:tag_name><![CDATA[Vba]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>89048</wp:term_id><wp:tag_slug>vi</wp:tag_slug><wp:tag_name><![CDATA[Vi]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>1149</wp:term_id><wp:tag_slug>video</wp:tag_slug><wp:tag_name><![CDATA[Video]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>241060</wp:term_id><wp:tag_slug>video-conferencing</wp:tag_slug><wp:tag_name><![CDATA[Video Conferencing]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>18060</wp:term_id><wp:tag_slug>vim</wp:tag_slug><wp:tag_name><![CDATA[Vim]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>151</wp:term_id><wp:tag_slug>web</wp:tag_slug><wp:tag_name><![CDATA[Web]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>6286</wp:term_id><wp:tag_slug>web-apps</wp:tag_slug><wp:tag_name><![CDATA[Web Apps]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>30461391</wp:term_id><wp:tag_slug>webdsl</wp:tag_slug><wp:tag_name><![CDATA[Webdsl]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>42024</wp:term_id><wp:tag_slug>wedding</wp:tag_slug><wp:tag_name><![CDATA[Wedding]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>4896</wp:term_id><wp:tag_slug>weird</wp:tag_slug><wp:tag_name><![CDATA[Weird]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>11250</wp:term_id><wp:tag_slug>why</wp:tag_slug><wp:tag_name><![CDATA[Why]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>800</wp:term_id><wp:tag_slug>windows</wp:tag_slug><wp:tag_name><![CDATA[Windows]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>4583</wp:term_id><wp:tag_slug>wip</wp:tag_slug><wp:tag_name><![CDATA[wip]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>355</wp:term_id><wp:tag_slug>wireless</wp:tag_slug><wp:tag_name><![CDATA[Wireless]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>349</wp:term_id><wp:tag_slug>writing</wp:tag_slug><wp:tag_name><![CDATA[Writing]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>344213</wp:term_id><wp:tag_slug>xkcd</wp:tag_slug><wp:tag_name><![CDATA[Xkcd]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>9729064</wp:term_id><wp:tag_slug>yabb</wp:tag_slug><wp:tag_name><![CDATA[Yabb]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>455280</wp:term_id><wp:tag_slug>zed</wp:tag_slug><wp:tag_name><![CDATA[Zed]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>138783</wp:term_id><wp:tag_slug>zfs</wp:tag_slug><wp:tag_name><![CDATA[Zfs]]></wp:tag_name>
</wp:tag>
	<wp:term><wp:term_id>1359</wp:term_id><wp:term_taxonomy>nav_menu</wp:term_taxonomy><wp:term_slug><![CDATA[primary]]></wp:term_slug><wp:term_name><![CDATA[Primary]]></wp:term_name>
</wp:term>
	<wp:term><wp:term_id>1360</wp:term_id><wp:term_taxonomy>nav_menu</wp:term_taxonomy><wp:term_slug><![CDATA[social]]></wp:term_slug><wp:term_name><![CDATA[Social]]></wp:term_name>
</wp:term>

	<generator>http://wordpress.com/</generator>

<image>
	<url>https://zefsmusings.files.wordpress.com/2020/05/cropped-zef.jpg?w=32</url>
	<title>Zef’s Musings 🤔</title>
	<link>http://zef.me</link>
	<width>32</width>
	<height>32</height>
</image> 
	
	<item>
		<title>Code Indentation: Tabs vs. Spaces</title>
		<link>http://zef.me/2005/04/06/code-indentation-tabs-vs-spaces/</link>
		<pubDate>Wed, 06 Apr 2005 17:17:37 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2005/04/06/code-indentation-tabs-vs-spaces/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>One of the discussions that inevitably pop up from time is the spaces versus tabs discussion, for indentation of code. Should you use tabs or three, four or five spaces to indent your code?</p>
<p>The people who use spaces usually give as their reason that your code looks the same in every editor, on every PC. That’s great, but is that an advantage at all? Those same people also have lengthy discussions, after they decided to use spaces for indentation, about how many spaces to use. “Shall we use just 1? I think that’s enough.” “Nah! Are you crazy!? Three is good.” “No, four!”</p>
<p>Wouldn’t it be great to have some kind of magic kind of space whose width was specifyable, so that everybody can use the width they prefer? Hmm, oh wait, that’s a tab!</p>
<p>All editors I know, allow you to set the width of a tab; do you think 1 spacing is enough, or do you prefer 8? Just set it in your editor.</p>
<p>People prefering spaces make no sense. Weird thing, though, is that I use spaces myself too. But that’s just because I’m too lazy to figure out to turn off the turn-tabs-into-spaces option in vim. And to set the tab-width to 3 (three rules!).</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>117</wp:post_id>
		<wp:post_date>2005-04-06 19:17:37</wp:post_date>
		<wp:post_date_gmt>2005-04-06 17:17:37</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>code-indentation-tabs-vs-spaces</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Is Google the Next Netscape?</title>
		<link>http://zef.me/2005/04/09/is-google-the-next-netscape/</link>
		<pubDate>Sat, 09 Apr 2005 14:02:02 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2005/04/09/is-google-the-next-netscape/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>The trick of starting successful products is finding things that people need and don’t already exist; or to find things that do exist, but can be improved a lot. Take search engines for example. Before Google, search engines weren’t great. The best there was was “Altavista”:http://www.altavista.com, which, as you may remember, returned a big pile of junk which you still had to dig through yourself. Google made sure that what you looked for was always on top.</p>
<p>Google reinvented the web search engine and constantly pushed its limits. Microsoft had a search engine, but it wasn’t very good. A year ago or so they decided to put effort into building a product that could compete with Google. Trouble is that by now everybody already used Google. Hell, googling has become a verb. I google, you google, he or she googles.</p>
<p>So, what do you do? Well, you pull an IE(Internet Explorer) on them; you integrate your product into your other products that everybody uses already. Like Microsoft’s new MSN Search, IE had to start from zero. Netscape owned the market. So, what did Microsoft do? Integrate it into Windows. If there’s already a browser preinstalled, why install another one? This tactic doesn’t exactly map onto web applications, but what Microsoft is doing with MSN Search now is fairly similar.</p>
<p>It started a while ago, I don’t even know when. In IE there’s a search bar that automatically searched using MSN Search. Also, when you type in a wrong URL it will automatically perform a search for that URL on MSN Search. This IE integration has been there for ages. What’s newer is their new “MSN toolbar”:http://beta.toolbar.msn.com that, among other features, gives you desktop search and… a convenient way to search MSN. But this is something that nearly all search engines have by now. Google has the “Google toolbar”:http://toolbar.google.com/googlebar.html and “Google desktop”:http://desktop.google.com search. I have no doubt that Yahoo! has something similar as well by now.</p>
<p>The newest push was done by the “MSN Messenger team”:http://blogs.msdn.com/msnsearch/archive/2005/04/08/406643.aspx yesterday, by adding a new feature to MSN Messenger 7.0 called shared search. Now you can search the internet from a MSN messenger chat window and together with the one you’re talking to, browse the search results. Of course it uses MSN Search as its search engine:</p>
<figure><img alt="MSN Shared Search" src="https://cdn-images-1.medium.com/max/800/0*cjyBOIQtC5GdFUmq.jpg"></figure><p>Results:</p>
<figure><img alt="MSN Shared Search" src="https://cdn-images-1.medium.com/max/800/0*XfmMBk4feedXbSOV.jpg"></figure><p>I wonder what the next step will be. Will MSN Search be integrated into Windows Longhorn or Office? Will Google be able to win this one, or is Google the next Netscape?</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>464</wp:post_id>
		<wp:post_date>2005-04-09 16:02:02</wp:post_date>
		<wp:post_date_gmt>2005-04-09 14:02:02</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>is-google-the-next-netscape</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Dabblers and Blowhards</title>
		<link>http://zef.me/2005/04/08/dabblers-and-blowhards/</link>
		<pubDate>Fri, 08 Apr 2005 08:12:08 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2005/04/08/dabblers-and-blowhards/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Paul Graham’s “Hackers and Painters” takes a beating in Maciej Ceglowski’s “Dabblers and Blowhards”:</p>
<blockquote>It’s surprisingly hard to pin Paul Graham down on the nature of the special bond he thinks hobbyist programmers and painters share. In his essays he tends to flit from metaphor to metaphor like a butterfly, never pausing long enough to for a suspicious reader to catch up with his chloroform jar. The closest he comes to a clear thesis statement is at the beginning “Hackers and Painters”:</blockquote>
<blockquote>“[O]f all the different types of people I’ve known, hackers and painters are among the most alike. What hackers and painters have in common is that they’re both makers.”</blockquote>
<blockquote>To which I’d add, what hackers and painters don’t have in common is everything else. The fatuousness of the parallel becomes obvious if you think for five seconds about what computer programmers and painters actually do.</blockquote>
<blockquote>* Computer programmers cause a machine to perform a sequence of transformations on electronically stored data.<br>* Painters apply colored goo to cloth using animal hairs tied to a stick.</blockquote>
<p>And</p>
<blockquote>
<strong>Paul Graham:</strong> […] in buildings, for example there is this distinction between architects and engineers. Architects decide what the building is going to look like basically and then they say to an engineer, “Can I do this? And then how?” And the engineer figures out how. So architects figure out “what,” engineers figure out “how.” Well painters do both. Painters decide what to paint and then have to paint it. And hackers in the best case also do both.</blockquote>
<blockquote>You can safely replace “painters” in this response with “poets”, “composers”, “pastry chefs” or “auto mechanics” with no loss of meaning or insight. There’s nothing whatsoever distinctive about the analogy to painters, except that Paul Graham likes to paint, and would like to feel that his programming allows him a similar level of self-expression. The reason Graham’s essay isn’t entitled “Hackers and Pastry Chefs” is not because there is something that unites painters and programmers into a secret brotherhood, but because Paul Graham likes to cultivate the arty aura that comes from working in the visual arts. Having been both a painter and a programmer, I can certainly sympathize with him.</blockquote>
<p>“Dabblers and Blowhards”:http://www.idlewords.com/2005/04/dabblers_and_blowhards.htm is worth reading for Maciej’s writing-style alone. Brilliant. Paul Graham’s original essay, “Hackers and Painters, can be found here”:http://www.paulgraham.com/hp.html.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>504</wp:post_id>
		<wp:post_date>2005-04-08 10:12:08</wp:post_date>
		<wp:post_date_gmt>2005-04-08 08:12:08</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>dabblers-and-blowhards</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Interregional Software Development Week, Day 1: Overview</title>
		<link>http://zef.me/2005/03/21/interregional-software-development-week-day-1-overview/</link>
		<pubDate>Mon, 21 Mar 2005 15:30:53 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2005/03/21/interregional-software-development-week-day-1-overview/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Ha! You didn’t think that when you got up this morning, did ya? But it’s true, you’ve just officially entered the Interregional Software Development Week. A week of posts wherein I’ll share some ideas and experiences I’ve had with interregional software development teams. I got these experiences partly from my days in the “YaBB”:http://www.yabbforum.com team, partly in my job as a teaching assistant in an international software engineering project at our university, and partly from plain common sense (but that doesn’t count as experience).</p>
<p>This series of posts targets groups of people that don’t live close to one another, but want to succesfully complete their software project. This can be an open source projects (where a lot of interregional collaboration takes place), or any other kind of project. I’ll warn you upfront: interregional collaboration isn’t easy; it’s considerably harder than having all people in one building, but also more challenging. In this series my main focus will be on the tooling side of the story: which tools can you best use for which purpose? On some of the areas discussed I’ve also seen some problems with management and structuring, I’ll say something about those issues as well. Managing a distributed team is hard, much harder than managing a local team. We’re only five weeks into the international software engineering project here at our university, and already I’ve seen people nearing mental break-downs.</p>
<p>Day 1: Overview<br>Day 2: Meeting<br>Day 3: Communication<br>Day 4: File exchange<br>Day 5: Documentation<br>Day 6: Collaborative editting</p>
<p>And maybe I’ll figure something out for the seventh day, suggestions are welcome.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>744</wp:post_id>
		<wp:post_date>2005-03-21 16:30:53</wp:post_date>
		<wp:post_date_gmt>2005-03-21 15:30:53</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>interregional-software-development-week-day-1-overview</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>The Wonders of (Non) Emulation</title>
		<link>http://zef.me/2005/03/28/the-wonders-of-non-emulation/</link>
		<pubDate>Mon, 28 Mar 2005 08:47:42 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2005/03/28/the-wonders-of-non-emulation/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>As you may know I’ve been using purely Ubuntu Linux om my PC for the last week or two. I’m pretty happy with it, but there was one major problem: Word documents.</p>
<p>Of course there’s a great project called “OpenOffice.org”:http://www.openoffice.org that can work with Word documents, and it works fairly well. However it still messes up more complex Word documents, so I can’t use it, as I don’t want to be resposible for messed-up documents that others still have to work with. So… what to do?</p>
<p>At our university we use CrossOver Office to run Word 2000, Powerpoint etc. under Linux. It works pretty well. Problem is that CrossOver Office isn’t free. However, it is based on a free project called “Wine”:http://www.winehq.com (which is a recursive acronym meaning Wine Is No Emulator). What Wine does is implement the Windows API under Linux. Normal Windows system calls are translated to Linux system calls. Using this technique it is possible to run Windows applications on Linux. Problem is that reimplementing all those Windows DLLs is a lot of work. Not all of Wine’s DLLs work very well. Getting a big beast like Word to work isn’t easy. Which is also the attaction of CrossOver Office, it runs Word instantly.</p>
<p>However, there’s another option: “WineTools”:http://www.von-thadden.de/Joachim/WineTools/. After you’ve installed a Wine version (and don’t necessarily use the newest one, version 20041019 seems to be best), you can install this free tool. What WineTools will do is configure Wine for you and offer you a convenient installer from which you can install all kinds of Windows software.</p>
<figure><img alt="WineTools" src="https://cdn-images-1.medium.com/max/800/0*XOHWTY8XbqHwtSXh.jpg"></figure><p>(Click to enlarge)</p>
<p>The fun thing is that when you run software under Wine, it’s really like you’re just running them under Windows. With installers and everything:</p>
<figure><img alt="Installing IE" src="https://cdn-images-1.medium.com/max/800/0*8PUjPxhYO0Jf53AQ.jpg"></figure><p>(Click to enlarge)</p>
<p>And voila, there’s IE6 running under Linux:</p>
<figure><img alt="Running IE" src="https://cdn-images-1.medium.com/max/800/0*L72tWOFqZUaKdRsp.jpg"></figure><p>(Click to enlarge)</p>
<p>But then why I started all this: will Word run? Wine only supports Word 97, 2000 and maybe XP. Currently I only got a Word 97 and 2003 CD lying around, so I installed Word 97. And lo and behold, it runs perfectly! Arguably it even runs faster than under Windows:</p>
<figure><img alt="Word on Wine" src="https://cdn-images-1.medium.com/max/800/0*PShj3ZLJpZVQtbVU.jpg"></figure><p>(Click to enlarge)</p>
<p>And here’s what I really like. The trouble with backing up everything in Windows is that your files are all over the place. There are registry entries, DLLs in the Windows directory, files in Program Files and who knows where. What Wine does is simply create a directory called .wine in your home directory in which everything is stored:</p>
<pre>zef@ubuntu:~/.wine$ ls<br>c                   quiet-installed-software<br>config              system.reg<br>dosdevices          system.reg.preIE6install<br>drive_c             userdef.reg<br>fake_windows        user.reg<br>installed-software  winetools.log</pre>
<p>Yep, the registry is stored in plain text files. And if we look in the fake_windows directory:</p>
<pre>zef@ubuntu:~/.wine/fake_windows$ ls<br>autoexec.bat    Mijn documenten  Program Files  tmp<br>config.sys      My Documents     Programme      windows<br>Local Settings  My Music         temp</pre>
<p>It’s just like a normal Windows installation, all in one directory. This means that if I’m happy with my installation I can just zip up the whole .wine directory and I’m done (my zipped version, including Office 97 and IE6, is just over 100MB). If I mess something up, I just remove the old .wine and extract my backupped one. Great isn’t it?</p>
<p>The cool thing is that I even got the “Allofmp3.com Explorer”:http://www.allofmp3.com to work, so I can even keep on download cool music from Linux.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>763</wp:post_id>
		<wp:post_date>2005-03-28 10:47:42</wp:post_date>
		<wp:post_date_gmt>2005-03-28 08:47:42</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-wonders-of-non-emulation</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>PHP for .NET</title>
		<link>http://zef.me/2005/03/18/php-for-net/</link>
		<pubDate>Fri, 18 Mar 2005 08:21:34 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2005/03/18/php-for-net/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Phalanger is a PHP compiler that allows you to compile PHP code to MSIL (which can be executed by .NET’s Common Language Runtime). It also enables it to more easily integrate both worlds: it is possible to use .NET classes from PHP, but also to use PHP classes from other .NET software, which is a novelty. Phalanger is compatible with PHP 5.</p>
<p>“Phalanger”:http://www.php-compiler.net:</p>
<blockquote>The Phalanger is a complex solution giving web-application developers the ability to benefit from both the ease-of-use and effectiveness of the PHP language and the power and richness of the .NET platform. This solution enables developers to painlessly deploy and run existing PHP code on an ASP.NET web server and develop cross-platform extensions to such code taking profit from the best from both sides. Compatible with PHP 5.0, the object model in Phalanger enables to combine PHP objects with the .NET ones. It is possible to use a class written in PHP from a .NET application or even to import a .NET class (written for example in C# or Visual Basic .NET) into PHP scripts provided that this class respects the PHP object model implemented in the Phalanger. The Phalanger is the only existing PHP compiler which produces .NET Framework MSIL bytecode.</blockquote>
<blockquote>From another point of view, Phalanger provides the .NET programmers with the giant amount of practical PHP functions and data structures — many of them reimplemented in the managed environment of the .NET Framework. The whole Phalanger class library (including functions implemented in the PHP extensions) is accessible to a .NET programmer regardless to her favorite programming language together with type information and in-library debugging.</blockquote>
<blockquote>For last but not the least, compilation of PHP scripts gives yet more power to the existing web applications in the Phalanger environment. All the static (run-time immutable) code in the scripts gets parsed and compiled only once and all following accesses to a page benefit from the unleashed execution of the native compilation of the script. Yet the usage of Phalanger is not limited to web applications. The compiler supports output of standalone executables or dynamic link libraries enabling you to create managed PHP console applications or library modules reusable from any other .NET Framework application.</blockquote>
<p>What makes PHP attractive to web developers is not the language’s beauty, but its eiffel-tower-sized pile of API functions. So, what you’d wonder is: are they going to reimplement all that in C#? No, this seems not to be the case. They chose to wrap the current .dll’s containing all these API functions and use them. Probably a wise choice, because it would be a lot of work to reimplement all that.</p>
<p>Phalanger claims to be quite a lot faster than the current (Zend) PHP implementation:</p>
<figure><img alt="Phalanger benchmark" src="https://cdn-images-1.medium.com/max/800/0*AfWpEMzL9d0BSQso.gif"></figure><p>And there’s VS .NET integration too:</p>
<figure><img alt="Phalanger in Visual Studio .NET" src="https://cdn-images-1.medium.com/max/800/0*nKW5y7TYhsYNnOuK.png"></figure><p>The current release is verion 1.0 beta 2. It already runs many current PHP applications, such as “PHPNuke”:http://www.php-compiler.net/PhpNuke. It is even possible to use PHP-GTK, god forbid.</p>
<p>Find out more about “Phalanger here”:http://www.php-compiler.net.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>783</wp:post_id>
		<wp:post_date>2005-03-18 09:21:34</wp:post_date>
		<wp:post_date_gmt>2005-03-18 08:21:34</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>php-for-net</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>The Graham Digest</title>
		<link>http://zef.me/2005/03/30/the-graham-digest/</link>
		<pubDate>Wed, 30 Mar 2005 08:20:18 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2005/03/30/the-graham-digest/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>I got my computer-law test today, so once again I don’t have too much time for an extensive post. Multiple people have been sending me suggestions on what to write about throughout the past few weeks, I want to thank them a lot for that, I really appreciate it. Trouble with those suggestions is that they need more than a couple of minutes of research, so I’ll postpone them until I have a little more time. Just be patient, I didn’t forget about them, so keep sending me those suggestions!</p>
<p>For today I’d like to point you to Paul Graham’s latest four stories; none of which I’ve had time to read yet, but that shouldn’t stop you, you may have a little more time on your hands.</p>
<p>“A Unified Theory of VC Suckage”:http://www.paulgraham.com/venturecapital.html:</p>
<blockquote>A couple months ago I got an email from a recruiter asking if I was interested in being a “technologist in residence” at a new venture capital fund. I think the idea was to play Karl Rove to the VCs’ George Bush.</blockquote>
<blockquote>I considered it for about four seconds. Work for a VC fund?<br>Ick.</blockquote>
<p>“More Advice for Undergrads”:http://www.paulgraham.com/undergrad2.html:</p>
<blockquote>I asked several friends who were professors and/or eminent hackers what they thought of “Undergraduation”:http://www.paulgraham.com/college.html. Their comments were so good that I thought I’d just give them directly to you.</blockquote>
<p>“Wrting, Briefly”:http://www.paulgraham.com/writing44.html:</p>
<blockquote>A lot of people ask for advice about writing. How important is it to write well, and how can one write better? In the process of answering one, I accidentally wrote a tiny essay on the subject.</blockquote>
<blockquote>I usually spend weeks on an essay. This one took 67 minutes — 23 of writing, and 44 of rewriting. But as an experiment I’ll put it online. It is at least extremely dense.</blockquote>
<p>“Return of the Mac”:http://www.paulgraham.com/mac.html:</p>
<blockquote>All the best hackers I know are gradually switching to Macs. My friend Robert said his whole research group at MIT recently bought themselves Powerbooks. These guys are not the graphic designers and grandmas who were buying Macs at Apple’s low point in the mid 1990s. They’re about as hardcore OS hackers as you can get.</blockquote>
<blockquote>The reason, of course, is OS X. Powerbooks are beautifully designed and run FreeBSD. What more do you need to know?</blockquote>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>983</wp:post_id>
		<wp:post_date>2005-03-30 10:20:18</wp:post_date>
		<wp:post_date_gmt>2005-03-30 08:20:18</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-graham-digest</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Happy Easter</title>
		<link>http://zef.me/2005/03/27/happy-easter/</link>
		<pubDate>Sun, 27 Mar 2005 11:28:53 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2005/03/27/happy-easter/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Happy easter everybody!</p>
<p>Nope, no images of happy bunnies or nicely coloured easter eggs here. Instead, an image of what easter really means:</p>
<figure><img alt="Jesus' resurrection" src="https://cdn-images-1.medium.com/max/800/0*gJlIVNB_Jbl1PGHe.jpg"></figure><p>“The resurrection of Jesus Christ”:http://en.wikipedia.org/wiki/Easter. Hardly anybody knows that these days.</p>
<p>And if you insist on having eggs, find them here:<br>* “The Easter Egg Archive”:http://www.eeggs.com<br>* “Easter Egg Heaven 2000”:http://www.eggheaven2000.com</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1002</wp:post_id>
		<wp:post_date>2005-03-27 13:28:53</wp:post_date>
		<wp:post_date_gmt>2005-03-27 11:28:53</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>happy-easter</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Thank God It’s April</title>
		<link>http://zef.me/2005/04/01/thank-god-its-april/</link>
		<pubDate>Fri, 01 Apr 2005 21:01:55 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2005/04/01/thank-god-its-april/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>It’s 4.52 in the morning, do you know where your children are? It’s time to get up, to see if our evil plan has succeeded.</p>
<figure><img alt="It's 4:53 a.m." src="https://cdn-images-1.medium.com/max/800/0*esaK1HDRo33CbZq4.jpg"></figure><p>(If you look closely, you can see that it’s 4.52 a.m.)</p>
<p>But before I get into that, let me tell what preceeded this moment, and about the format in which the story is told. I brought my digital camera to the events I’m going to tell you about, but the pictures weren’t great. Therefore, I took a couple of additional ones afterwards which I’ll use randomly for added dramatic effect.</p>
<p>But first I’ll explain how I ended up getting up this early.</p>
<p>I’m a teaching assistant in a project-class of the computer science department at the university of Groningen. Because of the collaboration with Sweden this year we called it ISEP, International Software Engineering Project. The idea is that students in the final year of their bachelor phase complete a real software project from a real company. The teams are about 9–10 students big. Each team consists of two “Swedish” students (mostly exchange students, though) and about 7 or 8 Dutch students.</p>
<p>We also have contacts with a professor in Canada, Paul Sorensen, who is supposed to give a lecture on quality assurance, something that’s very important in ISEP. However, planning this QA lecture has been a bit of a problem. The lecture should be given through a video-conference set, and the last attempt of this lecture failed because we couldn’t establish a connection with Canada.</p>
<p>The Dutch and Swedish teaching assistants have weekly video conferences to discuss how things are progressing and what the problems are in the teams. Last week we wondered if it wouldn’t be a cool idea to pull a April-fool’s-day prank. So we started thinking.</p>
<figure><img alt="Zef thinks" src="https://cdn-images-1.medium.com/max/800/0*4SGVCAEfDTlnNBSA.jpg"></figure><p>We came up with two.</p>
<figure><img alt="Zef has an idea" src="https://cdn-images-1.medium.com/max/800/0*JAxi2PDEuxXm3y7U.jpg"></figure><p>The first one was, because of Paul Sorensen’s busy schedule, that the lecture on QA had to be held at 10 p.m. thursday the 31st of March. Because of the time difference, that happens to be 6 a.m. here in the Netherlands and Sweden. Not very convenient, but what can you do? We sent out an e-mail to the students asking them to attend.</p>
<p>And that’s why I’m up now.</p>
<p>As I cycle to the university, different people are passing by. Some very dedicated workers, other dedicated, ehm, party animals/drinkers. When I arrive, one of the other teachers is already waiting with a big bag of food. We decided to at least offer those that show up a simple breakfast. As I put away my bike, the other teacher arrives as well. So, now we just have to wait for the students to come.</p>
<figure><img alt="Marco and Louwarnoud are waiting" src="https://cdn-images-1.medium.com/max/800/0*h2ubXfcoYBhM2428.jpg"></figure><p>(Louwarnoud and Marco, the two other teaching assistants are waiting for somebody to turn up.)</p>
<p>We wonder if even a single student will show up. The day before we received some responses to the e-mail ranging from “Ha ha!” to “I really can’t come, because busses don’t drive that early and staying over isn’t an option either because bladiebla.” However, when we made the final arrangements yesterday afternoon, one of the groups came to our room asking about whether the lecture really couldn’t be postponed. When we told them it wasn’t our prefered time of day either and that we had to get up early also, they said “Ok, we’ll see you tomorrow then.” The question is whether we’re messing with them, or they’re messing with us. Or to put it in Chandler Bing’s words: have the messers become the messees?</p>
<p>We wait. We arrived a little early at 5.45 a.m. It’s 6.05 a.m. when the first — and only — student arrives. We wait until 6.30 a.m. outside in the freezing cold before we decide to not wait any longer and get in. Upfront we decided to not tell the students about it being a joke, but just act normal and see when they’d get it.</p>
<p>“Let’s have some breakfast first.” We sit down and have breakfast.</p>
<figure><img alt="Breakfast" src="https://cdn-images-1.medium.com/max/800/0*e7Szw8vTNbU7npdr.jpg"></figure><p>(It’s breakfast time.)</p>
<p>Time passes on. It’s 7.20 a.m. when one of the teachers says that he really has to get home to get his kids to school. No response from the student. A little later he finally asks: “so… this is an April fool’s day prank after all?”</p>
<p>Yes it is.</p>
<p>Later we’ll hear that in Sweden two students appeared. The cruel fact is that both were exchange students, probably from countries where they don’t know the concept of April fool’s day.</p>
<p>But there’s more to come. As I told you, we have two pranks prepared. The second one, though, took a bit more effort to prepare.</p>
<p>Last week somebody came up with the idea to create a make-believe grading wiki. A wiki that contains remarks on all the teams and all individual team members. The nasty thing is that we would load it with purely negative comments; all based on actual facts, but massively blown out of proportion: if something went somewhat wrong, it would be something destructive; people who are not very assertive, became people who never spoke, and of whom we doubted that they did anything at all.</p>
<p>This wiki would be hosted on the server that all the other ISEP stuff was hosted on as well. The only security measure would be an obfuscated url (think: a lot of underscores). There was only one problem, how would we leak the URL to the students?</p>
<p>Yesterday we finally came up with a good way. In my year, there’s someone who, as the (unverified) rumour goes, got a job at a department of our university in a quite unusual way. The department we’re talking about here develops software that is used to let students know their grades and let them sign up for courses. What this guy did was enter their office, throw a big pile of print-outs on the table saying: “this is the contents of your database, if you want me to secure it better you’ll have to hire me.” And so they did.</p>
<p>The relevance of this is that this guy quite often posts and mails people about very poorly secured websites. And it would be plausible for him to find this grading wiki, with… a little help. We discussed this with him and he agreed to co-operate. To make his “finding” more plausible we put a link to a picture on his webserver on the wiki. When it gets loaded, he can see the refering (wiki) URL in his logs. And there you go: that’s the plausible way to find out.</p>
<p>At the time of this writing (it’s 8.49 a.m. by now) I see that he has posted his findings on a forum that is frequently read by many of the students here. He camouflaged it with some other finds from his apache logs. Brilliant. Now, let’s see what the responses will be.</p>
<p>While we’re waiting for something to happen I write a couple of scripts to track who’s been visiting the wiki, but nothing spectacular happens, it gets a couple of hits, but not from more than a couple IPs. Would all this work be for nothing?</p>
<p>And finally, at 6.33 p.m. the first IM message comes in, “nice wiki you have there”. Others seem to have seen it as well. All knew immediately that it was a joke, but thought it was a cool one. At 10.43 p.m. I edit the wiki to let it say that they were dealing with a April fool’s day joke and that the contents of the wiki is fake.</p>
<p>Sadly, neither of our jokes worked out as we would have wanted (i.e. a load of students in the morning and mass-hysteria in the afternoon). We had a pretty good time preparing and executing them, though.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1210</wp:post_id>
		<wp:post_date>2005-04-01 23:01:55</wp:post_date>
		<wp:post_date_gmt>2005-04-01 21:01:55</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>thank-god-its-april</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Interregional Software Development Week, Day 4: File Exchange</title>
		<link>http://zef.me/2005/03/24/interregional-software-development-week-day-4-file-exchange/</link>
		<pubDate>Thu, 24 Mar 2005 16:07:14 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2005/03/24/interregional-software-development-week-day-4-file-exchange/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>The possibility to exchange files is an absolute necessity when developing software. There are many ways to do it of which version control systems are probably the most helpful.</p>
<p>A couple of ways to exchange files:<br>* Send them through e-mail: works, but you end up with a big mess of e-mails and attachment of different versions of files. It’s not very friendly to you as a user. Also, only the people who you send the file have access to it.<br>* FTP: set up an FTP account somewhere and let everybody store his/her files there: works, but older versions of files disappear if you’re not making backups.<br>* Forum attachments: some forum systems have the ability to attach files to messages. This has the same disadvantages as e-mail, but the advantage is that everybody (that can access the forum) has access to it.<br>* Version control systems: the option I want to talk about today.</p>
<p>Version control systems are not used nearly enough. They’re not only useful in big-ass million-people projects, but even if you’re working on something alone. How often has it happened to you that you removed a piece of code and saved it, only to remember that you needed that piece of code for another purpose. If you use a version control system it’s easy to retrieve an older version of the file with the removed code still in.</p>
<p>Within interregional projects, version control systems are not only useful for versioning purposes, but also for distribution purposes. But before I get into that, I’ll first explain how a normal client-server version control system works. Let’s start with a picture:</p>
<figure><img alt="Version Control System" src="https://cdn-images-1.medium.com/max/800/0*axrOJP2UvsUYs7tH.png"></figure><p>In the middle is the server. A version control server can serve multiple so-called repositories. A repository is just a tree of directories and files. Usually you use one repository per project, but there are reasons to use more. In each repository all the current versions of files are stored, but also previous versions, so you can always request an older version.</p>
<p>Clients have a copy of a repository stored locally. This copy can be obtained with a so-called check-out. A check-out is an initial download of all directories and files to your local disk. After that you can keep your repository copy up-to-date with the update command. It’s important to realize that this is a local copy, you’re not editting files directly at the version control system.<br>Once you got a copy of the repository you can then edit the files, add new ones ore remove some. When you’re done, or you think it’s a good idea to store the changes in a safe place, you synchronize the changes you made with the version control server. This is called a check-in (or commit). The version-control client can see what files have changed and will submit new revisions of those files to the server.</p>
<p>When multiple people are working on the same file, problems can occur. If you’re working with text files, many of those problems can be fixed automatically. For example if person A is working on a subroutine and person B is working on another subroutine in the same file, and both check-in their changes, these changes can often be merged. If the changes don’t conflict, they can be both applied. Note however, that this, in the systems I know, only works on text files. It doesn’t work on images, UML diagrams or Word documents.</p>
<p>Now, for which files should version control be used and for which shouldn’t it be used? Personally I’m in favour of using it for all kinds of files, both source code and (Word) documents. People argue that, because Word documents can’t be merged, it’s not very useful, but I beg to differ. Indeed, Word documents can’t be merged so you have to figure out a mechanism to prevent two people working on it at the same time, but it still has many advantages:<br>* Version control: that’s why we were considering this in the first place, wan’t it? Old versions of documents should still be retrievable, even if you can see the differences between the version in an as pretty fashion as with text files.<br>* It’s a convenient way for the distribution of files. Version control systems are easier to use than e-mail, forum attachments or FTP.</p>
<p>The best way to prevent two persons working on a document simultaneously, I’ve seen yet, is just to have a “What are you working on?” topic on your forum. If someone’s going to work on a document, let him or her, post a message stating the status of this work. When you want to edit a document you first check if somebody else is not already working on it. It’s not ideal, but it works.</p>
<p>*Software to use*<br>OK, you decided to use version control. Great choice! Now you still need software to accomplish this. Personally, and I’m not at all alone in this, I’m very fond of “Subversion”:http://subversion.tigris.org. Subversion is a successor to the well-known CVS(Concurrent Versioning System) with some issues fixed. There are both servers and clients available for most platforms. For Windows there’s a very easy-to-use client, called “TortoiseSVN”:http://tortoisesvn.tigris.org, that integrates nicely into Windows Explorer.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1248</wp:post_id>
		<wp:post_date>2005-03-24 17:07:14</wp:post_date>
		<wp:post_date_gmt>2005-03-24 16:07:14</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>interregional-software-development-week-day-4-file-exchange</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Comega</title>
		<link>http://zef.me/2005/04/05/comega/</link>
		<pubDate>Tue, 05 Apr 2005 16:20:18 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2005/04/05/comega/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Yesterday I talked about Boo, the statically typed scripting language. I mentioned as one of the things that made it interesting that it’s a look into the future of programming languages. I also mentioned that one particular feature, namely type inference, may make it into C# (3.0?) one day, because I heard “Anders Hejlsberg”:http://en.wikipedia.org/wiki/Anders_Hejlsberg say that a while ago during an interview. Another thing that he was interested in was closing the gap between relational (database) data and the object model.</p>
<p>That’s where “Comega”:http://research.microsoft.com/Comega/ (C-omega) — a Microsoft Research programming language — comes in. But not only there, these are the two major new things that Comega brings:<br>* A control flow extension for asynchronous wide-area concurrency (formerly known as <a href="http://www.zefhemel.com/archives/2003/05/13/polyphonic-c-" target="_blank">Polyphonic C#</a>)<br>* A data type extension for XML and table manipulation (formerly known as “Xen”:http://www.zefhemel.com/archives/2004/01/19/-net-with-xen and as X#):</p>
<p>“This (older) article, talks about the control flow for asynchronous concurrency”:http://research.microsoft.com/~nick/polyphony/intro.htm:</p>
<blockquote>In Polyphonic C#, methods can be defined as either synchronous or asynchronous. When a synchronous method is called, the caller is blocked until the method returns, as is normal in C#. However, when an asynchronous method is called, there is no result and the caller proceeds immediately without being blocked. Thus from the caller’s point of view, an asynchronous method is like a void one, but with the useful extra guarantee of returning immediately. We often refer to asynchronous methods as messages, as they are a one-way communication from caller to receiver (think of posting a letter rather as opposed to asking a question during a face-to-face conversation).</blockquote>
<blockquote>By themselves, asynchronous method declarations are not particularly novel. Indeed, .NET already has a widely-used set of library classes which allow any method to be invoked asynchronously (though note that in this standard pattern it is the caller who decides to invoke a method asynchronously, whereas in Polyphonic C# it is the callee (defining) side which declares a particular method to be asynchronous). The significant innovation in Polyphonic C# is the way in which method bodies are defined.</blockquote>
<blockquote>In most languages, including C#, methods in the signature of a class are in bijective correspondence with the code of their implementations — for each method which is declared, there is a single, distinct definition of what happens when that method is called. In Polyphonic C#, however, a body may be associated with a set of (synchronous and/or asynchronous) methods. We call such a definition a chord, and a particular method may appear in the header of several chords. The body of a chord can only execute once all the methods in its header have been called.</blockquote>
<p>I studied this part about two years ago or so (when it was still called Polyphonic C#) and I think it can be quite interesting to developers who deal with asynchronous calls a lot. If you intend to fully understand Polyphonic C# I must warn you that it can be quite complicated. At least, when I studied it two years ago I thought it was complicated. But then again, that was two years ago, when I was just a little 19-year old boy.</p>
<p>“This article introduces the XML and database extensions”:http://www.xml.com/pub/a/2005/01/12/comega.html:</p>
<blockquote>One of the main reasons for XML’s rise to prominence as the lingua franca for information interchange is that, unlike prior data interchange formats, XML can easily represent both rigidly structured tabular data (e.g., relational data or serialized objects) and semi-structured data (e.g., office documents). The former tends to be strongly typed and is typically processed using object⇔XML mapping technologies, while the latter tends to be untyped and is usually processed using XML technologies like DOM, SAX, and XSLT. However in both cases, there is a disconnect for developers processing XML using traditional object-oriented programming languages.</blockquote>
<blockquote>In the case of processing strongly typed XML using object⇔XML mapping technologies, there is the impedance mismatch between programming language objects and XML schema languages like DTDs or W3C XML Schema. Notions such as the distinction between elements and attributes, document order, and content models that specify a choice of elements are all intrinsic to XML schema languages but have no counterpart in standard object-oriented programming. These mismatches tend to lead to some contortions and lossiness when mapping XML to objects.</blockquote>
<p>To give you a quick impression of what code using these features looks I’ll post two bits of code. The first one shows how you can use XPath expressions on data:</p>
<pre>struct {int a; int b; int c;} z = new {a=5, b=10, c= 15};<br>int* values = z...int::*[it &gt; 8]; // This is the XPath expression<br>foreach(int i in values) {<br>   Console.WriteLine(i + " is greater than 8");<br>}</pre>
<p>Comega also supports SQL queries as language constructs. Everything is strongly typed, when you want to use a database, you first let a tool convert the database schema to a .NET assembly, which contains all the types. Then you can query it like this:</p>
<pre>rows = select ContactName, Phone from DB.Customers<br>            order by ContactName desc, Phone asc;</pre>
<p>There’s a lot more to this Comega language than I described here, reading the two articles that I referenced will give you much more insight. Again, it’s an interesting look into the future of programming languages.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1363</wp:post_id>
		<wp:post_date>2005-04-05 18:20:18</wp:post_date>
		<wp:post_date_gmt>2005-04-05 16:20:18</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>comega</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>And it Got a Name: Ajax</title>
		<link>http://zef.me/2005/03/19/and-it-got-a-name-ajax/</link>
		<pubDate>Sat, 19 Mar 2005 18:00:53 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2005/03/19/and-it-got-a-name-ajax/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>As I predicted, web-application developers are starting initiatives to move more of the web-application to the web browser. I talked about “some of the opportunities”:http://www.zefhemel.com/archives/2005/01/08/web-applications-vs-desktop-applications earlier, and also about moving much of the “UI logic to the browser”:http://www.zefhemel.com/archives/2005/01/25/moving-the-web-application-to-the-browser. Even earlier I mentioned that “it would be a good idea to develop a framework to make client-side browser work easier”:http://www.zefhemel.com/archives/2004/12/11/we-need-a-client-side-web-framework. Recently this idea has been named: “Ajax”:http://adaptivepath.com/publications/essays/archives/000385.php — Asynchronous Javascript And XML.</p>
<p>But enough “I saw it all coming” patting on my own back: this is an interesting shift. Ajax is the new buzzword in the web-development world these days. People start to ask all kinds of questions: “is Ajax actually going to make the normal client-side non-web application useless?”:http://www.microsoft-watch.com/article2/0,1995,1777009,00.asp?kc=MWRSS02129TX1K0000535 “Is Ajax even a new idea?”:http://www.dynamicobjects.com/d2r/archives/003147.html</p>
<p>For the unknowing, what’s this Ajax thing? I myself look at it this way: until now all the action in your web-application has taken place at the server-side. The user’s browser was only used for the view, to show the pretty charts, forms and reports. What’s the main problem with web-applications today? They’re unresponsive and don’t feel as rich as normal Windows (or Mac OS X, Linux etc.) applications. The solution? Move as much to the browser as possible. Only contact the server if it’s necessary. This not only makes your web-application more responsive, but also takes a lot of load from the server.</p>
<p>Does this actually work? Absolutely. Success stories are coming mainly from Google, which has become an expert on this technique, they include “Gmail”:http://www.gmail.com and “Google Maps”:http://maps.google.com.</p>
<p>If you search Google for “Ajax” right now, you’ll mainly find hits about the popular Dutch soccer club, but that will soon change.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1370</wp:post_id>
		<wp:post_date>2005-03-19 19:00:53</wp:post_date>
		<wp:post_date_gmt>2005-03-19 18:00:53</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>and-it-got-a-name-ajax</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Martin Fowler on Dynamic Typing</title>
		<link>http://zef.me/2005/03/20/martin-fowler-on-dynamic-typing/</link>
		<pubDate>Sun, 20 Mar 2005 09:28:50 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2005/03/20/martin-fowler-on-dynamic-typing/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>I’ve read quite a lot of articles on dynamic versus static typing. Every new one I read now only repeats arguments that I’ve heard many times before. A couple of months ago I wrote “Are Dynamically Typed Languages the Next Big Thing?”:http://www.zefhemel.com/archives/2004/10/04/dynamically-typed-languages where I explained the problems that I see and read about.</p>
<p>Yet, when someone like Martin Fowler (which is one of the big software engineering gods in this world) starts talking, you hope he is able to give that definite answer. The kind of answer that you tell to your grandchildren, decades later, in one of your good ol’ times stories. “But then Martin told us this and this and this, and that’s why we now have a swiming pool in each room and why you own such a cute little fully-dressed doggie called Tinkerbell.”</p>
<p>But no such luck this time. In his recent “DynamicTyping”:http://martinfowler.com/bliki/DynamicTyping.html “bliki” post, he, once again, describes the pros and cons of both. And I already heard them all.</p>
<p>Seriously Martin, what kind of god are you if you can’t make up something more original?</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1403</wp:post_id>
		<wp:post_date>2005-03-20 10:28:50</wp:post_date>
		<wp:post_date_gmt>2005-03-20 09:28:50</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>martin-fowler-on-dynamic-typing</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Interregional Software Development Week, Day 5: Documentation</title>
		<link>http://zef.me/2005/03/25/interregional-software-development-week-day-5-documentation/</link>
		<pubDate>Fri, 25 Mar 2005 16:18:27 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2005/03/25/interregional-software-development-week-day-5-documentation/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>There’s something that I like to call the documentation paradox: if there’s something that developers don’t like doing it’s documentation. Yet, if there’s something that developers need, it’s exactly that: documentation.</p>
<p>This is, or at least sounds like, a paradox because it reasons from the developers seen as a group, and that’s exactly where the problem lies: we’re dealing with a group of individuals. An individual developer has no interest in documenting his or her own piece of code; they understand it, they know their code reads like literature, so why document it? Others have to document their piles of crappy code for it to make any sense, but not them. It would’ve been nice to, en passant, give a solution to this problem, but the margin is just too small to contain, as “Fermat would say”:http://en.wikipedia.org/wiki/Fermat%27s_last_theorem.</p>
<p>Instead I’ll focus on a tool that lowers the barrier of actually documenting something as much as possible. This tool is a wiki. Wikis are relatively new and its applications still have to be explored, but I think software documentation can very well be one of them.</p>
<p>What is a wiki again? To start off, officially they’re called wiki wikis, which is Hawaiian for “quick quick” if I’m correct. But for convenience, and because “wiki wiki” is impossible to market, people usually abbreviate it to just wiki. Wikis are a bunch of linked, unstructured webpages that everyone (who has access to it) can edit. At each page there’s a “Edit” button using which you can change the content of that particular page. Wiki pages are written in Wiki-codes, which I briefly discussed “a while ago”:http://www.zefhemel.com/archives/2004/09/20/post-formatting. So you don’t need to know HTML or something to contribute. It is extremely simple to add pages and to link to them.</p>
<p>Wikis also have version control, just like the version control systems that I talked about yesterday, therefore you can see exactly who changed what pages and revert to older versions if necessary. Most wikis can also merge changes, if pages are editted simultaneously.</p>
<p>There are many wikis around already. The biggest one (with now over 1 million pages) is “WikiPedia”:http://www.wikipedia.org, it is a free encyclopedia which anybody can make changes to. The very first one, the one started by Wiki’s inventor (Ward Cunningham, now working for Microsoft), is quite big as well: “c2.com wiki”:http://c2.com/cgi/wiki. There is some kind of wiki software in nearly every language these days. Ranging from Ruby to C# and from Java to PHP. I’ve some experience with “PhpWiki”:http://phpwiki.sf.net and “MediaWiki”:http://www.mediawiki.org (which is the same on WikiPedia uses). “Here’s a list of other ones”:http://c2.com/cgi/wiki?WikiEngines.</p>
<p>That all sounds very cool, but what should it used for? I think it can be best used as a central information dump. I think wikis would be a good place to store information such as<br>* design decissions (in the architecture phase, “we had to choose between single-threaded and multi-threaded and we chose … because …”)<br>* programming problems and their solutions (“On several places we needed this very weird sort function. I implemented this function and put it in this and this library”)</p>
<p>If you have to do some research, for example to figure out which architectural pattern you should use to solve some problem, you can just dump any information you find on the subject in there. The formatting and structure doesn’t matter at first, you (or anybody else for that matter) can tidy up things later. The important thing is that write down problems that you found and how you solved them. If forum discussions took place about certain problems, just copy that discussion in the wiki as well. It’s a central storage of thoughts, problems and decissions that every team member can find and store information on.</p>
<p>Personally I haven’t used wikis in interregional software projects yet, but I still think it’s an interesting area to explore. If you start your project, just think about what wikis have to offer and how you can use them in your project.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1419</wp:post_id>
		<wp:post_date>2005-03-25 17:18:27</wp:post_date>
		<wp:post_date_gmt>2005-03-25 16:18:27</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>interregional-software-development-week-day-5-documentation</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Interregional Software Development Week, Day 3: Communication</title>
		<link>http://zef.me/2005/03/23/interregional-software-development-week-day-3-communication/</link>
		<pubDate>Wed, 23 Mar 2005 18:53:16 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2005/03/23/interregional-software-development-week-day-3-communication/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Good communication is always a top priority in team-based work, but in interregional collaboration it’s especially vital. The trick is to use the right channels. I’ll divide the communication methods in two groups: instant and delayed.</p>
<p>*Instant*<br>If something is unclear to you, you need to know something, or just need to hear how other team members are doing, instant communication is the best solution. The most useful tools for instant communication are:<br>* Instant messaging software: software like MSN, ICQ, Jabber, AIM and such, allow you to manage a list of contacts and to see whether they’re online or not. If they are online you can send them a message instantly, which is received instantly. Most of the problems where communication is necessary can be solved by using IM(Instant Messaging).<br>* Skype: if lengthy discussions are necessary between two people, it’s most of the time more convenient to actually talk about it (you know, using your mouth). “Skype”:http://www.skype.com is very easy to use, free software that allows you to simply call up another Skype user and talk to them using a microphone as long as you want, for free. There is a lot of other internet telephony software available, but Skype is one of the few that always work without hassle.<br>* Phone: if discussion is needed immediately and the person you need to speak to is not available online, phone is the only option left. It works just as well as Skype, but it costs money, especially if it’s an international call (which is not uncommon in interregional software development projects).</p>
<p>*Delayed*<br>Many issues are of lesser direct importance. These issues can be discussed through other channels; channels that are not necessarily instant. The most important two are:<br>* E-Mail: notifications of certain events or even long-stretched discussions are possible via e-mail. However, many people favour forums for this, these days.<br>* Forums (a.k.a. bulletin boards and discussion boards): software like “YaBB”:http://www.yabbforum.com, “KeyTopic”:http://www.keytopic.com, “SMF”:http://www.simplemachines.org, “IPB”:http://www.invisionboard.com and “phpBB”:http://www.phpbb.com, just to name a few, can be used to discuss matters that no instant decissions have to be made on. Discussions can take days, sometimes even months. The trouble with this medium is that each team member has to remember to check for new messages once in a while. This is also true for e-mail, but e-mail often is more part of people’s lifes than forums.</p>
<p>When I worked on YaBB, which was also developed interregionally, we essentially only used instant messaging and forums for communication. The use of forums was an obvious choice, we were developing a forum after all, instant messaging fulfilled the other needs that we had. Our meetings also took place using instant messaging software (ICQ at that time). The development of YaBB went quite smoothly, which proves that purely virtual communication can work; even though we had never met. Hell, I didn’t even know what the others looked like.</p>
<p>*Cultural differences*<br>It’s a good idea to keep in mind that there are very large differences in how people talk to each other in different countries. A discussion in China is likely to be very different from one in the USA. Depending on the differences in culture between you and the people you’re talking to it’s usually a good idea to don’t push it too far and to stay polite. Don’t use too strong language as some people may take it the wrong way. Also, and I don’t usually say this, take advantage of smilies. If you make an ironic remark, mark it with a ;). If it took your friends a while to understand your obscure sense of humour, don’t expect foreigners to understand it without smilies.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1423</wp:post_id>
		<wp:post_date>2005-03-23 19:53:16</wp:post_date>
		<wp:post_date_gmt>2005-03-23 18:53:16</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>interregional-software-development-week-day-3-communication</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>The Other Kind of Web-App Plug-in</title>
		<link>http://zef.me/2005/04/07/the-other-kind-of-web-app-plug-in/</link>
		<pubDate>Thu, 07 Apr 2005 07:44:12 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2005/04/07/the-other-kind-of-web-app-plug-in/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>A lot of plug-ins are being developed for Firefox, some interesting, some less interesting or useful. There’s also a group of plug-ins that doesn’t seem very special on the surface. That’s until you see an example of what you can do with it.</p>
<p>An example of this is “Greasemonkey”:http://greasemonkey.mozdev.org. From the Greasemonkey website:</p>
<blockquote>Greasemonkey is a Firefox extension which lets you to add bits of DHTML (“user scripts”) to any webpage to change it’s [sic] behavior. In much the same way that user CSS lets you take control of a webpage’s style, user scripts let you easily control any aspect of a webpage’s design or interaction.</blockquote>
<p>OK, that’s ehm, well… that sounds nice in theory, but does it have much practical applications? It appears that it has, and when I saw it, it blew me away. Some guy “succeeded in adding persistent searches to Gmail”:http://persistent.info/archives/2005/03/01/gmail-searches. Nearly every normal mail client has those these days, sometimes they’re called smart folders or vFolders; what they do is the same: create a “folder” that contains all the mail matching certain criteria. For example all the mail you received from your granny.</p>
<p>After installing Greasemonkey in Firefox and installing “the user script”:http://persistent.info/greasemonkey/gmail.user.js this what it looks like when you visit your Gmail mailbox:</p>
<figure><img alt="Gmail Greasemonkey" src="https://cdn-images-1.medium.com/max/800/0*51AhoGmaf3Bf8BIj.png"></figure><p>The searches are performed instantly and can be updated by pressing the little refresh button at the top-right of the box. When you click one of the persistent searches it will show the result in the usual search-result fashion. You can also add new persistent searches. Only drawback is that the searches are stored in a cookie, so they’re not there if you login to Gmail with another computer.</p>
<p>Still pretty impressive, though.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1439</wp:post_id>
		<wp:post_date>2005-04-07 09:44:12</wp:post_date>
		<wp:post_date_gmt>2005-04-07 07:44:12</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-other-kind-of-web-app-plug-in</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>PyCon</title>
		<link>http://zef.me/2005/03/31/pycon/</link>
		<pubDate>Thu, 31 Mar 2005 17:17:54 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2005/03/31/pycon/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>PyCon, the Python conference, took place I think a couple of days ago. A couple of guys at Google “have maintained a blog”:http://pycon.blogspot.com which contains some notes on the different talks. Scattered around on this blog are some links to a couple of interesting Python projects:</p>
<p>* “MindRetrieve”:http://www.mindretrieve.net: personal web history searcher, which is written using<br>* “PyLucene”:http://pylucene.osafoundation.org: the, with GCJ compiled, version of one of the best free search libraries: “Lucene”:http://lucene.sf.net. “GCJ”:http://gcc.gnu.org/java/ is a Java to native machine compiler as you may know. Python bindings for PyLucene were created using<br>* “SWIG”:http://www.swig.org: software that makes it easier to write extension modules for various languages, such as Python, Perl and Ruby<br>* “PyPI”:http://www.python.org/pypi: the Python Package Index<br>* “Chandler”:http://www.osafoundation.org/Chandler_Compelling_Vision.htm: PIM software written in Python.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1454</wp:post_id>
		<wp:post_date>2005-03-31 19:17:54</wp:post_date>
		<wp:post_date_gmt>2005-03-31 17:17:54</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>pycon</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Joel on FogBugz</title>
		<link>http://zef.me/2005/04/02/joel-on-fogbugz/</link>
		<pubDate>Sat, 02 Apr 2005 17:42:14 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2005/04/02/joel-on-fogbugz/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>FogBugz 4.0, FogCreek’s bug tracking software, has shipped. To celebrate this Joel Spolsky (who’s FogCreek’s big boss) published a five-part series on the road to FogBugs 4.0.</p>
<p>“Part I”:http://www.joelonsoftware.com/articles/FogBugzI.html: deals with why you shouldn’t respond to requests for proposal (RFPs) and the little features that make the difference.</p>
<p>“Part II”:http://www.joelonsoftware.com/articles/FogBugzII.html: is about feeding doggies and how FogBugz got a spam filter through this dog food.</p>
<p>“Part III”:http://www.joelonsoftware.com/articles/FogBugzIII.html: how can you easily and cheaply deploy ASP(Active Server Pages) applications on Unix? Write a ASP to PHP compiler!</p>
<p>“Part IV”:http://www.joelonsoftware.com/articles/FogBugzIV.html: deals with how callories are used, how design matters, shipping and other marketing issues.</p>
<p>“Part V”:http://www.joelonsoftware.com/articles/FogBugzV.html: is about after-release stuff like winning awards and such.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1587</wp:post_id>
		<wp:post_date>2005-04-02 19:42:14</wp:post_date>
		<wp:post_date_gmt>2005-04-02 17:42:14</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>joel-on-fogbugz</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Interregional Software Development Week, Day 6: Collaborative Editting</title>
		<link>http://zef.me/2005/03/26/interregional-software-development-week-day-6-collaborative-editting/</link>
		<pubDate>Sat, 26 Mar 2005 11:44:57 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2005/03/26/interregional-software-development-week-day-6-collaborative-editting/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>On this last day of the interregional software development week I’d like to talk about editting text files with other people, simultaneously. I mentioned earlier that version control systems can merge changes to text files, but what I’ll talk about is even cooler.</p>
<p>Imagine this: you and a couple of others are on a Skype call and all have an editor in front of you. In this editor you can see the other people’s cursors moving and you can see them type. You’re all working on the same file simultaneously and you can see and talk about what you’re editting. Wouldn’t that be cool?</p>
<p>Well, it’s possible. There are two software products I know of that do this: “SubEthaEdit”:http://www.codingmonkeys.de/subethaedit/ for the Mac and “MoonEdit”:http://me.sphere.pl/indexen.htm for Windows and other Unix platforms. Both are free for non-commercial use. If you want to use it for commercial use SubEthaEdit costs $35. MoonEdit’s commercial price is unknown, you’d have to contact the author.</p>
<p>*SubEthaEdit*<br>“SubEthaEdit”:http://www.codingmonkeys.de/subethaedit/ is the pretty boy of the two and also has quite some more features than MoonEdit:</p>
<figure><img alt="SubEthaEdit" src="https://cdn-images-1.medium.com/max/800/0*p_6roOa40rmVrMlS.png"></figure><p>In order to use SubEthaEdit all you need is a Mac for each team member and an internet connection. Those who are on the same network can connect to eachother using Rendezvous (Apple’s auto-discovery networking module), others probably have to type in an IP of one of the other users (but I’m not really sure).</p>
<p>On its own SubEthaEdit has quite a lot neat editting features, such as colour coding, code auto completion and regular expression search.</p>
<p>The trouble is that it’s Mac only, which leaves you (if you’re not lucky enough to own a Mac) with MoonEdit.</p>
<p>*MoonEdit*<br>“MoonEdit”:http://me.sphere.pl/indexen.htm is a much simpeler editor, written using a very weird-looking UI kit:</p>
<figure><img alt="MoonEdit" src="https://cdn-images-1.medium.com/max/800/0*WjKrLfHObW5wt-Qg.jpg"></figure><p>MoonEdit functions either through a shared file (for example if you’re on the same network, using NFS shares) or through a MoonEdit server. One of the users starts an instance of a MoonEdit server, others can connect to it, there is no configuration to be done (usually).</p>
<p>I’ve used MoonEdit myself a couple of times and it works fine. It’s a bare-bone editor so don’t expect fancy features like colour coding or code completion. But the good thing is that it works and works on many platforms.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1635</wp:post_id>
		<wp:post_date>2005-03-26 12:44:57</wp:post_date>
		<wp:post_date_gmt>2005-03-26 11:44:57</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>interregional-software-development-week-day-6-collaborative-editting</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Interregional Software Development Week, Day 2: Meeting</title>
		<link>http://zef.me/2005/03/22/interregional-software-development-week-day-2-meeting/</link>
		<pubDate>Tue, 22 Mar 2005 08:10:35 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2005/03/22/interregional-software-development-week-day-2-meeting/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Especially in interregional development meetings are important. Different teams will use them differently, some may be done after twenty minutes, others need two hours. Even if short, it’s still a good to have them. It’s important for everybody to see what everybody else is working on and what the issues are.</p>
<p>I’m aware of three ways to meet interregionally:<br>* Video conference<br>* Phone conference<br>* Chatbox</p>
<p>*Video Conference*<br>If the equipment is available to you, meeting through video conference is a good option. Meetings like these are a lot like normal meetings, except that you’re all in different places. Having occassional video conferences also help the team members remember that they’re collaborating with actual living people. You can hear them talk, you can see them move, it’s more important than you would think.</p>
<p>For the meeting leader it is very important to make sure that everybody is participating. To give everybody at least something to participate in, it’s a good idea to start each meeting with a round where everybody tells about what he/she has been working on and how it’s progressing. This is especially useful for the project manager, who can see that everybody has something to do.</p>
<p>*Phone Conference*<br>There are two kinds of phone conferences: the traditional one, where you actually call using a phone and a new one using “Skype”:http://www.skype.com. The problem of the latter is that at this moment only five people can be at the meeting at a time. But there may be other pieces of software that allow more than five to connect at once, I’ve never really looked into it.</p>
<p>Phone conferences have the advantage of the ability to hear eachother’s voices and being a fast way of communication. The problem is, especially in a conference with many people, that it’s hard to recognize who’s who.</p>
<p>*Chatbox*<br>Another option is to set up an IRC channel or doing something similar in your instant messenger of choice (such as ICQ or MSN). This approach has an particularly important advantage: the meeting is transcribed automatically, somebody who wasn’t there can read what was said later on. Compared to the phone conference it’s also very clear who says what. Disadvantage is that not everybody can type fast enough and you don’t actually see each other. And MSN icons don’t always show what you look like at that moment. Also, ignore “my previous advice on instant messaging”:http://www.zefhemel.com/archives/2004/11/02/no-smilies ; it’ll do more harm than good in this context.</p>
<p>If, during any of these meetings, documents are discussed it’s a good idea to use a tool such as “VNC”:http://www.realvnc.com to share the desktop of a computer. Members on each location can then look at and scroll-through the same documents simultaneously.</p>
<p>There are different kinds of distributed teams:<br>* Fully distributed teams, with about each member in another place<br>* Teams with groups of people in just two or three places</p>
<p>If the team in one place is big enough, it may also be viable to have meetings locally. Be sure to make minutes so that the other team members know what was discussed.</p>
<p>*Tools*<br>* “MSN Messenger”:http://messenger.msn.com or any other messenger, for chatbox meetings<br>* “Skype”:http://www.skype.com, for phone meetings<br>* Video conference software, I’ve never used PC software for this, so I wouldn’t know what’s a good choice<br>* “VNC”:http://www.realvnc.com, for sharing a desktop during a meeting</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1670</wp:post_id>
		<wp:post_date>2005-03-22 09:10:35</wp:post_date>
		<wp:post_date_gmt>2005-03-22 08:10:35</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>interregional-software-development-week-day-2-meeting</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Through the Window</title>
		<link>http://zef.me/2005/05/11/through-the-window/</link>
		<pubDate>Wed, 11 May 2005 07:44:39 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2005/05/11/through-the-window/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>It’s 9 a.m. and I’m sitting in a computer room with air conditioning blowing in my eyes. It finally stopped raining.</p>
<p>A small blue van arrives and stops accross the street from the building where I’m sitting. Three men step out. One man is about sixty years old, the other two are around twenty-five. One of the two younger men opens the back of the van and pulls out three sticks. When I look more closely these sticks turn out to be scrapers.</p>
<p>They sit down for a minute. One pulls a big bottle from his jacket, pours some of its contents into a platic cup and hands it to the older man. The older man tries to find something in his pockets. After a minute he pulls out a little box with pills. He puts one in his mouth and tries to swallow it using the contents of the cup, which I now assume, is water.</p>
<p>All three of them grab their scrapers and start poking into the ground. Poke. Poke. Poke.</p>
<p>I turn my head from the window to my computer screen. Somebody else enters the room I’m working in. He greets me; sits down; opens up his suit case; gets his laptop out; opens it and boots it. After three minutes he starts typing.</p>
<p>My screen is still empty.</p>
<p>I look outside. The three men are still there. One has put a jacket on by now. They’re still poking. One bows, pulls and ends up with a hand full of weed. He throws it away and continues scraping. Two ducks tottle towards the scraping men. They sit down and start looking at them. The men continue scraping and poking.</p>
<p>“Are we done here?” one of the younger boys asks the older man, “Not at all, there’s still a lot of junk there and there.” They continue scraping.</p>
<p>The ducks look bored. They stand up and wander accross the street. One looks at me through the window. I look back. They turn around and walk towards the pond. A minute later I see both of them are swiming in it.</p>
<p>I look at the three men. They’re still poking. I look at my computer screen. Still empty. I decide it’s time to fix the life-cycle model of Archium’s runtime environment. First step in that process is to find out what that even means.</p>
<p>I start reading the incomprehensible pile of paper lying in front of me. By noon I get something to eat and walk around the building to clear my head. The three men are still scraping and poking.</p>
<p>I spend the rest of the afternoon trying to understand the poorly documented beast that is Archium. I write down some remarks in the margin.</p>
<p>At four in the afternoon the three men pack up their things and walk towards the blue van. They look satisfied. The green accross the street looks very neat.</p>
<p>At five I leave the computer room I’ve been sitting in the whole day, with barely any results but a head ache.</p>
<p>How did you change the world today?</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>131</wp:post_id>
		<wp:post_date>2005-05-11 09:44:39</wp:post_date>
		<wp:post_date_gmt>2005-05-11 07:44:39</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>through-the-window</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Some Ruby vs. Python Links</title>
		<link>http://zef.me/2005/04/22/some-ruby-vs-python-links/</link>
		<pubDate>Fri, 22 Apr 2005 07:51:21 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2005/04/22/some-ruby-vs-python-links/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>I think I’ll be looking into Ruby a little more, frameworks like Ruby on Rails and features like “modules”:http://www.rubycentral.com/book/tut_modules.html make it quite appealing. For the occasion I collected a couple of Python vs Ruby links:</p>
<p>* “Python Vs Ruby”:http://c2.com/cgi/wiki?PythonVsRuby: an extensive C2 Wiki page about the subject.<br>* “A comparison of object oriented scripting languages: Python and Ruby”:http://www.cs.washington.edu/homes/kd/courses/pythonruby.pdf a paper on the subject<br>* “Comparing and Introducing Ruby”:http://www.ntecs.de/old-hp/s-direktnet/rb/download_ruby.html<br>* “Python and Ruby”:http://onestepback.org/index.cgi/Tech/Ruby/PythonAndRuby.rdoc: looking at the fundamental differences between Ruby and Python<br>* “Linguistic Simplicity”:http://toulouse.amber.org/archives/2003/08/21/linguistic_simplicity.html#003032</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>244</wp:post_id>
		<wp:post_date>2005-04-22 09:51:21</wp:post_date>
		<wp:post_date_gmt>2005-04-22 07:51:21</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>some-ruby-vs-python-links</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Google and MySQL?</title>
		<link>http://zef.me/2005/04/21/google-and-mysql/</link>
		<pubDate>Thu, 21 Apr 2005 09:57:05 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2005/04/21/google-and-mysql/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>A new project just popped up on “Google’s Open Source website”:http://code.google.com: “Google mMaim”:http://goog-mmaim.sourceforge.net. mMaim is, according to the website:</p>
<blockquote>mMAIM stands for MySQL Monitoring And Investigation Module mMAIM’s purpose is to make a it easy to monitor and analyze MySQL servers and to easily integrate itself into any environment. It can show Master/Slave sync stats, some efficiency stats, can return statistics from most of the “show” commands and more.</blockquote>
<p>What does Google use MySQL for? It definately doesn’t store its search index in it, or your Gmail e-mails, so what does Google use it for? Or has Google all of the sudden turned into a company that supports any open source project, regardless if they profit from it or not? Google’s also going to the “MySQL User Conference”:http://mysqluc05.blogspot.com.</p>
<p>So, what do they use it for? Customer Relation Managament, Human Resource Management? Just curious.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>393</wp:post_id>
		<wp:post_date>2005-04-21 11:57:05</wp:post_date>
		<wp:post_date_gmt>2005-04-21 09:57:05</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>google-and-mysql</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Bits ’n’ Pieces</title>
		<link>http://zef.me/2005/05/23/bits-n-pieces/</link>
		<pubDate>Mon, 23 May 2005 20:25:22 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2005/05/23/bits-n-pieces/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Ok, I haven’t been posting a lot in the past week or two. That’s mainly because of some things happening in my personal life (that’s right, I’m rumoured to have one of those) that need some more attention.</p>
<p>But anyway, my younger brother started with his high-school final exams today. Good luck Wouter!</p>
<p>As you may know the last Starwars episode has hit the cinemas. Not that I care one bit, I find them kind of boring, but nevertheless “Rory Blyth’s review was a fun read”:http://neopoleon.com/blog/posts/14280.aspx.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>481</wp:post_id>
		<wp:post_date>2005-05-23 22:25:22</wp:post_date>
		<wp:post_date_gmt>2005-05-23 20:25:22</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>bits-n-pieces</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Research Internship</title>
		<link>http://zef.me/2005/04/25/research-internship/</link>
		<pubDate>Mon, 25 Apr 2005 13:40:05 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2005/04/25/research-internship/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>I’ll be spending the next ten weeks doing a full-time research internship at my university (University of Groningen). In the software engineering research group they work on a so-called Architecture Description Language (ADL) based on Java called “Archium”:http://www.archium.net. This language is based on the idea that the design process of software actually consists of a sequence of design decissions. Examples of design decissions are the database server you’re going to use, whether your server is going to be single or multi-threaded, or even what the base colour of your GUI will be.</p>
<p>When you design your software a lot of such decisssions are made, however hardly ever well-documented. What you end up with is an architecture document showing the end-result saying that you’ll be using SQL Server, a multi-threaded server and a pink GUI. The reasons behind those decissions are often not written down.</p>
<p>If the architect gets run-over by a truck you’ll lose all the reasoning behind the decissions made. Why did he choose to use SQL Server and not MySQL? What would happen if you change it? Was his choice for a pink GUI only based on his gayness or did the customer specifically request it? Nobody knows. Archium lets you write down the rationales behind such decissions so that they are kept for the next generation of architects, or even for the architect himself when he has to change something in the design, a couple of years later.</p>
<p>Because software architectures often are quite complex, people developed different ways of looking at it. It’s like normal architecture, somebody who has to paint the walls is interested in very different things than somebody who has to make sure the building won’t collapse. Sometimes you’re interested in getting a very global overview of what the different parts of the systems are, sometimes you want to know which components are connected, sometimes you want to know exactly which class is in which file. Right now Archium only supports the component and connector viewtype. This view shows the different components and how they are connected; who talks to whom.</p>
<p>My job is to add an additional viewtype: the module viewtype. The module viewtype is a lot like namespaces in C++ and C# and packages in Java. My job is to figure out how Java’s package system differs from the module viewtype and how to bridge this gap. Then I have to figure out how this will affect the Archium system. Today (and this weekend) I’ve been reading the first five chapters of “Documenting Software Architectures, Views and Beyond”, some papers written about Archium. I’ve also made a list of the views that Archium will have to support and which are already supported by Java.</p>
<p>Because this is a 9–5 job I might not have much energy left to post every day. Oh, and for those ever being near the IWI building, pop in some time. I’ll be in IWI 10 most of the time.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>762</wp:post_id>
		<wp:post_date>2005-04-25 15:40:05</wp:post_date>
		<wp:post_date_gmt>2005-04-25 13:40:05</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>research-internship</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Unexpected Java Behaviour</title>
		<link>http://zef.me/2005/04/12/unexpected-java-behaviour/</link>
		<pubDate>Tue, 12 Apr 2005 15:08:42 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2005/04/12/unexpected-java-behaviour/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>When you dive real deep into a programming language, like “Martin Bravenboer”:http://mbravenboer.blogspot.com does, you’ll find some weird behaviour in there. Martin is posting a series of such unexpected behaviours in Java on his weblog.</p>
<p>For you to understand the part that I’m going to quote, you need to know what boxing is. If you know C#, you’re already familiar with it, boxing has been added to Java in version (1.)5.</p>
<p>In the pre-C#/Java5 age, you had typed arrays, like this:</p>
<pre>int[] ar = new int[10 ];</pre>
<p>However, if you wanted this array to expand and shrink as you added items to it, you needed to use an ArrayList or Vector:</p>
<pre>ArrayList ar = new ArrayList();</pre>
<p>This works fine as long as you put objects into such an ArrayList, putting primitive-type values in them — such as int, float, double, boolean and char — is a bit harder, as they’re not objects. The solution was to use an object wrapper:</p>
<pre>ar.add(new Integer(5));</pre>
<p>And to get it out:</p>
<pre>int v = ((Integer)ar.get(0)).intVal();</pre>
<p>Needless to say, this isn’t very convenient to the programmer. So, boxing was invented. Boxing is a feature that wraps and unwraps primitives automatically. If an object is wanted it boxes it, if a primitive is desired it unboxes it. Using this feature you can add and read primitive values like this:</p>
<pre>ar.add(5); // box<br>int v = (int)ar.get(0); // unbox</pre>
<p>OK, now you’re ready to read “Martin’s unexpected Java compiler behaviour tale”:http://mbravenboer.blogspot.com/2005/04/java-surprise-2-cast-priority.html:</p>
<blockquote>I’m going to abuse your familiarity with autoboxing to show how weird it can be that the priority of primitive casts is different from reference casts. The following program is a correct program that includes a (redundant) cast to an int.</blockquote>
<pre>public class JavaSurprise2 {<br>  public static void main(String[] ps) {<br>    int y = (int) - 2;<br>    System.out.println(String.valueOf(y));<br>  }<br>}</pre>
<blockquote>Compile and run:</blockquote>
<blockquote>martin@logistico:~/tmp&gt; javac JavaSurprise2.java<br>martin@logistico:~/tmp&gt; java JavaSurprise2<br>-2</blockquote>
<blockquote>Well, that looks great. Now, let’s replace the int with an Integer.</blockquote>
<blockquote>public class JavaSurprise2 {<br> public static void main(String[] ps) {<br> int y = (Integer) — 2;<br> System.out.println(String.valueOf(y));<br> }<br>}</blockquote>
<blockquote>Compile …</blockquote>
<blockquote>martin@logistico:~/tmp&gt; javac JavaSurprise2.java<br>JavaSurprise2.java:4: cannot find symbol<br>symbol : variable Integer<br>location: class JavaSurprise2<br> int y = (Integer) — 2;<br> ^<br>JavaSurprise2.java:4: illegal start of type<br> int y = (Integer) — 2;<br> ^<br>2 errors</blockquote>
<p>More is “here”:http://mbravenboer.blogspot.com/2005/04/java-surprise-2-cast-priority.html and an examplanation is “here”:http://mbravenboer.blogspot.com/2005/04/java-surprise-2-motivation.html.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>855</wp:post_id>
		<wp:post_date>2005-04-12 17:08:42</wp:post_date>
		<wp:post_date_gmt>2005-04-12 15:08:42</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>unexpected-java-behaviour</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Shining Ruby: Extending Classes</title>
		<link>http://zef.me/2005/04/29/shining-ruby-extending-classes/</link>
		<pubDate>Fri, 29 Apr 2005 08:56:37 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2005/04/29/shining-ruby-extending-classes/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>I’ve been playing with Ruby a little and there’s one feature in Ruby that I particularly like: the ability to extend existing classes. For example, for as long as I’ve been programming using objects I wanted to add a method to integers called “timesSayZef”. So you could do this:</p>
<pre>100.timesSayZef()</pre>
<p>And it would print “Zef” a hundred times. However, Java doesn’t allow you to do this, C# doesn’t allow you to do this, even Python doesn’t allow you to do this (at least I couldn’t get it to do it). However, Ruby does with this code:</p>
<pre>class Fixnum<br>   def timesSayZef<br>      times { puts "Zef" }<br>   end<br>end</pre>
<p>In Ruby when you define a class that already exists (such as Fixnum, which represents a number, such as 100), it will merge the two definitions. So in this case I would add a timesSayZef method to the Fixnum class. When I now do this:</p>
<pre>10.timesSayZef</pre>
<p>it will print:</p>
<pre>Zef<br>Zef<br>Zef<br>Zef<br>Zef<br>Zef<br>Zef<br>Zef<br>Zef<br>Zef</pre>
<p>Cool huh?</p>
<p>Ruby also allows you to extend existing objects with additional methods. For example:</p>
<pre>class BoringClass<br>   def saySomething<br>      puts 'Something'<br>   end<br>end<br>module ZefStuff<br>   def sayZefIsCool<br>      puts 'Zef is cool!'<br>   end<br>end<br>bc = BoringClass.new<br>bc.saySomething<br>bc.extend(ZefStuff)<br>bc.sayZefIsCool</pre>
<p>What I do here is first define a class. Then define a module. Create an instance of the class and then extend that instance with all the methods in the module. This example will print:</p>
<pre>Something<br>Zef is cool!</pre>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>935</wp:post_id>
		<wp:post_date>2005-04-29 10:56:37</wp:post_date>
		<wp:post_date_gmt>2005-04-29 08:56:37</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>shining-ruby-extending-classes</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Before You Write Another Line</title>
		<link>http://zef.me/2005/05/12/before-you-write-another-line/</link>
		<pubDate>Thu, 12 May 2005 08:27:08 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2005/05/12/before-you-write-another-line/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Long-term readers of my blog might already have gotten some hints about how much I love Joel Spolsky. Shirts. Mugs. Posters. Books. I got ’em all. I won’t even talk to you if you haven’t read “Joel on Software: And on Diverse and Occasionally Related Matters That Will Prove of Interest to Software Developers, Designers, and Managers, and to Those Who, Whether by Good Fortune or Ill Luck, Work with Them in Some Capacity”:http://www.amazon.com/exec/obidos/tg/detail/-/1590593898/002-0415684-0102450?v=glance.</p>
<p>And so I ask you: put down your pen; save the source files you’re working on; close the door to your room; unplug your phone and read what Joel has to say. Yesterday he wrote about “how to make code that is wrong look wrong”:http://www.joelonsoftware.com/articles/Wrong.html and why Hungarian is the ultimate solution to that. And that exceptions suck. And it’s always cool to hear people say that things suck.</p>
<p>“Making Wrong Code Look Wrong”:http://www.joelonsoftware.com/articles/Wrong.html</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>993</wp:post_id>
		<wp:post_date>2005-05-12 10:27:08</wp:post_date>
		<wp:post_date_gmt>2005-05-12 08:27:08</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>before-you-write-another-line</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Continuations</title>
		<link>http://zef.me/2005/05/09/continuations/</link>
		<pubDate>Mon, 09 May 2005 06:34:19 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2005/05/09/continuations/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Everybody who started in a language other than a web scripting one has written programs like this:</p>
<pre>WriteLn('What''s your name?');<br>ReadLn(name);<br>WriteLn('What''s your age?');<br>ReadLn(age);<br>WriteLn('Hello ' + name + ', you are ' + age + ' years old.');</pre>
<p>(Yeah sorry, I started in Turbo Pascal.)</p>
<p>All was nice and dandy until you start writing web applications. All of the sudden you can’t write applications like that anymore. You have to do stuff like this:</p>
<pre>switch($_GET['step']) {<br>   '0':<br>      echo '&lt;form action="?step=1&gt;';<br>      echo 'What's your name?';<br>      echo '&lt;input name="name"/&gt;&lt;input type="submit"/&gt;';<br>      echo '&lt;/form&gt;';<br>      break;<br>   '1':<br>      $_SESSION['name'] = $_GET['name'];<br>      echo '&lt;form action="?step=2&gt;<br>      echo 'What's your age?';<br>      echo '&lt;input name="age"/&gt;&lt;input type="submit"/&gt;';<br>      echo '&lt;/form&gt;';<br>      break;<br>   '2':<br>      $name = $_SESSION['name'];<br>      $age = $_GET['age'];<br>      echo "Hello $name, you are $age years old.";<br>      break;<br>}</pre>
<p>The general pattern is here is that you have to store your state and restore the state of your application on every page view. This makes writing web applications very inconvenient.</p>
<p>Continuations allow you to write applications almost the nice old-fashioned way. Continuations are a standard feature of Ruby, in other languages it is a harder to accomplish. Continuations all of sudden became a hot issue in the past weeks. Some articles that explain how continuations work and how to implement them:</p>
<p>* “Sam Ruby: Continuations for Curmudgeons”:http://www.intertwingly.net/blog/2005/04/13/Continuations-for-Curmudgeons<br>* “Dynis Ducher: Continuations Made Simple and Illustrated”:http://www.ps.uni-sb.de/~duchier/python/continuations.html<br>* “Continuations on the Web”:http://www.phubuh.org/Media/Writing/Continuations/<br>* “IBM developerWorks: Use continuations to develop complex Web applications”:http://www-106.ibm.com/developerworks/library/j-contin.html#IDAO0GMB<br>* “Borges”:http://borges.rubyforge.org a Ruby web application framework that is based on continuations<br>* “Continuations in Python”:http://pyds.muensterland.org/wiki/continuationbasedserver.html<br>* “Don Box: Continuing Continuations”:http://pluralsight.com/blogs/dbox/archive/2005/04/23/7682.aspx</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1033</wp:post_id>
		<wp:post_date>2005-05-09 08:34:19</wp:post_date>
		<wp:post_date_gmt>2005-05-09 06:34:19</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>continuations</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Google Web Accelerator Considered Harmful</title>
		<link>http://zef.me/2005/05/07/google-web-accelerator-considered-harmful/</link>
		<pubDate>Sat, 07 May 2005 11:24:46 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2005/05/07/google-web-accelerator-considered-harmful/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Google’s newest product is the “Google Web Accelerator”:http://webaccelerator.google.com, which says to make browsing the internet faster. That’s great, isn’t it? Absolutely. Unless you know how they implemented it and the absolutely catastrophic consequences of this.</p>
<p>Ok, so, how does the Google Web Accelerator make browsing faster? It’s quite simple actually, it prefetches pages. If you’re on a web page it will look for links on that page and load them in the background already, so that if you click them they’ll appear instantly. It’s simple, and probably also effective. There’s one tiny problem, however, as “the guys at 37signals.com found out”:http://37signals.com/svn/archives2/google_web_accelerator_hey_not_so_fast_an_alert_for_web_app_designers.php:</p>
<blockquote>Here’s the problem: Google is essentially clicking every link on the page — including links like “delete this” or “cancel that.” And to make matters worse, Google ignores the Javascript confirmations. So, if you have a “Are you sure you want to delete this?” Javascript confirmation behind that “delete” link, Google ignores it and performs the action anyway.</blockquote>
<p>So, if you end up with an empty database after visiting phpMyAdmin, or all your weblog posts are gone, you know where to look.</p>
<p>To summarize:</p>
<p>*DO NOT INSTALL GOOGLE WEB ACCELERATOR!*</p>
<p>There.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1050</wp:post_id>
		<wp:post_date>2005-05-07 13:24:46</wp:post_date>
		<wp:post_date_gmt>2005-05-07 11:24:46</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>google-web-accelerator-considered-harmful</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>OS X “Tiger” released April 29th</title>
		<link>http://zef.me/2005/04/13/os-x-tiger-released-april-29th/</link>
		<pubDate>Wed, 13 Apr 2005 17:46:11 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2005/04/13/os-x-tiger-released-april-29th/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Only about three weeks to go until Mac OS 10.4, code named “Tiger”, is released. Tiger contains some substantional new features, my favourites are as follows:</p>
<p>“*Spotlight*”:http://www.apple.com/macosx/features/spotlight/<br>Most useful is Spotlight, Apple’s OS-integrated desktop search. Spotlight will index all your data such as PDF documents, Word documents, text documents, MP3 files, movie files etc. etc. and make it (including its content) instantly searchable. In a nice iTunes-like search-as-you-type kind of way.</p>
<figure><img alt="Spotlight" src="https://cdn-images-1.medium.com/max/800/0*fIq-SmXETDuAi2zJ.jpg"></figure><p>“*Dashboard*”:http://www.apple.com/macosx/features/dashboard/<br>Dashboard is very similar to what Konfabulator does now (for the Mac, and recently also for Windows). It adds another Exposé key which will make all kinds of widgets appear on the screen, and disappear when pressed again. The widgets are small, simple applications such as a stock quote ticker, weather report, calculator and iTunes controls. They are the kind of utilities that you often only need for a moment and then want to get rid of.</p>
<figure><img alt="Dashboard" src="https://cdn-images-1.medium.com/max/800/0*reb1LgQzYAMMqPOW.gif"></figure><p>“*Automator*”:http://www.apple.com/macosx/features/automator/<br>Automator is visual scripting. If there are things that you want to do quite often, such as rip some images from a website, create a slideshow from that and burn that on a DVD, until now you had to write an apple script. Apple script is a scripting language. What Automator allows you to do is visually create such scripts, without any scripting knowledge.</p>
<figure><img alt="Automator" src="https://cdn-images-1.medium.com/max/800/0*31tvIOAaSE8QQNWB.jpg"></figure><p>There are lots more new features in Tiger many of which you can find “more information on here”:http://www.apple.com/macosx/newfeatures/.</p>
<p>I pre-ordered my copy this morning.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1112</wp:post_id>
		<wp:post_date>2005-04-13 19:46:11</wp:post_date>
		<wp:post_date_gmt>2005-04-13 17:46:11</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>os-x-tiger-released-april-29th</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>New Pope</title>
		<link>http://zef.me/2005/04/19/new-pope/</link>
		<pubDate>Tue, 19 Apr 2005 17:41:53 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2005/04/19/new-pope/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Well, since a couple of minutes we have a new pope. His name is Joseph Ratzinger, a German cardinal. He’ll be named Benedict the 16th.</p>
<p>Being a Roman Catholic myself, I have no reason to be happy about this. Ratzinger is said to be very conservative, very against gays and in general: bad news. Much worse than John Paul the 2nd.</p>
<figure><img alt="Pope Benedict XVI" src="https://cdn-images-1.medium.com/max/800/0*7MREKKSg1OcmY5lW.jpg"></figure><p>* “CNN Article”:http://www.cnn.com/2005/WORLD/europe/04/19/pope.tuesday/index.html<br>* “Reuters Article”:http://www.reuters.com/newsArticle.jhtml;jsessionid=R4FCGKLPHUJXMCRBAEZSFFA?type=topNews&amp;storyID=8228572</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1180</wp:post_id>
		<wp:post_date>2005-04-19 19:41:53</wp:post_date>
		<wp:post_date_gmt>2005-04-19 17:41:53</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>new-pope</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Hitting It With a Music Baton</title>
		<link>http://zef.me/2005/05/19/hitting-it-with-a-music-baton/</link>
		<pubDate>Thu, 19 May 2005 08:07:34 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2005/05/19/hitting-it-with-a-music-baton/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>“Tjaard”:http://www.tjaard.nl/?p=52 handed me the music baton, so here we go.</p>
<p>First of all, the size of my music collection. It’s not as big as “some people”:http://www.standardbehaviour.com/articles/2005/05/18/running-around-with-a-musical-baton. As a matter of fact, it fits all on my iPod. Admittedly, I sometimes remove stuff that I won’t probably ever listen to so that it will keep fitting. I think I got around 14GB of music right now. Most of which MP3, but also some DRM AAC files from the iTunes music store.</p>
<p>*The last CD I bought was…*<br>It has been a little while since I bought a CD, but I think it’s Diana Krall — Live in Paris.</p>
<p>*Song playing right now…*<br>Cosmos — Pa un par</p>
<p>*Five songs I listen to a lot/mean a lot to me…*<br>This depends so much on my mood. But anyway, from the top of my head:</p>
<p>* Diana Krall — Case of You<br>* Hooverphonic — Inhaler<br>* Shakira — Tu<br>* Massive Attack — Teardrop<br>* Muse — Space Dementia</p>
<p>Of these the Muse song is most remarkable in the sense that I’ve only known about Muse for about a week or so and I have been playing their songs almost full-time since (together with the Cosmos songs).</p>
<p>*The five people where this meme will go on…*</p>
<p>* “Bas Westerbaan”:http://blog.w-nz.com — because I want to know.<br>* “Shane Bauer”:http://www.shanebauer.com — because he hasn’t posted for so long that I wonder if he’s even alive.<br>* “Manuzhai”:http://www.manuzhai.nl/weblog/ — because he needs a wake-up call similar to Shane’s (although less loud).<br>* “Jacob Duursma”:http://zef.cc/~jaap/ — because I honestly have no idea what his music taste is like.<br>* “Matt Mecham”:http://www.mattmecham.com — because I wonder he still listens to Radiohead so much (not that that’s a bad thing)</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1323</wp:post_id>
		<wp:post_date>2005-05-19 10:07:34</wp:post_date>
		<wp:post_date_gmt>2005-05-19 08:07:34</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>hitting-it-with-a-music-baton</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>GoboLinux</title>
		<link>http://zef.me/2005/04/15/gobolinux/</link>
		<pubDate>Fri, 15 Apr 2005 14:54:00 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2005/04/15/gobolinux/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Ever since I’ve started using Unix systems I always asked myself one question: if this Unix stuff is so great, why are all your applications scattered around the whole system and not put neatly into one directory per application?</p>
<p>This question became stronger when I first met Mac OS X. They’re doing exactly that: all applications are in /Applications/appname.app. You can install applications by simly dragging them into the /Applications directory, no installers (usually), just drag-and-drop. Yesterday I found out that this way of structuring your filesystem originates from “NextStep”:http://en.wikipedia.org/wiki/NextStep, a company that was bought by Apple around 1997, which on its turn used it to base its tenth version of Mac OS on.</p>
<p>Ever since I started using OS X I wondered: would it be possible to have a Linux distribution based on this concept? Just a neat filesystem in which you can install and uninstall software by simply using cp and rm? Or xcopy-deployment as Microsoft calls it. However, at that point I didn’t consider myself knowledgeable enough about Linux to give it a shot.</p>
<p>This morning, when I searched for a Linux distribution based on “GNUStep”:http://www.gnustep.org, a free implementation of OpenStep (which is a standardized version of NextStep), I found “GoboLinux”:http://www.gobolinux.org. GoboLinux is a Linux distribution like any other, except that it uses a totally different filesystem lay-out, one fairly similar to NextStep and therefore Mac OS X.</p>
<p>The basic structure of applications is: /Programs/AppName/versionnumber/… this allows for multiple versions of an application or library to be installed. In order to make programs easily runnable (i.e. easier than running them by typing /Programs/OpenOffice/1.1/bin/openoffice every time), symlinks are created from /System/Links/Executables which is on each user’s path (like /usr/bin on normal Unix systems). GoboLinux also contains scripts to easily port normal Linux software to a GoboLinux-like file structure.</p>
<p>It definately looks like an interesting project. I’m downloading the ISO right now (which is also a LiveCD, so I can easily test it). “Read an introduction to the ideas behind GoboLinux here.”:http://www.kuro5hin.org/story/2003/5/9/05015/62649</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1491</wp:post_id>
		<wp:post_date>2005-04-15 16:54:00</wp:post_date>
		<wp:post_date_gmt>2005-04-15 14:54:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>gobolinux</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>TINE and MacExpo</title>
		<link>http://zef.me/2005/04/20/tine-and-macexpo/</link>
		<pubDate>Wed, 20 Apr 2005 18:43:15 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2005/04/20/tine-and-macexpo/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Today I, and three friends, went to TINE, The Internet and Networking Event, Holland’s biggest IT event (supposedly) and to MacExpo.</p>
<p>On the TINE website it says that TINE would take up two of the three halls of the RAI, a huge event hall, and MacExpo would take up one hall. I and a couple of others went to TINE last year and didn’t really like enough for a total of around 5 hours travelling by train, but now that MacExpo would be there, we decided to go.</p>
<p>It was crap.</p>
<p>TINE was just like last year. Dozens of stands from unknown IT companies with employees in suits talking to each other. The biggest stand was from Microsoft, but not much happened there either. After having walked through the TINE halls all that had changed in our lives was that we lost an hour we wouldn’t ever get back, and that our bags were much heavier because of all the advertisements and magazines that people pushed in our hands. And polite as we are, we didn’t throw them away immediately.</p>
<p>So, we set our hopes on MacExpo. An event that had taken place on other places in Europe before and supposedly was great there. Nu such luck, though. We were promised one hall full of Mac stuff, we got barely one third of a hall.</p>
<figure><img alt="The Huge MacExpo" src="https://cdn-images-1.medium.com/max/800/0*dmGwha6XDR6LfxFF.jpg"></figure><p>(This was the MacExpo)</p>
<p>On the map of the three halls that looks like this (I think, I could have missed a part though):</p>
<figure><img alt="On the map" src="https://cdn-images-1.medium.com/max/800/0*DsBkJ7JhT-sMj3GE.jpg"></figure><p>There were a lot of macs there and quite some software, but nearly all the stands were from Apple resellers. Apple itself wasn’t even present. Feeling sad we decided to then at least buy a box of “iPod socks”:http://store.apple.com/1-800-MY-APPLE/WebObjects/AppleStore?productLearnMore=M9720G/A.</p>
<p>They were sold out.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1513</wp:post_id>
		<wp:post_date>2005-04-20 20:43:15</wp:post_date>
		<wp:post_date_gmt>2005-04-20 18:43:15</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>tine-and-macexpo</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>The O’Reilly Radar</title>
		<link>http://zef.me/2005/05/15/the-oreilly-radar/</link>
		<pubDate>Sun, 15 May 2005 12:49:48 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2005/05/15/the-oreilly-radar/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>I want to point you all to one of my favourite weblogs in my 118-feed long subscriptions list: “O’Reilly Radar”:http://radar.oreilly.com/.</p>
<p>Many of you will own an O’Reilly book. They’re the very good and expensives ones with the animals on the cover. O’Reilly always seems to launch the right books at the right moment. O’Reilly Radar gives you a look at the trends that the people at O’Reilly see in the IT industry. Very interesting stuff.</p>
<p>“O’Reilly Radar”:http://radar.oreilly.com</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1554</wp:post_id>
		<wp:post_date>2005-05-15 14:49:48</wp:post_date>
		<wp:post_date_gmt>2005-05-15 12:49:48</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-oreilly-radar</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Zoo’s Meta-Model</title>
		<link>http://zef.me/2005/05/02/zoos-meta-model/</link>
		<pubDate>Mon, 02 May 2005 16:08:39 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2005/05/02/zoos-meta-model/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>As I’ve been working with meta-models a lot in the last week, I thought I’d just draw one for my idea of “Zoo”:http://www.zefhemel.com/archives/2005/05/01/zoo-a-still-imaginary-net-scripting-language. So, I present to you: Zoo’s current meta-model:</p>
<figure><img alt="Zoo's Meta-Model" src="https://cdn-images-1.medium.com/max/800/0*jBZGqbk985Cv8o2F.png"></figure><p>Most of you will ask yourself what the… something… a meta-model is. In short it comes down to this: think of an object-oriented programming language, for example Java. What are the main players in Java? There are for instance objects, classes, packages and methods. How do these relate to each other? Well, a package contains multiple classes. A class contains multiple methods. A class creates objects. So the (simplified) meta-model of Java looks like this:</p>
<figure><img alt="Java's Meta-Model" src="https://cdn-images-1.medium.com/max/800/0*UXYXEuQ28R7RsFDw.png"></figure><p>A meta-model describes how a model works. A meta-model contains data about a model. Just like meta-data contains data about data.</p>
<p>Is this useful at all? Yes. As a matter of fact, it maps quite well on how you implement it. To show this, have a look at a part of my class diagram for Zoo:</p>
<figure><img alt="Java's Meta-Model in Classes" src="https://cdn-images-1.medium.com/max/800/0*1BlFKq4D6Ish3tfm.png"></figure><p>(The [string attr] : ZooAccessor attribute is a hashtable that maps attribute names to their values.)</p>
<p>I know. Knowing this must have an amazing impact on your life. Wait until you hear about meta-meta-models. Yes, really, they exist. Go check the “UML specification”:http://www.omg.org/technology/documents/formal/uml.htm.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1657</wp:post_id>
		<wp:post_date>2005-05-02 18:08:39</wp:post_date>
		<wp:post_date_gmt>2005-05-02 16:08:39</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>zoos-meta-model</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Bush Visits The Netherlands</title>
		<link>http://zef.me/2005/05/08/bush-visits-the-netherlands/</link>
		<pubDate>Sun, 08 May 2005 14:32:35 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2005/05/08/bush-visits-the-netherlands/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>I got up extra early this morning to enjoy this tremendous event. What happened? I’ll tell you.</p>
<p>Yesterday, George W. Bush, you know, the fella that runs the United States of America, came to the Netherlands. He’s touring Europe and just came from Latvia, another country that nobody in the USA ever heard of or knows where it is situated. He came to, together with our prime-minister Jan Peter “what’s his name” Balkenende and our Queen Beatrix, put “large floral wreaths in front of a tall stone memorial at the cemetary of Margraten”:http://today.reuters.com/news/newsArticle.aspx?type=topNews&amp;storyID=2005-05-08T132647Z_01_N08636315_RTRIDST_0_NEWS-EUROPE-WAR-BUSH-DC.XML.</p>
<figure><img alt="Jan Peter, Laura, George and Beatrix" src="https://cdn-images-1.medium.com/max/800/0*kzHntO1iItOOeaxZ.jpg"></figure><p>Both Jan Peter Balkenende and George W. Bush gave speeches. It was nice. Especially Bush’s, because you always get the impression that he has no clue where he is and who the people are who he’s talking to, but when he’s giving a speech you get to know the real George. The George educated at Yale, that knows about Anne Frank, undoubtly has read her world-famous diary, and even knew that the Dutch were eating tulip bulbs in the hunger winter shortly before the liberation of Amsterdam.</p>
<p>He came, he talked and he left — to yet another country that he never knew existed.</p>
<p>But seriously. We celebrate our freedom at the 5th of May, here in the Netherlands, and the US and Canada played a big role in that freedom. Thanks for that.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1719</wp:post_id>
		<wp:post_date>2005-05-08 16:32:35</wp:post_date>
		<wp:post_date_gmt>2005-05-08 14:32:35</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>bush-visits-the-netherlands</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Java in Harmony</title>
		<link>http://zef.me/2005/05/10/java-in-harmony/</link>
		<pubDate>Tue, 10 May 2005 07:34:13 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2005/05/10/java-in-harmony/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>There’s a bunch of people wanting to start an open source (free, as in freedom) Java 5 implementation named Harmony (“Proposal”:http://mail-archives.apache.org/mod_mbox/incubator-general/200505.mbox/%3cCA4BEB82-3D84-457D-9531-1477DD749919@apache.org%3e, “FAQ”:http://mail-archives.apache.org/mod_mbox/incubator-harmony-dev/200505.mbox/%3C50351021-6408-437D-949A-7AF2AD4DFD0F@apache.org%3E) under the Apache umbrella:</p>
<blockquote>We propose that we create a new Apache project, Harmony, that will achieve the following goals :</blockquote>
<blockquote>1) create a Compatible, independent implementation of J2SE 5 under the Apache License v2</blockquote>
<blockquote>2) create a community-developed modular runtime (VM and class library) architecture to allow independent implementations to share runtime components, and allow independent innovation in runtime components</blockquote>
<blockquote>In doing so, we intend to create a broad, collaborative community of contributors, implementors and users of the modular platform specification.</blockquote>
<p>Reimplementing the Java VM and possibly its class libraries is a lot of work. A lot. If you do something like this — reimplement a development platform — you better have a pretty damn good reason. Mono had such a good reason. .NET was a Windows-only technology until Mono came along. People wanted to run it on Linux and other operating systems as well, so they reimplemented as an open source project that runs on all kinds of operating systems. However, Java already runs on most operating systems. So why reimplement the whole thing? Just because the current version is not open source?</p>
<p>Who’s going to be your audience? Sun has worked on this implementation of Java for years. They hired smart people to optimize it and make it fast. Why not just use that implementation. Who’s going to care whether the code is open source licensed or Sun Whatever licensed? Consumers won’t care. Is it just for the Richard Stallmans of this world that now might consider Java?</p>
<p>“Tim Bray (of Sun)”:http://www.tbray.org/ongoing/When/200x/2005/05/08/Java-Harmony:</p>
<blockquote>Suppose they pull it off, and that there’s an OSS J2SE that anyone can download, build, and change. Why is this a good thing? If you’re a member of the Free Software movement, the project is its own reward for reasons of pure ideology having nothing to do with technology, engineering, or business. I’m not among the faithful, but I’ve nothing against ’em. How about for the rest of us; are there any actually any practical real-world advantages? Id think the most obvious win would be around patching and bug-fixing. In my experience, OSS software gets bugfixed quicker and better.</blockquote>
<p>Bugs might be fixed faster. Ok.</p>
<p>But really, is it all worth this much trouble? And what if Sun decides to release their implementation as open source in a couple of years, which wouldn’t surprise me?</p>
<p>Some more comments:<br>* “Miguel de Icaza of Mono”:http://primates.ximian.com/~miguel/archive/2005/May-07.html<br>* “Tim Bray”:http://www.tbray.org/ongoing/When/200x/2005/05/08/Java-Harmony<br>* “Graham Hamilton of Sun”:http://weblogs.java.net/blog/kgh/archive/2005/05/thoughts_on_the_1.html</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1746</wp:post_id>
		<wp:post_date>2005-05-10 09:34:13</wp:post_date>
		<wp:post_date_gmt>2005-05-10 07:34:13</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>java-in-harmony</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Zoo: A (Still) Imaginary .NET Scripting Language</title>
		<link>http://zef.me/2005/05/01/zoo-a-still-imaginary-net-scripting-language/</link>
		<pubDate>Sun, 01 May 2005 14:04:53 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2005/05/01/zoo-a-still-imaginary-net-scripting-language/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>I’ve always wanted to create my own programming language. About 8 years ago or so I wrote XPROGRAM. A *very* simple interpreted language that allowed you to write very simple graphical programs. I wrote it in Turbo Pascal 6.0 an it ran under MS-DOS. Back then I didn’t know a thing about parsing (I must have been around 12 or so), but it worked, kinda.</p>
<p>Now, years later, I see all these cool features appearing in all these “new” dynamic languages such as Python and Ruby. My problem, as always, is that both these language contain some features that I really like, but none these language contain all of them.</p>
<p>So, now, let’s assume that I would implement my own dynamic language, what features would it have and on what platform would it run? As a platform I’ve chosen .NET (or more generally the CLI, which also includes Mono). The reason is that there’s still a little gap to be filled there. .NET has no “native” dynamic language yet. Java has “Groovy”:http://groovy.codehaus.org, but .NET doesn’t have a real native one. There’s “Boo”:http://boo.codehaus.org, but that’s not a dynamic language, it’s a statically typed one. There’s “IronPython”:http://www.ironpython.com, but that has been built to fully support Python code, not to integrate well into the .NET environment.</p>
<p>Some of the features that the language, which I dubbed Zoo, should support:<br>* Compiles into CIL (Common Intermediate Language, i.e. “compiled” .NET code).<br>* Python-like in its handling of object attributes, i.e. there’s no difference between normal attributes and methods, the only difference is that method attributes are callable.<br>* Define new attributes at runtime.<br>* The ability extend current classes, where this extension also applies to current instances. So if I would create an instance of a class, and then add methods or attributes to that class, the attributes would also show up in the instance I created before.<br>* It should be able to take advantage of the current .NET API. And give these classes the same abilities as normal Zoo classes, so it should, for instance, be possible to add new methods to these classes. Think a “timesSayZef method to the int class”:http://www.zefhemel.com/archives/2005/04/29/shining-ruby-extending-classes.</p>
<p>I’ll probably think of more features later, but I have a hard enough time figuring out how you would implement those things.</p>
<p>I’ve started writing some code for the runtime platform. In my implementation everything in Zoo (objects, attributes, methods, functions, classes) is an instance of some subclass of ZooObject. A ZooObject instance has list of attributes associated with it and an Invoke method. What this Invoke method does depends on the kind of ZooObject. For a class it could return an instance of that class, for a function it could execute the function, for some random object it could run a manually defined function.</p>
<p>I’ve also written two simple wrappers for current .NET objects: DotNetObjectWrapper and DotNetMethodWrapper. With the code I got, all I have to do is convert the syntax of Zoo (which I haven’t defined yet) into code like this:</p>
<pre>// wrap an instance of the int object<br>ZooObject obj = new DotNetObjectWrapper(22);<br>// call the ToString method on the wrapped object<br>Console.WriteLine(obj["ToString"].Invoke(obj));<br>// Add a new (predefined) method to the object<br>obj["PrintAttributes"] = PrintAttributes.GetInstance();<br> // call this method<br>obj["PrintAttributes"].Invoke(obj);</pre>
<p>Result:</p>
<pre>22<br>PrintAttributes = Zoo.Builtins.PrintAttributes<br>CompareTo = Zoo.Builtins.DotNetMethodWrapper<br>Equals = Zoo.Builtins.DotNetMethodWrapper<br>GetHashCode = Zoo.Builtins.DotNetMethodWrapper<br>Parse = Zoo.Builtins.DotNetMethodWrapper<br>Parse = Zoo.Builtins.DotNetMethodWrapper<br>Parse = Zoo.Builtins.DotNetMethodWrapper<br>Parse = Zoo.Builtins.DotNetMethodWrapper<br>ToString = Zoo.Builtins.DotNetMethodWrapper<br>ToString = Zoo.Builtins.DotNetMethodWrapper<br>ToString = Zoo.Builtins.DotNetMethodWrapper<br>ToString = Zoo.Builtins.DotNetMethodWrapper<br>GetTypeCode = Zoo.Builtins.DotNetMethodWrapper<br>GetType = Zoo.Builtins.DotNetMethodWrapper</pre>
<p>(The duplicate methods are due to multiple overloads that exist.)</p>
<p>This stuff is fun.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1765</wp:post_id>
		<wp:post_date>2005-05-01 16:04:53</wp:post_date>
		<wp:post_date_gmt>2005-05-01 14:04:53</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>zoo-a-still-imaginary-net-scripting-language</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>YaBB Turned 5 Yesterday</title>
		<link>http://zef.me/2005/07/05/yabb-turned-5-yesterday/</link>
		<pubDate>Tue, 05 Jul 2005 09:50:41 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2005/07/05/yabb-turned-5-yesterday/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Yesterday, at July 4th (yah, I know), YaBB turned 5 years old. I think it’s the second oldest free bulletin board software project alive today. I went to visit the “YaBB community forums”:http://www.yabbforum.com/community/YaBB.pl yesterday and it looked kinda dead. They even seemed to have forgotten their birthday themselves. There seem to be some releases from time to time, though. I think they’re working on releasing YaBB 2 now (would be about time too, since plans for YaBB 2 have started around 4.5 years ago).</p>
<p>But anyways, happy birthday YaBB :)</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>272</wp:post_id>
		<wp:post_date>2005-07-05 11:50:41</wp:post_date>
		<wp:post_date_gmt>2005-07-05 09:50:41</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>yabb-turned-5-yesterday</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>A Better Diff/Merge</title>
		<link>http://zef.me/2005/05/31/a-better-diff-merge/</link>
		<pubDate>Tue, 31 May 2005 09:43:02 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2005/05/31/a-better-diff-merge/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>I like version control systems. Since I got my VPS to run my own server stuff on I’ve been using “Subversion”:http://subversion.tigris.org to store many of my files in. This is not only great for when I screw things up and want to retrieve an older version of a file, but also for synchronisation between different computers. Version control systems pop up in many pieces of software, in wikis for example. Version control in wikis works great, do you know why? Because wiki pages are plain text documents.</p>
<p>One of the most useful features in version control systems are diff and merge. Diff (for difference) compares two versions of the same file (an old one and a new one, usually) and shows you the differences. Merge can then apply the output of the diff to the old version which will result in the new version (a diff is like a delta). This becomes really useful if two people are working on the same file at the same time, but in different parts of the file. One is editting one section of the file, somebody else is editting another. When both check their changes in the version control systems compares (diffs) each version with the current one in the repository and if they don’t conflict it can merge them both in; so nobody’s work is lost.</p>
<p>But this only works with text files. If you would do a diff on a word document or JPEG image it won’t work. Why not? Because the diff and merge tools compare files on a line-by-line basis. Even it would work on a byte-by-byte basis it wouldn’t work right because changing one pixel in a JPEG image can change the whole file around.</p>
<p>This is a problem also raised by “Tjaard”:http://www.tjaard.nl/2005/05/21/smart-version-controlling-why-diff-is-just-not-enough. He argues that version control systems should become more file-type specific. Right now there are basically two kinds of files: text files and binary files. That’s it. A while ago I went to a graduation talk of somebody at our university who researched diffing and merging UML diagrams. That’s the kind of stuff I’m talking about. A version control system should have plug-ins for different file types. For word files, for JPEG files, for UML diagrams, for XML files.</p>
<p>Tjaard asks if this wouldn’t cause performance problems. All I can say is: screw that. Even if you need a bigger server for version control it saves so much (wo)man hours and productivity that it’s totally worth it.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>312</wp:post_id>
		<wp:post_date>2005-05-31 11:43:02</wp:post_date>
		<wp:post_date_gmt>2005-05-31 09:43:02</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>a-better-diff-merge</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Quality Attributes of Distributed Storage Systems</title>
		<link>http://zef.me/2005/07/10/quality-attributes-of-distributed-storage-systems/</link>
		<pubDate>Sun, 10 Jul 2005 12:38:34 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2005/07/10/quality-attributes-of-distributed-storage-systems/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>I just finished my almost last assignment for my current university before the holidays and before I got to Trinity College. It’s an essay for the software architecture course I took. I thought I’d put it online for those interested. It’s not a masterpiece, but it should do for the credits I get for it (it’s only 30% of the grade).</p>
<p>In this essay, runtime quality attributes of distributed storage systems are discussed. These quality attributes are scalability, security, robustness and performance. For three different distributed storage systems (GoogleFS, DISP and Gnutella), the architecture and fulfilment of these quality attributes are looked at and evaluated.</p>
<p><a href="http://www.zefhemel.com/upload/RuntimeQualityAttributesOfDistributedStorageSystems.pdf" target="_blank">Download it here (PDF)</a></p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>320</wp:post_id>
		<wp:post_date>2005-07-10 14:38:34</wp:post_date>
		<wp:post_date_gmt>2005-07-10 12:38:34</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>quality-attributes-of-distributed-storage-systems</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Ajax Update</title>
		<link>http://zef.me/2005/05/27/ajax-update/</link>
		<pubDate>Fri, 27 May 2005 08:06:33 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2005/05/27/ajax-update/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Since “Ajax was first launched as a term”:http://www.zefhemel.com/archives/2005/03/19/and-it-got-a-name-ajax a lot has been happening in the web development world. If you’ve been reading the blogs, in particular the “Ajaxian blog”:http://www.ajaxian.com you will already know about it. If not, I’ll point you to some cool stuff now.</p>
<p>First some examples:<br>* “Cojax Source Code Viewer”:http://code.communityserver.org<br>* “AjaxAdvocates example”:http://www.ajaxadvocates.com<br>* “WICK”:http://wick.sourceforge.net/wick_sample/ (auto-complete toolkit)<br>* “Ajax spellchecker”:http://www.broken-notebook.com/spell.php</p>
<p>But really, this is all minor stuff compared to the demo Jon Udell put online of “TIBCO”:http://weblog.infoworld.com/udell/gems/tibco.html. What these guys did is create a complete UI toolkit for use within the browser. In order to make development easier they created a whole IDE using this toolkit. That’s right, that means that they developed a IDE inside the browser, including a visual designer. You just have to see it to believe it.</p>
<p>If you want to see more cool stuff like that, read the “Ajaxian”:http://www.ajaxian.com blog.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>432</wp:post_id>
		<wp:post_date>2005-05-27 10:06:33</wp:post_date>
		<wp:post_date_gmt>2005-05-27 08:06:33</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ajax-update</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Zef, BSc.</title>
		<link>http://zef.me/2005/06/13/zef-bsc/</link>
		<pubDate>Mon, 13 Jun 2005 21:35:07 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2005/06/13/zef-bsc/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Around 16.40 this afternoon I received my bachelor degree in computer science, which means I shall now be called Zef Hemel, BSc., or just Zef, BSc. for short, or I won’t even listen to you.</p>
<p>Here’s a picture of the moment of truth:</p>
<figure><img alt="Zef, BSc." src="https://cdn-images-1.medium.com/max/800/0*an3OBG1IjUh08In7.jpg"></figure><p>Hah!</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>672</wp:post_id>
		<wp:post_date>2005-06-13 23:35:07</wp:post_date>
		<wp:post_date_gmt>2005-06-13 21:35:07</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>zef-bsc</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Turning 22 in Latvia</title>
		<link>http://zef.me/2005/06/22/turning-22-in-latvia/</link>
		<pubDate>Wed, 22 Jun 2005 06:56:59 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2005/06/22/turning-22-in-latvia/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>I turned 22 today. Happy birthday to me. Unlike my usual birthdays, I celebrate it in Latvia today, and how many people (except for the 2.3 million Latvians) can say that they did?</p>
<p>It’s great, but very different out here. When I get home I’ll might write down a story with some of my experiences. Today’s probably the last day that I’ll have access to an internet connection, so I’ll talk to you all when I’m back (I come back late at the 28th of June).</p>
<p>Chau!</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>735</wp:post_id>
		<wp:post_date>2005-06-22 08:56:59</wp:post_date>
		<wp:post_date_gmt>2005-06-22 06:56:59</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>turning-22-in-latvia</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Latvian Tales, Part 2</title>
		<link>http://zef.me/2005/07/03/latvian-tales-part-2/</link>
		<pubDate>Sun, 03 Jul 2005 07:54:41 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2005/07/03/latvian-tales-part-2/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>For a west-european, life in Latvia is extremely cheap. In Latvia you pay with lats, 1 lat is worth a little over a British pound. One time we went to a restaurant to eat dinner, and including drinks it costed 4 lats (for two people), that’s little over 6 euros. In Holland you’d pay around 35–40 euros or so.</p>
<p>Zanete lives with an older lady who has a room in her apartment that she doesn’t use. The room is quite small, there’s just enough space for two closets, a two-person bed, a table and a chair. It’s more like a place to sleep than to live.</p>
<p>At my birthday we didn’t do a lot. We got up late, ate out and then wen to the graduation party of the computer science students who graduated that day (among which Zanete’s best friend’s brother Janis). After a while we left the party together with Zanete’s friend (Maija) and went to play pool. At first they wouldn’t accept my ID, but in the end we got in.</p>
<p>The next day (June 23rd) people in Latvia celebrate midsummer eve (or Jani, as they call it). To understand this you first have to know a little about the Latvian language and their customs. First of all: in Latvian all male nouns end with an ‘s’. All of them, including names. Quite soon I was called Zefs instead of Zef. My full name there would’ve been Zefs Hemels. Zef Hemel really doesn’t make sense to Latvian people. Men there have names like Janis, Kristaps, Jozefs etc.</p>
<p>In Latvia they have name days. If your name, for example, is Jozefs your name day is at March 19th, if it’s Zanete it’s at March 23rd. At your name day people get you presents. June 23rd is the name day of Janis. That’s why they call that day Jani (which I think is plural of Janis). Jani is special because as a present they get a crown made of oak leafs and flowers, called a vainags.</p>
<p>Zanete knows three Jani, so we had to get stuff to make three of these hats/crowns. Together with Annija, her youngest sister we went into the woods around their parent’s place to find the stuff we needed:</p>
<figure><img alt="Getting oak leafs" src="https://cdn-images-1.medium.com/max/800/0*iMj_uGIxxGdu8osi.jpg"></figure><figure><img alt="Picking flowers" src="https://cdn-images-1.medium.com/max/800/0*J0_1Ykm5kth6teNA.jpg"></figure><p>It was quite hot and humid in the forest where we had to get the stuff and there were lots, lots, lots of mosquitos (I HATE mosquitos).</p>
<p>After getting the stuff, the leafs and flowers had to be cut:</p>
<figure><img alt="Cut leafs and flowers" src="https://cdn-images-1.medium.com/max/800/0*5cWGFnglQF5_nqWv.jpg"></figure><p>They were then attached using rope:</p>
<figure><img alt="Attaching" src="https://cdn-images-1.medium.com/max/800/0*EARVyfy5_nz_bAFD.jpg"></figure><figure><img alt="Attaching" src="https://cdn-images-1.medium.com/max/800/0*dNYecB1n8D6Hvo7G.jpg"></figure><p>And the end result:</p>
<figure><img alt="Zanete wearing a vainags" src="https://cdn-images-1.medium.com/max/800/0*JQf5E3wZSlirYGIN.jpg"></figure><p>Maija’s brother Janis organized a place to celebrate Jani this year. The place and surroundings was amazing and really big. Plus the food and drinks were really good.</p>
<figure><img alt="The Jani Place" src="https://cdn-images-1.medium.com/max/800/0*ff2xAOPt2_NmlRZF.jpg"></figure><figure><img alt="The Jani Place" src="https://cdn-images-1.medium.com/max/800/0*AD7kIwDHTLNSukA1.jpg"></figure><p>When you walked the bridge and walked a little further through the forest you ended up at a river with some boats:</p>
<figure><img alt="The Jani Place" src="https://cdn-images-1.medium.com/max/800/0*vwRRXYuxydqUy2Q1.jpg"></figure><p>There was also a sauna building (everything in Latvia is celebrated with a sauna):</p>
<figure><img alt="The Jani Place" src="https://cdn-images-1.medium.com/max/800/0*Slg5_-hRvBPTpG8I.jpg"></figure><figure><img alt="The Jani Place" src="https://cdn-images-1.medium.com/max/800/0*cvX2bG9B5vfj2yx7.jpg"></figure><figure><img alt="The Jani Place" src="https://cdn-images-1.medium.com/max/800/0*EZ_8Bnu2aG7r12rJ.jpg"></figure><figure><img alt="The Jani Place" src="https://cdn-images-1.medium.com/max/800/0*wB6m6Dw3ifG5auEF.jpg"></figure><figure><img alt="The Jani Place" src="https://cdn-images-1.medium.com/max/800/0*O3f36_4pe3ALf-NN.jpg"></figure><p>(Zanete and her friend Maija.)</p>
<p>Celebrating Jani basically comes down to eating and drinking all night and not going to bed. And if you go to bed (like we tried) it’s not unlikely that people enter the room, switch the light on, just to disturb you. The later in the night, the more annoying. The second day is for hangovers and just lying in the sun doing nothing all day.</p>
<p>To be continued tomorrow.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>754</wp:post_id>
		<wp:post_date>2005-07-03 09:54:41</wp:post_date>
		<wp:post_date_gmt>2005-07-03 07:54:41</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>latvian-tales-part-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Back and Off Again</title>
		<link>http://zef.me/2005/07/23/back-and-off-again/</link>
		<pubDate>Sat, 23 Jul 2005 07:39:54 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2005/07/23/back-and-off-again/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>A couple of days ago I got back from the south of the Netherlands, where I and a couple friends were camping. Photos can be found <a href="http://www.flickr.com/photos/zefhemel/sets/618269/" target="_blank">here</a>.</p>
<p>Tomorrow morning I’m traveling to Latvia again. However, this time the travel won’t be as nasty as last time (at least, if everything goes well). I’m leaving around 7.45 in the morning and will arrive there at 21.35 local time the same day. So I don’t have to stay on the airport overnight this time (thank god).</p>
<p>Enjoy your holidays (if you got them).</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>843</wp:post_id>
		<wp:post_date>2005-07-23 09:39:54</wp:post_date>
		<wp:post_date_gmt>2005-07-23 07:39:54</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>back-and-off-again</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>New Camera and Flickr</title>
		<link>http://zef.me/2005/07/08/new-camera-and-flickr/</link>
		<pubDate>Fri, 08 Jul 2005 14:36:53 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2005/07/08/new-camera-and-flickr/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>A week or so ago I bought my first own digital camera. It’s a “HP Photosmart R707”:http://www.shopping.hp.com/webapp/shopping/product_detail.do?storeName=storefronts&amp;landing=storefronts&amp;category=digital_cameras&amp;subcat1=six_mp&amp;catLevel=2&amp;product_code=Q2232A%23ABA and so far I like it very much. It works perfectly with my iBook, which is important because that’s going to be my main computer for the next year in Ireland. This is what it looks like:</p>
<figure><img src="https://cdn-images-1.medium.com/max/800/0*yZiWx8wsesIjbotb.jpg"></figure><p>It comes with two batteries, so if one is empty I can put in the second. There’s also a dock that I can use to recharge both batteries simultaneously if I want. I can just put my camera on there and it can easily import the pictures and movies on my iBook. It works almost seamlessly. Did I say movies? Yes! The camera can record 320x200 MPEG movies for as long as it fits on the secure digital storage card (of which I bought a 512MB one). That means that I can record around 40 minutes long, with sound. Cool huh?</p>
<p>Since I came back from Latvia I have been looking for the best way to publish my pictures online. I tried the iPhoto (the photo application I use on my iBook) export function and that works, but it’s not ideal and quite basic. Yesterday I remember people being so happy with a service called “flickr”:http://www.flickr.com. If you’re Dutch you’re probably smiling now. Flickr in Dutch is pronounced in the same way as flikker, which is a term commonly used for homosexuals. But anyway, back to flickr. Flickr is a free service that allows you to upload as many pictures as you want to the internet for free. It allows you to easily organize them into sets, rotate them and do so other funky things, plus it allows you to tag your photos which make them searchable, also for other flickr users (if you want). The most important drawback of the free flickr is that you’re limited to uploading 20MB of pictures in a month which is not a lot. You can, however, upgrade your account for $24 per year which allows you to upload 2GB of pictures each month, which is enough for me. This “pro” service also allows you to create as much picture sets as you like. I upgraded my account and it’s working great for me.</p>
<p>If you want to publish your pictures online I can recommend having a good look at “flickr”:http://www.flickr.com</p>
<p>And you can find my pictures at “my photo page”:http://www.flickr.com/photos/zefhemel/.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>879</wp:post_id>
		<wp:post_date>2005-07-08 16:36:53</wp:post_date>
		<wp:post_date_gmt>2005-07-08 14:36:53</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>new-camera-and-flickr</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Zef.Nu, NetNewsWire and MarsEdit</title>
		<link>http://zef.me/2005/07/11/zef-nu-netnewswire-and-marsedit/</link>
		<pubDate>Mon, 11 Jul 2005 14:52:38 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2005/07/11/zef-nu-netnewswire-and-marsedit/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Because I’m going to be away from my family and friends a lot in the next year (at least) I’ve set up another weblog (in Dutch) at <a href="http://zef.nu" target="_blank">Zef.Nu</a>. There I’ll post personal stuff, stories and pictures. So if you’re interested and (think you) can read Dutch, feel free to visit Zef.Nu from time to time. I’ve even spent a little time to hack in a simple mailing list feature into my Wordpress installation over there so that you can receive an e-mail whenever I post a new article on Zef.Nu. All I have to do now is pray that no future employer ever gets to see the code.</p>
<p>My PC broke down again. It gives angry sounding beeps when I try to boot it. It has been doing this randomly for the past months. There’s something wrong with some piece of hardware, but I don’t know which, and to be frank, I don’t feel like finding out either. Therefore I’ve been working purely on my iBook the past two days. It’s a good way of getting used to it, because it will be my main computer while in Ireland.</p>
<p>I’ve been playing with some nice Mac software, notably <a href="http://ranchero.com/netnewswire/" target="_blank">NetNewsWire</a> and <a href="http://ranchero.com/marsedit/" target="_blank">MarsEdit</a>. The first one is software that allows you to easily keep track of RSS/Atom feeds of news sites and weblogs. Previously I used <a href="http://www.bloglines.com" target="_blank">BlogLines</a>, but this client-side application is so much more user-friendly. It’s amazing how this application does exactly what you want it to do.</p>
<figure><img alt="NetNewsWire_small.jpg" src="https://cdn-images-1.medium.com/max/800/0*_phQRE-huHDYCoN8.jpg"></figure><p>(Click to enlarge.)</p>
<p>MoonEdit is an application that allows you to add, edit and remove weblogs posts on your weblog, including WordPress (what I use). This is much more convenient than editting in the browser. It even helps a little with inserting HTML and makes it really easy to upload files to your weblog and link to it from a post.</p>
<figure><img alt="MarsEdit_small.jpg" src="https://cdn-images-1.medium.com/max/800/0*n08l8N-2LwHkXJ1H.jpg"></figure><p>(Click to enlarge.)</p>
<p>After playing both those these applications I decided to buy them (you get a discount when you buy them both).</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1051</wp:post_id>
		<wp:post_date>2005-07-11 16:52:38</wp:post_date>
		<wp:post_date_gmt>2005-07-11 14:52:38</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>zef-nu-netnewswire-and-marsedit</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>The Weeks Ahead</title>
		<link>http://zef.me/2005/06/12/the-weeks-ahead/</link>
		<pubDate>Sun, 12 Jun 2005 12:38:27 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2005/06/12/the-weeks-ahead/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Ok, I’ve been quite busy in the past weeks and it seems like the next week is no exception. A lot of exciting stuff is going to happen in the near future.</p>
<p>*Monday:* I’m getting my bachelor degree (I’m going to be BSc. Zef, how cool is that?).<br>*Tuesday:* Birthday of a friend.<br>*Thursday:* End of ISEP(International Software Engineering Project) party (the University course where I’m a head of department).<br>*Friday:* Results of my brother’s final exams are in (so hopefully a graduation party for him too).<br>*Saturday:* I’m getting on the train to Berlin.<br>*Sunday:* I’m getting on the plane from Berlin to Latvia (check-in at 5 a.m.) to meet a friend that I’ve never met before in real life. I’ll stay with her for over a week (and during my birthday) and will return on the 28th of June.</p>
<p>It’s going to be an eventful couple of weeks :)</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1118</wp:post_id>
		<wp:post_date>2005-06-12 14:38:27</wp:post_date>
		<wp:post_date_gmt>2005-06-12 12:38:27</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-weeks-ahead</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>The New I-Mac</title>
		<link>http://zef.me/2005/06/07/the-new-i-mac/</link>
		<pubDate>Tue, 07 Jun 2005 08:00:49 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2005/06/07/the-new-i-mac/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>People following computer-related news in the past few days probably already knows about this, but Apple has announced to switch from IBM’s PowerPC processors to Intel x86 processors. It has been rumoured to happen for years and now it happened. Major reason is that IBM doesn’t meet Apple’s expectations in processor speed and energy usage. We’ve been waiting for a PowerBook G5 for how long now, and it’s not going to happen. Apple will switch to Intel processors and probably will use similar processors like used in Centrino laptops for its iBook and Powerbooks (but this is my guess).</p>
<p>Except Mac fanatics screaming that this is like hell freezing over; that Apple should never use something that’s even remotely related to the Wintel (combination of Windows and Intel) platform, what does this mean? Well, PowerPC processors use a different instruction-set than Intel processors. So at least all Mac software has to be recompiled for Intel processors. Apple will also supply the new I-Macs (Intel Macs, get it?) with a kind of emulator/translator thingy that allows you to run “old-style” PowerPC Mac software on your Intel Mac. This is slower than native Intel Mac software though. Apple made compilers available that can compile software into binaries that run on both the PowerPC and Intel Macs.</p>
<p>Apple will launch the new Intel-based Macs next year. Personally I would think that they won’t sell many more Macs until then, nobody wants to buy hardware that is soon to be replaced by newer radically different hardware.</p>
<p>You can read a “summary of what was said at the WWDC conference here”:http://www4.macnn.com/macnn/wwdc/05/ or just “watch it here”:http://www.apple.com/quicktime/qtv/wwdc05/.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1234</wp:post_id>
		<wp:post_date>2005-06-07 10:00:49</wp:post_date>
		<wp:post_date_gmt>2005-06-07 08:00:49</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-new-i-mac</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>London Attacks</title>
		<link>http://zef.me/2005/07/07/london-attacks/</link>
		<pubDate>Thu, 07 Jul 2005 11:58:00 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2005/07/07/london-attacks/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>You undoubtly heard all about this, but London has been attacked by terrorists. There are dozens of injuries. As of now 2 deaths confirmed, but at the very least 10 deaths at Kings cross. I recommed watching sites like “BBC News”:http://news.bbc.co.uk/ and “CNN”:http://www.cnn.com for the next hours.</p>
<p>It’s strange to see places where I’ve been many times blown up, with people running around. I had never been to New York or Madrid, having it happen in London (although it seems not as bad as in New York and Madrid) feels so much closer.</p>
<p>Why do these things have to happen?</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1238</wp:post_id>
		<wp:post_date>2005-07-07 13:58:00</wp:post_date>
		<wp:post_date_gmt>2005-07-07 11:58:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>london-attacks</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Interview With Me</title>
		<link>http://zef.me/2005/06/15/interview-with-me/</link>
		<pubDate>Wed, 15 Jun 2005 20:33:40 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2005/06/15/interview-with-me/</guid>
		<description></description>
		<content:encoded><![CDATA[
<p>The Admin Zone has just put up an interview with me. You can “read it here”:http://www.theadminzone.com/forums/showthread.php?t=10949.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1296</wp:post_id>
		<wp:post_date>2005-06-15 22:33:40</wp:post_date>
		<wp:post_date_gmt>2005-06-15 20:33:40</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>interview-with-me</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>The Beauty of Progress</title>
		<link>http://zef.me/2005/06/04/the-beauty-of-progress/</link>
		<pubDate>Sat, 04 Jun 2005 08:47:24 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2005/06/04/the-beauty-of-progress/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>As you may know, I’m doing a research internship at the software engineering department at our university. I’m doing conceptual design most of the time, but I spent the past few days writing up tutorial-like material for “Archium”:http://www.archium.net. Archium is the architecture/programming language that the people here are working on “as I described a while ago”:http://www.zefhemel.com/archives/2005/04/25/research-internship.</p>
<p>Yesterday I started working on something that grew into a simple “Archium Tutorial”:http://wiki.zefhemel.com/index.php/Archium. For this tutorial I wrote a very simple application that creates two component entities (a client and a server) of which the server exposes one method: getVersion(). The only thing the client does is call that method and print the result. After a while I got it to work. The current implementation of the Archium compiler first compiles to “ArchJava”:http://www.archjava.org code. ArchJava then compiles ArchJava to Java code and the Java compiler compiles it to Java code. All that’s left to do then is to let the Java virtual machine run it and compile it to native machine code on the fly. Yah, it’s not really efficient, but it works (most of the time).</p>
<p>The result? A “93-line piece of archium code”:http://www.zefhemel.com/upload/Version.archium that practically prints just one line:</p>
<pre>Server version: 1.0</pre>
<p>That’s the beauty of progress. I can’t wait until this stuff is mainstream in about ten years.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1412</wp:post_id>
		<wp:post_date>2005-06-04 10:47:24</wp:post_date>
		<wp:post_date_gmt>2005-06-04 08:47:24</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-beauty-of-progress</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Why Smart People Defend Bad Ideas</title>
		<link>http://zef.me/2005/05/25/why-smart-people-defend-bad-ideas/</link>
		<pubDate>Wed, 25 May 2005 08:09:33 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2005/05/25/why-smart-people-defend-bad-ideas/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Scott Berkun is a project management consultant and writer. He previously worked at Microsoft as a lead program manager. He recently published a book called “The Art of Project Management”:http://www.amazon.com/exec/obidos/tg/detail/-/0596007868/104-7397168-1549531?v=glance.</p>
<p>Beside writing books Scott also publishes essays. Last month’s essay was entitled “Why Smart People Defend Bad Ideas”:http://www.scottberkun.com/essays/essay40.htm and it’s a good read. I particularly liked this passage:</p>
<blockquote>Smart people, or at least those whose brains have good first gears, use their speed in thought to overpower others. They’ll jump between assumptions quickly, throwing out jargon, bits of logic, or rules of thumb at a rate of fire fast enough to cause most people to become rattled, and give in. When that doesn’t work, the arrogant or the pompous will throw in some belittlement and use whatever snide or manipulative tactics they have at their disposal to further discourage you from dissecting their ideas.</blockquote>
<p>This sounds so familiar. I’ve talked to people like that. Their convincing strategy consists of firing relevant and irrelevant facts at you at an unbelievable pace. They continue doing this until you give up and you say “ok, you’re probably right.”</p>
<blockquote>So your best defense starts by breaking an argument down into pieces. When they say “it’s obvious we need to execute plan A now.” You say, “hold on. You’re way ahead of me. For me to follow I need to break this down into pieces.” And without waiting for permission, you should go ahead and do so.</blockquote>
<blockquote>First, nothing is obvious. If it were obvious there would be no need to say so. So your first piece is to establish what isn’t so obvious. What are the assumptions the other guy is glossing over that are worth spending time on? There may be 3 or 4 different valid assumptions that need to be discussed one at a time before any kind of decision can be considered. Take each on in turn, and lay out the basic questions: what problem are we trying to solve? What alternatives to solving it are there? What are the tradeoffs in each alternative? By breaking it down and asking questions you expose more thinking to light, make it possible for others to ask questions, and make it more difficult for anyone to defend a bad idea.</blockquote>
<p>“Why Smart People Defend Bad Ideas”:http://www.scottberkun.com/essays/essay40.htm. Recommended reading!</p>
<p>Oh, at the moment of this writing his website suddenly went offline, you can still read the essay through “Google’s cache”:http://216.239.59.104/search?q=cache%3Ahttp%3A%2F%2Fwww.scottberkun.com%2Fessays%2Fessay40.htm&amp;start=0&amp;start=0&amp;ie=utf-8&amp;oe=utf-8&amp;client=firefox-a&amp;rls=org.mozilla:en-US:official.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1415</wp:post_id>
		<wp:post_date>2005-05-25 10:09:33</wp:post_date>
		<wp:post_date_gmt>2005-05-25 08:09:33</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>why-smart-people-defend-bad-ideas</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>I Got In!</title>
		<link>http://zef.me/2005/07/01/i-got-in/</link>
		<pubDate>Fri, 01 Jul 2005 20:07:54 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2005/07/01/i-got-in/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>I received a letter telling me that I got accepted to Trinity College, Dublin (Ireland)! I’ll be doing the Networks and Distributed Systems master programme there. For those who have no idea what I’m talking about. I wrote an “entry about this almost a year ago”:http://www.zefhemel.com/archives/2004/08/20/trinity-college.</p>
<p>I’m so happy, you cannot believe!</p>
<p>PS: Due to a server migration, zefhemel.com was down for a couple of hours and lost some more recent data (mainly comments). Sorry for the incovenience.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1549</wp:post_id>
		<wp:post_date>2005-07-01 22:07:54</wp:post_date>
		<wp:post_date_gmt>2005-07-01 20:07:54</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>i-got-in</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Latvian Tales, Part I</title>
		<link>http://zef.me/2005/07/02/latvian-tales-part-i/</link>
		<pubDate>Sat, 02 Jul 2005 10:25:08 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2005/07/02/latvian-tales-part-i/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>It’s June 18th when I leave Groningen to go to visit a friend in Latvia, a country where I have never been. Because the cheapest way to get there is first to travel to Berlin (Germany) and then fly from Berlin to Riga (Latvia), I take the train to Berlin first. All in all this takes about 6–7 hours to get there. I end up at Berlin Zoologische Garten (Berlin Zoo) station. From there I still have to get to Berlin Schönefeld, where the airport is.</p>
<p>In order to get there, however, I first have to figure out how the German railway works within Berlin. I go to a machine that says Fahrkarten (train tickets) and type in my destination, class, number of people etc. It plans the route for me. But there’s no way to order the ticket, just to print out the route… I try again, still nothing. I go downstairs to the information desk where a friendly German woman tells me that I have to buy the ticket at the machine at the track where my train leaves. I walk upstairs again with my big suitcase (which, thank god, has wheels) to the track. There I find the machine. I try to change its language to English. It doesn’t respond. Then I find a row of buttons underneath the screen. After pressing a couple the machine asks me if I want A, AB, or ABC… What’s that supposed to be? I have no clue. I ask a Deutche Bahn (German railway) employee that’s standing there. She asks me where I want to go. “To Berlin-Schönefeld.” I say. “Oh, you just need AB then.” she hits a couple of buttons and the machine asks me to pay 2 euros. I pay and get my ticket.</p>
<p>Around 22.45 I arrive at the airport. My plane leaves at 7.00, I can check-in at 5.00. Yes, I have to stay overnight at the airport, joy! Apparantly EasyJet (the plane company I’m flying with) has a whole dedicated hall there with just EasyJet check-in stuff. I go sit down on a bench. Nearby there’s a group of Russian people (I will later conclude, because one is called Ivan and another Dimitri) talking really loud. I lay down and try to sleep a little, it’s not very comfortable on the little bench. On the bench next to me there’s a girl that apparantly has more experience in sleeping at airports, she brought a blanket-like thingy and a kind of pillow. Around 3.00 I stop trying and sit up, listening to my iPod. A few moments later two German guys go and sit next to me. I suspect they’re father and son. The son sits next to me and is dozing off all the time. Personally I have no problems with people falling asleep. I do it all the time. What I DO have a problem with is strange people falling asleep on top of me. Like, on my shoulder or lap… And that’s what the guy did, he fell asleep on my shoulder all the time. The first time I pushed him away, but it didn’t help. A minute later he fell my way again. Why he didn’t fall asleep in his dad’s arms? Don’t ask me. After one-and-a-half hours of Germans-falling-asleep-on-my-shoulder horror the check-in opens at 4.30. Thank god.</p>
<p>After check-in, which can be done using a machine in Schönefeld which prints you a boarding pass and labels for your suitcases, I enter my luggage and then proceed to customs. At customer I get a full body search (spread legs and arms). The flight to Riga went fine, apart from a Latvian girl (most Latvians hardly speak any English at all and therefore can’t read the tags in an air plane) trying to enter the cockpit, while wanting to go to the lavatory.</p>
<p>After waiting for 10 minutes for my luggage while at Riga Airport, I walk out where my friend (Zanete) is waiting for me. “Let’s go, I’m feeling like I’ve been waiting for the dentist.” she says. We walk to the bus right away. At the busstation we have to buy a ticket. In Latvia people buy bus tickets with numbers on them, the earlier you buy, the earlier you’re allowed to enter the bus (so you can pick the better seat). A bus ticket looks more like a receipt you get a store, they’re not nearly as fancy as the ones in Holland. The bus stops somewhere in Riga. We have to walk for about 25 minutes through Riga to go to the bus station where the bus to Valmiera (where Zanete lives) leaves.</p>
<p>The ride to Valmiera takes around 1.5 hours. Luckily it’s a good bus, because the roads are pretty bad in Latvia. Lots of holes and lots, lots of patching. We drop some stuff at Zanete’s room in Valmiera and then go to her parents’ place. By the time we get there I haven’t slept for about 27 hours and I feel like crap. Zanete’s parents’ house is full of cousins talking in Latvian. I have no idea what they’re saying. I take a shower and then go to bed. “How long do you want to sleep, 3 hours?” Zanete asks. That sounds fine with me. 5 hours later I wake up. It’s around 21.00. She didn’t want to wake me. We eat something and then watch Finding Nemo with her youngest sister.</p>
<p>The house is quite big, but also very impractical. It consists of two buildings. One has bedrooms and a small living room downstairs, the other has a very big living room, bathroom and kitchen. If you get up in the morning you have to leave the one building and enter the other to wash yourself.</p>
<figure><img alt="Zanete and Annija" src="https://cdn-images-1.medium.com/max/800/0*IvXZx_zW7EJMpGko.jpg"></figure><p>(Zanete and her youngest sister Annija)</p>
<figure><img alt="The kitchen" src="https://cdn-images-1.medium.com/max/800/0*zOzcd_DJjW0YHyHW.jpg"></figure><p>(The kitchen)</p>
<figure><img alt="The living room" src="https://cdn-images-1.medium.com/max/800/0*MzHqsJpp3bQKclUF.jpg"></figure><p>(The living room)</p>
<p>After watching Finding Nemo and playing some card games we go to bed again. The next morning we drive back to Valmiera and visit her workplace. Zanete is a computer science student who’s currently doing an internship at a little 2-person web development company. In the “office” (apartment of one of the owners) there’s no more room for me to sit and work, so we go to the Valmiera University’s library to work there. We eat breakfast and lunch in a restaurant nearby. That night we eat very bad pizza in a dodgy place near the bus station.</p>
<p>To be continued tomorrow.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1666</wp:post_id>
		<wp:post_date>2005-07-02 12:25:08</wp:post_date>
		<wp:post_date_gmt>2005-07-02 10:25:08</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>latvian-tales-part-i</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>I’m Off</title>
		<link>http://zef.me/2005/06/18/im-off/</link>
		<pubDate>Sat, 18 Jun 2005 07:54:38 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2005/06/18/im-off/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>In a couple of hours I’m off to Latvia. I’ll first go to Berlin by train (Groningen — Zwolle — Deventer — … — Berlin). And then tomorrow morning at 7:00 in the morning I’ll get on the plane to Riga where I’ll arive at 9:40 local time. Exciting!</p>
<p>Also, my brother got the results back from his final exams yesterday and he passed! He’s done with high-school/secondary school/middelbare school. Congratulations Wouter! :)</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1697</wp:post_id>
		<wp:post_date>2005-06-18 09:54:38</wp:post_date>
		<wp:post_date_gmt>2005-06-18 07:54:38</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>im-off</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Latvian Tales, Part 3</title>
		<link>http://zef.me/2005/07/04/latvian-tales-part-3/</link>
		<pubDate>Mon, 04 Jul 2005 07:27:24 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2005/07/04/latvian-tales-part-3/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>At saturday it’s time for me to see some Latvian sights. We go to a place that, if I remember correctly, is called Segunda. There they have caves with very old inscriptions:</p>
<figure><img alt="Cave" src="https://cdn-images-1.medium.com/max/800/0*ub1RwcajbgOniJY_.jpg"></figure><figure><img alt="Cave" src="https://cdn-images-1.medium.com/max/800/0*BowctijavQ_TtXKf.jpg"></figure><figure><img alt="Cave" src="https://cdn-images-1.medium.com/max/800/0*uzcBx3DXti_rMStT.jpg"></figure><p>Nearby we also walked around through the beautiful nature and forest. It was beautiful, but once again also hot and humid. Which means… mosquitos, mosquitos and above all: mosquitos. Aaargh. With bloody legs and arms, because of all the mosquitos that I killed, we left.</p>
<p>The next day we’re having brunch at 12.00 with Zanete’s friend Maija. Maija is having a bad day that day. While walking to the restaurant a car splashes through some water on the road. Maija’s the main victim. In the restaurant Maija only gets a cup of coffee because she already ate (she forgot all about the fact that we’d eat together). She walks to our table, sees an interesting-looking dog and wham! there goes her cup of coffee. After dinner Maija has to look something up on the internet. We decide to drive to her brother’s work where there’s a wireless access point that we can use. When we get there my and Zanete’s wireless internet work fine, but Maija’s doesn’t. Then we drive to the bus station to let Maija buy a ticket for the bus to Riga (where she lives, studies and works). As soon as she queues up, there’s a technical problem and we have to wait. After around 10 minutes I suggest to her to give the rest of the people in the line a break by getting out of the line. So that the technical problem gets resolved. She laughs, but doesn’t leave the line. Another 10 minutes later the problem is fixed and she can get her ticket.</p>
<p>Tuesday morning we get up at 5.00. Today I’m getting on the plane back to Holland. The bus to Riga leaves at 6.00. When we arrive in Riga at around 7.30, we have to walk about half an hour to the bus station to the airport. We get there at around 8.02, the bus just left. This shouldn’t be a problem, as Maija convinced Zanete that there are multiple busses leaving each hour. Not so. The next one leaves at 9.20, and I have to be checked-in before 9.35, considering that the ride to the airport takes approximately 30 minutes, this is not an option. What now? Zanete calls some people who tell her that at the place where we arrived in Riga there’s also a bus leaving to the airport. That’s just great. We walk/run back all the way, which isn’t a lot of fun with a big suitcase, even though it has wheels. When we arrive there we wait for bus 22. When the bus arrive and check if it goes to the airport, the driver tells us that we’re at the wrong side of the road… Just in time for the last bus to the airport at 8.30 we get to the other side of the road. We arrive at the airport at 9.10. Thank god there’s no long line and I can check in quickly.</p>
<p>The flight back to Berlin went fine, except for the landing which was sort-of roller-coaster like. When I get to the train station I have to get back to the Zoologische garten station. But this time I know how to buy the ticket! I think… I immediately go to the track where the train is leaving, because that’s where the ticket machine is supposed to be. No such machine. I go downstairs to find a machine there. I find one, enter where I want to go, it asks me to pay. It accepts none of my cards. I ask a Deutche Bahn guy who tells me that I can buy my ticket at another track. When I go there, there’s a line. Mainly foreign people like me who have no idea how the railway system works. When it’s finally my turn the sun blinds the screen. I can’t see anything. An impatient german woman behind me asks me where I want to go, presses a couple of buttons and after paying, the ticket comes out. Great.</p>
<p>I arrive at the station around 12.00. At 12.15 the train to Holland leaves, however because I wasn’t sure that I would make it in time, I reserverd seats for the one after… the one that leaves at 16.45. So I have to wait. And I can tell you, 6.5 hours is a VERY long time. Finally, at around 21.30 I’m back in Holland where my dad, who happened to be in the neighbourhood comes to pick me up.</p>
<p>Although the stories may not particularly show it (because I’m only telling what I want the world to know ;)) I’ve had a great time in Latvia and I’m going there again from July 24th to August 4th. Looking forward to it already. You can find the “rest of the pictures I took while in Latvia here”:http://www.zefhemel.com/~zef/Latvia/Latvia.html.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1709</wp:post_id>
		<wp:post_date>2005-07-04 09:27:24</wp:post_date>
		<wp:post_date_gmt>2005-07-04 07:27:24</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>latvian-tales-part-3</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>LINQ Goes Beyond Databases</title>
		<link>http://zef.me/2005/09/23/linq-goes-beyond-databases/</link>
		<pubDate>Fri, 23 Sep 2005 14:50:04 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2005/09/23/linq-goes-beyond-databases/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>I gather that some people got the impression that LINQ is just reinventing SQL, while actually it goes beyond normal SQL. It’s not just for database access, actually that’s just one application of it: <a href="http://blogs.msdn.com/dinesh.kulkarni/archive/2005/09/13/465089.aspx" target="_blank">DLinq</a>. Well, of course this depends on how you define a database. Because, let’s face it, LINQ is just a way to query data sources. Whether that’s a traditional database (SQL Server, MySQL, Oracle), an in-memory data structure or even an XML document (<a href="http://www.research.microsoft.com/~emeijer/Papers/XLinq%20XML%20Programming%20Refactored%20%28The%20Return%20Of%20The%20Monoids%29.htm" target="_blank">XLinq</a> ladies and gentlemen).</p>
<p>LINQ brings the declarative expressiveness of SQL to any data source. If you got a big array with customers in memory, you sometimes just want a sorted list of their names. In SQL that’s really easy to write, but since you got this data in an array, it becomes harder to extract this data. It’s doable, but isn’t simply writing something like from customer in customers orderby customer.name select name and be done with it, more convenient? Don’t start posting examples of Python or Ruby code in which this can be written shorter. Just trust me that there are many occasions where the SQL-like LINQ is a convenient and readable solution.</p>
<p><a href="http://www.research.microsoft.com/~emeijer/Papers/XLinq%20XML%20Programming%20Refactored%20%28The%20Return%20Of%20The%20Monoids%29.htm" target="_blank">XLinq</a> is actually more than a way to access XML data easily. It’s a whole XML API that greatly simplifies the previous one. It offers a much simpler way to build XML trees for example. This is especially true if you use VB9, in which you can do this:</p>
<pre>Dim BillTo = &lt;billTo country="US"&gt;<br>      &lt;name&gt;Robert Smith&lt;/name&gt;<br>      &lt;street&gt;8 Oak Avenue&lt;/street&gt;<br>      &lt;city&gt;Old Town&lt;/city&gt;<br>      &lt;state&gt;PA&lt;/state&gt;<br>      &lt;zip&gt;95819&lt;/zip&gt;<br>   &lt;/billTo&gt;</pre>
<p>But even if LINQ was just language-integrated SQL, that would still be a good thing. This would allow for syntax checking of SQL queries at compile time, a nice thing to have.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>231</wp:post_id>
		<wp:post_date>2005-09-23 16:50:04</wp:post_date>
		<wp:post_date_gmt>2005-09-23 14:50:04</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>linq-goes-beyond-databases</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>SPTP: Decentralized Single Sign-On</title>
		<link>http://zef.me/2005/08/13/sptp-decentralized-single-sign-on/</link>
		<pubDate>Sat, 13 Aug 2005 14:47:32 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2005/08/13/sptp-decentralized-single-sign-on/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>One thing that has been bugging me, and many others with me, is the need to sign up for every website/service/forum separately. Why not have one super username/password combination that works everywhere and be done with it?</p>
<p>Microsoft has attempted to solve this problem with <a href="http://www.passport.com" target="_blank">Passport</a>, but it failed. People don’t trust Microsoft with their personal information. Sun and others have started <a href="http://www.projectliberty.org/" target="_blank">Project Liberty</a>, but not much has followed from it, for as far as I can see. And the end result will undoubtly be a very complicated API.</p>
<p>Still, the problem bugs me. People don’t trust one company with their personal information. Then I thought, OK, so maybe decentralizing is a solution. People leave their personal information with companies and websites already. Apparently, people trust those websites and companies. It reminded me of Jabber. Jabber is a decentralized instant messaging service. There is no central server where all the contact lists and user data is stored, each user picks or runs its own server where his or her data is stored. For example, my jabber id is zef@12jabber.com. What this means is that I have an account at the 12jabber.com Jabber server, and my username there is ‘zef’. If somebody wants to send me a message, his or her jabber client contacts the 12jabber.com server and tells it that it has a message for user ‘zef’. This way you don’t need a central server. The user id tells you where to send and get information.</p>
<p>Ok, so how can this concept be applied to, say, websites that use an authentication service, like forums? People hate to sign up for each site individually, it would be great if they can easily transfer their profile from one website to the other. I came up with a very simple solution, very similar to what Jabber does. I dubbed it SPTP for now, the Simple Profile Transfer Protocol. This is how it works:</p>
<p>Every application (for example forums) implements a SPTP server. It is a simple script that accepts a username and password and returns the profile data if the username and password match. The software also includes a SPTP client. When somebody attempts to login with a username that does not exist, the format of the username is checked. If it looks like this: someuser@someserver.com, or even: someuser@someserver.com/forums, the software concludes that this is probably a SPTP user. It contacts someserver.com to retrieve the profile data and uses this data to register the user locally on the website. After registration is completed (ideally the user doesn’t even notice this is happening), the user is logged in.</p>
<p>The protocol that I chose for SPTP is very simple and not amazingly secure. On the other hand, profile data is not very secret, so I don’t expect this to be a problem. It is a good idea, however, to allow SPTP login attempts for each user only once very, say, 20 seconds, to avoid people trying to brute force their way in.</p>
<p>The implementation of SPTP is extremely simple. At the end of this post I’ll include a .zip file with a PHP SPTP library that basically has two functions: sptp_exportprofile (to export an associative array of profile data to SPTP XML) and sptp_getprofile (which takes a userid and password and retrieves the profile data for you). All you have to do to use it is implement the automatic registration and server part. I implemented all this in a couple of hours.</p>
<p>SPTP authentication happens as follows: Let’s assume the user Zef@zefhemel.com has attempted to login to a forum where no such user exists. First the file <a href="http://www.zefhemel.com/sptp_auth_path.txt" target="_blank">http://www.zefhemel.com/sptp_auth_path.txt</a> is requested by the SPTP library. This file contains the path to the authentication service, for example /sptp/auth.php. Then a POST request is done to <a href="http://www.zefhemel.com/sptp/auth.php" target="_blank">http://www.zefhemel.com/sptp/auth.php</a> with two POST fields: username and password. The auth.php script checks the username and the password and, if they are correct, returns a simple XML file which looks roughly like this:</p>
<pre>&lt;sptp version="1.0"&gt;<br>   &lt;nickname&gt;Zef&lt;/nickname&gt;<br>   &lt;avatarurl&gt;http://www.fmf.nl/~zef/icon.php?icon.gif&lt;/avatarurl&gt;<br>   ...<br>&lt;/sptp&gt;</pre>
<p>The forum then uses this data to register the user locally and logs the user in. That’s it.</p>
<p>One problem remains: which profile fields are there and what are they called? Different kinds of services (and even similar ones) have different profile fields and I think they should be free to add any field they like in SPTP. Fields that the software does not recognize will just be ignored. I think there should be a set of standardized field names, however. Which those would be is open for discussion, some that I can come up with right now:<br>* nickname<br>* realname<br>* avatarurl<br>* icq<br>* msn<br>* aim<br>* jabber<br>* signature</p>
<p>I created a very simple SPTP service and client for demonstration purposes, which you can <a href="http://www.zefhemel.com/sptp" target="_blank">see and test here</a>. You can download this example and the ad-hoc SPTP implementation I just created <a href="http://www.zefhemel.com/upload/sptp.zip" target="_blank">here</a>.</p>
<p>It’s all not finished. At this stage I’m mainly interested in input from others. So let me know your thoughts and concerns.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>303</wp:post_id>
		<wp:post_date>2005-08-13 16:47:32</wp:post_date>
		<wp:post_date_gmt>2005-08-13 14:47:32</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>sptp-decentralized-single-sign-on</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Beyond Java</title>
		<link>http://zef.me/2005/12/21/beyond-java/</link>
		<pubDate>Wed, 21 Dec 2005 08:55:20 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2005/12/21/beyond-java/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Lately, the most talked about book in the programming language related blogosphere seems to be “Beyond Java”:http://www.oreilly.com/catalog/beyondjava/, a book written by Bruce Tate, published by O’Reilly. If I knew I’d have time to read it in the next couple of months I’d buy it, but I know I won’t.</p>
<p>Luckily, as I mentioned, there’s this thing called blogs which at least give me the gist of the book. Let’s first have a look at how O’Reilly describes the book:</p>
<blockquote>In Beyond Java, Bruce Tate, author of the Jolt Award-winning Better, Faster, Lighter Java, chronicles the rise of the most successful language of all time, and then lays out, in painstaking detail, the compromises the founders had to make to establish success. If you are agree with the book’s premise — that Java’s reign is coming to an end — then this book will help you start to build your skills accordingly. Beyond Java will teach you what a new language needs to succeed, so when things do change, you’ll be more prepared. And even if you think Java is here to stay, you can use the best techniques from frameworks introduced in this book to improve what you’re doing in Java today.</blockquote>
<p>Ok, first thing, this book is not really about Java in the sense in that you’ll learn neat Java tricks or to learn the language. It’s more about what’s “not great”:http://www.zefhemel.com/archives/2004/08/16/why-java-sucks “about the language”:http://www.zefhemel.com/archives/2004/09/03/a-better-java and particularly, it seems, why Ruby is much better.</p>
<p>Yes, Ruby seems to be the answer, at least that’s what all the blog posts I read seem to focus on. Why not Python? Well… I don’t know, probably because it’s lacking the killer app which Ruby does have: “Ruby on Rails”:http://www.rubyonrails.org. If you haven’t started learning or using RoR yet by the way, start now, all the cool kids do it. Ok, I’m sounding too cynical now, but actually I’m pretty happy RoR is taking off. Ruby is so much better than PHP and RoR truly is an amazing web framework.</p>
<p>But I’m getting off track. As I haven’t read Beyond Java myself, the purpose of this post was to link to some opinionated people that have, such as “Bruce Eckel”:http://www.artima.com/forums/flat.jsp?forum=106&amp;thread=141312:</p>
<blockquote>Where did the hyper-enthusiasts go? To Ruby, apparently. This is chronicled in Bruce Tate’s book “Beyond Java,” which should probably be titled “Why Ruby is Better than Java.” The book is roughly edited; you’ll find yourself thinking “haven’t I read this paragraph before?” in any number of places, but that’s a disappointing experience I’ve had with several O’Reilly books of late. In many places he plays fast and loose, and almost at the end of the book he declares that he doesn’t have time to learn these other languages in any depth — although he has no trouble condemning the same languages in his rush to Ruby. Such a statement should be in the first paragraph of the book: “I’ve decided that I love Ruby, so I will condemn other languages without fully understanding them” (in one sentence repeated in a number of places in the book, for example, he declares that C# is no more than a clone of Java). I’ve been on the rollercoaster of language-love myself in the past and have made similar mistakes; one error in particular was dismissing Python’s scoping-by-indentation when I first saw it (months later realizing that we always indicate scoping by indentation anyway, even when we have curly braces available). Now I try to investigate and support my ideas about these things more thoroughly. It takes a lot more time and effort to do so, but it also leaves a more lasting impression.</blockquote>
<p>Just incidentally, in this post Bruce links to an “interesting page where somebody comments on Ruby’s Array API”:http://www.cafeaulait.org/oldnews/news2005December8.html, which is worth a read.</p>
<p>And “David Heinemeier Hansson”:http://www.loudthinking.com/arc/000551.html (the driving force behind RoR) replies:</p>
<blockquote>I’m losing track of the ill-conceived comparisons, but I do know what’s astoundingly clear: Bruce Eckel doesn’t like Ruby, he doesn’t like the attention its getting, and he doesn’t like people such as Bruce Tate fueling that attention.</blockquote>
<blockquote>No beef, that’s cool. But why not just say it like that? You could even have presented yourself as the polar opposite to the so-called hyper-enthusiasts: A hyper-detractor! The label comes complete with a cape, an evil smirk, and long tirades about how the other side is no match for your master plan.</blockquote>
<p>What I think? I still don’t know. I’ve been working with Python for a while and a while ago started using Java again. I must say I love how Eclipse seems to understand my code, helps me with code completion, adding try/catch blocks and refactoring. I hate the idea to lose all that in a language like Ruby or Python. But it is pretty clear that in a language like Ruby you can achieve more with a lot less code. So, yeah, I’ll keep my spectator seat for now.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>412</wp:post_id>
		<wp:post_date>2005-12-21 09:55:20</wp:post_date>
		<wp:post_date_gmt>2005-12-21 08:55:20</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>beyond-java</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Politics to Go</title>
		<link>http://zef.me/2005/08/11/politics-to-go/</link>
		<pubDate>Thu, 11 Aug 2005 12:45:35 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2005/08/11/politics-to-go/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>In about a month the first book that I ever contributed to is coming out. Its full title is “The Politics to Go Handbook: A Guide to Using Mobile Technology in Politics”. It will be launched on September 13th and will be available from Amazon and free download from the <a href="http://www.ipdi.org/politicstogo/" target="_blank">IPDI website</a>.</p>
<p>What is this book about? From the website:</p>
<blockquote>[..] the publication will introduce some of the latest mobile technologies, examine their current uses and political successes, consider future possibilities and challenges and offer simple how-to guides for implementing these new technologies into your next campaign.</blockquote>
<p>What you’re probably wondering is, is what the hell I have to do with politics. And that’s a fair question, I don’t know a lot about politics, the reason that IPDI (Institute for Politics, Democracy and the Internet) has asked me for a contribution is that I wrote a <a href="http://www.zefhemel.com/archives/2004/10/11/how-to-create-your-own-podcasting-show" target="_blank">how-to on podcasting</a>. Podcasting is part of this book. The book will include an extended edited how-to written by me. They also interviewed me about the applications of podcasting in politics, I’m not sure if they’ll just plainly include the interview or will edit it into a section.</p>
<p>Here’s the official media release:</p>
<blockquote>For Immediate Release, August 8, 2005<br>For more information: Kathie Legg<br>Phone: 202–994–1003</blockquote>
<blockquote>ZEF HEMEL TO CONTRIBUTE TO THE POLITICS TO GO HANDBOOK, NEW PUBLICATION ON MOBILE TECHNOLOGY AND POLITICS AT GW’S INSTITUTE FOR POLITICS, DEMOCRACY &amp; THE INTERNET</blockquote>
<blockquote>Washington, Aug. 10, 2005 — Zef Hemel, founder of ZefHemel.com, will author a section in Politics to Go, a handbook on the political uses of mobile technology that anthologizes over 50 of today’s top names in technology and politics. The Politics to Go Handbook is published by the Institute for Politics, Democracy &amp; the Internet (IPDI) at The George Washington University’s Graduate School of Political Management.</blockquote>
<blockquote>“The Politics to Go Handbook will serve as a manual for using mobile technology in the political realm,” said Carol Darr, Director of the Institute, “not only for candidates, but for issue advocacy groups, nonprofits, civic groups, political consultants, lobbyists, local governments and citizen activists.”</blockquote>
<blockquote>It also draws on the experience and expertise of experts from around the globe to describe the mobile political audience, predict how mobile tech will be used in future elections and discuss any roadblocks that may occur.</blockquote>
<blockquote>The publication will be released at an event hosted by IPDI and sponsored by Wired magazine on September 13, titled Politics to Go: How Mobile Technology Empowers Just-in-Time Politics. The event will introduce some of the latest mobile technology techniques, examine the current uses and political successes of mobile technology and discuss future possibilities and challenges. It will feature a gadget lab and sponsor display area. Two panels of visionaries, analysts and practical implementers will discuss these issues and facilitate an open question-and-answer dialogue with the audience.</blockquote>
<blockquote>The Politics to Go report release, panel discussion and hands-on event will run from 8:30 a.m. to 1 p.m. on Tuesday, September 13, 2005. Breakfast will be served. The event is free and open to the public.</blockquote>
<blockquote>For more information or to register for the event, please visit <a href="http://www.ipdi.org/politicstogo" target="_blank">www.ipdi.org/politicstogo</a>. For more information about IPDI, please visit <a href="http://www.ipdi.org" target="_blank">www.ipdi.org</a>.</blockquote>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>421</wp:post_id>
		<wp:post_date>2005-08-11 14:45:35</wp:post_date>
		<wp:post_date_gmt>2005-08-11 12:45:35</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>politics-to-go</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Off to Dublin Soon</title>
		<link>http://zef.me/2005/09/01/off-to-dublin-soon/</link>
		<pubDate>Thu, 01 Sep 2005 15:25:41 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2005/09/01/off-to-dublin-soon/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Just a couple more days and I’ll leave to study and live in Dublin, Ireland for a year. My airplane leaves at 7 p.m. next Tuesday evening (September 6th). I’m looking forward to it.</p>
<p>I also managed to get a room there, which is quite a relief. It seems to be a nice room quite close to the center of the city. And it’s fairly affordable in Dublin terms (Dublin is the most expensive city in Europe).</p>
<p>My studies at Trinity College start at October 10th, and there’s a fresher’s week before that. But I’ll have a couple of weeks to get to know Dublin, a city where I’ve never been before.</p>
<p>This week I’m doing my farewell tour. Tuesday I visited one set of grand parents, yesterday I had a goodbye party with friends, today I visited my current (or actually, former) university for the last time (and said goodbye to the people there), tomorrow I’m visiting my other grandparents and this Sunday is my aunt’s birthday party where I’ll be saying goodbye to even more people. It’s kind of strange to do all these things for the last time. For a year at least.</p>
<p>Looking forward to going there!</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>457</wp:post_id>
		<wp:post_date>2005-09-01 17:25:41</wp:post_date>
		<wp:post_date_gmt>2005-09-01 15:25:41</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>off-to-dublin-soon</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>First Trinity Project Finished</title>
		<link>http://zef.me/2005/11/22/first-trinity-project-finished/</link>
		<pubDate>Tue, 22 Nov 2005 21:07:43 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2005/11/22/first-trinity-project-finished/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Pff, finally. I just submitted my first big-ish project here at the Networks &amp; Distributed Systems course here at Trinity College, Dublin. We were supposed to develop a peer-to-peer multi-player version of the popular Tron game (which is a bit like the snake game you got on your mobile phone), players walk around the field leaving a trail of walls. There are cherries that give you an additional life, you lose one if you walk through a wall.</p>
<p>As soon (and if) I’m allowed to (presumably after the submission deadline) I’ll release the source code/binaries and report, might be interesting to the people interested in peer to peer networking. It’s quite a bit harder than developing a game using the usual client-server model that basically all other multi-player games use.</p>
<p>Some teasers:</p>
<figure><img alt="Connect screen" src="https://cdn-images-1.medium.com/max/800/0*GLRIdv-CufS4agTf.png"></figure><p>And playing (note the amazing graphics :P):</p>
<figure><img alt="Playing" src="https://cdn-images-1.medium.com/max/800/0*he2r4qn6tYL9Eb9_.png"></figure><p>Initially we were supposed to develop this game from the ground up (using either Java Sockets or RMI) in three weeks, then we got a week extension. I developed it in Java 5 using Eclipse 3.1. Gotta love the generics support and enhanced for-loop in Java. Very nice.</p>
<p>As of yet I’m the only one in my group who has gotten the game to work, so I’m looking forward to see if others manage to do this.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>579</wp:post_id>
		<wp:post_date>2005-11-22 22:07:43</wp:post_date>
		<wp:post_date_gmt>2005-11-22 21:07:43</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>first-trinity-project-finished</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Rethinking Discussion Boards</title>
		<link>http://zef.me/2005/08/09/rethinking-discussion-boards/</link>
		<pubDate>Tue, 09 Aug 2005 09:52:04 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2005/08/09/rethinking-discussion-boards/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>For a couple of years now, people have been thinking about the semantic web; a web where information is neatly ordered and beautifully structured. This would allow search engines to truly look for information and come up with better results. It’s a little how the web originally started. When we still used &lt;h1&gt; tags, and tags like &lt;strong&gt; and &lt;em&gt; instead of &lt;b&gt;, &lt;i&gt; and &lt;font&gt;. These tags mean something. They are about semantics, not presentation.</p>
<p>Anyway, the problem is that if you want to do the semantic web right, there’s a lot of work involved. The problem is getting people to do all this additional work and do it truthfully. For example, usually, words in the title or heading on a page tell the reader what the text underneath is about. So, if you were a search engine, finding a word in a title would make it more important than just in the plain paragraph text. However, people would abuse this, so a search engine can’t use this information.</p>
<p>Something that people have started experimenting with on several places are tags. There’s blogging software that allows you to “tag” your posts with some keywords. Other services like <a href="http://del.icio.us/" target="_blank">del.icio.us</a>, allow you to publish interesting links you’ve encountered and to tag them. Tags are all just a word long, so it’s really easy to add them. If I look at del.icio.us now, the most popular tags are web, software, programming, design, blog and tools. Other websites like <a href="http://www.flickr.com" target="_blank">flickr</a>, use tags to tag pictures. This gives very interesting insight in what people are posting pictures about. If you go watch flickr’s <a href="http://www.flickr.com/photos/tags/" target="_blank">tag page</a> you can see the most popular ones (the bigger, the more pictures posted).</p>
<p>Yesterday, by accident, I found two other sites that use tags: <a href="http://www.43things.com/" target="_blank">43things.com</a> and <a href="http://www.43places.com/" target="_blank">43places.com</a>. On these websites you can tell people what your goals in life are and find people who share them, 43places.com is about places where you want to go and people who have been there (who can share their experiences). All goals and places can be tagged, and using these tags similar goals and places can be found. When I saw 43things.com, I started asking myself: how could tags help forums?</p>
<p>I’m always interested in different approaches to currently well-established concepts, such as forums. Is it worthwhile trying to use tags in forums? I’m not sure, but here’s one possible approach. My idea is the following: drop the concept of boards. Just have one big namespace, if you will, for all your topics. If somebody starts a new topic, he or she can tag it (or not). The tags will replace the boards. In the case of programming related forums one could for example ask the question how to do a particular kind of for-loop in PHP and could tag it with ‘php’ and ‘loop’. Tags could either be free-form or predefined, I’m not sure what would work best, but I’d probably be in favour of free-form tag names. On the forum front page the latest topics would be listed, but also a list of tags and the number of (new) topics that are tagged with them. This could be done in the nice visual way like <a href="http://www.flickr.com/photos/tags/" target="_blank">flickr does here</a> — it would give an instant view in what people are talking about now.</p>
<p>How do you know the topic starter will tag the topic right? You don’t. That’s why I think it would be best to allow any member to add tags to any topic, or even to remove them (but maybe removing them is something for a moderator to do?).</p>
<p>Why would you want to do this? What are the advantages? I think the advantages are the following:</p>
<ul>
<li>No longer the ever-lasting “Did I post this topic in the right forum?” question. Every topic fits anywhere, a topic can be about PHP and dish washers at the same time, no need to choose between the PHP and dish washer board.</li>
<li>Users could subscribe (on the forum itself or through RSS/Atom?) to certain tags or combinations of them. For example, if I’m especially interested in using PHP on the client-side, I could subscribe to all topics which are tagged with ‘php’ and ‘client’.</li>
<li>It provides a mechanism to show “similar topics” for each topic. Imagine that after a posting a reply to a certain topic you get to see a screen saying “since you knew the answer to this question, you might also be interested in these topics”, which would list similarly tagged topics.</li>
</ul>
<p>And what about tag names? One could tag a topic either ‘scripting’ or ‘programming’, which basically mean the same. How would someone only subscribed to ‘programming’ find the ‘scripting’ topics? Well, I could imagine applying some interesting statistics here, dealing with similar tags or people quite often tagging something both ‘scripting’ and ‘programming’ from which one could deduce that they may be very similar. One could create very interesting graphs from how tags are used and may relate to each other. Sites like 43things.com already show “related tags”, so it is definitely doable. I can imagine even showing a list of popular tag combinations, which would be like naturally evolved boards.</p>
<p>The beauty of tags is that they are simple. It’s not a lot of work to tag a topic, and by tagging a topic it can become a lot more useful. It could turn forums in more of a knowledge base, something that many people have been waiting for a long time.</p>
<p>Again, nobody will know if this concept will work or not until somebody tries it. So, if there’s somebody out there who wants to create not yet another bulletin board like all others (YaBBLAO), you may want to give this concept a shot. It’s at the very least a lot more challenging than the traditional model.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>874</wp:post_id>
		<wp:post_date>2005-08-09 11:52:04</wp:post_date>
		<wp:post_date_gmt>2005-08-09 09:52:04</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>rethinking-discussion-boards</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Tags in Bulletin Boards</title>
		<link>http://zef.me/2005/08/23/tags-in-bulletin-boards/</link>
		<pubDate>Tue, 23 Aug 2005 10:27:50 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2005/08/23/tags-in-bulletin-boards/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>I was just pointed to three bulletin board systems that either have adopted the concept of tags, or are fully based on it. A couple of weeks ago I posted <a href="http://www.zefhemel.com/archives/2005/08/09/rethinking-discussion-boards" target="_blank">about this idea</a>. Apparently I wasn’t the only one thinking about it at that time.</p>
<p>The three boards are:<br>* <a href="http://bbpress.org/" target="_blank">bbPress</a>, written by the same guy that wrote <a href="http://www.wordpress.org" target="_blank">WordPress</a>. Tags are included here next to the usual boards, so it hasn’t replaced them. Still it looks good, you can find an example of what this looks like <a href="http://wordpress.org/support/" target="_blank">at the WordPress support forum</a>.<br>* <a href="http://tagifieds.com/" target="_blank">Tagifieds</a> is practically exactly what I had imagined the new kind of forum to look like. There are no boards or categories, just one big namespace containing all topics. Tags are listed at the right and if you click them you will see the topics that are tagged with that tag, it will also show related tags. Quite nice, although in a way it doesn’t feel quite right yet. I don’t know why.<br>* <a href="http://tagsurf.com/" target="_blank">Tagsurf</a> looks a lot like Tagifieds. In its current form I don’t think it’s very usable yet, unless your entry is the <a href="http://tagsurf.com/recent" target="_blank">Rcent Posts</a> page. But I’m sure it well get there.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1059</wp:post_id>
		<wp:post_date>2005-08-23 12:27:50</wp:post_date>
		<wp:post_date_gmt>2005-08-23 10:27:50</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>tags-in-bulletin-boards</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>LINQ and Language Complexity</title>
		<link>http://zef.me/2005/09/22/linq-and-language-complexity/</link>
		<pubDate>Thu, 22 Sep 2005 10:21:42 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2005/09/22/linq-and-language-complexity/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>I’ve been away from reading tech weblogs for a while and a lot has been happening, apparently. Most notably, I think, is Microsoft’s LINQ project. LINQ stands for Language Integrated Query.</p>
<p><a href="http://msdn.microsoft.com/netframework/future/linq/" target="_blank">Here is the MSDN site</a>, and here’s <a href="http://msdn.microsoft.com/netframework/future/linq/default.aspx?pull=/library/en-us/dndotnet/html/linqprojectovw.asp" target="_blank">an explanation of what it is and does</a>. What it comes down to is that it integrates SQL-like querying into the programming language (C# and VB.NET in this case). So that you can do stuff like this:</p>
<pre>string[] names = { "Burke", "Connor", "Frank", "Everett",<br>                   "Albert", "George", "Harris", "David" };<br>var query = from item in names<br>            orderby item<br>            group item by item.Length into lengthGroups<br>            orderby lengthGroups.Key descending<br>            select lengthGroups;</pre>
<p>If you look at this piece of code you’ll notice a few things. What’s that var type thing doing there, that looks kind-of JavaScript-ish. Then of course you’ll notice the new query syntax: from something in something, select this and that, orderby this. This syntax, however, is just syntactic sugar. This:</p>
<pre>var query1 = from p in people<br>             where p.Age &gt; 20<br>             orderby p.Age descending, p.Name<br>             select new {<br>                 p.Name, Senior = p.Age &gt; 30, p.CanCode<br>             };</pre>
<p>Is exactly the same as writing this:</p>
<pre>var query1 = people.Where(p =&gt; p.Age &gt; 20)<br>                   .OrderByDescending(p =&gt; p.Age)<br>                   .ThenBy(p =&gt; p.Name)<br>                   .Select(p =&gt; new {<br>                       p.Name,<br>                       Senior = p.Age &gt; 30,<br>                       p.CanCode<br>                   });</pre>
<p>There’s another new thing here, the something =&gt; bla &gt; 20 and the new { … } notation. But there’s more. Extension methods for example. What’s all this stuff and why do we need it?</p>
<p>Well, the C# 3.0 team needed all this new stuff to make LINQ a comfortable working environment, to make it usable, and I think that’s great. I’m all for LINQ. I’m not so sure, however, about the side effect: language features.</p>
<p>Programmers had to struggle with C++ for many years. It was hard, its syntax is complex and hard to understand. Luckily Java came around. It cleaned up the language and made programming simple again. Then C# 1.0 came along, it added a couple features to the Java stack, but nothing major. Then C# 2.0 (and Java 5) came along, those added a major new feature: generics. For a lot of people generics are still hard to grasp.</p>
<p>And now C# comes with stuff like anonymous methods, anonymous types, lambda functions which can be interpreted in two ways, depending on how you store them, and extension methods. I must say I love those features and I can appreciate them. But I’m a weird guy, I like getting into the dark corners of language syntax and semantics. Not many people are like me. They just want to learn a language quickly and get things done.</p>
<p>I wonder if C# 3.0 doesn’t make things too hard. C# is statically typed, which has its advantages, but also makes things a lot more complicated as you will see if you read the LINQ article. The kind of stuff queries return are usually of some generic type, which can be very complex. This is where the var keyword comes in. It basically tells the compiler “I’m lost, you figure it out” (and it saves typing). At compile time, the var keyword is replaced with the type of what the expression assigned to it returns.</p>
<p>So, here’s my question. How far are we willing to drag on the huge beast that is a static language? If you look at a language like Ruby or Python, they already got most of the features that C# had to add to make this happen, but in Ruby and Python they’re not half as complicated. In Ruby you could already add methods to existing classes, anonymous methods (in Ruby known as blocks) are something a Ruby programmer breathes, anonymous types? var keyword? generics? Don’t need those.</p>
<p>If we want to carry on in the direction that LINQ is heading, and I think we should, shouldn’t we sacrifice this one thing: static languages? This makes things a lot simpler in many ways, and the sacrifice may just be worth it.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1067</wp:post_id>
		<wp:post_date>2005-09-22 12:21:42</wp:post_date>
		<wp:post_date_gmt>2005-09-22 10:21:42</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>linq-and-language-complexity</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Computer Broken</title>
		<link>http://zef.me/2005/10/09/computer-broken/</link>
		<pubDate>Sun, 09 Oct 2005 13:07:57 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2005/10/09/computer-broken/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>You might be wondering why there hasn’t been much posts from me lately. There are two reasons for that. First off is that I’m way too busy enjoying myself at Trinity College, meeting all the new people there and so on. Second is that my precious iBook broke down a couple of days ago. Luckily I bought AppleCare so I was fully covered, but still it can take up to two weeks before it’s fixed.</p>
<p>Therefore I’m only online once in a while to read e-mail and do the most important stuff. It’s incredibly inconvenient that my computer broke down because it’s my only one here in Dublin and my classes start next Monday, but what can you do about it? Nothing.</p>
<p>Just so you know.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1088</wp:post_id>
		<wp:post_date>2005-10-09 15:07:57</wp:post_date>
		<wp:post_date_gmt>2005-10-09 13:07:57</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>computer-broken</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Woops</title>
		<link>http://zef.me/2005/10/31/woops/</link>
		<pubDate>Mon, 31 Oct 2005 15:31:29 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2005/10/31/woops/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Oh, I’m so embarassed. I haven’t posted here for weeks, poor readers, I’m so sorry.</p>
<p>My last post was my computer being broken, well, by now I got two laptops. One from my computer science department here at Trinity, a nice Dell Latitude D400 (with 256MB of RAM which is waaaay too little if you want to use Eclipse for coding) and my iBook whose hard drive has been fixed by now, but now the trackpad doesn’t work, so I guess it has to return to the guys who attempted to fix it last time.</p>
<p>But I got a computer again, so that’s good. So, what has been going on? Well, obviously classes at Trinity have started. So far I really like them, the teachers are a lot better than what I was used to. Some classes are really interesting some are not always. They repeat a lot of what I already know, and some of them repeat what has already been told in other classes, but I think in overall this is a really good programme and I’m enjoying it.</p>
<p>I also got a life outside of my studies now (that’s right!) and some nice friends here in Dublin and they’re not even computer scientists, imagine that. A week or two ago a group of Trinity postgraduates went on a hike from Greystones to Bray, it was very beautiful (“pictures”:http://www.flickr.com/photos/zefhemel/sets/1148411/). Ireland is a beautiful country, especially outside Dublin (not that Dublin is so bad).</p>
<p>Anyway, coursework is finally starting to pile up. Right now I’m working on a game for my distributed systems class, we’re supposed to make an implementation of Tron, which is a little similar to snake. However, we’re supposed to create a distributed version that multiple users can play together and any of these players should be able to disconnect at any time without shutting down the game, i.e. we’ll have to implement it in a peer-to-peer fashion which makes it quite a challenge. Anyway, I started on it yesterday and so far I can get multiple players to connect to each other:</p>
<figure><img alt="DTron screenshot" src="https://cdn-images-1.medium.com/max/800/0*UZutpQplzFYfaZht.JPG"></figure><p>(Click to enlarge.)</p>
<p>Yes, we have to implement it in Java. For now I’m using Java 5 so I can take advantage of its nice generics support and enhanced for-loop and the Eclipse support for that works well. It’s nice to code in Java again, in particular the Eclipse environment. Now if I only had twice as much memory in this laptop…</p>
<p>Ok, enough about that. I’ll end this post with a link to an interesting article that I already posted in my “interesting links” section, but as many people don’t read that, here it is again: “How I Came to Despise AJAX”:http://www.yafla.com/dforbes/categories/softwareDevelopment/2005/10/21.html.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1153</wp:post_id>
		<wp:post_date>2005-10-31 16:31:29</wp:post_date>
		<wp:post_date_gmt>2005-10-31 15:31:29</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>woops</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Dublin</title>
		<link>http://zef.me/2005/09/12/dublin/</link>
		<pubDate>Mon, 12 Sep 2005 13:56:43 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2005/09/12/dublin/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Well, for almost a week now I’m living in Dublin and I like it so far. Until recently I lived with my parents and this is the first time that I’m living on my own. And it’s in a city where I’ve never been before, in a city I’ve never been before, speaking a language that I’ve never… ok, well I’ve spoken English before. But still, it’s kind of a big change.</p>
<p>I live in the south of Dublin, about 7–8 minutes from Aungier Street, very nearby St. Patrick’s Cathedral (I can hear its bells ring pretty well). This is all very close to the city center, so that’s pretty great. But there’s people everywhere. Always. When I go to the shop I walk through streets filled with cars, busses and people walking the sidewalk. That never used to be the case in the neighborhood of Groningen where I used to live. It was fairly quiet there. I never lived so close near a city center before. It’s stinky… but I can overcome that.</p>
<p>A couple of days ago I walked around the Trinity College campus, compared to the amount of people walking around it, it’s fairly quiet inside, although it appears to be one of the city’s primary tourist attraction (and how many people can say they study at a very popular tourist attraction?). The campus looks great. I made a couple of pictures of Dublin and Trinity College:</p>
<figure>

<img data-width="240" data-height="180" src="https://cdn-images-1.medium.com/max/800/0*0BOr4Dmn6OTSWW2j.jpg">
</figure><p><a href="http://www.flickr.com/photos/zefhemel/sets/925693/" target="_blank">See the pictures.</a></p>
<p>I live in an apartment building called Newmarket square. I share an apartment with a Russian guy named Vassili. He has the bedroom and I got the bedroom-turned living room. The kitchen is in the same room as the living room, which is too bad. Because if Vassili has to cook, he practically is doing that in my room. But usually he’s hardly home. Just this week had some problem with his working visa, so he has been home all week. Usually he’d be working and taking classes from 7 in the morning ‘till 9 in the evening, also eating there. So I won’t see him much.</p>
<figure>

<img data-width="240" data-height="180" src="https://cdn-images-1.medium.com/max/800/0*v3z0SLGK7pHGze-T.jpg">
</figure><p><a href="http://www.flickr.com/photos/zefhemel/sets/908769/" target="_blank">Some pictures of my room/house</a></p>
<p>I got an Irish mobile phone number now, you can reach me at +353 85 1587524, or just plain 085 1587524 if you’re calling from within Ireland.</p>
<p>My classes start at October 10th, so that’s still almost a month away. My parents are flying in tonight and will be spending a couple of days here.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1198</wp:post_id>
		<wp:post_date>2005-09-12 15:56:43</wp:post_date>
		<wp:post_date_gmt>2005-09-12 13:56:43</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>dublin</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>The Change, 18 Months Later</title>
		<link>http://zef.me/2005/08/12/the-change-18-months-later/</link>
		<pubDate>Fri, 12 Aug 2005 10:21:11 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2005/08/12/the-change-18-months-later/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>It’s roughly one and a half year ago when I wrote <a href="http://www.zefhemel.com/archives/2004/03/13/the-change" target="_blank">The Change</a>. The essence was this:</p>
<blockquote>I have done some programming jobs as well, paid ones. Recently I noticed I don’t like doing those anymore, I don’t like programming a Workflow Management System (which I wrote a while ago), I don’t like working on KeyTopic anymore. Why? Mostly because it’s all the same. There’s no challenge. It’s all much of the same.</blockquote>
<p>It has been a while, and I thought I’d give you an update on my feelings regarding this subject.</p>
<p>In short it comes down to this: not much has changed. Those who thought it would just be a stage and I would pick up programming soon enough: sorry, you were wrong. I was reminded of my disliking of programming again two days ago when a friend asked if I had time for a “fun little programming problem”. “Sure”, I said, totally not thinking at all. Well, the problem wasn’t fun. To me it wasn’t fun. And I realized that there’s probably no programming problem that I consider “fun” anymore. I never was a big fan of the kind of programming contest assignments and that has just gotten worse.</p>
<p>The level that still interests me are the higher levels. The design. Or higher, thinking about design. Having ideas for software products. I want to come up with things that haven’t been tried yet. Again, an army of coding monkeys would’ve been great. If I come up with an idea and start implementing it, I still quit halfway through, because it’s… so… boring.</p>
<p>Maybe due to the interesting past couple months my interests have shifted somewhat. Lately I’ve started reading into subjects like linguistics (still languages, but different), politics and different cultures. The list of blogs I read shrunk in respect to tech-related blogs and lengthened in respect to blogs about writing and linguistics.</p>
<p>In October I’m off to Dublin to study networks and distributed systems. The courses, most of them anyway, seem to be about the architectural level. I’m sure it will interest me. The question, however, is what I’m going to do after that? Am I going to work? What kind of job would I want to have? I’m not going to be a programmer unless I absolutely have to. I just don’t know. Who knows, I may just become a Ph.D. student somewhere.</p>
<p>I’ll just wait and see.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1253</wp:post_id>
		<wp:post_date>2005-08-12 12:21:11</wp:post_date>
		<wp:post_date_gmt>2005-08-12 10:21:11</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-change-18-months-later</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="personal"><![CDATA[Personal]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>You’ve Been Google Analytized</title>
		<link>http://zef.me/2005/11/14/youve-been-google-analytized/</link>
		<pubDate>Mon, 14 Nov 2005 17:42:27 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2005/11/14/youve-been-google-analytized/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Google launched a new service today or yesterday (not sure). It is called “Google Analytics”:http://www.google.com/analytics/ and it will provide you with statistics about your website’s visitors. It is said that this (free) package compares to many commercial alternatives out there.</p>
<p>Apparently it’s particularly useful for websites already taking advantage of AdWords as it allows you to do in-depth keyword analysis. Anyway, I’d like to try it myself before I recommend it to others so I signed up and put the couple of lines of JavaScript code on my websites. If you’re reading this messages on my website itself (and not through an RSS reader) your visit has been recorded. It will take up to 12 hours for it to give me some analysis information, so I’m waiting patiently.</p>
<p>I’ll let you know what my findings are.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1324</wp:post_id>
		<wp:post_date>2005-11-14 18:42:27</wp:post_date>
		<wp:post_date_gmt>2005-11-14 17:42:27</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>youve-been-google-analytized</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>TurboGear</title>
		<link>http://zef.me/2005/09/26/turbogear/</link>
		<pubDate>Mon, 26 Sep 2005 14:17:04 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2005/09/26/turbogear/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>On my still continuing quest for a perfect Python on Rails (a.k.a. an easy-to-use web framework for Python), TurboGear is my latest find. TurboGear is not a framework written from scratch, but rather a composite of a couple Python components:</p>
<p>* Kid, for Zope-like templates.<br>* Mochikit, for AJAX stuff on the browser side.<br>* SQLObject, a nice object-oriented database wrapper. Very close to what I developed myself as <a href="http://www.zefhemel.com/archives/2005/01/04/adia-doing-more-with-much-less" target="_blank">Adia</a> (with the same idea of extracting SQL CREATE statements from the model defined in your Python code).<br>* Cherrypy for the controller side.</p>
<p>I’ve been playing with this framework today (there’s a nice <a href="http://turbogears.org/docs/wiki20/index.html" target="_blank">20 minute tutorial on how to create a simple Wiki</a>, also available as <a href="http://turbogears.org/docs/wiki20/20MinuteWiki.mov" target="_blank">screencast</a>). I played with the example a little and without much effort added a couple of fields to the database and to the forms. It all seems nice. And I like the fact that it uses already existing components which are developed by different people. This way not everything has to be maintained by one person or one team of people. It comes with a built-in webserver, so testing is very simple.</p>
<p>TurboGear requires Python 2.4, you can get find <a href="http://turbogears.org/index.html" target="_blank">more information and downloads here</a>.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1369</wp:post_id>
		<wp:post_date>2005-09-26 16:17:04</wp:post_date>
		<wp:post_date_gmt>2005-09-26 14:17:04</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>turbogear</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Google Talk</title>
		<link>http://zef.me/2005/08/24/google-talk/</link>
		<pubDate>Wed, 24 Aug 2005 08:06:38 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2005/08/24/google-talk/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>It has been rumored for months now, and the rumors turned out to be right: Google just launched an IM (Instant Messaging) client. It’s called <a href="http://www.google.com/talk/" target="_blank">Google Talk</a> and you can now download a beta client for Windows 2000/XP.</p>
<figure><img alt="Google Talk" src="https://cdn-images-1.medium.com/max/800/0*9H7zJk_sDYdLDM-G.gif"></figure><p>If you look more closely you’ll see that Google Talk is just a Jabber client. Jabber is an XML-based IM standard, which, for as far as I can see, hasn’t made its big breakthrough yet beyond the geek crowd. Google launching a client like this may very well change that.</p>
<p>On top of what a normal Jabber client offers, Google Talk also offers the opportunity to actually talk to each other (internet telephony). This is a feature that most Jabber clients don’t offer, and I wonder if it’s part of a Jabber standard, I sort-of doubt it actually.<br>*Update 1:* It appears that iChat also offers this feature and it is possible to do telephony with Google Talk users <a href="http://www.tuaw.com/2005/08/23/how-to-set-up-google-talk-on-your-mac/" target="_blank">through iChat on the Mac</a>.<br>*Update 2:* I just set up Google Talk in my iChat, but it doesn’t seem like I can actually talk to people. I can send messages, but the phone button (to call somebody) just doesn’t appear.<br>*Update 3:* Indeed, iChat and Google Talk users cannot interact yet, according “to this”:http://radar.oreilly.com/archives/2005/08/google_talk_rel.html, it will happen though when they support SIP. “Technical details can be found here”:http://www.google.com/talk/developer.html.</p>
<p>Google Talk looks promising, but doesn’t offer anything new as of yet. Skype, for example, can do the same thing, or MSN, or AIM. But I’m sure Google has some neat feature planned for the future. You can logon to Google Talk using your Gmail account.</p>
<p>If you plan to use it, yet don’t have anybody to talk to, my ID is zefhemel@gmail.com. ;)</p>
<p><a href="http://www.google.com/talk/" target="_blank">Google Talk website</a></p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1502</wp:post_id>
		<wp:post_date>2005-08-24 10:06:38</wp:post_date>
		<wp:post_date_gmt>2005-08-24 08:06:38</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>google-talk</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Going to Dublin September 6th</title>
		<link>http://zef.me/2005/08/20/going-to-dublin-september-6th/</link>
		<pubDate>Sat, 20 Aug 2005 13:46:36 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2005/08/20/going-to-dublin-september-6th/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>It seems that it’s finally happening, just two weeks a couple of days to go and I’ll be walking Irish grounds for a year.</p>
<p>I just sent out my tuition fee payment, reserved a temporary room at Trinity and booked my ticket. Tuesday September 6th at 19.00 I’ll be flying to Dublin. I can stay there in the temporary room for up to two weeks. In these two weeks I have to manage to find a permanent room elsewhere. I hope I can find something good. Oh, and if you happen to live in Dublin, or know somebody there that has a room available, let me know.</p>
<p>Looking forward to it!</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1654</wp:post_id>
		<wp:post_date>2005-08-20 15:46:36</wp:post_date>
		<wp:post_date_gmt>2005-08-20 13:46:36</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>going-to-dublin-september-6th</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Computers: Avoid</title>
		<link>http://zef.me/2005/09/20/computers-avoid/</link>
		<pubDate>Tue, 20 Sep 2005 10:14:16 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2005/09/20/computers-avoid/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Hi, if you’re reading this and just started finding your way in the (to you still) amazing world of computers: stop while you still can. Seriously, the deeper you dig, the more crap you’ll dig up.</p>
<p>Sorry about that. I’m back! It has been a while since my last post on this blog. There are a couple of reasons for this. First of which is that I had other things to do. As you know, I just moved into Dublin and was getting to know it; figure out where the good stores are. My parents came over for 4 days and we explored more of the city together. The other is that I’ve been fighting with the internet connection we have here, and we haven’t been on speaking terms for a while.</p>
<p>If you live in Dublin, you undoubtedly heard of this marvelous thing called <a href="http://www.irishbroadband.ie/htmdocs/our_products/ripwave.htm" target="_blank">RipWave</a>. Which is a device that allows you to wirelessly connect to the internet, you don’t need a phone line or cable to use it. It uses a radio signal (I think). Problem is that it’s crap. The speed is supposed to be 512kbit up/512kbit down, but I’m very happy if I can get it up to 20kbyte/s downstream (using a killer download accelerator), usually it’s like 2–4kbyte/s. The signal is bad, sometimes you don’t have a connection at all, sometimes it’s fast, sometimes it’s slow. It’s basically a phone line connection on steroids, but without the steroids and with the phone line half broken.</p>
<p>On top of the privilege of being allowed to use RipWave, I bought a wireless router when I came to live here. It was a D-Link one. At first it would crash after a couple hours — only way to bring it back up was to restart it. I found new firmware on the D-Link website and put that on. Then it didn’t connect to the internet at all. I tried changing every setting in the whole damn thing — nothing. I downgraded the firmware to an older version. This time it seemed to work. However the router rebooted itself sometimes. Sometimes every couple of hours, which would be bearable, but sometimes every few minutes. Why!? Why can’t a device like that not just work?</p>
<p>I searched around the internet, and apparently there are a lot more people having similar problems with this device. They advice to install older versions of the firmware. I tried about 5 versions: no results (it wouldn’t even start up normally with most). How can a company get away with such a bad product?</p>
<p>Anyway, yesterday I returned the router. The guy in the shop said they sold about thirty of those and never heard any complaints. Whatever. I bought a cheap Linksys router somewhere else and it seems to work fine. If I ignore the crap internet connection I’m fairly happy. We requested a smart telecom internet connection which is supposed to be 2mbit down/128kbit up. But it can take a couple of weeks before we get it.</p>
<p>Anyway, try to avoid this stuff if you can. Computers (and all things related to it) are nothing but trouble.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1667</wp:post_id>
		<wp:post_date>2005-09-20 12:14:16</wp:post_date>
		<wp:post_date_gmt>2005-09-20 10:14:16</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>computers-avoid</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>I’m Back</title>
		<link>http://zef.me/2005/08/07/im-back/</link>
		<pubDate>Sun, 07 Aug 2005 08:31:27 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2005/08/07/im-back/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>I came back from Latvia the day before yesterday after a very, very tiresome travel and about 35 hours without sleep. I had a fairly good time visiting my friend there.</p>
<p>Although my friend had to work most of the time we did some fun stuff as well. One of which was visiting Tartu, a city with a quite well-known university in Estonia.</p>
<p>Pictures can be found on my <a href="http://www.flickr.com/photos/zefhemel/" target="_blank">photo page on flickr</a>.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1675</wp:post_id>
		<wp:post_date>2005-08-07 10:31:27</wp:post_date>
		<wp:post_date_gmt>2005-08-07 08:31:27</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>im-back</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Google Base</title>
		<link>http://zef.me/2005/11/16/google-base/</link>
		<pubDate>Wed, 16 Nov 2005 11:56:05 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2005/11/16/google-base/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Google launched yet another service: “Google Base”:http://base.google.com. What it is? A place to store all kinds of content, be it events, recipes or whatever you like.</p>
<p>When I saw this, I was like, what the hell do I need this for? And to be quite honest, after playing with it for a little while (it’s free, you can just sign in with your Google account), I still don’t entirely get it. But usually writing about it helps, so let’s try that.</p>
<p>Google Base is based on “items”. and you can define our own. Just for testing I defined a new item type called “Birthday”:</p>
<figure><img alt="Birthday Item" src="https://cdn-images-1.medium.com/max/800/0*_o9AcoSEovO5bF4P.jpg"></figure><p>When you do this you can define attributes (of different types, be it strings, numbers, dates, addresses, areas), add a title, description, location, labels (keywords) and a link. After you push the Publish button, items will appear online after 15–60 minutes. Each author gets his/her own URL where you can see all his/her items. In my case “http://www.google.com/base/a/zefhemel":http://www.google.com/base/a/zefhemel.</p>
<p>Ok, so now I got an item containing my next birthday online. Now what? Well, I don’t know. I wonder what I could use this for. If I would put up items that I have for sale, I could start using it as a kind of marketplace. As other users can search everybody’s items, they would be able to find the items I have for sale. The Google Base FAQ states that “highly relevant” items may show up in Google, Froogle and Google local. So that’s one use. Another one, I can imagine, is if you’re organizing events, such as plays, conferences and so on. You could “advertise” them by putting them on the Google Base.</p>
<p>As I write about this, I start to see reasons to use this service. I think that it is most useful to people who want to advertise something, to let other people know something. At first I sort of assumed/hoped it would be useful just for yourself as well. I could’ve imagined putting up contact information, my calendar and have it searchable, but I doubt it would really work for that (let alone people appreciating me putting up their contact details online for everybody to find).</p>
<p>What makes it interesting to me is that it’s more about meta data. Google so far was mostly about web pages and links between them. There was not much more you could tell about it. If people would start using this service, information would be typed. It would no longer be just web pages it would be more specific things: cars, events, objects for sale, people. As there’s a series of attributes associated with items you can use those to search more specifically. It’s not just a plain text search over the whole webpage anymore. You can search based on any of the attributes. For example: show me all events in this area that take place today.</p>
<p>Problem with adding this meta data is that it’s a lot of work for the people entering it, plus there’s no guarantee whatsoever that the entered information is actually correct. But as it’s Google launching this service I assume they have plans with this and ways to solve these problems. Time will tell.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1681</wp:post_id>
		<wp:post_date>2005-11-16 12:56:05</wp:post_date>
		<wp:post_date_gmt>2005-11-16 11:56:05</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>google-base</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Google Calendar, Writely, Amazon Storage</title>
		<link>http://zef.me/2006/03/14/google-calendar-writely-amazon-storage/</link>
		<pubDate>Tue, 14 Mar 2006 20:57:19 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2006/03/14/google-calendar-writely-amazon-storage/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>As people have long suspected, Google is working on an online calendaring application that will tightly integrate into Gmail. It is called CL2 and there are some people beta testing it already. A couple of days ago <a href="http://www.techcrunch.com/2006/03/08/exclusive-screenshots-google-calendar/" target="_blank">TechCrunch</a> had the exclusive of posting the first screenshots. It looks very nice and very Gmail-ish.</p>
<p>The expectation is that it will take a while until it’s ready for the public, but when it is I’m absolutely going to give it a shot. Until that time I’ll keep using <a href="http://www.30boxes.com/" target="_blank">30 Boxes</a>, which works great for me. I’ve been using it for a month or so for all my meetings and I love how easy it is to add appointments. And they add new features almost every week. On the CL2 screenshots I can see that it will offer similar features. Very cool.</p>
<p>A couple months ago it was already rumoured that Google was working on a calendaring application, which would of course blow the competition away (which was mainly Yahoo), like they did with Gmail. So what did people do? They started companies that build calendaring software. The expectation is that Yahoo will do what they did before, they’d realise they were beaten by Google and would buy one of the competing products, just like they bought <a href="http://www.oddpost.com" target="_blank">OddPost</a> when Gmail came out. Many of these startups are not building calendaring applications, they’re building companies to be bought by Yahoo.</p>
<p>Anyway, Yahoo is not the only companies that likes to acquire other companies of course, Google enjoys itself (herself?) too. They have recently acquired <a href="http://www.writely.com/" target="_blank">Writely</a>, a startup that is working on an online word processor. I worked with it for a bit a couple of months ago and it works pretty well. You can use it to work with multiple people on the same document. Sign-ups are closed for the moment, to prevent the system from falling over because of the massive number of people that want to try it now it’s part of Google (and therefore it must be good). So if you hadn’t signed up earlier, too bad, you’ll have to wait. Not me though, I got an account already. Want to have it? No, sorry, I’m keeping it to myself. If you wanted it so badly you should’ve realised Writely’s potential earlier, like I did. ;)</p>
<p>Interesting thing is that Writely has been implemented using Microsoft .NET. I wonder what they’ll do with that, although, come to think of it <a href="http://www.orkut.com" target="_blank">Orkut</a>, also from Google, is a .NET product as well, so there is some experience with that inside Google.</p>
<p>And then Amazon’s answer to the rumours that Google is going to launch a storage system soon (dubbed GDrive by bloggers): <a href="http://aws.amazon.com/s3" target="_blank">S3</a>, Amazon’s Simple Storage System. A webservice that allows you to store files at affordable rates. When I say webservice I mean exactly that, you need to use SOAP or REST webservices to upload and retrieve files. Probably useful for developers of enterprise software, but I don’t think the target audience of this is you, the consumer. But we’ll see. Personally I expect that Google’s service, if it ever really launched, will be free.</p>
<p>And then the last thing. Look at this:</p>
<figure><img alt="zengine_small.png" src="https://cdn-images-1.medium.com/max/800/0*iuSOeTgKshjNjzS5.png"></figure><p>That’s right, I’m working on a Google killer. It is a well-known fact that the people at Google are wimps and their so-called “search engine” is nothing more than a couple of PHP scripts slapped together with a MySQL back-end. If somebody sneezes too hard the whole system breaks down. That’s why I wrote the ultimate Google killer search engine today, called Zengine. It only searches ZefHemel.com now, but that’s only to give the people at Google some more time before I completely crush them.</p>
<p>So Google, this is my proposition: $10 million and Zengine is yours. Let’s say I’m in a generous mood today.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>64</wp:post_id>
		<wp:post_date>2006-03-14 21:57:19</wp:post_date>
		<wp:post_date_gmt>2006-03-14 20:57:19</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>google-calendar-writely-amazon-storage</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Dutch Legal DRM Music No Longer Playable</title>
		<link>http://zef.me/2006/03/02/dutch-legal-drm-music-no-longer-playable/</link>
		<pubDate>Thu, 02 Mar 2006 15:50:19 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2006/03/02/dutch-legal-drm-music-no-longer-playable/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Somebody just told me that clients of several Dutch online music stores (Planet Internet, Tiscali, MSN, Wanadoo and MTV as well) got a letter roughly saying the following (translated from Dutch):</p>
<blockquote>Dear Mr. X,</blockquote>
<blockquote>An increasing amount of people choose to legally download music from the internet. Record companies allow more and more music to be licensed this way. This is why you, using <em>Music Stream</em>, have access to over 1 million songs right now.</blockquote>
<blockquote>To suit your needs as a customer as well as possible, Planet Internet has tried to offer you the music in different ways. Sadly, record companies have decided to no longer permit some of those ways of licensing.</blockquote>
<blockquote>What does this mean?<br>Record companies no longer support your type of license. This means that the music you already downloaded through this option possibly will no longer play. We succeed in allowing you to play the music until January 1st 2007.</blockquote>
<blockquote>We understand that it is inconvenient for you when you can no longer play downloaded songs. That’s why we give you 1000 credits (worth: 10 euro) that you can spend in April of this year.</blockquote>
<p>(Source: <a href="http://www.adslforum.nl/topic.asp?TOPIC_ID=16632" target="_blank">ADSL Forum</a> (Dutch))</p>
<p>I’m not sure how the licensing structure has changed, but it is scary. You think you bought a song, but if a record companies changes its mind they can stop you from playing it. It’s like the record company knocking on your door demanding all your CDs back because they don’t want you to have them after all, even though you already paid for them…</p>
<p><strong>Update:</strong> The license withdrawn are licenses that allow the user to play the music on the computer only (so no burning on CDs or putting on an MP3 player).</p>
<p>It turns out that these Dutch providers of legal DRM protected music all use <a href="http://www.od2.co.uk" target="_blank">OD2</a>. However, I can’t find anything about this on their site. Does anybody have any information on this? Has this happened in other countries as well?</p>
<p>This is not great promotion for DRM music. It seems safer to just download music illegally somewhere.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>216</wp:post_id>
		<wp:post_date>2006-03-02 16:50:19</wp:post_date>
		<wp:post_date_gmt>2006-03-02 15:50:19</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>dutch-legal-drm-music-no-longer-playable</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Dissertation Time</title>
		<link>http://zef.me/2006/05/04/dissertation-time/</link>
		<pubDate>Thu, 04 May 2006 19:08:04 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2006/05/04/dissertation-time/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>My exams are over, they went pretty well I think, generally. Quickly after I finished I was in Holland for two weeks to rest. I came back with a cold, but by now I’m back on my feet and ready for the second half of my studies here at Trinity College in Dublin: my dissertation.</p>
<p>I have about 5–6 months to write it. The working title is “Middleware for advertising, discovery and invocation of semantic services on ad-hoc networks”, a title that made quite some jaws drop.</p>
<p>Let me quickly dissect it for you. First, ad-hoc networks. The 802.11 standard for wireless networks has two modes: infrastructure mode and ad-hoc mode. Infrastructure mode is what most people use, you buy an access point and let your computer(s) connect to that, all the traffic is routed through the access point. Ad-hoc allows you to set-up a wireless network without any infrastructure in place, no AP is needed, you just directly connect one or more laptops wirelessly. This already works and if you have wireless on your laptop you too can set up such an ad-hoc network.</p>
<p>Ad-hoc networks have some interesting properties:</p>
<ul>
<li>
<em>They change rapidly</em>, as people walk in and out of the range of an ad-hoc network they either join or leave it. This means that nodes may sometimes be only in the network for minutes.</li>
<li>
<em>No centralisation</em>, because of this, you cannot centrally store information; it’s very much like a peer-to-peer network.</li>
<li>
<em>Resources are scarse,</em> ad-hoc network are built from wireless devices generally running on battery power. They may be laptops, they may be PDA, they may be mobile phones. It’s therefore important that its limited power is used efficiently.</li>
</ul>
<p>Then the semantic service part. By now you must have heard about web services. They are an easy way to make remote calls to to other servers, for example to Google Calendar to add an event, flickr to retrieve pictures with a certain tag, or to do credit payments for example. However sometimes you don’t really know where to find a certain service (you don’t know the URL) but just needs a service that can do picture retrieval, whether that’s flickr, Yahoo albums or BubbleShare. For this UDDI exists, which is a directory of web services that you can query. However UDDI works with keywords and doesn’t contain a computer-understandable description of what a service does and expects as inputs and gives as outputs. That’s where semantic web services come in.</p>
<p>I’m not going to explain all about semantic web services. If you’re interested you can read up on <a href="http://www.w3.org/RDF/" target="_blank">RDF</a>, <a href="http://www.w3.org/TR/owl-ref/" target="_blank">OWL</a> and <a href="http://www.daml.org/services/owl-s/1.0/" target="_blank">OWL-S</a>. The basic idea is that you find services based on what they mean, their interface or name doesn’t matter, just what they do. Basically what it comes down to is that you want ask for, say, “services that you can give a price and will return a list of cars you can buy from them for that price or less”.</p>
<p>What my middleware (middleware is basically like a framework that a developer uses to more quickly develop applications in some way, they abstract away from details that a develop shouldn’t care about) will do is allow developers to easily define semantic services and advertise them on an ad-hoc network. Advertising means making them findable for other network nodes. I will also develop means to find such services and when you found some, to actually use (invoke) them.</p>
<p>It’s going to be a long journey (until begin september), but so far I’m quite happy with how it goes. Today I’ve started doing some simple prototype implementation and it’s going quite well. I’m implementing it in Python.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>353</wp:post_id>
		<wp:post_date>2006-05-04 21:08:04</wp:post_date>
		<wp:post_date_gmt>2006-05-04 19:08:04</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>dissertation-time</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="personal"><![CDATA[Personal]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Google Reader</title>
		<link>http://zef.me/2005/12/29/google-reader/</link>
		<pubDate>Thu, 29 Dec 2005 14:23:33 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2005/12/29/google-reader/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>It doesn’t usually happen, but somehow I missed the launch of “Google Reader”:http://www.google.com/reader, Google’s RSS/Atom feed aggregator. I’ve been waiting for this a long time now and it seems it was worth the wait.</p>
<p>I’ve been playing with it for a day now or so and it’s a bit different from what I was used to, but still worth a try. You can login with your Google account, import your subscriptions and start reading them. The interface is fully Ajaxified, and feels a lot like Gmail.</p>
<p>Here’s the normal reading page, with a list of all new posts (right now ordered by “relevance”, don’t know how it determines the relevance):</p>
<figure><img alt="Google Reader startpage" src="https://cdn-images-1.medium.com/max/800/0*OWurQeKRZmf9yokX.jpg"></figure><p>(Click to enlarge.)</p>
<p>And here’s my list of subscriptions, you can label feeds (like you can label messages in Gmail) and you can filter a la iTunes, by typing a part of a feed’s name in the filter box (it will filter as you type):</p>
<figure><img alt="Google Reader subscriptions" src="https://cdn-images-1.medium.com/max/800/0*1ccVC_aW0c3YqOWl.jpg"></figure><p>So far I’m pretty happy with it. It does what you expect, the keyboard shortcuts work well (those are also what I like about Gmail so much), but some things could be improved, there’s no feed discovery for example, you actually have to type in the feed’s URL when you add a new feed, but that’s minor.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>466</wp:post_id>
		<wp:post_date>2005-12-29 15:23:33</wp:post_date>
		<wp:post_date_gmt>2005-12-29 14:23:33</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>google-reader</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Over 3 Years of Blogging</title>
		<link>http://zef.me/2006/02/28/over-3-years-of-blogging/</link>
		<pubDate>Tue, 28 Feb 2006 20:54:32 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2006/02/28/over-3-years-of-blogging/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>I was too occupied with other things to think of my 3-year blogging anniversary which was three weeks ago. <a href="http://www.zefhemel.com/archives/2003/02/10/welcome-to-my-weblog" target="_blank">February 10th of 2003</a> was when this ZefHemel.com weblogs first saw the light and lots has happened since then. A summary.</p>
<p>First of all I posted over 1,100 stories in these three years and my readers (you) wrote almost 2,500 comments to those. The kind of posts changed over time. It started out as just links with a small comment, then changed into bigger articles with mostly my own content. The frequency of posts also changed. At first I posted sometimes 6 posts a day, then it became less. And there were about 4 months in which I posted one real story (600–1200 words) each day. Impressive. This year was a quiet year, until the past couple of days, when ideas for posts started to pop up again. I’m still finding a new format and mix of things I post here, but I’ll get there.</p>
<p>Some things I remember well of the past few years were my <a href="http://www.zefhemel.com/archives/2004/09/22/hiring-great-programmers" target="_blank">Why Microsoft Can’t Hire Great Programmers</a> post, which was picked up by <a href="http://radio.weblogs.com/0001011/2004/09/23.html#a8291" target="_blank">Robert Scoble</a> and even <a href="http://blogs.msdn.com/jobsblog/archive/2004/09/23/233751.aspx" target="_blank">Microsoft Recruiting</a>, which was a nice experience.</p>
<p>Then the nomination of <a href="http://www.zefhemel.com/archives/2004/09/12/the-church-of-xml" target="_blank">The Church of XML</a> for Joel Spolsky’s <a href="http://www.amazon.com/gp/product/1590595009/102-4809782-8828917?v=glance&amp;n=283155" target="_blank">The Best Software Writing I</a>, sadly it didn’t end up in there. And then there’s my most successful post ever: <a href="http://www.zefhemel.com/archives/2004/10/11/how-to-create-your-own-podcasting-show" target="_blank">Howto: Create Your Own Podcast Show On Windows</a>, which still attracts hundreds of visitors each day. I happened to be lucky enough to get into the podcasting thing early enough to have written the first article explaining how to do it on Windows. This article even ended up in a book: <a href="http://www.ipdi.org/politicstogo/" target="_blank">Politics to Go</a>, published by the IPDI (of the George Washington University).</p>
<p>Twice I did a week of posts on a certain subject, once <a href="http://www.zefhemel.com/archives/2004/01/01/articles" target="_blank">on distributed systems and once on interregional collaboration</a>.</p>
<p>ZefHemel.com gets almost 800 pageviews each day according to Google Analytics, and if my little script is correct, roughly 400 people are subscribed to my RSS feeds on top of that. Some study mates did a presentation on Search Engine Optimization a week ago and told me that my website has a Google PageRank of 5 (out of 10), which is quite high. It also means I can bump up other’s PageRanks quite a bit by linking to them. Cool.</p>
<p>But the people to thank for all of this are you, my readers, especially those who have commented. If it weren’t for you, I would never have kept doing this for so long. Thank you for that.</p>
<p>On to the next three.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>609</wp:post_id>
		<wp:post_date>2006-02-28 21:54:32</wp:post_date>
		<wp:post_date_gmt>2006-02-28 20:54:32</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>over-3-years-of-blogging</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="personal"><![CDATA[Personal]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Google Notebook</title>
		<link>http://zef.me/2006/05/12/google-notebook/</link>
		<pubDate>Fri, 12 May 2006 07:59:01 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2006/05/12/google-notebook/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p><a href="http://www.techcrunch.com/2006/05/11/google-notebook-screen-shots/" target="_blank">TechCrunch</a> is telling us Google is probably going to release yet another new product, probably next week. It is called Google Notebook and it looks like it will be something similar to <a href="http://del.icio.us" target="_blank">del.icio.us</a>, but from Google and integrated with it.</p>
<figure>

<img data-width="240" data-height="180" src="https://cdn-images-1.medium.com/max/800/0*hdghrk9zuQ9rjHdg.jpg">
</figure><figure>

<img data-width="500" data-height="374" src="https://cdn-images-1.medium.com/max/800/0*iZESCPlTo1ZnhdEd.jpg">
</figure><p>More <a href="http://www.flickr.com/photos/ericajoy/tags/notebook/" target="_blank">screenshots can be found at flickr</a>.</p>
<p>Also Google is currently deploying some new features in Gmail. Gmail chat now plays a sound when somebody sends you a message (very useful) and there will be also the possibility to add pictures to your contacts.</p>
<figure><img alt="Gmail Photos" src="https://cdn-images-1.medium.com/max/800/0*YA-gUxrlpJTXF598.gif"></figure><figure><img alt="Gmail Photos" src="https://cdn-images-1.medium.com/max/800/0*bL5tKU4yhjEQ9px4.gif"></figure><p><a href="http://mail.google.com/mail/help/about_whatsnew.html" target="_blank">More details here</a>.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>644</wp:post_id>
		<wp:post_date>2006-05-12 09:59:01</wp:post_date>
		<wp:post_date_gmt>2006-05-12 07:59:01</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>google-notebook</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Google Calendar</title>
		<link>http://zef.me/2006/04/14/google-calendar/</link>
		<pubDate>Fri, 14 Apr 2006 08:01:50 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2006/04/14/google-calendar/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Finally, <a href="http://calendar.google.com" target="_blank">Google Calendar</a> out and it’s very neat, not surprisingly. It’s open to anyone with a Google Account, you can <a href="http://www.google.com/googlecalendar/tour.html" target="_blank">find a tour of its features here</a>. There is supposed to be Gmail integration, but I couldn’t really find any calendar features in my Gmail as of yet, the things described in the help are simply not there…</p>
<p>But for the rest it works great, you can drag around events, make them longer and shorter by simply dragging. And it can export various existing calendar formats and it has collaborative features comparable to 30boxes’, you can share calendars invite people to appointments by e-mail etc.</p>
<figure><img alt="gcal-full.jpg" src="https://cdn-images-1.medium.com/max/800/0*S4bA2t3F5wpDzWqm.jpg"></figure><figure><img alt="gcal-event.jpg" src="https://cdn-images-1.medium.com/max/800/0*AFyeP0KuhSSG-o9X.jpg"></figure><figure><img alt="gcal-add.jpg" src="https://cdn-images-1.medium.com/max/800/0*nDrYsyutjGS5Dstx.jpg"></figure><figure><img alt="gcal-quickadd.png" src="https://cdn-images-1.medium.com/max/800/0*lf_tNyZLpJyUPtNg.png"></figure>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>736</wp:post_id>
		<wp:post_date>2006-04-14 10:01:50</wp:post_date>
		<wp:post_date_gmt>2006-04-14 08:01:50</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>google-calendar</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>People Like Sleep</title>
		<link>http://zef.me/2006/02/25/people-like-sleep/</link>
		<pubDate>Sat, 25 Feb 2006 09:54:19 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2006/02/25/people-like-sleep/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>After I got up this morning I had a conversation with a friend who I’ll call, let’s say, Justyna. The conversation went somewhat like this:</p>
<p><strong>Justyna:</strong> Hey you!<br><strong>Me:</strong> Good morning! Slept well?<br><strong>Justyna:</strong> Yes I did, how about you?<br><strong>Me:</strong> I did too, I like sleeping you see.<br><strong>Justyna:</strong> Who doesn’t?</p>
<p>That was an interesting question that immediately caught my attention. Does everybody like sleep, or do some people hate it? As I had been recently appointed as a professor in the totally new research area of Trivial Matters and Obviousity at Trinity College, Dublin I decided to do some trivial research on the matter.</p>
<p>But before I get into my stunning results, let me first give you some familiarity with the field of TMO. Little over four years ago now I got a big grant to conduct research in the area in eye counts on <em>homo sapiens</em>. My Ph.D. thesis was poetically called “Those Eyes We Have” and without getting into the technical details, its contribution was to give a historical perspective on the number of eyes humans (homo sapiens) have from the seventeenth century until now. My initial grant was for three years, but it took an additional year for me to complete the work. This additional year was caused by the suggestion by some people that one-eyed creatures existed. This turned out to be true, but these creatures were not homo sapiens.</p>
<p>Already before I defended my thesis I managed to publish two papers in <a href="http://www.nature.com/index.html" target="_blank">Nature magazine</a>, entitled: “Eye Counts in the 17th Century” and “Trivial Matters: An Exciting New Area”. The latter eventually led to my appointment as a head of a new school at Trinity College: Trivial Matters and Obviousity.</p>
<p>But back to the question Justyna posed: doesn’t everybody like sleep? As with many research areas, also in TMO the most interesting questions come from every day life. I remember well that I came up with the idea for my eye count research after noticing that people generally have two of them. Is that really true, I asked myself. For the answer you’ll have to read my thesis. This morning it was the same. Doesn’t everybody like sleep? It seems obvious, which makes it perfect TMO research.</p>
<p>The main TMO research tool is Google. Using well-chosen phrases it’s fascinating to see how much accurate information you can get from a big demographic. The trick with doing TMO research is the assumption that it is true, unless proven otherwise. The key observation here is the second part of that statement: unless proven otherwise. So what we’re really looking for are people who do not like sleep; who hate it.</p>
<p>So we do a search on Google for <a href="http://www.google.com/search?q=%22I+hate+sleeping%22&amp;start=0&amp;ie=utf-8&amp;oe=utf-8&amp;client=firefox-a&amp;rls=org.mozilla:en-US:official" target="_blank">“I hate sleep”</a>. This returns 16,300 results. Promising!</p>
<p>The <a href="http://www.google.com/url?sa=t&amp;ct=res&amp;cd=1&amp;url=http%3A//household.engadget.com/2006/01/23/axbo-alarm-clock-wakes-you-when-youre-ready/&amp;ei=TD4ARKO3JsKkQYy37foJ&amp;sig2=1kMeu5sntxuVsnGH1k_oGg" target="_blank">first result</a>, which according to Google is most relevant, as most people link to this statement — which implies it is an authoritative one — is one from a guy called “d”. He states “I hate sleeping. What a waste of time. I want an alarm clock that will wake me up when I’ve had just enough sleep to survive.” We can safely assume this “d” person does not like sleep very much.</p>
<p>When we look at the rest of the Google results, we see these people don’t really hate sleeping, they don’t appreciate sleeping under certain conditions, such as sleeping on the floor, sleeping in silence, sleeping in hotel beds and sleeping in the Aviary.</p>
<p>So what we can conclude is that, with only one exception, people like sleeping.</p>
<p>As we say in TMO: <a href="http://en.wikipedia.org/wiki/QED" target="_blank">QED</a> (Quod Erat Demonstrandum).</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>772</wp:post_id>
		<wp:post_date>2006-02-25 10:54:19</wp:post_date>
		<wp:post_date_gmt>2006-02-25 09:54:19</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>people-like-sleep</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Earphone Sound-Level Checker Ear</title>
		<link>http://zef.me/2006/03/09/earphone-sound-level-checker-ear/</link>
		<pubDate>Thu, 09 Mar 2006 20:21:17 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2006/03/09/earphone-sound-level-checker-ear/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>For the past four months we’ve been working on a very innovative product. A product that made everybody think, “wow, yes, we had never thought of that” whenever we told them about it. And the market potential is huge. Soon we’ll be looking for investors, so if you have a couple of thousand to spare, keep on reading. Prototypes tested in the lab work perfectly.</p>
<p>But we won’t tease you any longer and pitch the product to you now. Here on ZefHemel.com for the first time out in the open.</p>
<p>Everybody knows how annoying it can be — you’re sitting in a bus and the person next to you is listening to his or her disc player, or even more modern: his or her iPod and it is very loud. It is disturbing you. You try to say something about it, but the person doesn’t hear you, for obvious reasons.</p>
<p>The thing is that this is not necessarily the person’s fault. There is a problem, that you as the irritated neighbour may not be aware of: the person doesn’t know if his or her music is playing too loud. It is really hard to tell for him or her.</p>
<p>Now let’s assume you’re a person that doesn’t like to disturb people in your surroundings with your loud music. And I know there is a lot of you around, market research shows this. What do you do? How do you make sure you’re not a disturbance to anyone?</p>
<p>One could argue that you could put in your earphones, play some music and ark a friend if it’s too loud or not. But we don’t believe in friends. Friends are overrated and above all, they’re very expensive. The traditional friends are on their way down. These traditional kind of friends — the ones that can actually check if your headphones are on too loud — are becoming less and less popular and are increasingly replaced by friends on the internet. Some people claim to have hundreds of such friends online. All incapable of checking the sound levels of their earphones.</p>
<p>So increasingly there’s an opportunity here.</p>
<p>That’s why we’ll soon introduce a device that will replace the friend in the mentioned scenario. The working name is “earphone sound-level checker ear” (ESLCE), but we’re still looking for a snappier name.</p>
<p>So, what is it and how does it work? A picture says more than a thousand words so I’ll show you a picture of a prototype:</p>
<figure><img src="https://cdn-images-1.medium.com/max/800/0*noII2vK5AVhj1RAy.jpg"></figure><p>As you can see this looks a remarkable amount like an actual ear and it is supposed to. Sometimes people attempt to determine the external sound-level of their earphones by pressing it against their chest, but this is not a valid simulation of the sound level people around you will hear. For a perfect simulation you need ESLCE. It is made of material with the same sound-transfer properties as a real ear and when available on the market it will come in different shapes, one for each type of ear.</p>
<p>You use it by simply putting the earphone in the ESCLE, pressing play on your disc-man or iPod and adjust the volume until you find an acceptable noise level.</p>
<p>We’re still in negotiation on pricing with some of the material suppliers and factories, but we expect to offer ESLCEs for roughly 30 euro excl. VAT. We are taking pre-orders by <a href="mailto:zef@zefhemel.com" target="_blank">e-mail</a> starting now. We expect to be able to ship within 3 months.</p>
<p>Thank you for your attention.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1056</wp:post_id>
		<wp:post_date>2006-03-09 21:21:17</wp:post_date>
		<wp:post_date_gmt>2006-03-09 20:21:17</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>earphone-sound-level-checker-ear</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Java Schools</title>
		<link>http://zef.me/2005/12/31/java-schools/</link>
		<pubDate>Sat, 31 Dec 2005 11:39:02 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2005/12/31/java-schools/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Joel Spolsky <a href="http://www.joelonsoftware.com/articles/ThePerilsofJavaSchools.html" target="_blank">argues</a> that, now that more and more universities switch to teaching Java instead of Lisp/Haskell/C, it becomes harder for him and his “generation” of computer scientists to find the talent.</p>
<p>In “his years” computer science was still a hard study where most people dropped out, simply because it was too hard. They learned pointer arithmetic, recursion and lambda calculus, these days, as there’s a lack of well-educated computer scientists, colleges are somewhat pressured to lower standards. One of the ways to do that is by switching to simpler languages like Java. There’s no pointer arithmetic there, it’s all a lot simpler.</p>
<blockquote>The difficulty of these courses is astonishing. In the first lecture you’ve learned pretty much all of Scheme, and you’re already being introduced to a fixed-point function that takes another function as its input. When I struggled through such a course, CSE121 at Penn, I watched as many if not most of the students just didn’t make it. The material was too hard. I wrote a long sob email to the professor saying It Just Wasn’t Fair. Somebody at Penn must have listened to me (or one of the other complainers), because that course is now taught in Java.</blockquote>
<blockquote>I wish they hadn’t listened.</blockquote>
<blockquote>Therein lies the debate. Years of whinging by lazy CS undergrads like me, combined with complaints from industry about how few CS majors are graduating from American universities, have taken a toll, and in the last decade a large number of otherwise perfectly good schools have gone 100% Java. It’s hip, the recruiters who use “grep” to evaluate resumes seem to like it, and, best of all, there’s nothing hard enough about Java to really weed out the programmers without the part of the brain that does pointers or recursion, so the drop-out rates are lower, and the computer science departments have more students, and bigger budgets, and all is well.</blockquote>
<p>However, he argues, if people don’t learn functional programming anymore, how can one come up with <a href="http://labs.google.com/papers/mapreduce.html" target="_blank">MapReduce</a>, the one thing that made Google so massively scalable. It’s a (fairly) straight forward principle, coming from functional programming.</p>
<p>So do I agree with Joel? For the most part I do, the most controversial part of the article, arguably, is:</p>
<blockquote>Instead what I’d like to claim is that Java is not, generally, a hard enough programming language that it can be used to discriminate between great programmers and mediocre programmers.</blockquote>
<p>All I that comes up in my mind is: I don’t give a shit. Since when have programming languages become a recruiting tool?</p>
<p>I suppose I’m “old-school” myself, even though I graduated this (depending on when you read this) year only. My <a href="http://www.rug.nl" target="_blank">university</a> still taught functional programming, recursions, we did do some pointer arithmetic and stuff and I’m quite happy that they did.</p>
<p>Be sure to <a href="http://www.joelonsoftware.com/articles/ThePerilsofJavaSchools.html" target="_blank">read Joel’s essay</a>. And the responses that showed up in my (Google Reader) aggregator (sometimes in feeds where I hadn’t expected it):<br>* <a href="http://itre.cis.upenn.edu/~myl/languagelog/archives/002736.html" target="_blank">Language Log: Old School</a><br>* <a href="http://www.tbray.org/ongoing/When/200x/2005/12/30/Spolsky-Recursion" target="_blank">ongoing: Recursive Spolsky</a><br>* <a href="http://weblogs.asp.net/fbouma/archive/2005/12/30/434206.aspx" target="_blank">Frans Bouma: Teaching only Java is bad?</a></p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1075</wp:post_id>
		<wp:post_date>2005-12-31 12:39:02</wp:post_date>
		<wp:post_date_gmt>2005-12-31 11:39:02</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>java-schools</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Exams</title>
		<link>http://zef.me/2006/03/26/exams/</link>
		<pubDate>Sun, 26 Mar 2006 14:35:57 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2006/03/26/exams/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>A bit more silence the past two weeks. This was mostly because my exams are coming up. I only have exams once and I have six of them. If I fail one I will not get my master degree, so the pressure is high. However, to be fair I should note that never in the history of this course anybody failed one, so it should be ok.</p>
<p>Tomorrow (Monday) I’ll have NDS 101, which is about emerging web technologies (dynamic content, peer to peer and such), web retrieval (ranking techniques like Google’s) and artificial intelligence.</p>
<p>Wednesday I’ll have NDS 102, which is about networking. Low-level stuff like IP, UDP, TCP, routing, 802.11, 802.14.x, bluetooth etc. Not a big fan of this class.</p>
<p>Friday I’ll have NDS 103, which is about distributed systems (technologies like EJB, .NET, RMI and algorithms like transactions, two-phase commit, three-phase commit, checkpointing, vector clocks etc.)</p>
<p>Then Monday week I’ll have NDS 104, which is about software engineering (concurrency, development processes, aspect oriented programming etc.)</p>
<p>Wednesday week I’ll have NDS 105, which is about CSP (Communicating Sequential Processes), which is quite theoretical and about business and innovation (how to set up a business etc.), it’s a weird combo, I know.</p>
<p>And finally Friday week I’ll have NDS 106, which is about security and network management (SNMP, CIM, Policy-based management).</p>
<p>Then on April 11th I’m flying home to rest a bit and I return here to Dublin on the 24th. From then on I’ll work on my dissertation until September.</p>
<p>So for the next two weeks, keep your fingers crossed!</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1100</wp:post_id>
		<wp:post_date>2006-03-26 16:35:57</wp:post_date>
		<wp:post_date_gmt>2006-03-26 14:35:57</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>exams</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="personal"><![CDATA[Personal]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>The Terrors of Fame</title>
		<link>http://zef.me/2006/02/28/the-terrors-of-fame/</link>
		<pubDate>Tue, 28 Feb 2006 12:28:45 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2006/02/28/the-terrors-of-fame/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>As one of Ireland’s celebrities, life is getting harder and harder for me. Fans everywhere, calls from people that don’t say anything, and I won’t even start about the members of fan clubs trying to ask me questions while I walk to Trinity or to the store, leeches I call them.</p>
<p>This morning as I walked to Trinity there were three more leeches on the way. All members of Unizef. I did what I always do, just pretend I don’t see or hear them, even though their jackets are very clear about their obsession.</p>
<p>Yesterday, however, I found something more disturbing. It turns out some musician called “Didier Malherbe” has released an album about me, a few years ago already.</p>
<figure>

<img data-width="200" data-height="200" alt="Zeff" src="https://cdn-images-1.medium.com/max/800/0*sTL2OD28Au1lTR0V.jpg">
</figure><p>Even though it is called “Zeff”, it’s pretty obvious who it is about. The additional ‘f’ just gives him the opportunity to deny everything. This guy is crazy. I know I’m hard to resist, but this… look at the first seven track names:</p>
<ol>
<li>Zeff dance</li>
<li>Zeff Waves</li>
<li>drole de Zeff</li>
<li>Zeff over the dunes</li>
<li>Zeff up</li>
<li>Zeffing away</li>
<li>Zeff in the box</li>
</ol>
<p>It’s sick, I’m even a verb! Don’t believe the CD exists? Look at iTunes Music Store, look <a href="http://cdbaby.com/cd/didier03" target="_blank">here, they’re selling it</a>!</p>
<p>It’s getting worse and worse. In Latvia they even have candy named after me (Zefirs):</p>
<figure>

<img data-width="240" data-height="180" alt="Zefirs" src="https://cdn-images-1.medium.com/max/800/0*QQGBtUOVApSGVILT.jpg">
</figure><p>Believe me, fame is not all they make you believe it is.</p>
<p>Having said that, anyone want my autograph?</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1260</wp:post_id>
		<wp:post_date>2006-02-28 13:28:45</wp:post_date>
		<wp:post_date_gmt>2006-02-28 12:28:45</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-terrors-of-fame</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Your Life On Google</title>
		<link>http://zef.me/2006/03/06/your-life-on-google/</link>
		<pubDate>Mon, 06 Mar 2006 21:25:09 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2006/03/06/your-life-on-google/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>In the past years I’ve said a lot about Google and for a good reason, they’re a very interesting company. What started out as the smart search engine that you just had to check out, now is one of the most profitable companies in the world.</p>
<p>When I think about what I use Google for already, it’s quite a lot. I search the web, I search my hard drive (Desktop Search on Windows), I use it for my e-mail (Gmail), I read my RSS news (Google Reader), I make money (Google Ads), I spy on my visitors (Google Analytics), I sometime look at the roof of my building (Google Earth and Google Maps) and I sometimes talk to other people (Google Talk, Gmail Talk).</p>
<p>And there’s lots of other stuff you could potentially do on Google. You can store your video (Google Video). You can shop (Froogle). You can advertise and sell your stuff (Google Base). You can blog (Blogger). Apparently Google also launched some kind of site editor thing including hosting, but they stopped signups only a few hours after opening because of the huge number of people wanting to give it a go.</p>
<p>What do all these things in common? They are all hosted services, or at least almost all. All the data is stored on Google’s servers. Everything. You’d almost start wondering why you can’t just store everything at Google’s servers and be done with it.</p>
<p>Heh, yeah, that would be something wouldn’t it? All your files accessible from Google. Unlimited storage; your own computer’s hard drive simply functioning as a cache. Hah, that sounds pretty ridiculous doesn’t it?</p>
<p>Doesn’t it?</p>
<p>What are you looking at?</p>
<p>Huh?</p>
<p>The big presentation screen behind me? Oh sorry, didn’t see it, was too busy talking to you. Got distracted.</p>
<p><a href="http://glinden.blogspot.com/2006/03/in-world-with-infinite-storage.html" target="_blank">What does it say?</a> Let me see.</p>
<blockquote>In a world with infinite storage, bandwidth, and CPU power, here’s what we could do with consumer products —</blockquote>
<blockquote>Theme 1: Speed<br>Seems simple, but should not be overlooked because impact is huge. Users don’t realize how slow things are until they get something faster.<br>Users assume it takes time for a webpage to load, but the experience should really be instantaneous.</blockquote>
<blockquote>Gmail started to do this for webmail, but that’s just a small first step. Infinite bandwidth will make this a reality for all applications.</blockquote>
<blockquote>Theme 2: Store 100% of User Data<br>With infinite storage, we can house all user files, including: emails, web history, pictures, bookmarks, etc and make it accessible from anywhere (any device, any platform, etc).</blockquote>
<blockquote>We already have efforts in this direction in terms of GDrive, GDS, Lighthouse, but all of them face bandwidth and storage constraints today. For example: Firefox team is working on server side stored state but they want to store only URLs rather than complete web pages for storage reasons. This theme will help us make the client less important (thin client, thick server model) which suits our strength vis-a-vis Microsoft and is also of great value to the user.</blockquote>
<blockquote>As we move toward the “Store 100%” reality, the online copy of your data will become your Golden Copy and your local-machine copy serves more like a cache. An important implication of this theme is that we can make your online copy more secure than it would be on your own machine.</blockquote>
<blockquote>Another important implication of this theme is that storing 100% of a user’s data makes each piece of data more valuable because it can be access across applications. For example: a user’s Orkut profile has more value when it’s accessible from Gmail (as addressbook), Lighthouse (as access lis…</blockquote>
<p>Ehm…</p>
<p>Ok.</p>
<p>Anyone want more tea?</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1265</wp:post_id>
		<wp:post_date>2006-03-06 22:25:09</wp:post_date>
		<wp:post_date_gmt>2006-03-06 21:25:09</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>your-life-on-google</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>What I’ve Been Up To</title>
		<link>http://zef.me/2006/02/12/what-ive-been-up-to/</link>
		<pubDate>Sun, 12 Feb 2006 22:48:12 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2006/02/12/what-ive-been-up-to/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>As you’ve undoubtly noticed there has been little activity on my blog lately. There’s a couple reasons for that.</p>
<p>The first reason is the classic one: I’m pretty busy. As you may know I’m doing a quite intensive one-year master course at Trinity College, Dublin, namely <a href="https://www.cs.tcd.ie/courses/mscnds/" target="_blank">Networks &amp; Distributed Systems</a>, which eats time.</p>
<p>But there’s another much more important reason for this. Long term readers probably know about what I refered to as <a href="http://www.zefhemel.com/archives/2004/03/13/the-change" target="_blank">the change</a>. Zef, the guy that spent most of his free time programming all of the sudden (or actually gradually) stopped liking programming. This “change” happened roughly two years ago now and in hindsight it’s not the thing I’d today still refer to as “the change” unless you considered the whole of the past two years as a changeover phase. Things have changed a whole lot more since then, ultimately leading up to a point that came last Christmas in which I basically decided to “give up” the computer science thing and go do something completely different.</p>
<p>You wha?</p>
<p>During the past years my interests shifted a lot. First I liked programming, then I didn’t anymore and became more interested in software architecture. After a while I realised I didn’t see myself actually developing regular software either. Developing software for banks, administration stuff, web applications, nah. I moved up to another level, the meta level if you will: tools. Given that I don’t want to spend a lot of time developing software, what can I do to get it over with. How do I squeeze as much out of each minute that I spend on it as possible? If you want to do stuff like that the best way to go is to go into research. And I’m at a great place for that, Trinity College’s computer science department is quite big and does quite some research in interesting areas, such as distributed systems and information and knowledge engineering (think Googlish stuff). So I thought, yeah, when I finish with this year, I’ll just go do a Ph.D. and after that I don’t know, just continue doing research or something.</p>
<p>But at this stage I think I’m not going to, not anytime soon at least. I realised I am still interested in it, but mainly in observing what’s happening in that area. That’s basically what I’ve been doing the past years here at zefhemel.com, it was mainly about programming languages, development tools and other cool new technology things. Sometimes I came up with something myself but in most cases I didn’t actually build it, I just philosophised about it. I enjoyed writing about it.</p>
<p>2005 was an eventful year for me, if not the most influential in my life with the exception of my birth year ;) A lot of things happened in my personal life and I’m happy that they did. Also, when I came here to Ireland I started a newish life building on this “new me”, if you will. I got different friends who, generally, don’t do anything related to computers. And it’s great. We don’t often talk about computers and I never steer the conversation into that direction either. One of my good friends here does a language related study, we talk about that a lot and I find it very interesting. More interesting than what I’m studying myself now actually. That’s not a good sign, is it? Then last Christmas somebody asked me what I wanted to do after I finishing the course I’m doing. And I answered I’d probably do a Ph.D. Don’t you want to do something different? Well yeah, I do, but I’ve been investing into this since I was 9, you can’t just… Well I can, I’m still young, I’m 22 and will be 23 when I’m done. I can still do something else. And I most likely will. My current plan is to go back to Holland after I finish here (I’ll finish because it’s a waste to stop now and a M.Sc. degree from a well-known college like Trinity won’t hurt your career either) and study English Language and Culture. Yes that’s linguistics and literature and stuff. Yes that is quite different. But that’s the whole point. I want something different.</p>
<p>Stupid computers.</p>
<p>Anyway, that’s why I haven’t been posting a lot lately, I had to figure things out for myself. And I guess I pretty much did by now. I am still interested in technology, but how active I will be here I don’t know, it’s hard to predict. I might just change things around, but it’s a bit weird to do that. It is my personal homepage technically, but I’m thinking most of the people reading this blog don’t read it because they care about me as a person, they care about what I have to say about technology. So yeah. I haven’t decided on that. But I thought I’d let you know what’s been going on with me anyway, it’s only fair.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1373</wp:post_id>
		<wp:post_date>2006-02-12 23:48:12</wp:post_date>
		<wp:post_date_gmt>2006-02-12 22:48:12</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>what-ive-been-up-to</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Stories From the Front</title>
		<link>http://zef.me/2006/02/26/stories-from-the-front/</link>
		<pubDate>Sun, 26 Feb 2006 14:07:32 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2006/02/26/stories-from-the-front/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>The headlines are clear: “Protestant march plans trigger rage in Dublin”, “IRA supporters, police clash over parade”, “Orange march sparks Dublin riots”, “Police hurt as parade sparks Dublin riots”, “IRA-Protestant Brawls Spread in Dublin”. <a href="http://news.google.ie/?ncl=http://www.theage.com.au/news/world/protestant-march-plans-trigger-rage-in-dublin/2006/02/26/1140888744991.html&amp;hl=en" target="_blank">Google News Ireland related articles.</a></p>
<figure>

<img data-width="240" data-height="180" src="https://cdn-images-1.medium.com/max/800/0*4Lpb9S8ivs8PoYsG.jpg">
</figure><figure>

<img data-width="240" data-height="180" src="https://cdn-images-1.medium.com/max/800/0*ra07h632N4-4D4H1.jpg">
</figure><figure>

<img data-width="240" data-height="159" src="https://cdn-images-1.medium.com/max/800/0*jZDzIWz4r--4HW_I.jpg">
</figure><p>Yeah, riots in the Dublin city centre yesterday. And yours sincerely was at the front showing off his true journalistic abilities. Not as an eye witness, but as an eye witness of eye witnesses. When it happened, it turns out, I was about a street away from the action, totally oblivious to what was happening around the corner, patiently waiting for a friend, playing happy music on my iPod. Actually, my friend was late because she ran into a riot with lots of police and a car that was set on fire. This one to be exact:</p>
<figure>

<img data-width="240" data-height="180" src="https://cdn-images-1.medium.com/max/800/0*M7oh_90dFexOdOCN.jpg">
</figure><p>As I walked through Grafton Street a group of protesters walked by with pig-head masks on and loud music. I later concluded that they had been IRA protesters. When I got to the McDonald’s where I was supposed to meet my friend they had closed the doors and the protective screen that shops usually have down when they’re closed for the night. After a while they opened the doors again and a lot of customers came out. They had closed down everything to prevent rioting groups to enter the restaurant, luckily nothing happened.</p>
<p>Man, I feel like a journalist in Baghdad.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1469</wp:post_id>
		<wp:post_date>2006-02-26 15:07:32</wp:post_date>
		<wp:post_date_gmt>2006-02-26 14:07:32</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>stories-from-the-front</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Happy New Year</title>
		<link>http://zef.me/2006/01/01/happy-new-year-2/</link>
		<pubDate>Sat, 31 Dec 2005 23:15:36 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2006/01/01/happy-new-year-2/</guid>
		<description></description>
		<content:encoded><![CDATA[
<p>I wish everybody a very happy new year, that all your dreams may come true. :)</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1532</wp:post_id>
		<wp:post_date>2006-01-01 00:15:36</wp:post_date>
		<wp:post_date_gmt>2005-12-31 23:15:36</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>happy-new-year-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Gmail Talk and 30 Boxes</title>
		<link>http://zef.me/2006/02/07/gmail-talk-and-30-boxes/</link>
		<pubDate>Tue, 07 Feb 2006 19:41:52 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2006/02/07/gmail-talk-and-30-boxes/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Hey all, I’m sorry for not posting for so long, I’ll tell you why later. But for now let me just post about two things that have a very high coolness potential.</p>
<p>First, Google will be “integrating Google Talk into Gmail”:http://mail.google.com/mail/help/chat.html. That’s right they’re going to offer IM from inside their Gmail web application. If they do it the Google way that may potentially not suck. Once the Google Talk service is opened to other Jabber services it may actually become really useful. Another way to look at it is that they’re making Gmail more than just plain e-mail, it’s getting too fancy. But I myself am looking forward to it, Gmail is getting better every month and I love using it.</p>
<p>The second thing I wanted to point you to is “30 Boxes”:http://www.30boxes.com, an AJAX calendaring application. I’ve been looking for a good one for ages and this one seems really nice. It launched its beta last Sunday. I’ve put all my appointments in it now (it doesn’t allow you to import your other calendars yet, but it allows for export of data, like in iCal format). The way you enter your events is really nice, you can say stuff like “Lunch with Peter Wednesday at 4pm” and it will actually understand it and add a new event at Wednesday, 4pm named “Lunch with Peter”, you can even say “Lunch with Peter Wednesday at 4pm +peterblab@somedomain.com” and it will send an e-mail to that e-mail address (presumably Peter’s) asking to confirm the appointment. You can also tag appointments and repeat them weekly, monthly or yearly (actually when you say “Zef’s Birthday at June 22nd” it will ask “It seems you’re adding a birthday, do you want to repeat it yearly?”). Really cool. There’s more features like sharing (parts of) your calendar with buddies and putting other stuff like flickr photos on there. All really nice. Check it out! And if you want to try the sharing feature (haven’t tried it yet), feel free to add me as a buddy (with the zef at zefhemel dot com e-mail address).</p>
<p>“30 Boxes”:http://www.30boxes.com</p>
<p>Oh and if you haven’t tried Google’s “new” RSS feed reader “Google Reader”:http://www.google.com/reader, I really like it myself, but not everybody finds it great.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1559</wp:post_id>
		<wp:post_date>2006-02-07 20:41:52</wp:post_date>
		<wp:post_date_gmt>2006-02-07 19:41:52</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>gmail-talk-and-30-boxes</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Storing it All</title>
		<link>http://zef.me/2006/03/28/storing-it-all/</link>
		<pubDate>Tue, 28 Mar 2006 20:13:30 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2006/03/28/storing-it-all/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p><a href="http://aws.amazon.com/s3" target="_blank">Amazon S3</a> is Amazon’s new super-scalable storage service. They say you can store as many “items” as you want with sizes up 5GB each. Items can be access through their SOAP or RESTful web services and I think files can also be downloaded through BitTorrent or something, but I haven’t really looked at that yet.</p>
<p>And what does it cost? $0.15 per GB per month. Additionally you pay $0.20 per GB traffic to and from your item store. That means I can keep my whole music collection (which is approximately 15 GB right now) on S3 for $2.25/month, not bad huh? Most of my songs are encoded on 192kbit, that means that one minute of music is about 1.425 MB big. Assuming I’d want to stream my music from S3 I’d have to stream 85.5 MB/hour, which is 1.67 ct/hour. So if I listen to, say music for 8 hours per day, 30 days per month (which is a lot), that would cost me an additional $4/month. Still, not bad huh?</p>
<p>Do I want this? Do I want to store my music somewhere online? Well I would feel safe if I could. I had a couple of hard drive crashes and my laptop (yes, my iBook) has broken down about 3 times in the past 5 months, which meant it was being repaired for quite an amount of that time, all this time the only way I could access my music was from my iPod, which wasn’t great. I want my music to be safe and accessible from any computer. And not only my music, but also my documents and pictures. I’ve played with different solutions for this.</p>
<p>One of them is <a href="http://www.mp3tunes.com/" target="_blank">MP3Tunes Locker</a> which allows you to upload all your music for $39.95/year and stream it from the web and integrates into iTunes too (although this doesn’t work correctly on my Mac). But I don’t like it much, the web interface isn’t great and my music collection there is a mess after some failed upload attempts, plus it’s not very clear how I can get all my music out of it again in a simple way. And it’s only for music, you can’t store your documents there so it’s only a partial solution.</p>
<p>I’ve also played with Apple’s iDisk, which is a nice thing, but you only get 1 GB of space (for which you pay $99/year), but you can get a couple of GBs more, not the amounts I need and want though. Plus it’s really not meant to store and stream your music from.</p>
<p>My Dreamhost account comes with 20GB of storage and 1TB of free transfer, I can also set up WebDAV access and upload files there. I’ve done this and put all my pictures and a lot of my documents there. Still it’s still not <strong>it</strong>. I’m not sure how safe my files are there and how flexible it is.</p>
<p>S3 seems pretty nice though, but it’s just a webservice API, you have to build the applications on it yourself and I’m lazy, I see a lot of cool things you could do with it (like online music storage and streaming), but don’t have the time or, how shall I call it, patience to create it.</p>
<p>S3 is really easy to use, I played with a <a href="http://www.other10percent.com/?p=25" target="_blank">Python module</a> that <a href="http://www.other10percent.com/?p=15" target="_blank">allows you to easily create items and upload files</a> and such and it’s really nice and easy. Some people already started using this module to <a href="http://www.postneo.com/2006/03/22/backing-up-flickr-photos-with-amazon-s3" target="_blank">backup their Flickr photo collection to S3</a>, and this can be done in about 25 lines of Python code.</p>
<p>And the nice thing is you can sign-up for free, you only get billed for what you use. I played around a bit and it seems I owe Amazon $0.01.</p>
<p>Being the third paragraph in a row that starting with “nice”, it would be really nice if somebody built a synchronization application for this, just to backup a directory or a couple. A web interface that allowed you to browse your ‘buckets’ would also be useful. I think Amazon got a very powerful product here, it’s simple, which is what makes it so attractive. But we need applications that use it!</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1644</wp:post_id>
		<wp:post_date>2006-03-28 22:13:30</wp:post_date>
		<wp:post_date_gmt>2006-03-28 20:13:30</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>storing-it-all</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Moved to DreamHost</title>
		<link>http://zef.me/2006/03/11/moved-to-dreamhost/</link>
		<pubDate>Sat, 11 Mar 2006 20:19:16 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2006/03/11/moved-to-dreamhost/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>I’ve moved over ZefHemel.com to my new <a href="http://www.dreamhost.com/r.cgi?163896" target="_blank">DreamHost</a> account. I used a Virtual Private Server account at <a href="http://www.jvds.com" target="_blank">JVDS</a> first which worked well and was extremely flexible (I could install anything I want), it had two draw-backs for me:</p>
<ul>
<li>It’s expensive (well for me now anyway)</li>
<li>You have update it and administrate it yourself, which was something I enjoyed doing before, but now it’s just a burden</li>
</ul>
<p>DreamHost offers everything I need: 20GB of space, 1TB of monthly transfer (both a whole lot more than I need), unlimited domains, unlimited sub-domains, subversion, CVS, Ruby on Rails, PHP (4 and 5), MySQL, WebDAV, FTP, SSH and much more. And I only pay $9.95/month ($7.95 if you pre-pay 2 years). Excellent stuff.</p>
<p>I recommend you take a look at their <a href="http://www.dreamhost.com/r.cgi?163896" target="_blank">service</a>. And yes, I get paid if you sign-up using that link.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1690</wp:post_id>
		<wp:post_date>2006-03-11 21:19:16</wp:post_date>
		<wp:post_date_gmt>2006-03-11 20:19:16</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>moved-to-dreamhost</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Presentation Zen</title>
		<link>http://zef.me/2006/03/08/presentation-zen/</link>
		<pubDate>Wed, 08 Mar 2006 17:58:59 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2006/03/08/presentation-zen/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Most of you probably do presentations occasionally or at least did them at some point in your life. Some are good at it, some are bad at it, some aren’t great but want to improve, some are great but want to get better. If you belong to either of the last two groups, I’ll recommend one of my favourite weblogs to you today.</p>
<p>I was terrible at presentations. Terrible. Throughout secondary school I had blackouts when standing up in front of the crowd and nothing came out. I hated presenting. Hated it.</p>
<p>When I got to university this somewhat improved. At least I didn’t have blackouts anymore. I didn’t enjoy doing them at all still, but at least I didn’t freeze up. It was good I wasn’t wearing thin shirts though, because I was still sweating like crazy. I also did two presentations in English back in Holland, they went reasonably well because I prepared them well. I’m no expert in this area at all, but if you’re a non-native speaker of English and don’t feel comfortable doing presentation in that language: prepare. Everybody will always tell you this, but it really works. Perform the presentation alone in your room out loud, it’s not enough to think what you’ll say in your head. Actually say it. Out loud. Do it a couple of times and you’ll feel a lot more confident.</p>
<p>Only since I came here to Ireland I started to enjoy doing presentation a bit. It’s not like I’m really looking forward to it, but I actually doing enjoy them if there’s something interesting to tell. It was a great kick for me when during one class we had 20 minutes to read a section of a paper, knock up a few slides and present it in front of the group for 5 minutes. It was in the first or second week of my studies here and it went well. This was an incredible feeling. I could do it! I’m not terrible, and it was in English too that people could understand. It was very good for my self confidence.</p>
<p>A while ago I discovered a site called <a href="http://presentationzen.blogs.com/presentationzen/" target="_blank">Presentation Zen</a>. It’s a site that gives great tips on doing presentations and comments on presentations (mainly IT related) of well-known presenters, for example Bill Gates and Steve Jobs. It’s mostly about slide design, but also other aspects are covered. I really enjoy reading it.</p>
<p>And to be quite frank with you. It’s even great if you don’t want to improve your presentations at all, but just want to see why <a href="http://presentationzen.blogs.com/presentationzen/2005/11/the_zen_estheti.html" target="_blank">Steve Jobs kicks</a> <a href="http://presentationzen.blogs.com/presentationzen/2005/11/it_was_one_of_t.html" target="_blank">Bill Gates’ buttocks when it comes to presenting</a>.</p>
<p>And be honest, who doesn’t?</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1726</wp:post_id>
		<wp:post_date>2006-03-08 18:58:59</wp:post_date>
		<wp:post_date_gmt>2006-03-08 17:58:59</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>presentation-zen</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>PyRDF</title>
		<link>http://zef.me/2006/06/20/pyrdf/</link>
		<pubDate>Tue, 20 Jun 2006 14:48:12 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2006/06/20/pyrdf/</guid>
		<description></description>
		<content:encoded><![CDATA[
<p><a href="http://www.zefhemel.com/archives/2006/06/19/me-myself-and-rdf" target="_blank">Yesterday’s post and comments</a> got me thinking. It still is fairly hard to manipulate and generate RDF data and I don’t think it really has to be. <a href="http://activerdf.org/" target="_blank">ActiveRDF</a> (a Ruby RDF API) takes an interesting approach and I thought I’d build something similarish in Python, so I started that and after a couple of hours I already have something quite neat. I’ve called it PyRDF for now and here’s a sample piece of code for you to get a feel for how it works.</p><hr>

<p><strong>import</strong> pyrdf<br><strong>from</strong> pyrdf <strong>import</strong> RdfStore, RdfResource, RdfType<br><strong>from</strong> rdflib.Namespace <strong>import</strong> Namespace</p>
<p>NS_P = <em>Namespace</em>(‘http://www.zefhemel.com/ont/person#')<br>NS_J = <em>Namespace</em>(‘http://www.zefhemel.com/ont/job#')</p>
<p>store = <em>RdfStore</em>(defaultNS = NS_P)<br>store.prefix_mapping(‘p’, NS_P)<br>store.prefix_mapping(‘j’, NS_J)<br>pyrdf.setDefaultStore(store)</p>
<p>Person = <em>RdfType</em>(NS_P[‘Person’])<br>Website = <em>RdfType</em>(NS_P[‘Website’])<br>Job = <em>RdfType</em>(NS_J[‘Job’])</p>
<p>zef = <em>RdfResource</em>(NS_P[‘zef’], rdf_type = Person)<br>zef.name = <em>‘Zef Hemel’</em><br>zef.age = <em>22</em><br>zef.country = <em>‘Ireland’</em><br>zef.city = <em>‘Dublin’</em></p>
<p>job1 = <em>RdfResource</em>(NS_J[‘job1’], defaultNS=NS_J, rdf_type = Job)<br>job1.name = <em>‘Student System Administrator’</em><br>job1.description = <em>‘Fiddling around with Linux servers’</em><br>job1.startYear = <em>2003</em><br>job1.endYear = <em>2005</em><br>job2 = RdfResource(NS_J[‘job2’], rdf_type = Job)<br><em># And without the defaultNS set:</em><br>job2.j_name = <em>‘Writing website’</em><br>job2.j_description = <em>‘Writing own weblogs, not that well paid.’</em><br>job2.j_startYear = <em>2003</em></p>
<p>zef.hadJob = [job1, job2]</p>
<p>zef.website = []</p>
<p>zefhemelcom = <em>RdfResource</em>(NS_P[‘zefhemelcom’], rdf_type = Website)<br>zefhemelcom.title = <em>‘ZefHemel.com’</em><br>zefhemelcom.url = <em>‘http://www.zefhemel.com'</em><br>zef.website.append(zefhemelcom)<br>zefnu = <em>RdfResource</em>(NS_P[‘zefnu’], rdf_type = Website)<br>zefnu.title = <em>‘Zef.Nu’</em><br>zefnu.url = <em>‘http://zef.nu'</em><br>zef.website.append(zefnu)</p>
<p><strong>print</strong> store.serialize(format=”pretty-xml”)</p>
<hr>

<p>Here is the <a href="http://svn.zefhemel.com/pyrdf/test.txt" target="_blank">output of that</a>, saves quite some typing eh?Ok, you probably need an understanding of XML and XML namespaces to fully understand this but even if you don’t, it should be pretty obvious. PyRDF right now has three classes:</p>
<ol>
<li>
<em>RdfStore</em>, which stores RDF triples as described before. You don’t have to do much with this except registering some prefixes. Later on you can also use this class to serialize your data into RDF/XML and to save it and load it from files, but that doesn’t work yet.</li>
<li>
<em>RdfResource</em>, which represents a resource, you can simply see this as an object. When instantiating an RdfResource you have to give it at least an URI. Additionally you can pass it:</li>
</ol>
<ul>
<li>
<em>store</em>, a place to store the resource’s data, by default it’s all stored in the defaultStore and usually that’s fine.</li>
<li>
<em>defaultNS</em>, this default namespace that’s used for the property names. More on this later.</li>
<li>A number of initial properties and values. This is the same as writing <em>resourcename.property = value</em>, but is just added for convenience</li>
</ul>
<ol><li>
<em>RdfType</em>, this is a direct subclass of <em>RdfResource</em>, it doesn’t do much, hardly anything at the moment. Later it could potentially be used to enforce correct typing and property use and stuff.</li></ol>
<p><em>RdfResource</em>s have properties, just like objects. Properties can have other resources, literals (strings, integers etc.) or lists (of resources or literals) as values. PyRDF tries to automatically guess what kind of type a property is. If you start using it as a list, it will function as a list, if you put or literals or RdfResources in it, it will (hopefully) act as expected.</p>
<p>By default the property name is combined with the default namespace of the resource (or store), so for example if your default namespace is <a href="http://www.zefhemel.com/ont/person#" target="_blank">http://www.zefhemel.com/ont/person#</a> and your property name is age, then the URI of the property will be <a href="http://www.zefhemel.com/ont/person#age." target="_blank">http://www.zefhemel.com/ont/person#age.</a> If you use a prefix followed by an underscore in the property name, like j_description, the default namespace will be overridden by the namespace associated with the j prefix. So in this case the URI will be <a href="http://www.zefhemel.com/ont/job#description." target="_blank">http://www.zefhemel.com/ont/job#description.</a></p>
<p>That’s it, that’s all that there’s to it and I think it’s pretty neat. I will now work on the querying capabilities, but I think it’s already quite nice like this.</p>
<p>If you want to play around with it you can do a subversion check-out from <a href="http://svn.zefhemel.com/pyrdf" target="_blank">http://svn.zefhemel.com/pyrdf</a> or you can just visit that address and download it with your browser. You need <a href="http://rdflib.net" target="_blank">rdflib</a> to run it, but I think it comes preinstalled with Python (on Windows anyway).</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>250</wp:post_id>
		<wp:post_date>2006-06-20 16:48:12</wp:post_date>
		<wp:post_date_gmt>2006-06-20 14:48:12</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>pyrdf</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Me, Myself and RDF</title>
		<link>http://zef.me/2006/06/19/me-myself-and-rdf/</link>
		<pubDate>Mon, 19 Jun 2006 12:41:08 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2006/06/19/me-myself-and-rdf/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>For the past three months or so I have been working on my dissertation full time. I think I mentioned before that it was about context-aware semantic service matching on ad-hoc networks, and more specifically, developing middleware (APIs) to allow developers to do this more easily. I’m not going to talk about this project much (I don’t even know what I am allowed to say as we might be publishing on this). But I feel that after working with one particular technology for a few months now I should be able to define the significance of it. That technology is RDF and understanding what it does and why it matters has been the biggest challenge I encountered so far during this research. And still I cannot say that I fully appreciate its power. But I’ll try to give you at least a feel for why it matters.</p>
<p>The web is great. The web works. The web gives us loads and loads of information we’re interested in through tables, images and plain text. Pages are interlinked which allows us to easily jump from one page to the other. Fantastic.</p>
<p>But now let’s say you were recently hired by a software company that runs a big recruitement site. They list jobs and try to find good people for the jobs. Your assignment is to write a piece of software that spiders the web to find people that fit a particular job and create profiles of them. Stuff we are interested in are personal information like name, address, country, but also work experience and other stuff you usually put on your resume.</p>
<p>How would you do this?</p>
<p>As a normal web surfer this already is a challenge. I mean, how do you find a random person that fits a profile? Your best bet is to do a Google search on the job area and hope you’ll find some individuals. After that it’s not so hard anymore. Personaly websites and blogs usually list some personal information and a resume (in HTML or PDF format) and so on.</p>
<p>But how would you let a computer do this?</p>
<p>To be honest, beats me. The computer can only retrieve web pages and look at HTML code which doesn’t say that much. You can do some good guesses, but the information you can get from a free-form HTML page is always limited.</p>
<p>Why is it so hard?</p>
<p>The answer is the lack of <a href="http://www.thefreedictionary.com/semantics" target="_blank">semantics</a>.</p>
<blockquote>se·man·tics (s</blockquote>
<figure>

<img data-width="7" data-height="15" src="https://cdn-images-1.medium.com/max/800/0*4FcARMFkmw5LroL2.gif">
</figure><blockquote>-m</blockquote>
<figure>

<img data-width="7" data-height="15" src="https://cdn-images-1.medium.com/max/800/0*vYa8eKv3CPdJG2tr.gif">
</figure><blockquote>n</blockquote>
<figure>

<img data-width="4" data-height="22" src="https://cdn-images-1.medium.com/max/800/0*oTqdf7PMOSwtqkes.gif">
</figure><blockquote>t</blockquote>
<figure>

<img data-width="7" data-height="15" src="https://cdn-images-1.medium.com/max/800/0*9Zu_Sx3U8T3IgDdu.gif">
</figure><blockquote>ks)</blockquote>
<blockquote>
<em>n.</em> <em>(used with a sing. or pl. verb)</em>
</blockquote>
<ol>
<li>
<em>Linguistics</em> The study or science of meaning in language.</li>
<li>
<em>Linguistics</em> The study of relationships between signs and symbols and what they represent. Also called <em>semasiology</em>.</li>
<li>The meaning or the interpretation of a word, sentence, or other language form: <em>We’re basically agreed; let’s not quibble over semantics.</em>
</li>
</ol>
<p>(X)HTML’s semantic power is very limited. There are some tags like h1, h2, …, address, strong, em, that add a little bit of semantic information, but it’s not nearly enough. Not even close.</p>
<p>Let’s have a look at my very own <a href="http://www.zefhemel.com/about" target="_blank">about page</a>. There is quite some information on that page that may be of interest to the application yoiu were asked to develop. My full name is there, gender, date of birth, occupation and some contact details. There’s also a link to a (bit outdated) CV. But can a computer understand this? Maybe a bit, I structured this information pretty clearly. It’s very possible to construct a parser that extracts the interesting information from <em>this particular page</em>. But we don’t care about me in particular, it has to be a generic solution. We’re not going to construct parsers for each way of writing a personal website, it would be more efficient to manually input all the data.</p>
<p>No, looking at the HTML code is pretty much hopeless. As mentioned we need semantic information. Statements about a person. For example, information like this would be much more helpful:</p>
<p><a href="http://www.zefhemel.com" target="_blank">http://www.zefhemel.com</a> hasName “Zef Hemel”<br>http://www.zefhemel.com hasGender <a href="http://someuri.org/genders#Male" target="_blank">http://someuri.org/genders#Male</a><br>http://www.zefhemel.com hasDateOfBirth “1983–06–22”<br>http://www.zefhemel.com hasOccupation <a href="http://www.cs.tcd.ie/courses/mscnds" target="_blank">http://www.cs.tcd.ie/courses/mscnds</a><br>http://www.zefhemel.com hasEmail “zef@zefhemel.com”</p>
<p>You get the idea. If instead of HTML code we would get a string of statements like this, that would be much more helpful. Essentially this kind of information is really simple, it is just a bunch of triples in the form:</p>
<p>subject predicate object</p>
<p>Or less formal:</p>
<p>subject property value</p>
<p>Which is very much like writing object-oriented code:</p>
<p>subject.property = value</p>
<p>If only we had information like this, that would be great. And guess what? This is pretty much what RDF is. There are some small technicalities, which I’ll quickly explain, but essentially this is pretty much it. In RDF, <em>subject</em>s and <em>predicate</em>s are all URIs (Uniform Resource Identifiers). URIs are different from URLs in the sense that they don’t necessarily identify <em>Locations</em> but are simply <em>Identifiers</em>, i.e. the “address” you supply with the URI does not really have to exist as long as it’s <em>identifying </em>(unique). The <em>object</em> of each triple can either be an URI (like in the hasOccupation triple) or a literal value (like a number, string, date and so on). So in RDF a triple really looks like this:</p>
<p><a href="http://www.zefhemel.com" target="_blank">http://www.zefhemel.com</a> <a href="http://someuri.org/concepts#hasName" target="_blank">http://someuri.org/concepts#hasName</a> “Zef Hemel”</p>
<p>or even</p>
<p><a href="http://www.zefhemel.com" target="_blank">http://www.zefhemel.com</a> <a href="http://someuri.org/concepts#hasGender" target="_blank">http://someuri.org/concepts#hasGender</a> <a href="http://someuri.org/genders#Male" target="_blank">http://someuri.org/genders#Male</a></p>
<p>RDF has different so-called serializations, ways of writing it down. The most common one is RDF/XML. Wordpress keeps messing up any HTML I insert here so I’ll link to a <a href="http://www.w3schools.com/rdf/rdf_example.asp" target="_blank">brief example instead</a>.</p>
<p>The question is who defines the predicates/properties you can use (like hasName, hasGender etc.). The answer is you, you have complete freedom in this. In one way that’s very nice, in another way it causes some trouble.</p>
<p>If an application retrieves the above RDF file from the web somewhere it is possible to query it. One can ask “give me all objects where the subject is <a href="http://www.zefhemel.com" target="_blank">http://www.zefhemel.com</a> and the predicate is http://someuri.org#hasName" and it would return “Zef Hemel”, so that’s handy. However who says that somebody else on another website used the same set of predicates? Maybe they didn’t use <a href="http://someuri.org#hasName" target="_blank">http://someuri.org#hasName</a> but <a href="http://myuri.org#name." target="_blank">http://myuri.org#name.</a> How can a computer know they mean the same? Well that is a problem, but it can be solved with inference rules. Somewhere on the web the fact should be stated that <a href="http://someuri.org#hasName" target="_blank">http://someuri.org#hasName</a> and <a href="http://myuri.org#name" target="_blank">http://myuri.org#name</a> are the same thing and therefore give you the same information.</p>
<p>Inference rules can be used for many other things, they can be used to infer new statements that weren’t obvious before. For example let’s say that in the semantic version of my resume it says that:</p>
<p><a href="http://www.zefhemel.com" target="_blank">http://www.zefhemel.com</a> hadJob #RuGJob1<br>http://www.zefhemel.com hadJob #OtherJob<br>#RuGJob1 hasName “System Administration”<br>#RuGJob1 startYear 2002<br>#RuGJob1 endYear 2005<br>#OtherJob hasName “Writing stuff”<br>#OtherJob startYear 2003</p>
<p>The fact that no endYear is specified means the job hasn’t ended yet; this person is still doing this job. So one could construct a rule like this:</p>
<p>?p hadJob ?job, ?job endYear ?ey, !bound(?ey) -&gt; ?p hasJob ?job</p>
<p>(you can read the commas as logical ANDs here).</p>
<p>This rule says that if somebody has a job where the endYear is not speficied, this person still has this job. We extracted new information by using a rule.</p>
<p>One can imagine that when a degree is mentioned (like the <a href="http://www.cs.tcd.ie/courses/mscnds" target="_blank">http://www.cs.tcd.ie/courses/mscnds</a> one), this URI is retrieved and it is checked if it contains any RDF information. It could contain information about the skills somebody has that completed this degree for example. By fetching related RDF resources, a lot of information could be extracted, useful information.</p>
<p>This is called the semantic web.</p>
<p>This looks like an utopian idea doesn’t it? Well it is. There are some problems with the semantic web, however. The biggest one being the amount of semantic data that is available today. For this to work a lot more data should be published in RDF and so far it’s not catching on that much. That’s a big issue. Yesterday I found a website called <a href="http://www.rdfdata.org" target="_blank">rdfdata.org</a> that links to sources of RDF data, some quite interesting, like <a href="http://labs.systemone.at/wikipedia3" target="_blank">a semantic wikipedia</a>, but we need much and much more.</p>
<p>Tim Berners-Lee, who invented the web and also invented the semantic web, has been fighting for the semantic web to catch on for many years, but with not that much visible result (you really have to look for places where it’s applied).</p>
<p>Maybe you can think about how RDF could be applied in your applications.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>296</wp:post_id>
		<wp:post_date>2006-06-19 14:41:08</wp:post_date>
		<wp:post_date_gmt>2006-06-19 12:41:08</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>me-myself-and-rdf</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Moving from OS X to Linux</title>
		<link>http://zef.me/2006/06/16/moving-from-os-x-to-linux/</link>
		<pubDate>Fri, 16 Jun 2006 14:13:31 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2006/06/16/moving-from-os-x-to-linux/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Me? No don’t worry. But some very notable people (in my opinion anyway) are either considering it, or doing it: moving from OS X to Linux. <a href="http://diveintomark.org" target="_blank">Mark Pilgrim</a>, who has been using Macs for over 20 years and who is well known for his weblogs and (online) books on Python, OS X and other things, is switching to <a href="http://www.ubuntu.com" target="_blank">Ububtu Linux</a>. That’s quite a big deal, as generally the tendency seems to be that people move from Linux to OS X. Not the other way around.<br><a href="http://daringfireball.net/2006/06/and_oranges" target="_blank">Daring Fireball</a> writes a very long article on Mark’s decision. And <a href="http://www.tbray.org/ongoing/When/200x/2006/06/15/Switch-From-Mac" target="_blank">Tim Bray (inventor of XML) now is wondering if it is time to switch too</a>. Their main concern? Apple’s openness. Apple built its operating system on FreeBSD, which is an open source operating system, but for the rest doesn’t seem to care that much about openness. Many of its file formats are not open and documented (like iTunes’ library file format and iPhoto’s album file format) and they lock you in, in a way.</p>
<p>They’re hearing very positive stories about Ubuntu so Mark’s switching to that. Interesting.</p>
<p>Anyway, it made me download Ubuntu and after playing with the LiveCD a bit I even got the wireless to work so I’m defragmenting my harddrive now and will partition it and then install Ubuntu on this laptop too (the Dell Latitude D400 that I got from Trinity). I brought <a href="http://www.zefhemel.com/archives/2006/06/04/zuzia" target="_blank">Zuzia </a>to a new hospital today (my iBook, if that wasn’t clear), until then I’ll be playing with Ubuntu for a bit and see how I like it.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>334</wp:post_id>
		<wp:post_date>2006-06-16 16:13:31</wp:post_date>
		<wp:post_date_gmt>2006-06-16 14:13:31</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>moving-from-os-x-to-linux</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>All Marketers are Liars</title>
		<link>http://zef.me/2006/06/21/all-marketers-are-liars/</link>
		<pubDate>Wed, 21 Jun 2006 11:34:17 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2006/06/21/all-marketers-are-liars/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>It’s interesting to see how different people respond differently to a post like <a href="http://www.zefhemel.com/archives/2006/06/18/the-store" target="_blank">The Store</a>. A post that doesn’t seem to make much sense. <a href="http://www.istartedsomething.com" target="_blank">Long Zheng</a> sent me something quite interesting in response: a link to <a href="http://video.google.com/videoplay?docid=-6909078385965257294" target="_blank">this video about marketing</a> by Seth Godin (whose last name, incidentally, is the Dutch word for goddess).</p>
<p>It’s a presentation of about an hour that Seth Godin gave at Google and I was very much impressed by what he said. He’s a clever guy and knows what he’s talking about. It put a new light on marketing for me. If you have an hour I suggest you watch it. <a href="http://sethgodin.typepad.com" target="_blank">He has a blog too</a>. And you can download one of his books for free: <a href="http://www.sethgodin.com/ideavirus/01-getit.html" target="_blank">Unleashing the IdeaVirus</a>.</p>
<p>It’s all about telling stories.</p>
<p><a href="http://video.google.com/videoplay?docid=-6909078385965257294" target="_blank">Watch the video</a>.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>436</wp:post_id>
		<wp:post_date>2006-06-21 13:34:17</wp:post_date>
		<wp:post_date_gmt>2006-06-21 11:34:17</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>all-marketers-are-liars</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Forum 2.0</title>
		<link>http://zef.me/2006/06/28/forum-2-0/</link>
		<pubDate>Wed, 28 Jun 2006 15:24:56 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2006/06/28/forum-2-0/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>With blogging going mainstream, do we still really need forums in their current form? I think it might be time for a shift.</p>
<p>But before I begin talking about that, let’s define what forums and blogs are to make the differences clear.</p>
<p>A forum is a place, a website, where people with similar interests gather. People start topics to talk about, others can reply to those. Topics are usually categorized into boards on certain subjects.</p>
<p>A blog is a website written by usually one person, sometimes a group. Sometimes an idea is brought up, sometimes a question is asked, sometimes a question is answered, sometimes visitors are just pointed to interesting ideas or discussions. Blog posts can be categorized. Some bloggers blog about one subject, some blog about a wide variety of subjects.</p>
<p>Both forums and blogs allow for discussion. Forums centralize the discussion on one site, blogs have distributed discussions which are made traceable through links and trackbacks.</p>
<p>When I participate in a discussion on a forum and I think I have something notable to say (which is longer than a couple of lines) I have to decide if I post it on the forum itself, or if I post it on my blog where a broader audience will read it. Sometimes I double post it or link to my blog post on the forum. I feel that if I put a lot of effort into a forum post it will quickly disappear in the loads of other posts and the effort seems lost, that’s why I like posting it on my blog. It’s easier to find things back and to keep a record of the things I write.</p>
<p>Sometimes I find out about somebody who often has interesting things to say, I would like to know what this person writes, not just on one forum but everywhere.</p>
<p>What if we would post everything we had to say on our own blogs? Would it be possible to recreate the forum experience (easy to follow discussions, only one place to go for topical discussions) with the content coming from blogs? Could we get the advantages of both blogs and forums at the same time?</p>
<p>Well partly this is already happening. If you look at ‘Planet’ sites, sites that use the <a href="http://www.planetplanet.org/" target="_blank">Planet</a> software, such as <a href="http://planetjava.org/" target="_blank">Planet Java</a> and <a href="http://planetrdf.com" target="_blank">PlanetRDF</a>, these take a first step into that direction. They aggregate feeds of blogs that talk about one subject. The blogs itself doesn’t have to be purely about one subject, it’s just the posts that are in one of the blog’s categories (related to the planet site) that are being aggregated. Many pieces of blog software support this, like WordPress. If you would only be interested in posts about my personal life, you could subscribe to <a href="http://www.zefhemel.com/categories/personal/feed" target="_blank">this feed</a> for example, which only lists posts in my “Personal” category.</p>
<p>So what you have on a planet site is basically a big group blog of people talking about the same topic. Great, but still not hardly as convenient as a forum. What we want is grouped discussions, a view on how the discussion started and evolved from there. On these planet sites discussions between the bloggers take place but they’re not easy to find as it’s simply presented as a long stream of posts with no easy way to see links between them.</p>
<p>A site like <a href="http://www.techmeme.com/" target="_blank">TechMeme</a> takes a more clever approach. What TechMeme does is aggregate a number of blogs and see what they link to. If they all seem to link to one particular page, that’s apparently something important that’s being talked about there. This popular page (or one post linking to it) is promoted to being a main article and the other blog posts linking to it are grouped with as discussion of the main article. The more people link to the article, the higher it ends up at TechMeme.com. The result of this is actually very interesting. It is very easy to see what’s hot on technology blogs right now. And it feels a lot more like a forum already.</p>
<p>I wonder, wouldn’t it be possible to generalize and improve this idea a bit?</p>
<p>Say you’re very interested in poodles. You got friends who share your obsession and you want to set up some kind of place to discuss them. Instead of starting a regular forum each of you start a blog. This is easy and free. Everybody can start one at for example <a href="http://www.blogger.com" target="_blank">Blogger</a>. Then you create a website for your poodle website and install this new kind of forum software, that I’ll call Forum 2.0 software for now. In there you can add all your friends’ blogs and it will automatically poll them from time to time to see if there are new posts. The new posts are republished on this central forum and if links between the posts are found a thread-like structure is created from them (a bit like TechMeme). As people in this small blogging club link to posts more they are ranked higher. It now becomes very easy to track discussions about poodles now. As new people find out about this forum they want to join in. They can easily add their blogs too.</p>
<p>In the future it would even be possible to query sites like <a href="http://www.technorati.com" target="_blank">Technorati</a> to find blogs outside the list that are linking to posts of listed bloggers. Additionaly features can be imagined here. Digg-like features that are also present in forums, like rating topics. Maybe even allowing users to post on their blogs from inside the Forum 2.0 application (this is possible with the different weblog APIs available), this way people don’t even have to leave the application to respond, the forum experience can be exactly the same as in a “Forum 1.0” application. Still the actual posts are stored on each of the people’s blogs.</p>
<p>In this way you no longer have to cross-post on forums anymore either. You just add your blog to each of the forums you’re interested in and your contributions will appear there automatically.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>557</wp:post_id>
		<wp:post_date>2006-06-28 17:24:56</wp:post_date>
		<wp:post_date_gmt>2006-06-28 15:24:56</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>forum-2-0</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Picasa Web Albums, the Point?</title>
		<link>http://zef.me/2006/06/15/picasa-web-albums-the-point/</link>
		<pubDate>Thu, 15 Jun 2006 18:23:15 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2006/06/15/picasa-web-albums-the-point/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>I like Google, I like their philosphy, and I thought I knew their business model. Google changed Sun’s slogan “the network is the computer” into “the web is the computer”. One step at a time they’re replacing desktop applications with web applications, making money from content-based advertising. If you are reading an e-mail from your favourite mailing list “elephant’s digest” you would get ads for the zoo, if you read dirty stories you would get ads for porn websites and so on. This is the Google business model. This what made them big, this is what made them profitable.</p>
<p>Essentially they offer all their services and software for free and make money from non-intrusive advertising. That’s great. That’s what I like. That’s what people like.</p>
<p>There were some acquisitions that Google made that I didn’t really see fit into its model. Most notably <a href="http://picasa.google.com" target="_blank">Picasa</a>, which was acquired a year or maybe two ago and more recently: <a href="http://sketcup.google.com" target="_blank">Sketchup</a>. Both very nice pieces of software, no doubt about it, but both desktop applications that seem to have little to do with Google’s core business: getting your data on their servers and allowing you to do interesting things with it.</p>
<p>Two days ago Google launched a closed beta of <a href="http://picasaweb.google.com" target="_blank">Google Picasa Web Albums</a>. First of all that’s a strange name. Not a Googlesque name. Google gives their services straightforward names like Google Mail (ok fine… Gmail), Google Blog Search, Google Spreadsheets, Google Reader, Google Video and Google Calendar. Why isn’t this just called Google Albums? Or Google Photo?</p>
<p>It turns out the service is called that because it’s like a web add-on of the <a href="http://picasa.google.com" target="_blank">Picasa</a> photo management application. This seems strange to me. Usually they create web applications first and then have a small, simple client-side application that does something they otherwise couldn’t easily do. Like the Gmail notifier or Google Video Uploader. They don’t create web add-ons for desktop applications, well until now, apparently.</p>
<p>From the <a href="http://googleblog.blogspot.com/2006/06/its-all-about-photos.html" target="_blank">announcement</a>:</p>
<blockquote>Reading feedback from Picasa users is one of the best parts of my job. And lately the feedback has been especially clear and direct: please offer an easy way to share photos online.</blockquote>
<p>And I guess that’s what they did, but before I continue, let me give you some impressions of what it looks like:</p>
<p>You can have a look and play around a bit in <a href="http://picasaweb.google.com/zefhemel" target="_blank">my public Picasa albums</a>.</p>
<p>There is a lot to like about Google Picasa Web Albums. First of all it’s basic. The interface is clean and easy to use. I really like using the left and right arrow keys to flip through the pictures while they’re being pre-fetched in the background. I really like the use of AJAX everwhere where Google is famous for. I really like the slideshows. And this is a small thing, but I really like that photos don’t have captions by default (like flickr does by using its filename, which usually with me is not very descriptive). I also like how easy it is to upload your albums from Picasa.</p>
<p>But still I’m disappointed and I don’t get it.</p>
<p>What I had expected from Google is a flickr killer. Basically a full photo management application replacement. Flickr allows you to do simple image manipulations (rotation), and Picasa Web Albums allows you to do this too, but why stop there? Why not red-eye removal, cropping of pictures? What I had expected was a simple photo upload program, like flickr uploadr, and for the rest everything on the web. But Picasa Web Albums is not that.</p>
<p>But there’s something much more important about it that I didn’t mention before. I mentioned that Google is all about the data. Gmail gives you about 2.7GB of e-mail storage right now. Generally Google is about the seemingly infinite storage and recently people have been talking Google maybe wanting to take in all of your files, unlimited storage for all.</p>
<p>But then I read through announcement and saw this:</p>
<p>Finally, you may be wondering if this costs anything. No, and no hidden fees either. Picasa is free as always, and Picasa Web Albums comes with 250MB of free storage space. That’s enough for approximately 1,000 wallpaper-sized photos at 1600 pixels each. We also offer an easy-to-understand <a href="http://picasa.google.com/web/help.html#facts" target="_blank">storage upgrade option</a> if you have a whole lot more pictures to share.</p>
<p>Huh? 250MB storage space? Is this a joke? And this is not a 250MB/month upload limit (like flickr’s 20MB upload limit for free accounts), this is a hard limit. All your photos together can only be 250MB. That’s not a lot, that’s very little actually. So it’s not really photo storage then, it really is just for sharing a couple of pictures with friends. I let Picasa resize my pictures to 1024x768 before uploading them for this reason. It’s not at all like flickr, which I use as a safe store for my pictures. And that’s strange. Google is the storage company. They handle data and lots of it. But yet they limit the amount of pictures you have to 250MB.</p>
<p>But you can upgrade, and that’s another interesting thing, to 6GB of storage for $25 per year. Again, this is a hard limit, not 6GB/year, just 6GB for always. But not even considering if this is a good deal or not, there is something very significant happening here.</p>
<p>Google is charging for their services.</p>
<p>That is the first time in Google’s history I think and I sincerely wonder why. Is there no money to be made from picture sharing? Probably there is, flickr was bought by Yahoo for millions. Comments, captions, tags all can help you to target ads. Maybe interesting things with picture recognition can be done to target ads on the picture’s content (they should acquire <a href="http://www.riya.com" target="_blank">Riya</a>, that would be an acquisition that would make sense).</p>
<p>Why this sudden change of business model? Why?</p>
<p>I don’t get it.</p>
<p>(<a href="http://digg.com/technology/Picasa_Web_Albums,_the_Point_" target="_blank">Digg this story</a>.)</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>604</wp:post_id>
		<wp:post_date>2006-06-15 20:23:15</wp:post_date>
		<wp:post_date_gmt>2006-06-15 18:23:15</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>picasa-web-albums-the-point</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Exit WinFS</title>
		<link>http://zef.me/2006/06/25/exit-winfs/</link>
		<pubDate>Sun, 25 Jun 2006 13:44:19 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2006/06/25/exit-winfs/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Remember WinFS? Windows Future Storage or Windows File System or whatever it meant? Yes one of the three pillars of Longhorn (now Windows Vista). Look, here it is:</p>
<p>(<a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dnfoghorn/html/foghorn10272003.asp" target="_blank">Source</a>)</p>
<p>WinFS was supposed to be the big change in how you managed your data. It would be super easy to search any kind of data. It would be possible to link files to contacts, contacts to images and so on and so forth. A slimmed down SQL server would be powering this on every desktop. It was going to be great.</p>
<p>Then, <a href="http://www.zefhemel.com/archives/2004/08/28/microsoft-are-you-crazy" target="_blank">almost two years ago</a> Microsoft announced WinFS was not going to make it into Longhorn, it was more work than expected. It would be beta around the release of Longhorn (now Vista). A shame, WinFS was the most interesting feature of Longhorn for me. But still Vista will have better search capabilities, but it’s not WinFS.</p>
<p>Two days ago the WinFS team <a href="http://blogs.msdn.com/winfs/archive/2006/06/23/644706.aspx" target="_blank">announced the following</a>:</p>
<blockquote>There are many great technical innovations the WinFS project has created — innovations that go beyond just the WinFS vision but are part of a broader Data Platform Vision the company is pursuing. The most visible example of this today is the work we are now doing in the next version of ADO.NET for Orcas. The Entities features we are now building in ADO.NET started as things we were building for the WinFS API. We got far enough along and were pushed on the general applicability of the work that we made the choice to not have it be just about WinFS but make it more general purpose (as an aside — this stuff is really coming together — super cool).</blockquote>
<blockquote>Other technical work in the WinFS project is at a similar point — specifically the integration of unstructured data into the relational database, and automation innovations that make the database “just work” with no DBAs — “richer store” work. It’s these storage innovations that have matured to the point where we are ready to start working on including them in our broader database product. We are choosing now to take the unstructured data support and auto-admin work and deliver it in the next release of MS SQL Server, codenamed Katmai. This really is a big deal — productizing these innovations into the mainline data products makes a big contribution toward the Data Platform Vision we have been talking about. Doing this also gives us the right data platform for further innovations.</blockquote>
<blockquote>These changes do mean that we are not pursuing a separate delivery of WinFS, including the previously planned Beta 2 release. With most of our effort now working towards productizing mature aspects of the WinFS project into SQL and ADO.NET, we do not need to deliver a separate WinFS offering.</blockquote>
<p>They make it seem like WinFS was about large-scale data access for enterprises, for me it wasn’t that at all. It was about managing personal data. Pictures, contacts, e-mail, music, video. Adding meta data to them, linking them. But all of that seems to be forgotten now. Anyway it’s not going to happen. That WinFS is over. Dead. <a href="http://blogs.msdn.com/winfs/archive/2006/06/23/644706.aspx" target="_blank">This is just spinning it in a way to make it look like a super-exciting thing</a>. A bit <a href="http://fishbowl.pastiche.org/2006/06/25/we_come_to_bury_winfs" target="_blank">pathetic</a>.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>656</wp:post_id>
		<wp:post_date>2006-06-25 15:44:19</wp:post_date>
		<wp:post_date_gmt>2006-06-25 13:44:19</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>exit-winfs</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Google Web Toolkit</title>
		<link>http://zef.me/2006/05/17/google-web-toolkit/</link>
		<pubDate>Wed, 17 May 2006 09:22:47 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2006/05/17/google-web-toolkit/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Gosh, I should really stop writing about Google… I’m sorry, but it’s just the company that seems to do the most interesting kind of things lately. Ok, one more time then.</p>
<p>Google has released something new!</p>
<p>Shocker.</p>
<p>It’s the Google Web Toolkit. It’s a Java API to easily create AJAX web applications like Gmail, Google Reader etc. without having to dive into stuff like Javascript, DHTML, AJAX etc. Just write all your code in Java, quite similar to how you would create Java GUIs and the GWT will do the hard work for you. It’s a bit like ASP.NET, but more AJAXified, maybe like Atlas, haven’t really looked at that yet. Anyway it’s free for commercial and non-commercial use and it looks really neat. It does quite nice things like compiling Java code into JavaScript code as necessary.<br>There’s <a href="http://code.google.com/webtoolkit/documentation/examples/" target="_blank">a number of example applications</a> you can download and try out online. Nicest one probably is one that shows all the different UI widgets the GWT offers: <a href="http://code.google.com/webtoolkit/documentation/examples/kitchensink/demo.html" target="_blank">KitchenSink</a>. But this <a href="http://code.google.com/webtoolkit/documentation/examples/desktopclone/demo.html" target="_blank">Desktop E-Mail Application clone</a> is also quite impressive.</p>
<p><a href="http://zef.me/wp-content/uploads/2006/05/gwt-mail.png" title="GWT E-Mail application example" target="_blank">(Click to enlarge)</a></p>
<p>Using a tool like this I can really start to understand how Google knocks-up nice new applications at the incredible pace they do.</p>
<p>Have a look at <a href="http://code.google.com/webtoolkit/" target="_blank">Google Web Toolkit</a> and <a href="http://googlewebtoolkit.blogspot.com/" target="_blank">its blog</a>.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>734</wp:post_id>
		<wp:post_date>2006-05-17 11:22:47</wp:post_date>
		<wp:post_date_gmt>2006-05-17 09:22:47</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>google-web-toolkit</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Zuzia</title>
		<link>http://zef.me/2006/06/04/zuzia/</link>
		<pubDate>Sun, 04 Jun 2006 10:35:29 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2006/06/04/zuzia/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Let me tell you a tale of somebody that became very dear to me, even though she started out as just one of my many electronical devices. Let me tell you the story of Zuzia; the other kind of Apple story.</p>
<p>It was about two years ago when I decided to take the plunge, I sold my old Windows laptop to my brother and ordered my first Mac ever, an Apple iBook G4. I was really excited. I upgraded quite a lot of it and also decided to extend its health insure, AppleCare, to three years. People around me that used Macs said I was crazy, it would never break down anyway. It’s a Mac.</p>
<p>For the first year or so I loved it, no problems at all. But then I moved to Ireland and already after a couple of weeks the hard drive stopped working. I called Apple and after hours on the phone with some guy in India (their call centres are there) they gave me the addresses and numbers of some certified Apple repair shops. I called them and they came to pick up my iBook.</p>
<p>About three weeks later I got it back. The hard drive had been replace and there was no charge. However, the trackpad was not working anymore. So I called them again and they picked it up again. It’s a nice service that they’re picking up your computer from your home but they only do it during office hours, when I’m hardly ever home (I got a life too you know).</p>
<p>Another three or four weeks later I got it back again. It had been fixed. By that time my first term at Trinity was over and I hadn’t been able to use my precious not-so-cheap laptop when I needed it. Luckily Trinity supplies all the students of our course with Dell laptops, but it’s not the same.</p>
<p>Proudly I showed my laptop to some friends. A Polish friend was really impressed and she named it, or I should say her, Zuzia. A very popular and nice Polish girl’s name. I loved the name. Mmm, my Zuzia.</p>
<p>But Zuzia is a jealous girl. Only a few weeks later I had a (female) friend staying over at my room for a weekend and Zuzia apparently couldn’t bare it. She broke down again and wouldn’t boot. I brought my friend to the airport and with tears in my eyes called the Apple repair centre again. They came to pick her up… once again.</p>
<p>It was getting annoying. Essentially Zuzia fell ill down three times in only a few months, and probably if they would’ve healed her quicker she would’ve fell ill even more often.</p>
<p>Four weeks later I got her back, once again. I was happy. Finally I could use her again. We had a good time and did lots of projects together. But then about a month or so ago… you can guess it…</p>
<p>Ill again. Zuzia is ill again.</p>
<p>It started as a smallish thing. If you woke her up in the morning her wireless wouldn’t work, you’d have to wait a couple of minutes put her back to sleep and then wake her up again and it would find it. Annoying, but well, acceptable, not enough to give her back to the not-so healing hands of those Apple doctors. But then after a while it got worse. Whenever I took Zuzia on my lap she froze up and stopped working.</p>
<p>When I told my friends about the problems me and Zuzia are having they said that probably she doesn’t love me anymore and this is her way of showing it. I’m heart broken. Angry. Disappointed. Disappointed with Zuzia, but even more so with Apple.</p>
<p>Love dies, but Apple computers shouldn’t.</p>
<p>I have been here in Ireland for about nine months now and of those nine months Zuzia only worked for about four of them. Is that what I paid all that money for? Is this the quality of Apple people always talk about?</p>
<p>I’m disappointed. Disappointed in Apple. And crying over Zuzia.</p>
<p>But I can write about it now, I can talk about it now. I’m over it. I found somebody else, somebody real that doesn’t fall ill when she’s near me. Now we just have to heal Zuzia so we continue our lives together as originally intended.<br>Just friends.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>968</wp:post_id>
		<wp:post_date>2006-06-04 12:35:29</wp:post_date>
		<wp:post_date_gmt>2006-06-04 10:35:29</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>zuzia</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="personal"><![CDATA[Personal]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Tagyu</title>
		<link>http://zef.me/2006/07/02/tagyu/</link>
		<pubDate>Sun, 02 Jul 2006 10:33:18 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2006/07/02/tagyu/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>I’ve been playing with tags here on this blog. They’re useful for classification by blog search engines, but also allow you to find related posts. If you click on a post now you’ll see a number of related ones which can be useful. These are posts that share one or more tags with the one you’re viewing.</p>
<p>The plugin I use is <a href="http://www.neato.co.nz/ultimate-tag-warrior/" target="_blank">Ultimate Tag Warrior</a>. It’s quite nice. One feature in particular intruiged me and that’s something that automatically determines tags based on the content of your post. For this it uses a services called <a href="http://www.tagyu.com" target="_blank">Tagyu</a>. I visited the Tagyu website and there I read the following:</p>
<blockquote>What is Tagyu?</blockquote>
<blockquote>Tagyu is a hosted service that automates the process of creating document metadata by discovering what keywords, tags, and categories are relevant for a document. Instead of relying on machine learning to understand what a document is about, Tagyu uses human intelligence. Tagyu harnesses the collective wisdom that is already present in your documents to categorize your other text.</blockquote>
<blockquote>Tagyu can categorize based on the wisdom present in a controlled set of documents that you provide, or based on a larger set of content found “in the wild” — content from social bookmarking, blogs, and other Web sources.</blockquote>
<p>As they have a test service where you can enter a URL, I decided to give it a shot for <a href="http://www.zefhemel.com" target="_blank">http://www.zefhemel.com</a>. This is the result:</p>
<p>As Griet said to Vermeer when he showed her her painting in <a href="http://www.imdb.com/title/tt0335119/" target="_blank">Girl with a Pearl Earring</a>: “You looked inside me.”</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1011</wp:post_id>
		<wp:post_date>2006-07-02 12:33:18</wp:post_date>
		<wp:post_date_gmt>2006-07-02 10:33:18</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>tagyu</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>How to get on BBC</title>
		<link>http://zef.me/2006/05/16/how-to-get-on-bbc/</link>
		<pubDate>Tue, 16 May 2006 11:31:55 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2006/05/16/how-to-get-on-bbc/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>As you may know there recently was a trial between Apple and Apple. Apple the record company of the Beatles and Apple Computers, the company that makes Macs and has the iTunes Music store. What this trial is about is not really relevent right now.</p>
<p>What I wanted to show you is a nice TV appearance that an English/French taxi cab driver in England made, when he was pulled into the BBC studio because people thought he was the expert that would talk about this trial. In reality this guy was probably just picking somebody up from the studio.</p>
<p>After looking very surprised for a bit he continues answering the questions the BBC interviewer asks him. And here he is, London cab drivers’ new hero:</p>
<p>You can <a href="http://dump.geenstijl.nl/mediabase/1252/b28fa61c/index.html" target="_blank">see the video fragment here</a>.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1028</wp:post_id>
		<wp:post_date>2006-05-16 13:31:55</wp:post_date>
		<wp:post_date_gmt>2006-05-16 11:31:55</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>how-to-get-on-bbc</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Why Startups Condense in America</title>
		<link>http://zef.me/2006/06/03/why-startups-condense-in-america/</link>
		<pubDate>Sat, 03 Jun 2006 14:46:18 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2006/06/03/why-startups-condense-in-america/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Another <a href="http://www.paulgraham.com/america.html" target="_blank">nice essay by Paul Graham</a>:</p>
<blockquote>Startups happen in clusters. There are a lot of them in Silicon Valley and Boston, and few in Chicago or Miami. A country that wants startups will probably also have to reproduce whatever makes these clusters form.</blockquote>
<blockquote>I’ve claimed that the <a href="http://www.paulgraham.com/siliconvalley.html" target="_blank">recipe</a> is a great university near a town smart people like. If you set up those conditions within the US, startups will form as inevitably as water droplets condense on a cold piece of metal. But when I consider what it would take to reproduce Silicon Valley in another country, it’s clear the US is a particularly humid environment. Startups condense more easily here.</blockquote>
<blockquote>It is by no means a lost cause to try to create a silicon valley in another country. There’s room not merely to equal Silicon Valley, but to surpass it. But if you want to to do that, you have to understand the advantages startups get from being in America.</blockquote>
<p>Sorry for being absent for a while by the way, had some other (personal) things on my mind. Luckily they turned out ok, yay, so I’m back.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1322</wp:post_id>
		<wp:post_date>2006-06-03 16:46:18</wp:post_date>
		<wp:post_date_gmt>2006-06-03 14:46:18</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>why-startups-condense-in-america</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Web Spreadsheets</title>
		<link>http://zef.me/2006/06/06/web-spreadsheets/</link>
		<pubDate>Tue, 06 Jun 2006 19:13:07 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2006/06/06/web-spreadsheets/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>It’s 6/6/06, the day of the devil, a great day to launch a product that allows you to do fun calculations with the number 666. Sadly, most of will have to wait. <a href="http://spreadsheets.google.com" target="_blank">Google Spreadsheets </a>launched today, but is only available to a small number of beta testers. On the website you can sign-up for the beta.</p>
<p>There’s a <a href="http://www.google.com/googlespreadsheets/tour1.html" target="_blank">short preview available here</a>. For the real action most of us (including even me) will have to wait…</p>
<p><a href="http://www.irows.com" target="_blank">iRows</a> is another online spreadsheet that has been around for a bit longer. It works quite nicely, but it’s not Google. I wanted to play with it a bit, to drown my sorrows, but it is down.</p>
<p>It’s a bad name for numbers…</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1342</wp:post_id>
		<wp:post_date>2006-06-06 21:13:07</wp:post_date>
		<wp:post_date_gmt>2006-06-06 19:13:07</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>web-spreadsheets</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>The Store</title>
		<link>http://zef.me/2006/06/18/the-store/</link>
		<pubDate>Sun, 18 Jun 2006 13:19:18 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2006/06/18/the-store/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>If I would open a store, would you buy anything?</p>
<p>If I would start selling bananas would you come and buy some? Or apples or pears? Maybe something very different. Let me see. Tires for your bike. Everybody needs tires. Well unless you don’t have a bike or car. But most people do. I don’t, though. I don’t need a bike here in Dublin really, plus Dublin is not really cycling capital of the world. But nevertheless tires are good to sell, people like tires.</p>
<p>People like tires, hmm. Well, it’s not really something that gets people excited, is it? It’s not the kind of thing that you do in the weekend with the whole family. “Come on, let’s go buy some tires for our bikes!” Yay! No, most customers probably will be annoyed customers. Some lunatic that considered himself a good laugh cut their tires and ran. No. Not funny. That’s annoying. Lame people. No, I don’t like annoyed customers. So I guess I won’t sell tires then.</p>
<p>What else is good to sell? It has to be something original, something that nobody else specializes in. Like towels. I don’t think there are any stores that specialize in towels yet, still towels are useful. Everybody needs towels. Well, except dirty people that don’t take showers. But I don’t want those in my store anyway. Yes, selling towels is an excellent way to keep dirty people out of my store. And the towels you buy in some stores are really crap sometimes. You take a shower, use the towel and when you’re done the towel is still dry. It’s for wiping more than anything else, it doesn’t absorb a drop of water.</p>
<p>When you think of it such towels may actually have lots of applications, like when there’s a flood. I bet <a href="http://en.wikipedia.org/wiki/Hydrophobic" target="_blank">hydrophobic</a> towels will sell like crazy, just cover everything with them and nothing will get wet. Maybe sell those too then in my store. I can have two piles. One with normal towels and another with hydrophobic towels. Yes, that’s a good idea.</p>
<p>The location of the store will be very important. For example, here in Dublin people won’t be all that interested in hydrophobic towels. For as far as I know, Dublin doesn’t flood that often. But there are many places in the world where there are floods. I’ll start my store there. Preferably a place where there’s both lost of beaches and floods. I can sell my nice, big and soft normal towels to the people there to lie on the beach and then when the flood comes I’ll sell my hydrophobic towels. I wonder if they will float.</p>
<p>But such beach places are often quite hot. I don’t like heat that much. I like the seaside, but it shouldn’t be too hot. If I’d be able to lie on the beach that would be ok, but I won’t, because I’d have my store. My store that sells towels. And as lots of people need towels, I will have to work a lot instead of lying on the beach. In the store it will probably be hot.</p>
<p>Maybe towels are not the best thing to sell. Plus, I’m not sure if I like selling that much. I like buying things more. I’m just not sure if you can make money with that. I don’t think so. Unless you buy stuff for a negative price, like -200 euro. Like, “if you buy this old washing machine I’ll give you 200 euro.” But essentially that would make it selling space for people to dump their old crap. And I don’t like crap. I like shiny new things, not crap. Crap stinks.</p>
<p>But yeah, I definitely should open a store.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1529</wp:post_id>
		<wp:post_date>2006-06-18 15:19:18</wp:post_date>
		<wp:post_date_gmt>2006-06-18 13:19:18</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-store</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="because-i-care"><![CDATA[Because I Care]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>23</title>
		<link>http://zef.me/2006/06/22/23/</link>
		<pubDate>Thu, 22 Jun 2006 09:49:25 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2006/06/22/23/</guid>
		<description></description>
		<content:encoded><![CDATA[
<p>When somebody gave me the idea for this I was like, yeah, I’m not going to do a geeky thing like that. But I figured, by this time next year I’ll be studying English and probably quote something Shakespear said, so what the heck.</p><hr>

<p><strong>import</strong> pyrdf<br><strong>from</strong> pyrdf <strong>import</strong> RdfStore, RdfResource, RdfType<br><strong>from</strong> rdflib.Namespace <strong>import</strong> Namespace</p>
<p>NS_P = <em>Namespace</em>(<em>‘http://www.zefhemel.com/ont/person#'</em>)</p>
<p>store = <em>RdfStore</em>(NS_P)<br>store.prefix_mapping(<em>‘p’</em>, NS_P)<br>store.prefix_mapping(<em>‘j’</em>, NS_J)<br>pyrdf.setDefaultStore(store)<br>store.load(‘peopledata.rdf’)</p>
<p>Person = <em>RdfType</em>(NS_P[<em>‘Person’</em>])</p>
<p>today = ‘2006–06–22’</p>
<p><strong>print</strong> <em>‘People celebrating their birthdays today:’</em><br><strong>for</strong> p <strong>in</strong> store.findResources(rdf_type = Person, birthday = today):<br> <strong>print</strong> ‘* %s (%d)’ % (p.name, int(p.age))</p>
<hr>
<p>Output:</p><hr>
<p>* Zef Hemel (23)</p><hr>

<p>There are two important things to note about this. First of all it shows how easy it is to query RDF data using PyRDF. Second of all:</p>
<p>It’s my 23rd birthday today!</p>
<p>Hooray for me!</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1544</wp:post_id>
		<wp:post_date>2006-06-22 11:49:25</wp:post_date>
		<wp:post_date_gmt>2006-06-22 09:49:25</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>23</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="personal"><![CDATA[Personal]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Chicken on the Loose</title>
		<link>http://zef.me/2006/06/13/chicken-on-the-loose/</link>
		<pubDate>Tue, 13 Jun 2006 13:21:11 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2006/06/13/chicken-on-the-loose/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Since a couple of days everybody with a high-end PC can get a piece of the still juicy chicken meat in the form of <a href="http://www.microsoft.com/windowsvista/default.aspx" target="_blank">Windows Vista</a>. Although in some languages (Spanish?) Vista may mean mountain or something sight, in Latvian it means chicken. So even if you don’t like mountains nice views, you can still enjoy fresh and juicy Windows Chicken. *drool*</p>
<p>But for once this is not about chicken. As I said, you can now <a href="http://download.windowsvista.com/preview/beta2/en/x86/download.htm" target="_blank">download Windows Chicken beta 2 for free</a>. It will only work for a few months, but it’s probably nice to play with if you want to risk installing a beta operating system. 56k6 modem users beware, the file is 3.2GB big, if my calculations are correct it will (at maximum downloading speed all time) take you roughly 7900 hours to download, that’s just a bit less than a year, by which time the beta has expired. So don’t bother if you’re on 56k6.</p>
<p>My laptop is probably too slow and I don’t want to risk messing it up, so I won’t be trying it out (also I don’t have a DVD burner which you probably need). Luckily <a href="http://www.istartedsomething.com/20060613/windows-vista-screencasts/" target="_blank">Long Zheng is friendly enough to put up some nice screencasts</a>. His choice of recording technology (Apple’s Quicktime) is interesting, but the videos are nice. Longhorn, ehm, Vista seems to run smoothly on his new Toshiba TabletPC.</p>
<p>Many people are very critical of Vista and its features. But look at the visual effects, aren’t they pretty?</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1550</wp:post_id>
		<wp:post_date>2006-06-13 15:21:11</wp:post_date>
		<wp:post_date_gmt>2006-06-13 13:21:11</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>chicken-on-the-loose</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Ferite, Why?</title>
		<link>http://zef.me/2006/06/09/ferite-why/</link>
		<pubDate>Fri, 09 Jun 2006 14:36:54 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2006/06/09/ferite-why/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Ferite is a scripting language, the creators describe it as follows:</p>
<blockquote>
<strong>ferite</strong> is a scripting engine and language written in c for complete portability. For more information please see the <a href="http://www.ferite.org/about.html" target="_blank">about</a> page. We have finally reached a <strong>1.0</strong> release — this has only taken us since Summer 2000 to get here so far.</blockquote>
<blockquote>ferite is a clean language with influences from various places: objects from Java/C++, functions from C/php, closures from scheme, block calling from ruby, namespaces from C++, as well as its own a sane loose typing mechanism, variant type and set of nice APIs. Here is an example:</blockquote>
<blockquote>
<strong>uses</strong> “console”;<br>Console.println( “Hello World” );</blockquote>
<blockquote>This is the famous “Hello World” program in ferite, to see more examples have a look at <a href="http://www.ferite.org/examples.html" target="_blank">this example page</a>. To view the scripts click on the version number. ferite features a wealth of features including explicit global variables, namespaces, normal functions, exception handling, perl like regular expressions, variable argument lists, plus all sorts of other goodies to provide a pleasant programming experience.</blockquote>
<p>So, yet another scripting language, waiting to revolutionize the world of programming huh? I was a bit sceptical, so I decided to have a closer look.</p>
<p>Ferite adopts a syntax that is Java/C++-like, so the curly braces and the semi-colons are there, for all those that love them. Ferite is not a purely object-oriented language, sadly. It mixes the object-oriented and linear programming paradigms, just like for example C++ and PHP. The <a href="http://www.ferite.org/docs/html-manuals/manual/" target="_blank">language reference can be found here</a>.<br>Something I noticed while reading through the section about comments in ferite, is something I like. They allow nested commenting, like this:</p>
<pre>/*<br>/* Print out some information */<br>Console.println( "Today" );<br>*/</pre>
<p>I like that, quite often in a language like Java you want to comment out a whole section of code which is a bit hard when it contains comments itself. Nested commenting is a nice feature that solves this problem.</p>
<p><strong>Types</strong></p>
<p>Ferite is a bit of a typed language. I say a bit because it handles typing in a strange, inconsistent way, in my opinion, or at least I don’t see the consistency. Ferite forces you to declare types of variables and arguments of functions. Great. But look at this:</p>
<pre>// This is all ok<br>number n = 3;<br>string s = "bla";<br>// But look at this:<br>array a = [n, s, 232];<br>// or this:<br>object o = new MyClass();</pre>
<p>That looks very odd to me. Ferite has only 5 types, they are number, string, array, object and void. The first two are called “simple types”, the others “complicated types”. It turns out that the classes you define are not types they are just, well, classes. So you cannot write:</p>
<pre>MyClass o = new MyClass();</pre>
<p>Huh? Another thing I think is odd that they force you to type your variables, but when you define a variable as an <em>array</em> you don’t have to tell ferite an array of what, just saying it’s an array is fine. Is it an array of strings, numbers, objects? All of the sudden it doesn’t seem to matter. But there are more gaps, you define a function like this:</p>
<pre><strong>function</strong> foo( <strong>string</strong> bar ) {<br>bar += "foo";<br><strong>return</strong> bar;<br>}</pre>
<p>Notice something odd here? I do, where’s the return type of the function? There is none. The typing of the language is supposed to help you debug, and it might, a bit. But I feel the typing support is paper-thin. In a language like Java, the whole thing can be type-checked, if it compiles you eliminated a whole lot of typing mistakes (pun intended), but you cannot do such checks in ferite, because the typing is only required on some places.</p>
<pre><strong>function</strong> foo2( <strong>string</strong> bar ) {<br>/* Secret */<br>}<br>number a = foo2("Zef"); // Is this allowed?<br>array ar = [1, 2, "Pete"];<br>foo2(ar[0]); // Allowed? No, ferite will only know at runtime<br>foo2(ar[2]); // Allowed? Yes</pre>
<p>I think it’s quite odd. But one thing I have to say, requiring function parameter typing does allow you to do function overloading:</p>
<pre><strong>uses</strong> "console";</pre>
<pre><strong>function</strong> print( <strong>number</strong> n ){<br>Console.println( "Number: $n" );<br>}</pre>
<pre><strong>function</strong> print( <strong>string</strong> s ){<br>Console.println( "String: $s" );<br>}</pre>
<pre>print( 10 );<br>print( "Hello World" );</pre>
<p>Now if only I could also distinguish between my classes, like this:</p>
<pre><strong>function</strong> print( <strong>MyClass</strong> s ){<br>Console.println( "MyClass: ${s.getName()}" );<br>}</pre>
<p>But as far as I understand, I can’t, MyClass is not a type.</p>
<p>If you wondered what the <em>void</em> type is, it’s a place-holder type. It can be turned into any of the other four types by assigning a value to it, once it has been assigned the type cannot be changed anymore:</p>
<pre>void v = 3; // Now it's a number<br>void v2 = "Zef"; // Now it's a string<br>v = v2; // Not allowed!</pre>
<p><strong>Operators</strong></p>
<p>Ferite adopts most of Java/C++’s operators like +, -, /, %, ++, — etc. For array slicing, however, they do something, in my view, incomplete. Ferite allows you do array slicing, like this:</p>
<pre><strong>string</strong> s = "Hello";<br><strong>string</strong> t = s[-1..0]; <strong>&gt;&gt;</strong> a slice of the entire string and reverse it<br><strong>string</strong> u = s[..2]; <strong>&gt;&gt;</strong> a slice of the first 3 characters in the string s<br><strong>array</strong> a = [ 1, 2, 3 ];<br><strong>array</strong> b = a[1..]; <strong>&gt;&gt;</strong> a slice of a containing [ 2, 3 ]</pre>
<p>But from the documentation I don’t get the impression you can also assign values to slices, they are read-only. In Python you can do something like this:</p>
<pre><strong>ar[2:4]</strong> = [3, 2]</pre>
<p>But not in ferite.</p>
<p><strong>Control structures</strong></p>
<p>The control structures in ferite are pretty much Java and C++’s. With the exception of the very peculiar exception handling (that is for the rest not described):</p>
<pre><strong>iferr</strong> {<br><em>statements</em><br>} <strong>fix</strong> {<br><em>statements to clean up in case of an exception</em><br>} <strong>else</strong> {<br><em>statements if no exception has occurred</em><br>}</pre>
<p>As I understand it, the <em>iferr </em>functions like Java’s <em>try</em> and the <em>fix</em> is a <em>catch(Exception e)</em>. The <em>else</em> is executed when no exception occurs, there is no equivalent of Java’s <em>finally</em>. From a naming standpoint I think this is odd. If I felt I <strong>had</strong> to change the keywords in this construct (and I really don’t see why), I would’ve called the <em>fix</em> <em>iferr</em>, not the the <em>try</em>. Like this:</p>
<pre><strong>try </strong>{<br><em>statements</em><br>} <strong>iferr</strong> {<br><em>statements to clean up in case of an exception</em><br>} <strong>else</strong> {<br><em>statements if no exception has occurred</em><br>}</pre>
<p>Logically this makes more sense to me. “Try this and if error (iferr) do this, else do that.” Right? The question that remains is where you get more information about the exception that occured, and how you throw an exception. This is not described in the language manual, but in the beginning of the manual, when they talk about global variables. They say there is a variable called <em>err</em> used for exception handling, hmm. That sounds very dangerous and not thread-safe.</p>
<p>Talking about thread-safe.</p>
<p><strong>Thread-safe features</strong></p>
<p>The ferite manual describes some variable modifiers. Modifiers can change the behaviour of a variable, like make it a constant (which cannot be changed after a value has been assigned), another modifier is atomic:</p>
<blockquote>atomic — all accesses on the variable (getting the value and setting the value) are atomic, i.e. thread safe, which means that it is unnecessary to create an explicit lock for it. It is important to note that this does have an execution time, and space, overhead to the variable and should therefore be used wisely.</blockquote>
<p>Think about this for a second. What do we use locks for? Where do concurrency problems often occur? Well, when you execute code like this simultaneously:</p>
<pre>temp = a<br>temp = temp + 10<br>a = temp</pre>
<p>and</p>
<pre>temp2 = a<br>temp2 = temp2 - 5<br>a = temp2</pre>
<p>Say a = 10 to begin with. If you execute these two pieces simultaneously, what will be the value of a afterwards. Is it 15? Is it 5? Is it 20? If you don’t get it, <a href="http://cnx.org/content/m12312/latest/" target="_blank">this may help</a>. The question is, how does this <em>atomic</em> keyword help with your concurrency problems? It doesn’t really, I don’t see how it helps any kind of problem to be honest.</p>
<p><strong>OOP</strong></p>
<p>Ferite supports the usual set of OOP features like classes, single-inheritance and interfaces, ehm I mean protocols. Protocols? Yes, protocols. They are interfaces, they just call them protocols. Why? I don’t know, people have been calling them interfaces for so long, it’s time for a change I suppose.</p>
<p>There are also some special methods like <em>attribute_missing</em> and <em>method_missing</em>. If an attribute is being accessed that cannot be found in the object, the attribute_missing method is activated to retrieve its value. Retrieve its value, yes, it only works for reading from non-existing attributes, not writing to them.</p>
<p>Ferite also allows you to change classes after they’ve been defined. There are means to add, rename, and create aliases to methods in a class. I’m not convinced of the usefulness of this, but they say it has applications, could be.</p>
<p><strong>Additional features</strong></p>
<p>Ferite also has support for closures and also passing them to method calls so you can do things like this:</p>
<pre>Array.each( argv ) using ( argument ) {<br>processArgument( argument );<br>};</pre>
<p>Which is reasonably nice. Just wished that arrays were also objects with an <em>each</em> method, but ok.</p>
<p><strong>Conclusions</strong></p>
<p>Ferite is a bit of a strange language. It’s typing system is odd and there are some more oddities. Beyond that it seems like a nice hobby project, but in no way made me want to use it for future projects. Languages like Ruby and Python seem to be far more well thought-out and consistent and are more popular. And if you’re not a curly braces and semicolon fetishist these languages seem a much better choice for those interested in learning a scripting language.</p>
<p>But this is just what I found and think, the best it always to have a look for yourself, <a href="http://www.ferite.org/index.html" target="_blank">go ahead, here is the website</a>.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1566</wp:post_id>
		<wp:post_date>2006-06-09 16:36:54</wp:post_date>
		<wp:post_date_gmt>2006-06-09 14:36:54</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ferite-why</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Plans</title>
		<link>http://zef.me/2006/06/30/plans/</link>
		<pubDate>Fri, 30 Jun 2006 14:40:05 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2006/06/30/plans/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>I don’t talk about my personal life on this website often. Most of that gets written at <a href="http://zef.nu" target="_blank">Zef.Nu</a>, my Dutch website. However now I will also give those who are unfurtunate enough not to speak Dutch, and those who are not willing to learn it just to read about my life, a bit of insight in what has been happening and will be happening with me personally. Ok that was a very complex sentence, but I don’t feel like putting much effort into making it more understandable.</p>
<p>As most of you know, last September I moved to Dublin to study <a href="https://www.cs.tcd.ie/courses/mscnds/" target="_blank">Networks and Distributed Systems</a> at Trinity College. In two months I will be done. At this moment I’m working on my dissertation. I already hinted this a couple of times, but once I’m done I’ll move back to my city of birth (and where I lived the first 22 years of my life): Groningen in the Netherlands. There I’ll take a very different route, I’ll be studying “Engelse Taal en Cultuur” (translated: English Language and Culture), which is basically English Philololgy as known in many other countries.</p>
<p>That’s generally perceived as quite a change after studying computer science for 5 years and soon ending it with a masters degree from one of the better universities in Europe. But I feel I have to make this change. I have to figure out what I want to do and over the past years I found that a regular job in the IT industry might not be it.</p>
<p>A year ago I already considered this step when I got bored with more and more things related to programming and software engineering. I got more interested in language, particularly English. The English language had always been one of my interests, but as I had a Latvian girlfriend at the time and learned a bit of Latvian I got interested in language in general. How grammar works, how language evolves, different language groups. Linguistics basically.</p>
<p>A week or two ago there was a professor from some US university at Trinity to give a presentation. He talked about large-scale networked applications. However, the interesting thing to me was not that. The guy was clearly from some Spanish speaking country originally. And clearly he had lived and worked in the US for quite some time. His accent was very interesting, sometimes he sounded very American, sometimes he sounded very Spanish. I was intruiged. It’s interesting to hear how people sound that speak a language other than their mother tongue for a couple of years.</p>
<p>You get my point.</p>
<p>It’s not that I’m totally uninterested in my current field. I’m not. To be honest it’s not entirely clear to me what I’m still attracted to and what it is that I hate. I really enjoy reading about new technology. I’m very interested to read about big shifts in the computer industry and in software engineering in particular. Yesterday I was <a href="http://docs.python.org/dev/whatsnew/whatsnew25.html" target="_blank">reading about the new features in Python 2.5</a> and still had that “wow, cool!” feeling. In the past days I’ve been looking at <a href="http://www.turbogears.org" target="_blank">TurboGears</a> and I’m impressed and got enthusiastic. I actually spent a couple of hours yesterday working on making a prototype of the <a href="http://www.zefhemel.com/archives/2006/06/28/forum-20" target="_blank">forum 2.0</a> software I described a day or two ago using TurboGears (SQLObject actually).</p>
<p>But a couple of hours is all it was. After that I had something that fetched RSS/Atom feeds, checked for new posts, extracted all links and stored it in a database. All the data that was needed was essentially there, what remained was figuring out clever queries and algorithms and creating a front-end. And I really don’t like doing that.</p>
<p>Yeah, now that I’m writing about it, I think that’s it. I like the vision of things. The high-level design. Ideas behind things. I don’t care about the details and really, really don’t see myself programming it all. I could do it though, and I probably wouldn’t be bad at it either (I’ve done it for quite some years), but I won’t enjoy it.</p>
<p>So I’m going to study English. I’ll also be doing a journalism minor, I see some potential in there. Maybe I’ll become some kind of journalist that writes about IT related things. I like to explain things in language that normal people understand. As I have quite some friends now that don’t know much about the computer world (my girlfriend doesn’t know the difference between a bug and a virus). I quite often try to explain what I do in terms lay(wo)men understand. And I’m having a good time doing it.</p>
<p>But that’s all in two months, although I’m already looking forward to it. For now I’m working on my dissertation and it’s going well. And I enjoy doing it. I’ve been working on the design of the middleware/framework and I enjoyed that. It’s all design and vision work which is what I like. I also implemented most of it and that wasn’t too bad either (it’s all in Python). Next Wednesday my girlfriend is flying in (from Poland — she’s Polish) and staying for a couple of days, I’m really excited about that. Sunday she flies to England (close to London) where she’ll work for the next few months. I don’t like this long-distance relationship thing but what can you do, at least she’s closer now and can come and visit me more easily now (thanks RyanAir for excellent London Stansted-Dublin connections).</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1628</wp:post_id>
		<wp:post_date>2006-06-30 16:40:05</wp:post_date>
		<wp:post_date_gmt>2006-06-30 14:40:05</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>plans</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="personal"><![CDATA[Personal]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>GLS3</title>
		<link>http://zef.me/2006/07/10/gls3/</link>
		<pubDate>Mon, 10 Jul 2006 19:50:56 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2006/07/10/gls3/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p><a href="http://www.glscube.org" title="GLS³" target="_blank">GLS³</a>:</p>
<blockquote>The GNU/Linux Semantic Storage System (GLS³) is a solution designed to facilitate the management and retrieval of your data. It is a solution that distances you from thinking about Where you store your data to What your data is. With GLS³, you can organize and retrieve your data based on their semantics, based on What they mean to you, and not based on their hierarchical location.</blockquote>
<blockquote>GLS³ is an open source semantic storage solution for GNU/Linux that indexes your data, extracts from it metadata and relevant information, allows you to organize it using queries and tags, an API to allow Developers to integrate searching and organization capabilities in their application, an extensible plugin-based Type System, shared schemas between applications through an API, a pseudo file system for backward compatibility, a web interface, As-You-Type searching and more.</blockquote>
<p>Basically what this brings you is Spotlight-like features to Linux which is nice. There already was another project called <a href="http://beagle-project.org/Main_Page" title="Beagle" target="_blank">Beagle</a>, which is written completely in C# and runs on top of Mono. GLS³ is written in C++ and uses a database (currently Postgres) as the back-end. GLS³ also allows you to tag files, has a virtual file system (see the demos on the site). Interesting. If I’d use Linux I definitely would try it out.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1699</wp:post_id>
		<wp:post_date>2006-07-10 21:50:56</wp:post_date>
		<wp:post_date_gmt>2006-07-10 19:50:56</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>gls3</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>SINP and Google Authentication</title>
		<link>http://zef.me/2006/07/01/sinp-and-google-authentication/</link>
		<pubDate>Sat, 01 Jul 2006 15:32:20 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2006/07/01/sinp-and-google-authentication/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Bas put new information on his <a href="http://blog.w-nz.com/archives/2006/07/01/sinp/" target="_blank">SINP</a> protocol online. SINP is a decentralized single sign-on system. Based on some ideas and implementations floating around on the internet, like my <a href="http://www.zefhemel.com/archives/2005/08/13/sptp-decentralized-single-sign-on" target="_blank">SPTP</a> (which had one big flaw because of which it never got off the ground).</p>
<p>I had a look at the spec before and it looks pretty good. Although I had some security classes I’m not a security expert but it seems pretty secure.</p>
<p>SINP allows you to have one single username (looking something like: zef@w-nz.com/sinp) and password that allows you to login to any SINP enabled website. So you no longer have to register and have different usernames and passwords for different sites. This is of course not a new idea, Microsoft’s Passport has been doing this for a while and there’s also the Liberty project. But both of these store all user’s information (password, personal info, maybe even creditcard number) centrally on their servers.</p>
<p>Google a couple of days ago launched their <a href="http://code.google.com/apis/accounts/AuthForWebApps.html" target="_blank">own single sign-on service</a>. Basically you can now allow people to login to your own web-apps using the Google ids.</p>
<p>Basically you have to trust Google or Microsoft of the Liberty people with all your information which not everybody does (personally I don’t really have problems with it though). SINP does it a bit differently. Anybody can set up a SINP server. That means you can set up your SINP account with any company or organization you trust, and if you trust no-one you can set up your own.</p>
<p>The SINP people are currently working on PHP client and server and a Python client. They’ve been hacking up Wordpress to allow people to post comments using their SINP ids. I tried this, but it didn’t work for me yet. I’m sure they’re still working on it. An <a href="http://blog.w-nz.com/archives/2006/07/01/sinp/" target="_blank">interesting project to keep an eye on</a>.</p>
<p><strong>Update:</strong> It turned out the wordpress test blog didn’t work because I didn’t have a SINP document uploaded, I have one now, now it works.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1728</wp:post_id>
		<wp:post_date>2006-07-01 17:32:20</wp:post_date>
		<wp:post_date_gmt>2006-07-01 15:32:20</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>sinp-and-google-authentication</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Switching to Emacs</title>
		<link>http://zef.me/2006/08/12/switching-to-emacs/</link>
		<pubDate>Sat, 12 Aug 2006 17:20:19 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2006/08/12/switching-to-emacs/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>As you may know my favourite editor was <a href="http://www.vim" target="_blank">Vim</a>, it’s a terrible editor to learn, but when you get the hang of it (after a couple of weeks, months, a year) you can edit text and code very very fast. I loved Vim, still do.</p>
<p>At the moment I’m writing my dissertation for the M.Sc. degree I’m doing here in Dublin. I’m writing it in LaTeX and of course I was using Vim to edit it. A week or two ago I had a meeting with a PhD student here at the department and he asked what I used to edit LaTeX. I told him I used Vim. “Vim? Why are you using vim? There’s an amazing package for Emacs that helps you in so many ways.”</p>
<p>I’m always open to new things and Emacs always has been an editor I wanted to really learn. We learned the basics at university in Holland (it’s the editor we learned there) and it’s a fairly usable editor, even for the beginner. Much more usable than Vim anyway. I decided to take the plunge and switched to Emacs.</p>
<p>The beginning was a struggle, I switched a couple of days ago now and finally start to get the hang of the keyboard “short”-cuts. Things that used to take me one keystroke in Vim now take me like three, but I’ll get used to it and indeed, the LaTeX features are really nice. Right now I have my whole dissertation in one .tex file (that’s 90 pages at the time of writing). Usually that would be hard to manage, but in Emacs it’s really easy to bring up a table of contents and go to a different chapter or section. You just have to press Ctrl+c = and there you go:</p>
<p>If you’re familiar with LaTeX and used it to write scientific papers you know it can be a pain to insert reference from your Bibtex file, but not in Emacs. You just type Ctrl+c [ and it will ask you to type a regex to find references. If you want to cite a paper where you know there’s “ontology” in there somewhere, you type ontology and a list of references will show up, you pick the one you need and it will insert the cite{…} code for you. Pretty neat.</p>
<p>I’m starting to like Emacs. Emacs is more of an operating system than an editor. It comes with a built-in mail reader, news reader, RSS reader. You can download a browser I think, I installed a package that allows you to maintain a local wiki inside Emacs, it’s pretty nifty. But some of the keystrokes are just too much, for example if I want to move the current line to the top of the screen I have to type Ctrl+x 0 Ctrl+l.</p>
<p>I’ll get used to it.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>58</wp:post_id>
		<wp:post_date>2006-08-12 19:20:19</wp:post_date>
		<wp:post_date_gmt>2006-08-12 17:20:19</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>switching-to-emacs</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Apple WWWWWDC 2006 Keynote</title>
		<link>http://zef.me/2006/08/10/apple-wwwwwdc-2006-keynote/</link>
		<pubDate>Thu, 10 Aug 2006 18:47:17 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2006/08/10/apple-wwwwwdc-2006-keynote/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>The WWDC (not entirely sure how my W’s should go in there) 2006 started this Monday, the Apple Developer Conference. It is kicked off, like every year, by a <a href="http://events.apple.com.edgesuite.net/aug_2006/event/index.html" target="_blank">keynote speech by Steve Jobs</a> (link goes to the video). Apple fans look forward to these keynotes because of two reasons:</p>
<ul>
<li>To see what cool products they’re launching. This is probably the most important reason for many people. Apple is always very secretive about its upcoming products so generally we’re always in for a surprise or two, or three, or four. Possibly five.</li>
<li>To hear Steve Jobs speak. He’s generally acknowledged to be the best CEO speaker of any technology company (maybe any company). As <a href="http://wired.com/news/columns/cultofmac/0,71557-0.html?tw=wn_index_6" target="_blank">wired puts it</a>: “he effortlessly sucks the audience into his famous “reality distortion field,” a state of suspended disbelief that makes even mundane products seem like miracles of technology.”</li>
</ul>
<p>First things first, the announcements. I watched the keynote on tuesday so I might not remember every little thing, but what stuck was the Mac Pro, Xserve and Mac OS X Leopard (10.5). The Mac Pro is to replace the PowerMac. It comes with two dual core super mega turbo intel processors. Essentially that means that the machine has 4 64-bit processors in it (up to 3Ghz each). What that means that you will never spend more than 0.000000000000115 second wondering how much 23 * 5 is. The answer, ironically, is 115 — at least according to my, by comparison, slow single core old-school 1Ghz 32-bit G4 iBook.</p>
<p>So if you need a stylish ultra fast machine and have $2500 to spare, the Mac Pro is a very nice (and cost effective) choice. According to Phil Schiller it’s even a thousand dollars cheaper than a Dell machine with the same configuration, and the Dell one comes in an ugly (probably black) case. Not the cool metalic one with a huge apple logo stamped on it.</p>
<p>Then there was the Xserve, the Apple rack server. I’ll summarise it for you: it’s faster, better and cheaper. There you go.</p>
<p>“And that completes the transition of the full Mac line-up to the Intel processor” Phil proudly announced. I feared they forgot about the poor little Mac mini, but I just checked on their website and the mini got his new shiny intel processor a while ago already. I apparently missed that. Or forgot. Or both.</p>
<p>Then the big news: <a href="http://www.apple.com/macosx/leopard/" target="_blank">Mac OS X Leopard</a>. It’s a bit underwhelming. Steve didn’t announce all new features yet (they didn’t want Microsoft to copy everything yet), but they did discuss 10 new features. The ones that stuck were:</p>
<ul>
<li>Time machine. Essentially backup software with a very cool interface. That’s it.</li>
<li>Spaces. Or as the rest of the world has been calling it: virtual desktops. This had been possible on Macs for a while now with free third-party software. Still Apple’s version of it is a bit nicer, but nothing world shocking.</li>
<li>Spotlight improvements. Now it can also search servers and other Macs on the network. It has some other improvements, like a fast application launcher. Or something. I dunno.</li>
<li>Mail improvements. They added some pointless features to a mail client I never use. You now can easily make very cool looking HTML e-mails. If you ever send me one of those it will be hard for me to take you seriously. It’s e-mail people, you don’t need stationary.</li>
<li>Dashboard improvements. They now have many ways to make it easier to create your own widgets. I was really surprised about how much effort they put into this. Why? They’re just widgets, why create a full WYSIWYG editor and Javascript debugger for this? I don’t care.</li>
<li>Better speech synthesis. This is quite nice, I must admit. If you’re blind anyway, otherwise you probably won’t use it. The Mac, for a while has been able to read the contents of windows aloud to you. The voice you’d always sounded kind of geeky, it was understandable but sounded a bit like a robot. Leopard will bring much better speech synthesis. Quite nice.</li>
<li>iChat improvements. Another application I don’t use much. It will have support for more webcams (which is good!) and on top of that some very funny ways of manipulating the picture (like changing the background). Funny. Very funny. But pointless. It’s funny though. If only more teenagers would iChat. MSN users would love this kind of pointless thing.</li>
</ul>
<p>I hope Steve has been keeping the best features a secret, otherwise I’m a bit underwhelmed. It’s a decent upgrade. For any other company it would be a good upgrade. For Apple it’s only decent.</p>
<p>And then the other reason to watch: the presentation. Mr. Jobs speaking. Yeah well, also a bit disappointing. I’m not sure exactly what it is, but I think Steve has realised he’s mortal and he won’t be able to carry the company forever. I think he’s slowly trying to “outsource” more and more of the keynote to other people. This time he brought three side-kicks. First off, Phil Schiller, as usual. He’s a nice fella, he’s not Steve, but still a nice fella. And he’s always happy to pretend to be home and call in on iChat. Hahah. Phil. Funny guy.</p>
<p>Second there was a French guy with a French name and French accent. Possibly because he was French. He did the bit where they made fun of Windows Vista. Sometimes a bit too easy, but sometimes funny. Or “funny” as he probably would have said. Yeah, it’s sort of hard to make you understand how he’d pronounce that. I guess you’d just have to imagine how a French person would sound saying that. The French always have the strongest accents when speaking English, why is that anyway?</p>
<p>The third guy’s name I forgot, but I was actually quite impressed. He’s a young guy. He demonstrated and talked about a lot of the Leopard features. <a href="http://wired.com/news/columns/cultofmac/0,71557-0.html?tw=wn_index_6" target="_blank">Wired</a> didn’t like him that much, but I did. I liked him better than Phil. And Phil is funny. But this guy is too. And when iPhoto froze up he handled it nicely, without breaking that much of a sweat. And he made a nice joke about it too (“if I only had a time machine and not make that mistake”, very funny).</p>
<p>If I would have to pick any of the three to replace Steve I’d pick the last one. But I fear Steve is irreplacable. Apple is Steve. And without Steve I wonder if there’s still Apple. I hope we won’t have to find out for many more years.</p>
<p>If you have an hour and a half to spare, you can <a href="http://events.apple.com.edgesuite.net/aug_2006/event/index.html" target="_blank">watch the full keynote here</a> (quicktime required, of course, but who doesn’t have quicktime).</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>266</wp:post_id>
		<wp:post_date>2006-08-10 20:47:17</wp:post_date>
		<wp:post_date_gmt>2006-08-10 18:47:17</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>apple-wwwwwdc-2006-keynote</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Apple iBook/Powerbook Battery Recall</title>
		<link>http://zef.me/2006/08/25/apple-ibook-powerbook-battery-recall/</link>
		<pubDate>Fri, 25 Aug 2006 10:39:57 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2006/08/25/apple-ibook-powerbook-battery-recall/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Apple is recalling 1.8 million batteries given out between 2003 and 2006 in iBook G4s and Powerbook G4s that may overheat and catch fire. It turns out I’m the lucky owner of such a battery (my battery’s serial number is in the ranges given). So I ordered a new one. Great.</p>
<p>If you own an iBook or Powerbook you <a href="https://support.apple.com/ibook_powerbook/batteryexchange/" target="_blank">better have a look at this</a>. It seems to be that battery recall time of year, not so long ago I think Dell also recalled batteries didn’t they?</p>
<p>Anyway, there’s good news too. My thesis is done! I just brought it to the printer/binder this morning. Just little over one week more to go and I’ll be going back to Holland. Hooray!</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>372</wp:post_id>
		<wp:post_date>2006-08-25 12:39:57</wp:post_date>
		<wp:post_date_gmt>2006-08-25 10:39:57</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>apple-ibook-powerbook-battery-recall</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="personal"><![CDATA[Personal]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Interesting Developements in VoIP</title>
		<link>http://zef.me/2006/07/21/interesting-developements-in-voip/</link>
		<pubDate>Fri, 21 Jul 2006 10:45:10 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2006/07/21/interesting-developements-in-voip/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Two interesting things were announced in the past two days from two different VoIP companies: SIPPhone and Skype.</p>
<p>SIPPhone yesterday announced you can now make free calls to mobile and landline numbers in 60 countries. Or <a href="http://www.gizmoproject.com/learnmore-allcallsfree.html" target="_blank">more precisely</a>, you can make free calls to mobiles and landlines in Canada, China, Cyprus, Guam, Hong Kong, Malawi, Malaysia, Puerto Rico, Russia, Saipan, San Marino, Singapore, South Korea, Thailand, United States, US Vigin Islands and Vatican City. You can make free calls to landlines in Argentina, Australia, Austria, Belgium, Brazil, Bulgaria, Chile, Croatia, Czech Republic, Denmark, Estonia, Finland, France, French Antilles, Germany, Gibraltar, Greece, Guadeloupe, Hungary, Iceland, Ireland, Israel, Italy, Japan, Liechtenstein, Luxembourg, Monaco, Netherlands, New Zealand, Norway, Panama, Peru, Poland, Portugal, Slovenia, Spain, Sweden, Switzerland, Taiwan, Turkey, United Kingdom, Venezuela and Zambia. Cool!</p>
<p>Except there is one restriction: both you and the person you’re calling must be active users of <a href="http://www.gizmoproject.com" target="_blank">Gizmo</a>, SIPPhone’s Skype competitor (which, actually, is quite a bit nicer than Skype in some ways, plus it uses an open protocol — SIP) and the number you want to call must be listed in the target user’s Gizmo profile. What this means in practice is that the person you’re calling also uses Gizmo regularly, which means they probably have broadband and there’s really not that much point in calling their mobile or landline number. There may be, sometimes, but you’re much more likely to want to call a number of somebody that doesn’t use Gizmo at all.</p>
<p>But still it’s a nice marketing stunt. Hopefull it will get some people to try Gizmo. It seems quite nice. I myself have some trouble getting it to work, for some reason when I make a phonecall I don’t hear the other person, I submitted a support ticket to their system, we’ll see what causes it.</p>
<p>The <a href="http://news.com.com/2100-7351_3-6096681.html?part=rss&amp;tag=6096681&amp;subj=news" target="_blank">other announcement</a>, from Skype is maybe more significant. At least I’ve been waiting for it. Skype is going to introduce Wifi Phones with the Skype software built-in. This means that you have a handset (wireless of course) that has Skype built-in and thus can use to make calls to any skype user for free or for low cost to any other number. If you consider that more and more areas are widely covered with wifi access points that are open to anybody to use, that means that you can start making free (and very cheap) calls in more and more places. A very interesting development. It may one day become a bit of a cellphone replacement (although there are major issues when moving from one access point to the other).</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>383</wp:post_id>
		<wp:post_date>2006-07-21 12:45:10</wp:post_date>
		<wp:post_date_gmt>2006-07-21 10:45:10</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>interesting-developements-in-voip</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Reading List</title>
		<link>http://zef.me/2006/08/03/reading-list/</link>
		<pubDate>Thu, 03 Aug 2006 20:54:24 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2006/08/03/reading-list/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>While I’m coding away on my amazing RaSSQL middleware (RDF and Semantic Service Query Language) in Python (nearing completion), I’ll give you some (potentially) interesting links for you to occupy your time with. Is that considerate of me or not?</p>
<ul>
<li>Tim O’Reilly: <a href="http://radar.oreilly.com/archives/2006/08/skyrider_commercializing_p2p.html" target="_blank">Skyrider: Commercializing P2P</a>
</li>
<li>Joel Spolsky: <a href="http://www.joelonsoftware.com/items/2006/08/01.html" target="_blank">Can Your Programming Language Do This?</a>
</li>
<li>James O. Coplien: <a href="http://www.artima.com/weblogs/viewpost.jsp?thread=167119" target="_blank">Signs of the Next Paradigm Shift: Part I</a>
</li>
<li>Tantek Çelik and Rohit Khare: <a href="http://knowledge.wharton.upenn.edu/article.cfm?articleid=1526&amp;specialid=55" target="_blank">The Progress and the Promise of Microformats</a>
</li>
</ul>
<p>Enjoy (or not, whichever you like doing most).</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>409</wp:post_id>
		<wp:post_date>2006-08-03 22:54:24</wp:post_date>
		<wp:post_date_gmt>2006-08-03 20:54:24</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>reading-list</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Innovation in Photos and Videos Online</title>
		<link>http://zef.me/2006/08/22/innovation-in-photos-and-videos-online/</link>
		<pubDate>Tue, 22 Aug 2006 18:13:28 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2006/08/22/innovation-in-photos-and-videos-online/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p><a href="http://www.techcrunch.com/2006/08/21/zooomr-launches-zoomable-picture-in-picture-feature/" target="_blank">This recent post</a> on Techcrunch about a new feature of <a href="http://www.zooomr.com" target="_blank">Zooomr</a> called “portals” made me realised how far we are from perfection when it comes to photo and video sharing and generally what you can do with those online.</p>
<p>This is the video that demos the portals feature in Zooomr:</p>
<a href="https://www.youtube.com/v/BdowmnGz4_4">https://www.youtube.com/v/BdowmnGz4_4</a><p>I think around five years ago we had to buy a new TV. My dad said we’d buy a cheap one because soon the digital television would that would completely change the television landscape. Broadcasting would happen through the internet and it would be interactive. But has it happened? A little bit, there is digital television in some areas but it’s not very interactive yet. There’s more and more video material available on the internet and systems like windows media center would allow you to watch it on your television. But the real big shift still has to happen.</p>
<p>Have a look at YouTube for example. It’s a great site. Lots of content. But still all traditional, sit back in your chair video. Why is there no interactive video yet? I think people could have good fun with even a simple way to offer options during the video to change the story line for example. Or by allowing you to click on a door in a room to move to next in videos which try to sell you real estate.</p>
<p>New online flash video sites are being launched all the time, increasingly these even offer ways to edit your videos online using a flash interface. Cut them up into fragments, reorder them, combine them and so on. Wouldn’t it be interesting to allow users to also create simple menus inside the video that determine the next video to play? It would be so simple, yet so powerful.</p>
<p>Yes, I do realise that you do not always want interactive television, sometimes you really just want to sit back. But especially the videos that you watch sitting behind a PC can be made interactive. People probably sit in uncomfortable chairs anyway, they don’t always like sitting back they like to click.</p>
<p>This is such a great time to be a web developer. I wish I still enjoyed programming like six years ago I would be working on so many projects doing great stuff. When I did web development the most exciting thing you could do was building a <a href="http://www.yabbforum.com" target="_blank">bulletin board</a>. Gosh times have changed. I wish I was very rich and could hire people to do the programming for me. ;)</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>536</wp:post_id>
		<wp:post_date>2006-08-22 20:13:28</wp:post_date>
		<wp:post_date_gmt>2006-08-22 18:13:28</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>innovation-in-photos-and-videos-online</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>What’s the Deal With This?</title>
		<link>http://zef.me/2006/08/28/whats-the-deal-with-this/</link>
		<pubDate>Mon, 28 Aug 2006 09:51:45 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2006/08/28/whats-the-deal-with-this/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>What’s the deal with these kinds of e-mails?</p>
<p>I’ve been getting them for the past months I guess, but since yesterday afternoon they just keep coming and coming. When I woke up this morning I had 21 new e-mails of which 20 were such stupid e-mails containing text like:</p>
<blockquote>rhinitis necrosis report burning sensation<br>lasts minutes What dangerous<br>anymore<br>rotten sores full maggots. And does much outward will singular virtue greater entrails those had centuries isolation achieved until Many attempted isolate but none two reasons: knowledge chemistry required worsened because grow Europe ruins easily during isolated German Friedrich Gaedcke<br>tube. avoid fingers lips cardboard torn matchbook wrapped held rubber band adhesive tape. pipes dick.A steel copper scouring pad brillo chore pads placed carefully packed down inch. insertion burnt coatings present. serves reduction modulator melt vapor.The<br>causing response news just made. acting Powder evening hasten slumber. xanax rohypnol purpose. Other amplify minimize neurons. exhibit rewarding Later DAT/SERT knockout rhythms possibly involving termed genes. solely reward. needed centers Issues Dysphoria magnifies albeit improves mood. worsening cannot opposite occurring Therapy CBT promising results. vaccines desirable National country modafinil Anonymous modeled helpful spiritual Alcholics success recovered aided Emission scans showing primates brains. Red gamma vinylGABA</blockquote>
<p>My question: what’s the point in these e-mails. They don’t sell anything, they’re just random text. And it’s friggin’ annoying because Gmail’s spam filter doesn’t recognize them.</p>
<p>During the writing of this e-mail I already received 3 more! Aaargh!</p>
<p>My Gmail’s spam folder now contains 3052 e-mails, which means that in the past 30 days I had that many spam messages. That’s over a hundred a day, this is getting crazy!</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>717</wp:post_id>
		<wp:post_date>2006-08-28 11:51:45</wp:post_date>
		<wp:post_date_gmt>2006-08-28 09:51:45</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>whats-the-deal-with-this</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>A Home in the Cloud</title>
		<link>http://zef.me/2006/07/28/a-home-in-the-cloud/</link>
		<pubDate>Fri, 28 Jul 2006 15:06:22 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2006/07/28/a-home-in-the-cloud/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p><a href="http://www.infoworld.com/article/06/07/26/31OPstrategic_1.html" target="_blank">Jon Udell</a>:</p>
<blockquote>But the desktop isn’t the battleground it once was. I float like a butterfly from Windows to OS X to Linux. My home is in the cloud, and that’s the next frontier for the champions of free and open commodity infrastructure.</blockquote>
<p>The “cloud” Jon refers to here is the internet(s), the web. I do believe that over time operating systems for PCs will matter less. Clients get thinner and thinner. By far the most important application on any computer I use is the web browser. If I had to pick one application I need, it would the browser. I use it to access my e-mail, news, video, calendar, pictures, I can even use it to talk to my friends (more and more webapps are build that allow you to login to MSN, ICQ, AIM and Jabber/Gtalk through the web, like <a href="http://www.meebo.com" target="_blank">Meebo</a>). If I really had to I could even do word precessing (<a href="http://www.writely.com" target="_blank">Writely</a>), I can do spreadsheets (<a href="http://spreadsheets.google.com" target="_blank">Google Spreadsheets</a> or <a href="http://www.irows.com" target="_blank">iRows</a>). I can also play my music through the browser if i wanted to (<a href="http://www.mp3tunes.com/locker" target="_blank">MP3Tunes Locker</a>).</p>
<p>Soon, the browser is the OS, the rest just doesn’t matter that much. And then it’s Linux’ moment to shine.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>828</wp:post_id>
		<wp:post_date>2006-07-28 17:06:22</wp:post_date>
		<wp:post_date_gmt>2006-07-28 15:06:22</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>a-home-in-the-cloud</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Redland on OS X Problem and Solution</title>
		<link>http://zef.me/2006/07/16/redland-on-os-x-problem-and-solution/</link>
		<pubDate>Sun, 16 Jul 2006 17:50:23 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2006/07/16/redland-on-os-x-problem-and-solution/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>This is probably of no interest to you, but I’ll post it so that people who run into the same problem will be able to find the solution through Google.</p>
<p>For my project I’m using <a href="http://librdf.org" target="_blank">Redland librdf</a>, which is a RDF library written in C that has wrapper for Python and many other languages (I’m using the Python one obviously). As my iBook was broken I used my windows laptop for the past months and there it worked fine. However now I got my iBook back I wasn’t able to let the redland-bindings to compile.</p>
<p>However I kept getting an error similar to <a href="http://paste.lisp.org/display/16321" target="_blank">this</a>:</p>
<p>$ make<br>Making all in test<br>make[1]: Nothing to be done for `all’.<br>gcc -DPACKAGE_NAME=”Redland RDF Application Framework bindings” -DPACKAGE_TARNAME=”redland-bindings” -DPACKAGE_VERSION=”1.0.2.1” -DPACKAGE_STRING=”Redland RDF Application Framework bindings 1.0.2.1” -DPACKAGE_BUGREPORT=”http://bugs.librdf.org/" -DPACKAGE=”redland-bindings” -DVERSION=”1.0.2.1” -DSTDC_HEADERS=1 -DHAVE_SYS_TYPES_H=1 -DHAVE_SYS_STAT_H=1 -DHAVE_STDLIB_H=1 -DHAVE_STRING_H=1 -DHAVE_MEMORY_H=1 -DHAVE_STRINGS_H=1 -DHAVE_INTTYPES_H=1 -DHAVE_STDINT_H=1 -DHAVE_UNISTD_H=1 -DHAVE_DLFCN_H=1 -I. -DREDLAND_POST_I -DREDLAND_DECL_I -DREDLAND_TYPEMAP_I -I/usr/local/include -I/opt/local/include/db4 -I/opt/local/Library/Frameworks/Python.framework/Versions/2.4/include/python2.4 -I/opt/local/include/python2.4 -g -O2 -I/usr/local/include -I/opt/local/include/db4 -g -O2 -fPIC -DPIC ./Redland_wrap.c -c -o Redland_wrap.so<br>In file included from ./Redland_wrap.c:1380:<br>./redland-post.i: In function ‘librdf_python_unicode_to_bytes’:<br>./redland-post.i:162: warning: pointer targets in passing argument 2 of ‘raptor_unicode_char_to_utf8’ differ in signedness<br>./Redland_wrap.c: In function ‘_wrap_librdf_digest_update’:<br>./Redland_wrap.c:1777: warning: pointer targets in passing argument 2 of ‘librdf_digest_update’ differ in signedness<br>./Redland_wrap.c: In function ‘_wrap_librdf_digest_update_string’:<br>./Redland_wrap.c:1812: warning: pointer targets in passing argument 2 of ‘librdf_digest_update_string’ differ in signedness<br>./Redland_wrap.c: In function ‘_wrap_librdf_new_uri’:<br>./Redland_wrap.c:2342: warning: pointer targets in passing argument 2 of ‘librdf_new_uri’ differ in signedness<br>./Redland_wrap.c: In function ‘_wrap_librdf_new_node_from_uri_string’:<br>./Redland_wrap.c:2575: warning: pointer targets in passing argument 2 of ‘librdf_new_node_from_uri_string’ differ in signedness<br>./Redland_wrap.c: In function ‘_wrap_librdf_new_node_from_literal’:<br>./Redland_wrap.c:2661: warning: pointer targets in passing argument 2 of ‘librdf_new_node_from_literal’ differ in signedness<br>./Redland_wrap.c: In function ‘_wrap_librdf_new_node_from_typed_literal’:<br>./Redland_wrap.c:2710: warning: pointer targets in passing argument 2 of ‘librdf_new_node_from_typed_literal’ differ in signedness<br>./Redland_wrap.c: In function ‘_wrap_librdf_new_node_from_blank_identifier’:<br>./Redland_wrap.c:2779: warning: pointer targets in passing argument 2 of ‘librdf_new_node_from_blank_identifier’ differ in signedness<br>./Redland_wrap.c: In function ‘_wrap_librdf_model_add_typed_literal_statement’:<br>./Redland_wrap.c:3936: warning: pointer targets in passing argument 4 of ‘librdf_model_add_typed_literal_statement’ differ in signedness<br>./Redland_wrap.c: In function ‘_wrap_librdf_parser_parse_string_as_stream’:<br>./Redland_wrap.c:5394: warning: pointer targets in passing argument 2 of ‘librdf_parser_parse_string_as_stream’ differ in signedness<br>./Redland_wrap.c: In function ‘_wrap_librdf_parser_parse_string_into_model’:<br>./Redland_wrap.c:5438: warning: pointer targets in passing argument 2 of ‘librdf_parser_parse_string_into_model’ differ in signedness<br>./Redland_wrap.c: In function ‘_wrap_librdf_parser_parse_counted_string_as_stream’:<br>./Redland_wrap.c:5486: warning: pointer targets in passing argument 2 of ‘librdf_parser_parse_counted_string_as_stream’ differ in signedness<br>./Redland_wrap.c: In function ‘_wrap_librdf_parser_parse_counted_string_into_model’:<br>./Redland_wrap.c:5536: warning: pointer targets in passing argument 2 of ‘librdf_parser_parse_counted_string_into_model’ differ in signedness<br>./Redland_wrap.c: In function ‘_wrap_librdf_new_query’:<br>./Redland_wrap.c:5663: warning: pointer targets in passing argument 4 of ‘librdf_new_query’ differ in signedness<br>gcc -g -O2 -I/usr/local/include -I/opt/local/include/db4 -g -O2 -Wl,-F. -Wl,-F. -bundle -framework Python Redland_wrap.so `redland-config — libs` -o Redland.so<br>/usr/bin/ld: Undefined symbols:<br>_raptor_locator_byte<br>_raptor_locator_column<br>_raptor_locator_file<br>_raptor_locator_line<br>_raptor_locator_uri<br>_raptor_unicode_char_to_utf8<br>collect2: ld returned 1 exit status<br>make[1]: *** [Redland-stamp] Error 1<br>make: *** [all-recursive] Error 1</p>
<p>The solution is as follows. From <a href="http://download.librdf.org/source/" target="_blank">this page</a> download seperately: raptor (latest .tar.gz), rasqal (latest .tar.gz), redland (latest .tar.gz) and redland-bindings (latest .tar.gz). Extract each of them and then compile them as follows:</p>
<p>raptor: ./configure &amp;&amp; make &amp;&amp; sudo make install<br>rasqal: ./configure &amp;&amp; make &amp;&amp; sudo make install<br>redland: ./configure — with-raptor=system — with-rasqal=system &amp;&amp; make &amp;&amp; sudo make install<br>redland-bindings: ./configure — with-python — with-whatever &amp;&amp; make &amp;&amp; make install (the configure command depends on the language bindings you need, I just used — with-python).</p>
<p>Hope this will help someone in the future.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>887</wp:post_id>
		<wp:post_date>2006-07-16 19:50:23</wp:post_date>
		<wp:post_date_gmt>2006-07-16 17:50:23</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>redland-on-os-x-problem-and-solution</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Video on the Web Revisited</title>
		<link>http://zef.me/2006/08/06/video-on-the-web-revisited/</link>
		<pubDate>Sun, 06 Aug 2006 10:57:09 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2006/08/06/video-on-the-web-revisited/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Almost <a href="http://www.zefhemel.com/archives/2004/10/15/text-audio-and-video-blogging" target="_blank">two years up to the day</a> I predicted that video blogging/casting wouldn’t work. For two reasons: bandwidth and the fact that you needed two senses to consume it: sight and hearing. Both text blogging and podcasting only require one: sight for text and hearing for podcasting.</p>
<p>Recently, however, I increasingly started to see the power of videos on the internet. When websites like <a href="http://www.youtube.com" target="_blank">YouTube</a> came around where you could upload your videos and they could be viewed though the webpage as a flash movie, that changed a lot. I always hated video in web pages that required either windows media player, real player or quicktime. These flash movies are, in fact, pretty neat. I’ve spend hours and hours watching youtube and Google videos.</p>
<p>Two years ago I lived in Holland and had to ride my bike to university for about half an hour every day (each way) so I had plenty of time to listen to podcasts. Now that I live in Dublin, I walk to university every day (well, used to be every day) which also takes about half an hour. Except here it’s really loud on the streets, I can’t listen to podcasts because of the traffic. So I stopped doing that. Instread I watch a couple of vidcasts at home. I’m not going to listen to podcasts at home because there’s no time for me to do that. I can’t do it while working because I would simply miss all of it (unless it’s a music podcast) and I’m not just going to sit there staring at my screen listening to a podcast. Very occasionally I listed to “Real time with Bill Maher” (which is a HBO TV show, but the audio is put up as a podcast) while lying on my sofa, but that’s about it.</p>
<p>I spend much more time watching vidcasts. I sometimes watch ABC’s Word News, which in itself isn’t great but it gives some idea of what’s happening in the world in a visual way (and tells you what the most popular google searches have been that day… very newsworthy, good job ABC). I also watch <a href="http://revision3.com/diggnation" target="_blank">Diggnation</a> which I sort of like because of its atmosphere. And then there’s some stand-up comedy from Comedy Central which is sometimes funny.</p>
<p>Unlike two years ago I now see a big future for video on the web. There’s more and more good quality content at there and acceptable file sizes. Yesterday I found out about <a href="http://www.pbs.org/cringely/nerdtv/" target="_blank">NerdTV</a>, terrible name, but seems to have nice content. Considering that they’re 1 hour interviews, the filesize (around 85mb each) is surprisingly small (and the image quality not bad at all). I think that in the future, video aggregators like iTunes and <a href="http://www.getdemocracy.com/" target="_blank">Democracy</a> may actually become a real TV replacement.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>906</wp:post_id>
		<wp:post_date>2006-08-06 12:57:09</wp:post_date>
		<wp:post_date_gmt>2006-08-06 10:57:09</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>video-on-the-web-revisited</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Fun with Archive.org</title>
		<link>http://zef.me/2006/07/13/fun-with-archive-org/</link>
		<pubDate>Thu, 13 Jul 2006 11:44:47 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2006/07/13/fun-with-archive-org/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>I was trying to find some old sites of mine on <a href="http://web.archive.org" target="_blank">Archive.org</a> today. It’s quite fun to do that actually (for me anyway). Sadly I wasn’t able to retrieve my oldest website I ever created (which used to live at <a href="http://huizen.dds.nl/~zhemel%29." target="_blank">http://huizen.dds.nl/~zhemel).</a> I remember I used to run a website listing free stuff on the internet (free websites, e-mail etc.) but sadly I forgot the name.</p>
<p>The oldest project (dating from 1999) I could find is <a href="http://web.archive.org/web/19991128220744/http://zefnet.com/" target="_blank">ZEFNet Mail Center</a>. zefnet.com was my first ever domain name (and I paid $35 for it using my dad’s credit card). The site it was hosting changed a lot and not many can be found back on archive.org, but ZEFNet Mail Center is still there. It was a service that allowed you to check your POP3 mailbox through the web. It used a free Perl script I found somewhere and changed and extended a lot, you could check multiple POP3 mailboxes from one account, it could translate messages through Babelfish, you could reply to messages, forward them and so on. It was probably my first project in Perl.</p>
<p>Another project I found dates from May 2000: <a href="http://web.archive.org/web/20010209155341/http://redirectionguide.net/" target="_blank">Redirection Guide.Net</a> which is one of my earlier serious projects. This was at the time that domains were still quite expensive. There were numerous services like <a href="http://www.cjb.net" target="_blank">CJB.net</a> that could you a URL like <a href="http://yourname.cjb.net," target="_blank">http://yourname.cjb.net,</a> there were others like <a href="http://come.to/yourname" target="_blank">http://come.to/yourname</a> and so on. RedirectionGuide.net was a website that listed all those services so you could pick a name you liked. I wrote a Perl script that allowed you to start such a redirection service yourself, and released it under the name <a href="http://web.archive.org/web/20001018042117/lightning.zefnet.com/" target="_blank">Lightning Redirector</a>, it was the first Perl I ever released, it was quite nice. Had some features that other services didn’t have at that time and some people used it.</p>
<p>Then there’s YaBB of course. Sadly there are no retrievable versions of yabb.com.ru on archive.org. The earliest version of the website I could find is <a href="http://web.archive.org/web/20001017190943/http://www.yabb.org/index.html" target="_blank">this one from October 2000</a>, which is about 3 months after its initial release. Some other version can be found <a href="http://web.archive.org/web/*/http://www.yabb.org" target="_blank">here</a>. After a while we lost the yabb.org domain name to some porn site.</p>
<p>After YaBB ran for a while I turned <a href="http://web.archive.org/web/20011214075230/zefnet.com/forums/YaBB.pl" target="_blank">ZEFNet in some attempt for a Dutch discussion site for web developers</a>.</p>
<p>Then in 2002 it was time for ZefHemel.com. <a href="http://web.archive.org/web/20020930145502/http://www.zefhemel.com/" target="_blank">This is what it looked like at first</a>. It was a set of static XHTML pages that were generated from some XML files at my PC run through a set of XSLT transformations and then FTPed onto the server. Quite nice actually.</p>
<p>Then in 2003 my site turned into a <a href="http://web.archive.org/web/20030210054933/http://www.zefhemel.com/" target="_blank">weblog</a>. First using software called “b2” or something (if I remember correctly), then <a href="http://web.archive.org/web/20031005082215/http://zefhemel.com/" target="_blank">switching to my own-made software</a>. And eventually switching to my current design (in 2004!? Oh god, that’s a long time) <a href="http://web.archive.org/web/20040329210157/http://zefhemel.com/" target="_blank">running Wordpress</a>.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1053</wp:post_id>
		<wp:post_date>2006-07-13 13:44:47</wp:post_date>
		<wp:post_date_gmt>2006-07-13 11:44:47</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>fun-with-archive-org</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="personal"><![CDATA[Personal]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Beyond Teasing</title>
		<link>http://zef.me/2006/07/31/beyond-teasing/</link>
		<pubDate>Mon, 31 Jul 2006 12:21:07 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2006/07/31/beyond-teasing/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Once upon a time there was a man called Cleveland Heep. He works as a superintendent in a housing estate. He oversees. He cleans. He takes out the trash. He’s the kind of guy that you would trust with anything. He takes his job seriously and seems reasonably happy with his simple life. In the evening he goes to his little house where he lives alone. The little house is located next to the housing estate’s pool. Before going to sleep he writes a bit in his diary. Sitting in his comfortable chair he slowly falls asleep.</p>
<p>Outside is a noise — water splashing. He gets up, takes his torch, goes outside and shines in the water to see what’s there. His life will never be the same again.</p>
<p>I saw the <a href="http://www.apple.com/trailers/wb/ladyinthewater/trailer1/" target="_blank">teaser</a> for <a href="http://www.imdb.com/title/tt0452637/" target="_blank">Lady in the Water</a> in the cinema for the first time. After it was over, a minute and a half later, I knew that watching the movie or seeing any of <a href="http://www.apple.com/trailers/wb/ladyinthewater/" target="_blank">its other trailers</a> could only ruin it.</p>
<p>This is the perfect teaser. This is perfection.</p>
<p>The music is perfect (Josh Groban — Mi Mancherai). The images are perfect. The lead role seems casted perfectly. It’s the most romantic thing I’ve ever seen. I know I won’t be able to resist watching the movie, but I know it can never match the trailer’s premise.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1083</wp:post_id>
		<wp:post_date>2006-07-31 14:21:07</wp:post_date>
		<wp:post_date_gmt>2006-07-31 12:21:07</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>beyond-teasing</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>eBook Readers</title>
		<link>http://zef.me/2006/08/27/ebook-readers/</link>
		<pubDate>Sun, 27 Aug 2006 11:00:28 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2006/08/27/ebook-readers/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>As I quickly flipped through <a href="http://www.linuxdevices.com/articles/AT9929449485.html" target="_blank">this article</a> I wondered, why haven’t eBook readers caught on yet? I would love to have a simple, thin, light device with a big screen (preferably around A4) that could just display PDFs. That’s all it has to do, display PDF and allow you to flip through the pages.</p>
<p>The device described in the article costs $650 and that’s way too much. Isn’t it possible to produce a cheap (say around $100-$150) device that you could plug into the USB port of your computer to upload a number of PDFs to. So I could finally switch off the computer and read the files on my couch? As I said it would have to be thin, light, preferably last on a battery for a number of hours. But the screen can be simple, black and white if need be and back lighting would not even be a requirement. It would just be a replacement for paper. I so often want to relax and sit and read a paper, some news, a web page without staring at a computer monitor.</p>
<p>It would only need, say, five buttons: up, down, left, right (you never know if the PDF doesn’t fit the screen) and select. You start the device, select a file to read and go. That’s it.</p>
<p>Does something like this exist in an affordable form?</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1099</wp:post_id>
		<wp:post_date>2006-08-27 13:00:28</wp:post_date>
		<wp:post_date_gmt>2006-08-27 11:00:28</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ebook-readers</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="personal"><![CDATA[Personal]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Vim 7</title>
		<link>http://zef.me/2006/07/18/vim-7/</link>
		<pubDate>Tue, 18 Jul 2006 17:55:21 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2006/07/18/vim-7/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Yesterday I decided to install <a href="http://www.vim.org" target="_blank">Vim</a> 7 on my iBook (also available for unices and windows of course) and I was surprised about the nice improvements they’ve made.</p>
<p>My favourite new features:</p>
<ul>
<li>Tabs, you can now have multiple tabs and quickly switch between them.</li>
<li>Spell checker</li>
<li>More advanced code completion. The regular completion is still there (Ctrl+P), but now shows a drop-down of options. And for C, JavaScript, Python, Ruby and XML it offers real code completion (although I haven’t completely figured out how and when it works).</li>
</ul>
<p>Here are two screenshots (both clickable for larger version):</p>
<figure><img alt="vim7_1_small.jpg" src="https://cdn-images-1.medium.com/max/800/0*XFEiG0rjU0-IuH1m.jpg"></figure><figure><img alt="vim7_2_small.jpg" src="https://cdn-images-1.medium.com/max/800/0*t9_g0_FAgYNEaxRv.jpg"></figure><p><a href="http://www.linux.com/article.pl?sid=06/05/01/2235242" target="_blank">Here’s an article on Vim 7’s new features</a>.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1223</wp:post_id>
		<wp:post_date>2006-07-18 19:55:21</wp:post_date>
		<wp:post_date_gmt>2006-07-18 17:55:21</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>vim-7</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Around the Corner</title>
		<link>http://zef.me/2006/07/19/around-the-corner/</link>
		<pubDate>Wed, 19 Jul 2006 14:18:37 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2006/07/19/around-the-corner/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>I live on a what, at first sight, looks a very quiet, small street. That’s what it looks like if you walk there and are only there for a couple of minutes, maybe an hour.</p>
<p>If you stay any longer, like me — I’ve stayed there for almost 10 months now — you will notice that this small street is far from being quiet; it’s very noisy in fact. It is noisy because of the huge trucks that drive by all the time. Sometimes I just have to walk to the window to see if England hasn’t invaded Ireland again, because it sounds like enormous tanks are driving past. Sometimes I walk to the window to see if haven’t ended up in the medieval times because I hear horses with carriages driving past.</p>
<p>But it’s not the case.</p>
<p>Everything I need here in Dublin is at the right. When I walk out the door I walk my not-so-quiet street in the right direction and then often directly to the left. My store is there. My university is there. My friends live there. The city centre is there.</p>
<p>Trucks and cars, however, most often drive to the left. Not to the right. I was never there. I was never where the cars and huge trucks and horses go. I always walked to the right. Nothing I need is at the left. I sometimes looked to the left but there’s not much to see. You see some houses and there’s a left turn. I never went there.</p>
<p>Until a couple of days ago.</p>
<p>A couple days ago, I don’t remember exactly what day, I decided to have a look what was there around the corner, to the left. Why did all the trucks, cars and horses always go there? I put on my shoes, took my iPod and there I went, out the door, to the left until the end of the street and then around the corner, again, left.</p>
<p>What I saw I hadn’t expected. Everybody who has spent some time in Dublin and visited London before has the same feeling. Dublin is a little bit like London, but smaller, tighter, narrower, uglier. The streets are narrow. Almost everywhere the streets are narrow. My street is narrow. However, the street around the corner was hardly narrow. It was really wide in fact.</p>
<p>Ridiculously wide. I don’t see why. My street was the main street leading to it, although from the looks of it there were some more small streets leading to the big, wide street. And there was nothing there but a street. Just a huge wide street. At the left there was only a wall. Across the street there were some shops, but they all seemed closed and abandoned. You see a lot of such shops here, many still have the names on them but it is very apparent that they haven’t been open for years.</p>
<p>The atmosphere in the street around the corner was strange, really strange. Completely different from my street. If this would have been a science-fiction story, curious things would be going on. But it is not, and I don’t like science-fiction.</p>
<p>My phone rang. Only once; the sign that my girlfriend was waiting with the phone in her hand in Oxted, waiting for my call. She works there as an au-pair right now and only has dial-up internet so I have to call to her landline number from Skype. I was close to home still so decided to walk back and make the call. When we were done I kept thinking about the street around the corner.</p>
<p>I decided to go back.</p>
<p>Not much had changed since I was there about an hour earlier. Except one thing. There were two cars parked at the left of the street. For the rest the street was completely empty, which was strange in my opinion because I have the feeling all day long big cars, trucks and horses go there. But they were nowhere to be seen. Except for those two parked cars. I decided to walk the street and see where it ended up.</p>
<p>As I walked the street I passed the first car. A man was sitting inside. I looked at him. He didn’t look at me. He looked at the empty wall at the side of the street. I looked at it too, there was nothing to be seen. I continued my walk. When I got closer to the second car I saw there were two people sitting in there. In the front there was a woman. In the back there was a child, a boy I would estimate around six years old. Neither of them looked at me, even though I looked at them. They too, were looking at the empty wall. It was strange. If this would have been a science-fiction story, curious things would be going on. But it is not, and I don’t like science-fiction.</p>
<p>I walked on. This was a strange street. There were some other side-streets that led into it, but all these streets seemed empty. There was a whole row of closed down shops at the other side of the street. A barber shop, a fruit store, some store where you could buy tiles. But they were all closed and seemed like they had been closed for many years.</p>
<p>And I couldn’t stop noticing. The street was abandoned, abandoned! How can that possibly be!? I heard cars, trucks and horses go there all the time and now that I was there — nothing. Nothing at all. It was like they disappeared as soon as they entered the street, invisible for anybody to see. If this would have been a science-fiction story, curious things would be going on. But it is not, and I don’t like science-fiction.</p>
<p>I got to the end of the street. It turned back into a normal narrow street there turning to the left. I decided to follow it. I would take the street to the left and then continue to walk straight ahead, eventually I would have to end up in the street where I knew there was a super market and I had to buy some items there. I followed the narrow street. This one was less curious and there even were some people there. I kept walking and walking. I walked from one street to the other, one turning slightly to the right, another slightly to the left. I got a bit worried. Although the route should be really simple I expected I should be at the street with the super market by now, but I was not. Finally I ended up in a street that was wider and had more traffic. I didn’t know the street but decided to follow it to the left, which in my head would be the wrong direction, but a safe direction. I walked and walked. Eventually I ended up at the street where I had to be. And there was the store. Curious. Very curious.</p>
<p>If this would have been a science-fiction story, curious things would be going on, involving <a href="http://en.wikipedia.org/wiki/M._C._Escher" target="_blank">Escher</a>esque street transformations. But it is not, and I don’t like science-fiction.</p>
<p>Orientation just never was my strongest point.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1226</wp:post_id>
		<wp:post_date>2006-07-19 16:18:37</wp:post_date>
		<wp:post_date_gmt>2006-07-19 14:18:37</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>around-the-corner</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="because-i-care"><![CDATA[Because I Care]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Net Neutrality</title>
		<link>http://zef.me/2006/07/24/net-neutrality/</link>
		<pubDate>Mon, 24 Jul 2006 12:07:46 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2006/07/24/net-neutrality/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>I’m not going to say anything on the issue, I’m just going to point you to three videos from the Daily Show (one of my favourite American TV shows) that comment on it. To fully understand the reference made in the third video you should have seen of the recent Apple ads (like <a href="http://www.youtube.com/watch?v=vY60vzAWqxw&amp;search=mac%20pc%20apple" target="_blank">this one</a>).</p>
<a href="https://www.youtube.com/v/QhOtlQ8-mcU">https://www.youtube.com/v/QhOtlQ8-mcU</a><a href="https://www.youtube.com/v/Tn51uT4a-IU">https://www.youtube.com/v/Tn51uT4a-IU</a><a href="https://www.youtube.com/v/4rtkeCwAk8M">https://www.youtube.com/v/4rtkeCwAk8M</a>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1250</wp:post_id>
		<wp:post_date>2006-07-24 14:07:46</wp:post_date>
		<wp:post_date_gmt>2006-07-24 12:07:46</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>net-neutrality</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Blogoforum</title>
		<link>http://zef.me/2006/07/11/blogoforum/</link>
		<pubDate>Tue, 11 Jul 2006 11:07:20 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2006/07/11/blogoforum/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Denis Krukovsky brought <a href="http://blogoforum.com" target="_blank">Blogoforum</a> to my attention. A forum application that has a lot of features I described in <a href="http://www.zefhemel.com/archives/2005/08/09/rethinking-discussion-boards" target="_blank">Rethinking Discussion Boards</a> and a little bit of <a href="http://www.zefhemel.com/archives/2006/06/28/forum-20" target="_blank">Forum 2.0</a>. There have been some tag-based forums before, but either they died or they aren’t really developed anymore.</p>
<p>Blogoforum is actually quite nice. It adopts the idea of getting rid of categories and boards like in the traditional forums and only uses tags (although it calls those categories). On the frontpage is a list of recent posts and a tag cloud at the right. Anyone can post messages. Messages can be replies to other messages or entirely new topics.</p>
<p>I’ve been clicking around on the site, reading some topics and I feel I get lost. And the thing is, I don’t know why. You cannot really get lost in a site with no real hierarchy can you? There is no hierarchy of categories, boards and topics here, it’s just messages with tags assigned to them. So how can you get lost in that?</p>
<p>Maybe it is that each message is also its own topic. If somebody replies to a message it is grouped with that message into a topic. But the message itself can also be the start of a topic. For example on the frontpage I saw a link to <a href="http://blogoforum.com/tag/addon+chatting+icons+meegos+messenger+msn/re-free-meego-s-for-msn-1117.html#m" target="_blank">this topic</a>. This is clearly a (silly) reply to a topic. When I look at this page I get confused. Visually. Have a look:</p>
<p>First of all the very top. Who understands what that means? “Blogoforum — blog+forum on meegos, chatting, messenger, icons, addon, msn” What I think it means is that we’re looking at a topic in (virtual) forum on meegos (whatever that may be), chatting, messenger, icons, addon and msn, which I assume are the tags associated with that. This is confusing and looks very ugly. Personally I would put the title of the thread at the top, not some potentially long string of tags with blog+forum. Who can read or understand that?</p>
<p>Then I see another title “RE: Free Meego’s For MSN”. This is the message we’re currently viewing. Then we see “started from” and another “RE: Free Meego’s For MSN” title with a message which I assume is a parent message. It’s the message this message is a reply to. By clicking on that title we move up a level. Then underneath that, again, is the title of our current post, with the actual text “(blank)” underneath it. Then there’s a reply somebody posted to that. Complicated? Exactly.</p>
<p>Visually this is really confusing too.</p>
<p>This is what I’m used to:</p>
<p>Clean. Simple. No confusion. A topic with replies. That’s it.</p>
<p>I admire Denis’ attempt to move away from the concept of posts all belonging to a single thread; making every single post a potential thread starter, but like this it doesn’t work. I think making some visual changes actually will make a big impact. Maybe a more traditional forum-like layout? Maybe he should try to find somebody with some good design and usability skills to have a look at it and make some suggestions.</p>
<p>I still believe in this idea and think, if executed properly, it actually could work. Maybe somebody here can see what’s wrong and how to fix it?</p>
<p><strong>Update:</strong> Blogoforum <a href="http://blogoforum.com/tag/blogoforum+design+job+ui+web+webdesign/blogoforum-is-looking-for-ui-web-designer-2315.html" target="_blank">is now looking for a designer</a>.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1325</wp:post_id>
		<wp:post_date>2006-07-11 13:07:20</wp:post_date>
		<wp:post_date_gmt>2006-07-11 11:07:20</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>blogoforum</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Gmail Adds MP3 Player</title>
		<link>http://zef.me/2006/08/23/gmail-adds-mp3-player/</link>
		<pubDate>Wed, 23 Aug 2006 10:03:52 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2006/08/23/gmail-adds-mp3-player/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Personally I’ve been waiting for this for a while for this feature and it has finally arrived.</p>
<p>You can now play MP3 attachments straight from your inbox without having to download the file. As the screenshot shows a little “Play” link can be found next to MP3 files, when you click it you get a little pop-up with a flash MP3 player in it. Works like a charm.</p>
<p>I already used my Gmail to securely store some of my music, now I can also use it to easily play music on computers that are not my own without having to download files.</p>
<p>Thanks Google!</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1408</wp:post_id>
		<wp:post_date>2006-08-23 12:03:52</wp:post_date>
		<wp:post_date_gmt>2006-08-23 10:03:52</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>gmail-adds-mp3-player</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Quote</title>
		<link>http://zef.me/2006/08/15/quote/</link>
		<pubDate>Tue, 15 Aug 2006 18:27:39 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2006/08/15/quote/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>I’m working on my dissertation (98 pages, wooh!) so not much time, but I read this quote today and wanted to share it.</p>
<p><a href="http://www.hyperorg.com/blogger/mtarchive/million_dollar_idea_583_the_oo.html" target="_blank">Markus Pirchner</a>: “If I had a nickel for every million dollar idea I’ve had, I’d be rich by now!”</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1453</wp:post_id>
		<wp:post_date>2006-08-15 20:27:39</wp:post_date>
		<wp:post_date_gmt>2006-08-15 18:27:39</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>quote</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Wikiality</title>
		<link>http://zef.me/2006/08/04/wikiality/</link>
		<pubDate>Fri, 04 Aug 2006 13:06:53 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2006/08/04/wikiality/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p><a href="http://spring.newsvine.com/_news/2006/08/01/307864-stephen-colbert-causes-chaos-on-wikipedia-gets-blocked-from-site" target="_blank">Newsvine</a>:</p>
<blockquote>On Monday night’s episode of The Colbert Report, Stephen Colbert addressed the online resource Wikipedia, the encyclopedia that anyone can read or edit. Colbert praised Wikipedia for “wikiality,” the reality that exists if you make something up and enough people agree with you — it becomes reality. Colbert’s subsequent examples to prove “wikiality” would cause chaos on the site, and lead an administrator to subsequently block his account.</blockquote>
<p>Here’s the video:</p>
<a href="https://www.youtube.com/v/xFT4OfdnVpU">https://www.youtube.com/v/xFT4OfdnVpU</a>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1707</wp:post_id>
		<wp:post_date>2006-08-04 15:06:53</wp:post_date>
		<wp:post_date_gmt>2006-08-04 13:06:53</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>wikiality</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Rails vs. Django</title>
		<link>http://zef.me/2006/11/23/rails-vs-django/</link>
		<pubDate>Thu, 23 Nov 2006 10:02:12 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2006/11/23/rails-vs-django/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p><a href="http://docs.google.com/View?docid=dcn8282p_1hg4sr9" target="_blank">An interesting comparison between Ruby on Rails and Django</a>:</p>
<blockquote>Ruby on Rails (“Rails”) is the dominant web programming framework for Ruby and, even outside the Ruby community, is considered the epitome of the latest generation of high-productivity, open source web development tools. Django is one of many competing web development frameworks for Python. It is notable, first, for being highly regarded amongst Python programmers, and second, for being one of the few of the new generation of frameworks that does not ape Ruby on Rails. Both Rails and Django claim greatly enhanced productivity, compared with more traditional web development frameworks.</blockquote>
<blockquote>In this paper, we compare the two frameworks from the point of view of a developer attempting to choose one of the two frameworks for a new project.</blockquote>
<p>I myself am a Python fan. Although, I just realize haven’t written a single line of code for months, I’ve written poetry and essays about literary pieces, but no code. Quite a change. But ok, that’s beside the point. This paper (hosted on Google Docs, by the way as you can tell from the URL) is an interesting read. Recommended.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>122</wp:post_id>
		<wp:post_date>2006-11-23 11:02:12</wp:post_date>
		<wp:post_date_gmt>2006-11-23 10:02:12</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>rails-vs-django</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Who Da Man?</title>
		<link>http://zef.me/2006/12/17/who-da-man/</link>
		<pubDate>Sun, 17 Dec 2006 11:37:54 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2006/12/17/who-da-man/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Me da man. Me and about 140 others that morning, but still. Me da man.</p>
<p>Last Friday I got my Master of Science title from Trinity College Dublin. Here it is:</p>
<figure>

<img data-width="376" data-height="500" alt="My diploma" src="https://cdn-images-1.medium.com/max/800/0*LWLfvgQyAdOjWdr_.jpg">
</figure><p>And this is what I looked like accepting it:</p>
<figure>

<img data-width="376" data-height="500" alt="Master Zef" src="https://cdn-images-1.medium.com/max/800/0*9AneyDo6n9u5UonF.jpg">
</figure><figure>

<img data-width="376" data-height="500" alt="Master Zef's back" src="https://cdn-images-1.medium.com/max/800/0*JqkarXTaVhTZS41V.jpg">
</figure><p>Awesome, isn’t it? A couple more <a href="http://www.flickr.com/photos/zefhemel/sets/72157594424202502/" target="_blank">pictures can be found here</a> (I’ll add more later, hopefully). I and my parents flew to Dublin Thursday evening, the ceremony took place Friday morning at 11 and we flew back Saturday morning. It was a short visit, but a nice one. It’s really nice to be part of such a hundreds-of-years-old tradition. And the suit and gown were Harry Potteresque at the least ;) The whole ceremony was conducted in Latin by people in funny suits and funny hats. I got the diploma personally handed from <a href="http://en.wikipedia.org/wiki/Mary_Robinson" target="_blank">Mary Robinson</a>, the previous president of Ireland and also graduate of Trinity, which was kinda nice. And from henceforward I am known as</p>
<blockquote>Zef Hemel, M.Sc.<br>Graduate of Trinity College Dublin / Coláiste na Tríonóide, Bailie Átha Cliath<br>Graduate of the University of Groningen / Rijksuniversiteit Groningen</blockquote>
<p>But you can call me Master Zef if you like (and don’t get any weird ideas).</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>302</wp:post_id>
		<wp:post_date>2006-12-17 12:37:54</wp:post_date>
		<wp:post_date_gmt>2006-12-17 11:37:54</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>who-da-man</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="personal"><![CDATA[Personal]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>iTunes to Sell Movies Mid-September</title>
		<link>http://zef.me/2006/09/01/itunes-to-sell-movies-mid-september/</link>
		<pubDate>Fri, 01 Sep 2006 10:14:42 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2006/09/01/itunes-to-sell-movies-mid-september/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>According to <a href="http://www.businessweek.com/technology/ByteOfTheApple/blog/archives/2006/08/exclusive_movie.html?campaign_id=rss_blog_blogspotting#" target="_blank">BusinessWeek</a>, Apple will start selling movies on its iTunes Music Store (I guess by then iTunes Music and Movie Store). This rumor has been around for a while already, however nobody knew the prices. Well people, they’re known now.</p>
<p>$14.95 for new titles and $9.99 for older movies.</p>
<p>My take? I think people will keep downloading movies from peer-to-peer networks if prices stay like that. I’m not blaming Apple for these high prices, I know that the movie production companies wanted it this high, but obviously this is not going to solve the illegal downloading problem. If you have half an hour to spare I suggest you have a look at <a href="http://www.stealthisfilm.com/" target="_blank">Steal this film</a>.</p>
<p>A new iPod will probably also be announced:</p>
<blockquote>I would have to guess is that there would have to be a new hardware product to go with such an announcement too, wouldn’t you? Grover says says a “wider screen” iPod is on the way as well.</blockquote>
<p>Ok I’ll continue my cleaning and packing now.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>333</wp:post_id>
		<wp:post_date>2006-09-01 12:14:42</wp:post_date>
		<wp:post_date_gmt>2006-09-01 10:14:42</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>itunes-to-sell-movies-mid-september</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Virtual PC on the Mac</title>
		<link>http://zef.me/2006/12/05/virtual-pc-on-the-mac/</link>
		<pubDate>Tue, 05 Dec 2006 14:55:44 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2006/12/05/virtual-pc-on-the-mac/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>I realize this is almost old technology by now, but I’ve been playing with Virtual PC on the Mac the past few days. Why would I need that, you might ask. Well, the case is that I study English and we have a piece of software for our syntax (grammar) classes that was developed just for Windows (98 and up, but has problems on XP, don’t ask). As you may be aware I’m a Mac user. I still have an old PC here, but it’s half broken and I have to change a lot of cables to get it to work. So I’d like to run a very bare Windows system on my iBook.</p>
<p>Now, MacBooks use Intel processors so I could just install Windows on that. My iBook has a PowerPC processor so I have to use an emulator. So I decided to try Virtual PC and install Windows 98 on it. I’m surprised about how well it works, not necessarily speed wise (it’s pretty slow), but integration wise. I’ll give some examples.</p>
<p>First of all I should note that I installed the Dutch version of Windows 98 SE (I don’t have another version). The first thing you’d notice is that networking in the VM automatically works, using NAT. Also, after installing the Virtual PC “Additions” you are able to seamlessly move your mouse cursor in and out the virtual machine, as if it’s just a normal Mac window.</p>
<p>This is what my desktop looks like while running Virtual PC:</p>
<p>(Click for a larger version)</p>
<p>The next thing you’ll notice is that a start menu is added to the dock. If you click it you’ll see Windows’ start menu and you can launch any application inside it, for example Notepad (Dutch: kladblok).</p>
<p>Also in the dock, the applications that currently run inside Windows on the Virtual PC will appear as if they were mac applications. If you click and hold these icons and choose “Quit”, they will shut down in the virtual machine. Quite nice.</p>
<p>Another super nice thing is that it’s very easy to access your host’s file systems within the virtual machine. The hard disks just show up as drives within Windows explorer.</p>
<p>I must I’m pretty impressed with this. However I read that the integration between Mac OS and Windows goes even further with the new <a href="http://parallels.com" target="_blank">Parallels</a> virtual machine on MacBooks. In the next version it will be possible to run Windows applications outside the virtual machine’s window, they will just float on the Mac desktop like any other application. That’s really cool.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>632</wp:post_id>
		<wp:post_date>2006-12-05 15:55:44</wp:post_date>
		<wp:post_date_gmt>2006-12-05 14:55:44</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>virtual-pc-on-the-mac</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Google Purchases Youtube for $1.6 billion</title>
		<link>http://zef.me/2006/10/10/google-purchases-youtube-for-1-6-billion/</link>
		<pubDate>Tue, 10 Oct 2006 07:17:36 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2006/10/10/google-purchases-youtube-for-1-6-billion/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Probably everybody already heard about it already, but I’ll post it again: <a href="http://www.google.com/intl/en/press/pressrel/google_youtube.html" target="_blank">Google purchases Youtube for $1.6 billion</a>. <a href="http://www.youtube.com" target="_blank">Youtube</a> is the immensely popular video site that since february last year has grown spectacularly. I remember that I tried it out probably soon after it launched. I was looking for a flickr for video. Youtube was not a great site back then, it was written in crappy PHP and I got lots of PHP error messages as I used it. Now it’s sold for $1.6 billion, who would’ve thought…</p>
<p>Some sources say Youtube has a bandwidth bill of $1 million a day, which sounds crazy to me, other sources say it’s a couple of million a month. Still quite a big number. In that sense Google is a good buyer, they have plenty of infrastructure and are used to these amounts of traffic.</p>
<p>Much more on the deal can be found on the different posts on <a href="http://www.techmeme.com/061009/p65#a061009p65" target="_blank">TechMeme</a>.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>652</wp:post_id>
		<wp:post_date>2006-10-10 09:17:36</wp:post_date>
		<wp:post_date_gmt>2006-10-10 07:17:36</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>google-purchases-youtube-for-1-6-billion</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Hello Boys</title>
		<link>http://zef.me/2006/08/29/hello-boys/</link>
		<pubDate>Tue, 29 Aug 2006 10:35:54 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2006/08/29/hello-boys/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>They’re done! Five times almost a hundred pages of pure deliciousness. *cough*</p>
<p>Look at these beauties.</p>
<figure>

<img data-width="240" data-height="180" alt="Dissertation" src="https://cdn-images-1.medium.com/max/800/0*6KAF7gvFufrswjZ6.jpg">
</figure><figure>

<img data-width="240" data-height="180" alt="Dissertation" src="https://cdn-images-1.medium.com/max/800/0*iv-6OMjuiG6PJ3Ti.jpg">
</figure><p>All that’s left is the demonstration and submitting it, then I’m off!</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1035</wp:post_id>
		<wp:post_date>2006-08-29 12:35:54</wp:post_date>
		<wp:post_date_gmt>2006-08-29 10:35:54</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>hello-boys</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="personal"><![CDATA[Personal]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>TV Torrent Feeds</title>
		<link>http://zef.me/2006/10/23/tv-torrent-feeds/</link>
		<pubDate>Mon, 23 Oct 2006 14:24:41 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2006/10/23/tv-torrent-feeds/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Recently I started using <a href="http://www.getdemocracy.com/" target="_blank">Democracy player</a> again to watch video blogs/podcasts, its interface is nicer than iTunes’ and as I do not have a video iPod I don’t want to put the videos on my iPod anyway. One nice feature that Democracy player has is that it contains a BitTorrent client. So if you have a feed with torrent enclosures it will download those too.</p>
<p>Then I started thinking, why aren’t people making such torrent feeds for TV shows on BitTorrent sites yet? Some torrent sites allow you to generate an RSS feeds based on search terms (maybe even with .torrent enclosures) but these often contain duplicates. What I would want for example is a feed I could subscribe to that contains the Studio 60 torrents on some torrent site. That way I could just subscribe to this feed in Democracy player and it will start downloading new episodes as they appear. It’s not very legal, but also not much more illegal than what there already is now.</p>
<p>Or are there already sites that do this?</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1071</wp:post_id>
		<wp:post_date>2006-10-23 16:24:41</wp:post_date>
		<wp:post_date_gmt>2006-10-23 14:24:41</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>tv-torrent-feeds</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>New Phone, New Lifestyle</title>
		<link>http://zef.me/2006/09/19/new-phone-new-lifestyle/</link>
		<pubDate>Tue, 19 Sep 2006 07:21:05 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2006/09/19/new-phone-new-lifestyle/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>As my old phone (which I have had for over three years) got more and more problems (it wouldn’t go to the right and bottom anymore, which makes navigation quite tricky) I decided to get a new one. As my calling and texting habits have also changed quite a bit, I also looked for another mobile provider.</p>
<p>They used to run this series of commercials on television for one mobile phone store called <a href="http://www.tfortelecom.nl" target="_blank">t for telecom</a>, it used to star the late <a href="http://en.wikipedia.org/wiki/Steve_Irwin" target="_blank">Steve Irwin</a>. Their slogan was “your guide to the telecom jungle”, and after having spent hours and hours comparing prepaid rates to bill pay rates, bonus minutes, free texts, five different mobile providers and phone combinations, I can agree: it is a jungle. It is the least transparent market I know of.</p>
<p>But eventually I decided what would be the best provider for me: t-mobile, mainly because of their low international (SMS) text rate of 7ct. The next thing to decide was the phone. This is not easy either, I had two wishes which proved not that easy to accommodate:</p>
<ul>
<li>A simple camera, VGA is fine.</li>
<li>An e-mail application that supports IMAP</li>
<li>The ability to send pictures over e-mail</li>
<li>A calendar application and ways to synchronize it with my Mac</li>
</ul>
<p>After having looked at dozens of phones, I finally found a good deal: the <a href="http://www.motorola.com/motoinfo/product/images.jsp?globalObjectId=87" target="_blank">Motorola PEBL v6</a>:</p>
<p>So, finally I have a new phone. It has bluetooth which is really nice, I can now synchronize my calendar, transfer pictures to and from my phone while leaving it in my pocket. Great.</p>
<p>However for my calendar I always used <a href="http://www.google.com/calendar" target="_blank">Google Calendar</a> and it does not synchronize with that. There is this J2ME application called <a href="http://www.gcalsync.com/" target="_blank">GCALSYNC</a> but it doesn’t appear to work on my phone. So I switched to using the Mac’s iCal application now. It works very well, very much like Google Calendar but without the many bugs and much faster. It’s very clear Google copied a lot of it in their calendar product, which is fine of course. I also publish my calendar to my (protected) WebDAV server on Dreamhost (where this site is hosted). So my calendar is reasonably safe. I have three copies: one on my phone, one on my iBook and another one on WebDAV.</p>
<p>Already for a while I switched back from Gmail to use Apple’s Mail, just to see if it works for me and it turns out it works remarkably well. I still use Gmail’s spam filter though (I simply forward all mail sent to my @gmail.com address to my IMAP mail account, Gmail only forwards non-spam messages). Now that I have all my mail on an IMAP server I can also quickly check it with my phone if I want to.</p>
<p>The reason I wanted to be able to send pictures by e-mail is so that I could start a moblog. A website that you can blog to on the go. I set up one now: <a href="http://zefhemel.wordpress.com" target="_blank">Zef’s moblog</a>, I will probably occasionally post pictures to it.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1098</wp:post_id>
		<wp:post_date>2006-09-19 09:21:05</wp:post_date>
		<wp:post_date_gmt>2006-09-19 07:21:05</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>new-phone-new-lifestyle</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>9/11</title>
		<link>http://zef.me/2006/09/11/9-11/</link>
		<pubDate>Mon, 11 Sep 2006 06:22:17 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2006/09/11/9-11/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Today it’s 5 years ago that 9/11 happened. I don’t want to say much about it, instead I’ll post a video of Jon Stuart (of the Daily Show) broadcasted a couple of days after the fact. I find it very moving.</p>
<a href="https://www.youtube.com/v/cSCoF7yEC9E">https://www.youtube.com/v/cSCoF7yEC9E</a>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1109</wp:post_id>
		<wp:post_date>2006-09-11 08:22:17</wp:post_date>
		<wp:post_date_gmt>2006-09-11 06:22:17</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>9-11</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>And Another Entrant Enters</title>
		<link>http://zef.me/2006/10/16/and-another-entrant-enters/</link>
		<pubDate>Mon, 16 Oct 2006 12:08:03 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2006/10/16/and-another-entrant-enters/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Denis Krukovsky sent me a link to yet another tag board: <a href="http://tagboard.appbbs.com/" target="_blank">tagBoard</a>. At its first look it looks a lot a group blog, but let’s be honest tag-based forums are not that different from a group blog other than that eventually the group of “bloggers” can grow into the thousands. It’s all a matter of how you present your data.</p>
<p>Of all the tag boards I’ve seen so far, this probably is the most basic one. There is no tag cloud, no social digg-like features. It’s just a place where anyone can post and comment on posts. Instead of categorizing the posts into boards and categories the discussion starter adds tags to his or her start post. I’m not very much impressed with tagBoard yet, let’s hope it will improve and the developer(s) will come up with some unique features.</p>
<p>Yesterday I talked about plagiarism. On that same topic, have a look at this: <a href="http://tagboard.appbbs.com/node/3" target="_blank">tagBoard about</a> and <a href="http://blogoforum.com/tag/blogoforum+idea+startup+tagging+web+web2.0/what-is-blogoforum-3261.html" target="_blank">Blogoforum about</a>. Hmm?</p>
<p>I’ve been thinking about <a href="http://www.glorum.com" target="_blank">glorum</a> a bit more and got quite fascinated with its approach to moderating the posts. People vote posts up and down, if you like it you vote it up, if you don’t (for example because it’s a flame or spam) you vote it down, if enough vote it down the post disappears. I really like this concept of social moderation. They are already being used on some news websites, such as as slashdot I think.</p>
<p>As I feel more people are starting to develop these kinds of tagged bulletin boards I think we should come up with a proper name for them. I myself sometimes use tag board, tagged board, tag bulletin board, tag-based board. What do you think?</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1149</wp:post_id>
		<wp:post_date>2006-10-16 14:08:03</wp:post_date>
		<wp:post_date_gmt>2006-10-16 12:08:03</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>and-another-entrant-enters</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Photosynth</title>
		<link>http://zef.me/2006/11/13/photosynth/</link>
		<pubDate>Mon, 13 Nov 2006 16:28:04 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2006/11/13/photosynth/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Since its inception I’ve watched most episodes of <a href="http://www.podtech.net/scobleshow/" target="_blank">ScobleShow</a>. A couple of days ago I saw an amazing demo on there. It demonstrates <a href="http://labs.live.com/photosynth/" target="_blank">Microsoft’s Photosynth</a>. Photosynth is an amazing application that manages to combine hundreds of pictures into a 3D-like environment. It looks a-ma-zing.</p>
<p><a href="http://www.podtech.net/scobleshow/technology/1219/the-best-demo-at-web-20-summit-microsofts-photosynth" target="_blank">You can download and watch the video demonstration here</a>. You can download the <a href="http://labs.live.com/photosynth/" target="_blank">Photosynth preview itself for free here</a> (Windows required).</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1151</wp:post_id>
		<wp:post_date>2006-11-13 17:28:04</wp:post_date>
		<wp:post_date_gmt>2006-11-13 16:28:04</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>photosynth</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Studio 60 on the Sunset Strip</title>
		<link>http://zef.me/2006/10/05/studio-60-on-the-sunset-strip/</link>
		<pubDate>Thu, 05 Oct 2006 17:57:30 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2006/10/05/studio-60-on-the-sunset-strip/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>A couple of weeks back <a href="http://manuzhai.nl/weblog/comments/studio-60/" target="_blank">Manuzhai</a> recommended a new drama series on American television called <em>Studio 60 on the Sunset Strip</em>. It’s produced and no doubt partly written by <a href="http://en.wikipedia.org/wiki/Aaron_Sorkin" target="_blank">Aaron Sorkin</a>. Aaron Sorkin is the guy that wrote my favourite American drama series <em>The West Wing</em>. And I can tell you off the bat, if you liked <em>The West Wing</em> it’s likely you’ll also enjoy <em>Studio 60</em>.</p>
<p>If you know <em>The West Wing</em> a bit you will immediately recognize the Sorkinesque style of <em>Studio 60</em>. The spaces, offices, are generally dark but lit from the ceiling. Episodes have named chapters, presented in that same <em>West Wing</em> white on black screen. Once again the story is about a busy organization, this time a studio that produces a weekly comedy show called, surprise, surprise: Studio 60. It’s a show that very much resembles Saturday Night Live. Sorkin also took some actors with him from the <em>West Wing</em>, most notably <a href="http://www.imdb.com/name/nm0925966/" target="_blank">Bradley Whitford</a> who played Josh Lyman in the <em>West Wing</em> for seven seasons. Aaron adds some other excellent actors: Amanda Peet, Matthew Perry (Chandler in Friends) and Sarah Paulson. Bradley Whitford and Matthew Perry play two guys that get hired by Studio 60’s channel NBS, just as a new head of something (I’m not entirely sure what) Amanda Peet starts there too.</p>
<p>If you get the chance, I’d watch this show. It’s probably not on TV anywhere else than the US yet, but I predict it will be. Until then there’s the torrent sites.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1159</wp:post_id>
		<wp:post_date>2006-10-05 19:57:30</wp:post_date>
		<wp:post_date_gmt>2006-10-05 17:57:30</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>studio-60-on-the-sunset-strip</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Google Acquires Jot</title>
		<link>http://zef.me/2006/11/11/google-acquires-jot/</link>
		<pubDate>Sat, 11 Nov 2006 17:32:31 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2006/11/11/google-acquires-jot/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>It’s been a few days already and I don’t think it was seen as a huge deal, but Google acquired <a href="http://www.jot.com/" target="_blank">Jot</a>. Jot is a company that creates the Jotspot product which is by far the nicest wiki software out there, if it still can be called just a wiki. Jot goes further with the wiki concept than just text with hyperlinks between them. It allows users to structure data and create simple database-like applications in this way. In Jotspot which was upcoming before the company got acquired they extended the idea of a wiki beyond the concept of pages. They allowed to create wiki calendars, photo collections and other things that I cannot remember. Jot has the vision of allowing normal people develop software in a visual and simple way, a vision that I find very interesting.</p>
<p>And now Google acquired them, which is really cool. Jotspot always was a paid product and according to <a href="http://www.jot.com/google/faq.html" target="_blank">the Google take-over FAQ</a> it will from be free from now on (as soon as they migrate to Google’s storage platform). So: good news. I left my e-mail address them and can’t wait to play with it and use it when they’ll start taking new sign-ups.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1331</wp:post_id>
		<wp:post_date>2006-11-11 18:32:31</wp:post_date>
		<wp:post_date_gmt>2006-11-11 17:32:31</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>google-acquires-jot</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>The New Year</title>
		<link>http://zef.me/2007/01/09/the-new-year/</link>
		<pubDate>Tue, 09 Jan 2007 17:01:03 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/01/09/the-new-year/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>We’re already over a week into the new year. It’s going to be an interesting one, at least for me and I hope for you too. First all this will be the year that I’ll start living together with my girlfriend. She is coming to Holland when she finishes her studies in Poznan, Poland. I am currently looking for a place for us to live. It’s quite exciting and I’m looking forward to it. It’s still about 7 months away though, but still!</p>
<p>I have exams coming up, three of them during the second half of January, so that’s next week already. Don’t like exams. Never did. Never will. The computer science exams were always about understanding thing, applying things, insight into the materials. Now that I study English I find it’s different. You don’t have to understand much, you have to know much. I’m studying literature now and basically I should roughly know what the texts we read are about, who the characters are, the turning points and such things. Then there’s a bunch of terminology that we’re supposed to be able to use. Using terminology correctly is actually a goal of the course, in computer science that was only a side-effect. We never had “what would you call it if …” questions.</p>
<p>This month my new job also starts. I’m teaching! Well, in a way. I’m teaching the International Software Engineering Project as given to computer science students in their third year of studies here in Groningen. I helped with this course two years ago as a student-assistant, this time I actually “teach”/supervise the course, together with somebody else (who has been teaching this course for the past years). And I get paid as a computer science graduate for once, not a student. Not that the student-assistant pay was bad, but this is better. ;)</p>
<p>For the past weeks I’ve been secretly working on a little project. Believe it or not, a programming project. Yes, for the past <strong>weeks</strong>, that’s the longest I’ve spent on any hobby programming project since years. A good sign! I won’t be telling you what it is yet, but I’m pretty excited about it. It’s simple, yet with almost infinite possibility it seems. The more I think about it, the more applications of it I see. I’ll tell more when I have something to show.</p>
<p>What are your plans for the new year?</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1390</wp:post_id>
		<wp:post_date>2007-01-09 18:01:03</wp:post_date>
		<wp:post_date_gmt>2007-01-09 17:01:03</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-new-year</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="personal"><![CDATA[Personal]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Java 6 is out</title>
		<link>http://zef.me/2006/12/12/java-6-is-out/</link>
		<pubDate>Tue, 12 Dec 2006 12:03:15 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2006/12/12/java-6-is-out/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Gosh, I really haven’t been tracking what’s happening inside the Java world lately. I used some Java 5 features in a project I did in Trinity last year, but I never had a glance at Java 6, and now it’s already out in a final version. Wow.</p>
<p>The 6 areas in which <a href="http://java.sun.com/javase/6/" target="_blank">Java 6</a> has been improved:</p>
<ol>
<li>
<a href="http://java.sun.com/developer/technicalArticles/J2SE/security/" target="_blank">Security</a> (better integration with platform security systems, better authentication, smartcard support)</li>
<li>
<a href="http://java.sun.com/developer/technicalArticles/J2SE/jax_ws_2/" target="_blank">Integrated Web Services support</a> (lots of WS APIs)</li>
<li>
<a href="http://java.sun.com/developer/technicalArticles/J2SE/Desktop/scripting/" target="_blank">Scripting language support</a> (easily integrate scripting into your software, with full-blown Javascript implementation)</li>
<li>
<a href="http://java.sun.com/developer/technicalArticles/J2SE/monitoring/" target="_blank">Enhanced Management and Serviceability</a> (some new JMX stuff and memory monitoring fascilities)</li>
<li>Increased Developer Productivity (marketing talk! Better APIs! New JDBC 4!)</li>
<li>Improved User Experience (GUIs match native OS’s looks better, yay!)</li>
</ol>
<p>Out of all of these I think the scripting language support is most significant. Scripting is starting to get more and more used, and adding scripting support to your applications is made a lot easier with these APIs. By default Java 6 comes with a full Javascript implementation. But there are other scripting language you will be able to use too, I suppose, probably Python (JPython) and Groovy.</p>
<p>I’ll have to wait until Apple ports it to the mac until I can try it out. Oh well, I can wait.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1427</wp:post_id>
		<wp:post_date>2006-12-12 13:03:15</wp:post_date>
		<wp:post_date_gmt>2006-12-12 12:03:15</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>java-6-is-out</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>All Done, Exit Trinity</title>
		<link>http://zef.me/2006/08/31/all-done-exit-trinity/</link>
		<pubDate>Thu, 31 Aug 2006 12:55:36 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2006/08/31/all-done-exit-trinity/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>At 12 this morning/afternoon I had my dissertation presentation and they were happy with it. Then I turned in my thesis and laptop and I’m now officially done.</p>
<p>Hooray!</p>
<p>I put online a PDF version of the (KeyNote) presentation <a href="http://www.zefhemel.com/upload/Dissertationpresentation.pdf" target="_blank">for those interested</a>, although it probably will not make sense to many of you, due to the lack of text and explanation. It’s my first <a href="http://presentationzen.blogs.com/" target="_blank">Zen</a>ified presentation.</p>
<p>Flying home on Saturday.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1495</wp:post_id>
		<wp:post_date>2006-08-31 14:55:36</wp:post_date>
		<wp:post_date_gmt>2006-08-31 12:55:36</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>all-done-exit-trinity</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="personal"><![CDATA[Personal]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>The State of the Tag Board</title>
		<link>http://zef.me/2006/10/07/the-state-of-the-tag-board/</link>
		<pubDate>Sat, 07 Oct 2006 11:50:56 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2006/10/07/the-state-of-the-tag-board/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>It has been over a year ago since I first posted about <a href="http://www.zefhemel.com/archives/2005/08/09/rethinking-discussion-boards" target="_blank">discussion boards</a> that use tags for message categorization instead of the traditional category/board structure. Since then a number of such boards have been built, some of which have died. But recently they seem to be a small revival. At the moment there are three interesting projects trying this concept out:</p>
<ul>
<li>
<a href="http://blogoforum.com/" target="_blank">Blogoforum</a>, that uses tags to categorize messages. It has some interesting ideas. My main problems with it is its lay-out. I often find it quite confusing to read threads. Blogoforum has recently launched a topic list sorted based on topic popularity.</li>
<li>
<a href="http://dev.onelobby.com/" target="_blank">OneLobby</a>, this project, as I understand it will be a piece of software you will be able to download and install on your own server. It also uses tags for forums. It looks very promising to me, also because I know the authors are working on some other radical new features. Plus the lay-out is clean and simple.</li>
<li>
<a href="http://www.glorum.com/" target="_blank">Glorum</a>, which was brought to my attention yesterday (thanks for the e-mail Mario). It combines tag based boards with a digg-like feature. You’re able to vote topics up or down. I suggested this idea a while back too and I hope it will work. For the rest this board seems pretty early in development. It’s very basic and clean.</li>
</ul>
<p>These forums look very promising. Much more than the last wave of these tag-based boards. Not any of them are have lots of users and large amounts of discussions yet though. When that happens I wonder if they can cope. The mass is the challenge here. It will then become clear if tags are indeed a good way to categorize topics and messages.</p>
<p>I’ll continue following the development of these kinds of forums closely.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1568</wp:post_id>
		<wp:post_date>2006-10-07 13:50:56</wp:post_date>
		<wp:post_date_gmt>2006-10-07 11:50:56</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-state-of-the-tag-board</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>The Beauty of Plagiarism Scanners</title>
		<link>http://zef.me/2006/10/15/the-beauty-of-plagiarism-scanners/</link>
		<pubDate>Sun, 15 Oct 2006 14:36:26 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2006/10/15/the-beauty-of-plagiarism-scanners/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>For my current part-time job I’m at the moment investigating plagiarism scanners. Students submit their papers and reports and before being handed to the teacher this software checks what the student turned in with previously submitted papers but also other sources such as the internet.</p>
<p>To get started I thought I’d just copy a piece of text from my own website and put in a Word document and submit it, see if it actually worked. I decided to copy a piece of <a href="http://www.zefhemel.com/archives/2004/10/11/how-to-create-your-own-podcasting-show" target="_blank">my podcasting tutorial</a>. I submitted the document and waited for a couple of minutes. As expect it found the document to be 100% plagiarism, good!</p>
<p>However, it found two sources of plagiarism. One at my own website, one at <a href="http://www.mywebsitemanual.com/coaching/mp3.htm" target="_blank">another</a>. Have a look at that page, scroll a bit down to the “How to prepare a great podcast!” section. Looks familiar? Kinda. Well… more than kinda. It’s <em>kinda</em> completely ripped including all the images, and without any credits. Granted, the guy made a couple of improvements, but still.</p>
<p>Anyway, I e-mailed the “author” a couple of days ago, no response so far. Still, a funny way to find out. These pieces of software really are plagiarism detectors. It would be interesting if somebody developed an open source or free version of such software. At its core it’s not very complicated. You extract the text from a document, and do a phrase search for each sentence on Google or another search engine. There’s a bit more to it than that, but this is the main idea.</p>
<p>It would be great to have a tool that you could just run on your website and that would check if anybody has plagiarized any of your stuff.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1570</wp:post_id>
		<wp:post_date>2006-10-15 16:36:26</wp:post_date>
		<wp:post_date_gmt>2006-10-15 14:36:26</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-beauty-of-plagiarism-scanners</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="personal"><![CDATA[Personal]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>First Week as an Englist</title>
		<link>http://zef.me/2006/09/09/first-week-as-an-englist/</link>
		<pubDate>Sat, 09 Sep 2006 11:11:46 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2006/09/09/first-week-as-an-englist/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Last Saturday evening I came back to Holland. Sunday was spent visiting family and Monday morning at 11 I had the first class of my new studies: English.</p>
<p>I have four classes at the moment: Literature, Linguistics, History and Context of English and Language Proficiency. To be quite honest I like all four of them at the moment, although I only had one lecture and one workgroup session of each of them.</p>
<p>One of the goals of the language proficiency class is to learn to “avoid plagiarism”, I found that interesting goal. How about simply not copying stuff? In some countries on some universities students get taught an accent, this is not the case on mine. We are supposed to “pick an accent and stick to it”, consistency is more important than that your pronunciation is fully South-Dublin Irish or <a href="http://en.wikipedia.org/wiki/Received_Pronunciation" target="_blank">RP</a>. Anyway, I won’t learn how to speak like the queen or a Texan. So maybe I’ll just keep my strange mixture of American, Dutch, Irish and British accents, we shall see — or rather: hear.</p>
<p>It’s nice to study something completely different. I am all the time dealing with language and beauty now. What’s the deeper meaning of this three-line haiku, let’s talk about it for forty-five minutes. Beauty is not a big concern in computer science. There is elegance, but is it art? We once had a long discussion about whether software engineering was art or not with our teacher in Dublin. She felt that it’s not an art at all.</p>
<p>Oh well.</p>
<p>Anyway, so far I’m happy with my decision.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1692</wp:post_id>
		<wp:post_date>2006-09-09 13:11:46</wp:post_date>
		<wp:post_date_gmt>2006-09-09 11:11:46</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>first-week-as-an-englist</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="personal"><![CDATA[Personal]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Grandmother Died</title>
		<link>http://zef.me/2006/10/11/grandmother-died/</link>
		<pubDate>Wed, 11 Oct 2006 09:25:27 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2006/10/11/grandmother-died/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>For about the last ten years my mother’s mother (my grandmother) has had Alzheimer’s. Over the years it has become worse and worse. The past month she also ate less and less. Two and a half weeks ago she collapsed in the bathroom and soon thereafter she was brought to a care home. My grandfather took care of her before that but it was becoming too hard for him. He’s not very young and vital anymore either and my grandmother hardly could do anything herself anymore.</p>
<p>Only a few days after she arrived in the care home she got a bladder infection, soon followed by a lung infection. Last Monday we were informed that she probably would die at the end of this week. Yesterday afternoon I got a call from the home. She had died.</p>
<p>We spent the rest of the day with my granddad. As soon as the busy times end in which things such as her cremation have to be arranged I think he will realise he no longer has a wife. After 52 years there’s nobody there when you get home. To me personally she has been dying slowly during the past few years. She didn’t know anything anymore. Didn’t know who we were, hardly knew her own name. She became more and more silent.</p>
<p>Now the ultimate silence has come.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1715</wp:post_id>
		<wp:post_date>2006-10-11 11:25:27</wp:post_date>
		<wp:post_date_gmt>2006-10-11 09:25:27</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>grandmother-died</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="personal"><![CDATA[Personal]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>JSON vs XML</title>
		<link>http://zef.me/2007/01/20/json-vs-xml/</link>
		<pubDate>Sat, 20 Jan 2007 18:36:07 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/01/20/json-vs-xml/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Interesting article <a href="http://www.megginson.com/blogs/quoderat/2007/01/03/all-markup-ends-up-looking-like-xml/" target="_blank">on Quoderat</a>:</p>
<blockquote>In the current JSON vs. XML debate (see Bray, Winer, Box, Obasanjo, and many others), there are three things that important to understand:</blockquote>
<ol>
<li>There is no information that can be represented in an XML document that cannot be represented in a JSON document.</li>
<li>There is no information that can be represented in a JSON document that cannot be represented in an XML document.</li>
<li>There is no information that can be represented in an XML or JSON document that cannot be represented by a LISP S-expression.</li>
</ol>
<blockquote>They are all capable of modeling recursive, hierarchical data structures with labeled nodes. Do we have a term for that, like Turing completeness for programming languages? It would certainly be convenient in discussions like this.</blockquote>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>215</wp:post_id>
		<wp:post_date>2007-01-20 19:36:07</wp:post_date>
		<wp:post_date_gmt>2007-01-20 18:36:07</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>json-vs-xml</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Reinventing Web Storage</title>
		<link>http://zef.me/2007/01/30/reinventing-web-storage/</link>
		<pubDate>Tue, 30 Jan 2007 16:54:47 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/01/30/reinventing-web-storage/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>I had this great idea a month or two ago: We are storing more and more data on servers on the web, be it email, pictures, music, calendars or documents. And most of it is scattered all around on different services with different interfaces. Can’t we come up with a unified interface to storage and make our data mobile again?</p>
<p>That was the secret project I have been working on, which I dubbed WebFS. It was a very simple REST webservice, which basically allowed you to GET and POST data items (documents). Each item had metadata associated with it (in RDF). There is a special kind of item, called the Container, which has a directory-like function. Every service supporting WebFS should allow the user to store arbitrary RDF metadata for its items, which would allow all kinds of neat services (such as synchronization) to be built.</p>
<p>I got quite a bit of it to work. I wrote a little bash-like shell (webshell) which allowed you to browse through a WebFS share and allowed you to copy items, view them, and get and set metadata. I built a WebFS interface for a simple local filesystem, but also for <a href="http://www.jungledisk.com" target="_blank">Jungle Disk</a>. So I could access my files on Amazon’s S3 (where JungleDisk stores the files) through WebFS. The idea was that I would also build a FlickrFS which exposed flickr albums as a WebFS system and so you can easily copy files from there to your local driver, or other WebFS-enabled storage systems. In the future other systems could be built, like IMAPFS, CalendarFS, and so on and so forth. WebFS would be the great unifier.</p>
<p>Nice idea huh?</p>
<p>Yeah, so great that it already exists. <a href="http://www.webdav.org" target="_blank">WebDAV</a> does almost exactly this. It wasn’t really built to create wrappers around existing systems, but it does allow you to access files on remote webservers pretty much in the way WebFS allows you to do that. In addition it allows you to store arbitrary XML data as meta data for your files. And the best thing, it’s already integrated in all major operating systems. OS X allows you to mount WebDAV shares (actually that’s how Jungle Disk works) and so does Windows and Linux.</p>
<p>Crap.</p>
<p>There are differences between WebDAV and WebFS, and choices in WebFS which can be considered nicer, but they surely do not constitute a new protocol while WebDAV is already well established. So basically I spent dozens of hours implementing something really elegant that already existed.</p>
<p>Great huh.</p>
<p>But what it did learn me is that we should have a better look at WebDAV for our services. Many services have, beside the standard web interface, some kind of API (usually a REST one). Wouldn’t it be an idea to also add a WebDAV interface to those? This way data is truly open, truly free to the user and we wouldn’t have a data lock-in, which I think nobody likes and is not very web-2.0-ish. Another possibility is to allow to store the data on a WebDAV store of choice for the user. Flickr then would just be a front-end to the Pictures directory I have somewhere on a WebDAV server. This is <a href="http://www.readwriteweb.com/archives/zoho_omnidrive_data_standards.php" target="_blank">kinda what Zoho and Omnidrive</a> are doing. It is possible to open word documents stored in Omnidrive directly in Zoho Writer (an online word processor). Problem is that they use Omnidrive’s non-standard protocols. Not that I have anything against Omnidrive, but as of yet I have no reason to believe Omnidrive will be the ultimate storage solution for everyone.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>316</wp:post_id>
		<wp:post_date>2007-01-30 17:54:47</wp:post_date>
		<wp:post_date_gmt>2007-01-30 16:54:47</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>reinventing-web-storage</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Apple iPhone</title>
		<link>http://zef.me/2007/01/10/apple-iphone/</link>
		<pubDate>Wed, 10 Jan 2007 12:22:36 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/01/10/apple-iphone/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>When I saw this my instant reaction was, I will have one of these. It was really shocking. Apple, yesterday, revealed the much-talked-about Apple <a href="http://www.apple.com/iphone/" target="_blank">iPhone</a>. The new kind of mobile phone. It’s incredibly awesome, but it will only be introduced in Europe the fourth quarter of the year (June in the US and 2008 in Asia).</p>
<p>This is what it looks like:</p>
<p>If you have some time you got to watch <a href="http://events.apple.com.edgesuite.net/j47d52oo/event/" target="_blank">the iPhone introduction by Steve Jobs</a>. It’s really quite amazing. It’s an iPod and phone in one with many other niceties (such as a proper web browser, good e-mail support and much more).</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>431</wp:post_id>
		<wp:post_date>2007-01-10 13:22:36</wp:post_date>
		<wp:post_date_gmt>2007-01-10 12:22:36</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>apple-iphone</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Record Skype Calls (Windows and Mac)</title>
		<link>http://zef.me/2007/01/29/record-skype-calls-windows-and-mac/</link>
		<pubDate>Mon, 29 Jan 2007 08:29:07 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/01/29/record-skype-calls-windows-and-mac/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>One of the most requested features of Skype is the possibility to record calls. As of yet, it still has to be implemented into Skype itself. But that is no longer that big of an issue, because there are now third-party plug-ins to do this.</p>
<p>For Windows there’s the free <a href="http://www.skyperec.com/" target="_blank">Skype Recorder</a>. Apparently this program can also record other VoIP phone converstations (such as Google Talk). Personally I haven’t tested this software, but it should work.</p>
<p>For the Mac there is Ecamm’s <a href="http://www.ecamm.com/mac/callrecorder/" target="_blank">Call Recorder</a>, which costs $13.46. I tested this myself and it works really nicely. It integrates into Skype itself (also adds a tab to its settings window). It records the conversations into a Quicktime movie, which sounds weird, because it’s only audio. The reason they do this is to be able to record two tracks separately. On one track it will be you talking and on the other the person(s) you’re talking to. This way you can edit each track separately. Little utilities are included to easily mix-down this movie into AAC or MP3.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>475</wp:post_id>
		<wp:post_date>2007-01-29 09:29:07</wp:post_date>
		<wp:post_date_gmt>2007-01-29 08:29:07</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>record-skype-calls-windows-and-mac</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>OpenID, baby!</title>
		<link>http://zef.me/2007/01/24/openid-baby/</link>
		<pubDate>Wed, 24 Jan 2007 10:42:22 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/01/24/openid-baby/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>A post on <a href="http://www.intertwingly.net/blog/2007/01/03/OpenID-for-non-SuperUsers" target="_blank">Intertwingly</a> (Sam Ruby’s blog) brought me back to the idea of single sign-ons. A year and a half ago I came up with <a href="http://www.zefhemel.com/archives/2005/08/13/sptp-decentralized-single-sign-on" target="_blank">SPTP</a>, the Simple Profile Transfer Protocol, which turned out to have a major flaw. Then I looked <a href="http://www.zefhemel.com/archives/2006/07/01/sinp-and-google-authentication" target="_blank">at SINP</a>. But the problem is that it’s kind of hard to get a new system off the ground.</p>
<p>And honestly, there already is a system that is pretty slick.</p>
<p>It is called <a href="http://openid.net/" target="_blank">OpenID</a> and it gets more and more support. The idea is that you login to OpenID-enabled sites using a URL that you own. This URL links to an OpenID server where you have an account to authenticate you. If you look at the HTML code of zefhemel.com right now you will see two new tags in the head:</p>
<pre>&lt;link rel="openid.server" href="http://www.myopenid.com/server"/&gt;<br>&lt;link rel="openid.delegate" href="http://zef.myopenid.com/"/&gt;</pre>
<p>This means that if somebody (me) uses <a href="http://www.zefhemel.com" target="_blank">http://www.zefhemel.com</a> to authenticate somewhere, the MyOpenID servers will handle this authentication. <a href="https://www.myopenid.com/" target="_blank">MyOpenID</a> is a free service where anybody can get an OpenID, you don’t need a website, by default you get a <a href="http://username.myopenid.com" target="_blank">http://username.myopenid.com</a> address. You can use this address to login to any OpenID-enabled website, or you can link your current website to your MyOpenID account (like I did). On MyOpenID you just fill in your profile (you can create multiple), with information that you want to make available to the services you will use your OpenID for.</p>
<p>Authenticating on OpenID services is easy. You simply type in your OpenID URL and press login. That’s it. The first time you do this, the OpenID service will ask you to authorize this service to get access to your user information, you can authorize once, forever or decline. It’s that easy.</p>
<p>What makes or breaks a system like this, is whether services actually use this. More and more services start to support OpenID. A few examples:</p>
<ul>
<li>
<a href="http://www.zooomr.com" target="_blank">Zooomr</a>, a popular photo sharing site</li>
<li>
<a href="http://www.stikis.com" target="_blank">Stikis</a>, keep sticky notes online</li>
<li>
<a href="http://www.livejournal.com" target="_blank">LiveJournal</a>, a popular blogging site</li>
</ul>
<p>There are a number more on <a href="https://www.myopenid.com/directory" target="_blank">MyOpenID’s directory page</a>. There is also a <a href="http://verselogic.net/projects/wordpress/wordpress-openid-plugin/" target="_blank">WordPress plugin</a>.</p>
<p>If you’re developing a web application, consider supporting OpenID. There are libraries available for most programming languages so it shouldn’t be that hard to integrate. It would make a lot of lives easier if you would.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>489</wp:post_id>
		<wp:post_date>2007-01-24 11:42:22</wp:post_date>
		<wp:post_date_gmt>2007-01-24 10:42:22</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>openid-baby</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Clever DOM with jQuery</title>
		<link>http://zef.me/2007/01/18/clever-dom-with-jquery/</link>
		<pubDate>Thu, 18 Jan 2007 18:48:45 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/01/18/clever-dom-with-jquery/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p><a href="http://pixelcarnage.net" target="_blank">Rowan Lewis’ blog</a> is back and has a nice little <a href="http://pixelcarnage.net/articles/development/5-quick-jquery-tips/" target="_blank">article with 5 jQuery tips</a>. Now, <a href="http://jquery.com/" target="_blank">jQuery</a> is not completely unknown to me, I saw it passing by on my Google Reader once, but I never really had a look at it. Now I did, and it adds an interesting new angle to Javascript programming.</p>
<p>As you may know there are different programming paradigms. There’s Object-Oriented Programming (Java, C++), Functional Programming (Haskell, LISP?), Procedural Programming (C, Pascal) and some more. One that people are not often aware of, but do use a lot is Declarative Programming. In Declarative programming you do not explain the computer <em>how</em> to get some result, but you describe <em>what</em> result you want and the computer will figure how to get that result. Sounds science-fiction-y to you? Ever wrote an SQL query? Have you noticed how it’s different from writing code in PHP, C, or Java? In a SQL you don’t say “open this table, look at the first row, see if the ‘first_name’ field is ‘Zef’ and the ‘last_name’ field is ‘Hemel’, if so return this row, then continue to the next row and do the same thing” or something like that. You say “give me all rows where ‘first_name’ is ‘Zef’ and ‘last_name’ is ‘Hemel’”. The database will figure out how to actually achieve that result most efficiently. Yes, probably internally there is some kind of a for-loop involved and some if-statements, but you don’t have to worry about those. You specify what you want and the database does the hard work quickly and efficiently.</p>
<p>Ever wrote a regular expression? Then you also programmed in a declarative way. You describe what you’re looking for in a string, not how you would actually go about and check this. If you want to find a string of 4–7 characters where each character is an ‘a’, ‘b’ or ‘c’ you would just write “[a-c]{4,7}”. The <a href="http://www.zefhemel.com/archives/2004/03/28/regular-expressions-automata-theory-applied" target="_blank">interpreter does the rest</a>.</p>
<p>Now why am I telling you this. jQuery adds a bit of declarative programming to Javascript. Javascript has always had this a bit with its Xpath support (another declarative language — probably all query languages are declarative languages), but this makes this kind of programming very simple to use. An example that <a href="http://pixelcarnage.net/articles/development/5-quick-jquery-tips/" target="_blank">Rowan</a> gives:</p>
<pre>$("a").not("[href^=/]").not("[href^=#]").append("^");</pre>
<p>This finds all “a” elements (links) excluding those whose “href” attribute (the URL) starts with either “/” or “#”, it then appends a little piece of HTML code to those elements. Note how you don’t specify how to walk the HTML DOM tree and check if the element you’re looking at is actually an “a” element and if has those “href” attributes, you just specify what you want and jQuery will do the work. Isn’t that elegant?</p>
<p>Read some more <a href="http://pixelcarnage.net/articles/development/5-quick-jquery-tips/" target="_blank">of Rowan’s tips here</a> or have a look at the <a href="http://jquery.com" target="_blank">jQuery website</a>.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>556</wp:post_id>
		<wp:post_date>2007-01-18 19:48:45</wp:post_date>
		<wp:post_date_gmt>2007-01-18 18:48:45</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>clever-dom-with-jquery</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Beatbox Fame Game</title>
		<link>http://zef.me/2007/02/21/beatbox-fame-game/</link>
		<pubDate>Wed, 21 Feb 2007 18:24:08 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/02/21/beatbox-fame-game/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Ok, and now for something completely different. And quite amazing…</p>
[embed]http://www.dailymotion.com/swf/4qY2w1M6BioJA7sXH[/embed]
<p>Through <a href="http://www.gelens.org/2007/2/19/beatbox-recipe" target="_blank">Jeffrey</a>.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>731</wp:post_id>
		<wp:post_date>2007-02-21 19:24:08</wp:post_date>
		<wp:post_date_gmt>2007-02-21 18:24:08</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>beatbox-fame-game</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_7f76f9389665d3baeabdbd42da0ada42</wp:meta_key>
			<wp:meta_value><![CDATA[<div class="embed-dailymotion"><iframe title="Beatbox Fame Game" frameborder="0" width="750" height="562" src="https://www.dailymotion.com/embed/video/x12565" allowfullscreen allow="autoplay"></iframe></div>]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_time_7f76f9389665d3baeabdbd42da0ada42</wp:meta_key>
			<wp:meta_value><![CDATA[1588667396]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Flickr, Is That RDF You’re Cooking?</title>
		<link>http://zef.me/2007/01/26/flickr-is-that-rdf-youre-cooking/</link>
		<pubDate>Fri, 26 Jan 2007 17:52:22 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/01/26/flickr-is-that-rdf-youre-cooking/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>I was reading some articles at O’Reilly’s excelent <a href="http://radar.oreilly.com" target="_blank">O’Reilly Radar</a> weblog. Then I read this:</p>
<blockquote>Flickr, Yahoo’s amazing photo-sharing site, has added another tag based feature — this one aimed at developers. They are now supporting machine tags (or triple-tags). What are those you might ask?</blockquote>
<p>Triple tags? Triples, that rings a bell. So I decided to follow the <a href="http://www.flickr.com/groups/api/discuss/72157594497877875/" target="_blank">link to the announcement at the flickr site</a>. And guess what do I read?</p>
<blockquote># What is the spec for machine tags?</blockquote>
<blockquote>Machine tags are divided in to three parts :</blockquote>
<blockquote>1) A “namespace” :</blockquote>
<blockquote>Namespaces MUST begin with any character between a — z; remaining<br>characters MAY be a — z, 0–9 and underbars. Namespaces are<br>case-insensitive.</blockquote>
<blockquote>2) A “predicate” :</blockquote>
<blockquote>Predicates MUST begin with any character between a — z; remaining<br>characters MAY be a — z, 0–9 and underbars. Namespaces are<br>case-insensitive.</blockquote>
<blockquote>3) A “value” :</blockquote>
<blockquote>Values MAY contain any characters that a “plain vanilla” tags<br>use. Values may also contain spaces but, like regular tags, they<br>need to wrapped in quotes.</blockquote>
<blockquote>Namespace and predicates are separated by a colon : “:”</blockquote>
<blockquote>Predicates and values are separated by an equals symbol : “=”</blockquote>
<blockquote>For example :</blockquote>
<blockquote>* flickr:user=straup</blockquote>
<blockquote>* geo:locality=”san francisco”</blockquote>
<p>Still… that reminds me of something… Hmm… So for each picture, you can add any random predicate (property) with a value. So basically you end up with a bunch of ([picture], [predicate], [value]) tuples right. Hmm.</p>
<p>So let me paraphrase this thing. Flickr always has known tags, which could give you some more hints about what the picture was about. Keywords if you will. These were additional pieces of <em>metadata</em>, information about data (pictures in flickr’s case). Right now these tags can be structured, so there is room for a property/field/predicate/whatever-you-want-to-call-it name and a value. And this predicate has a namespace. Hmm. So what they create is a kind of framework to be able to describe pictures. Interesting. Wouldn’t it be a nice idea to generalize this and develop a <em>framework</em> like this to <em>describe</em> any <em>resource</em>?</p>
<p>We <a href="http://www.zefhemel.com/archives/2006/06/19/me-myself-and-rdf" target="_blank">could call it</a>, hmm, say… <a href="http://www.w3.org/RDF/" target="_blank">RDF</a>?</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>900</wp:post_id>
		<wp:post_date>2007-01-26 18:52:22</wp:post_date>
		<wp:post_date_gmt>2007-01-26 17:52:22</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>flickr-is-that-rdf-youre-cooking</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>The Joy of Reinventing the Wheel, part I</title>
		<link>http://zef.me/2007/01/22/the-joy-of-reinventing-the-wheel-part-i/</link>
		<pubDate>Mon, 22 Jan 2007 16:07:33 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/01/22/the-joy-of-reinventing-the-wheel-part-i/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Lately I have discovered two of my ideas have already been invented before. The first one concerns this secret project that I mentioned a while ago, I will post about that later some time. The other one concerns this <a href="http://www.zefhemel.com/archives/2006/10/23/tv-torrent-feeds" target="_blank">TV Torrent Feed</a> idea I had.</p>
<p>Yes, this idea already had been around since 2003 apparently and was dubbed <a href="http://en.wikipedia.org/wiki/Broadcatching" target="_blank">broadcatching</a>, yes, there’s even a wikipedia page. How nice.</p>
<blockquote>In December of 2003, the term broadcatching was used by Steve Gillmor to describe the combination of RSS and BitTorrent peer-to-peer file sharing as a method for subscribing to an ongoing series of media files from a website. The combination of these technologies allows a computer connected to the Internet to act like a digital video recorder (DVR) such as TiVo connected to cable.</blockquote>
<blockquote>[…]</blockquote>
<blockquote>Today, RSS and BitTorrent based broadcatching provides a web based distribution channel capable of delivering broadcast media to a large group of consumers at a low cost. BitTorrent provides the low cost method for distributing large files to a large group, and RSS enables a website to easily provide a subscription to a series of BitTorrent files.</blockquote>
<p>D’oh!</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1102</wp:post_id>
		<wp:post_date>2007-01-22 17:07:33</wp:post_date>
		<wp:post_date_gmt>2007-01-22 16:07:33</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-joy-of-reinventing-the-wheel-part-i</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Microsoft to Support OpenID</title>
		<link>http://zef.me/2007/02/09/microsoft-to-support-openid/</link>
		<pubDate>Fri, 09 Feb 2007 18:05:54 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/02/09/microsoft-to-support-openid/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p><a href="http://www.sixapart.com/about/news/2007/02/microsoft_suppo.html" target="_blank">SixApart blog</a>:</p>
<blockquote>You see, OpenID was originally created by Brad Fitzpatrick, who created LiveJournal (along with a ton of other open source platform software) and is one of the chief geeks here at Six Apart. Yesterday was Brad’s birthday, but today is when he really gets the best present: Microsoft is supporting OpenID. Brad posted a bit about the news in his journal.</blockquote>
<blockquote>Now, since we’re a company that releases tons of open source code and lives in the Web 2.0 world, we were a little skeptical, just like you might be. But the most reassuring sign of Microsoft’s endorsement is that they’re integrating OpenID with their CardSpace initiative. As Johannes Ernst, one of the leading advocates of OpenID said, it’s a little bit like OpenID and CardSpace got married.</blockquote>
<blockquote>And just as important was the way that Microsoft told the story. Though there’s a traditional press release as part of Microsoft’s presence in the RSA Conference, it’s reassuring to see Bill Gates himself speaking at length and in detail about OpenID in a way that shows he truly understands the technology.</blockquote>
<p>Great news. I think it’s really time for people to adopt OpenID for their services. I’ve been working on another (secret) service and I built OpenID support into that. You’ll see, if it ever gets released (i.e. if it doesn’t turn out I have been reinventing the wheel again, and I don’t get bored with it before). It’s really quite easy to do, and great for me, because it take a lot of account management stuff out of my hands.</p>
<p>I also just installed the <a href="http://sourceforge.net/projects/wpopenid/" target="_blank">OpenID plugin for wordpress</a>, you can just type your OpenID url into the comment form and post away. A use will be created which you don’t have to enter your details every time, plus you get a cool OpenID icon next to your name. So get a free <a href="http://www.myopenid.com" target="_blank">OpenID account, for example at MyOpenID</a> and try it out!</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1163</wp:post_id>
		<wp:post_date>2007-02-09 19:05:54</wp:post_date>
		<wp:post_date_gmt>2007-02-09 18:05:54</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>microsoft-to-support-openid</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Corporate Blogging in the 1860s</title>
		<link>http://zef.me/2007/01/19/corporate-blogging-in-the-1860s/</link>
		<pubDate>Fri, 19 Jan 2007 18:46:03 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/01/19/corporate-blogging-in-the-1860s/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>A good reason to let people in your company blog is for PR reasons. Putting a human face on your company really improves how people view your company. You show that it’s actually made of people with opinions and views, rather than money hungry MBAs. This worked wonders for a company like Microsoft. They were (and to an extent are still) seen as an evil empire, but that has improved a lot over the past years because many Microsofties started blogging. People such as <a href="http://www.scobleizer.com" target="_blank">Robert Scoble</a>, who even wrote a <a href="http://www.amazon.com/Naked-Conversations-Changing-Businesses-Customers/dp/047174719X" target="_blank">book about it</a>, is a good example of this.</p>
<p>This idea is not new however. Today I read something interesting in a book I’m reading for my studies: <a href="http://www.amazon.co.uk/Illustrated-History-Britain-Background-Books/dp/058274914X" target="_blank">An Illustrated History of Britain</a> (by David MacDowall) about Queen Victoria of England (page 144) who was a very unpopular queen, until 1868:</p>
<blockquote>One important step back to popularity was the publication in 1868 of the queen’s book <em>Our life in the Highlands</em>. The book was the queen’s own diary, with drawings, of her life with Prince Albert at Balmoral, her castle in the Scottish Highlands. It delighted the public, in particular the growing middle class. They had never before known anything of the private life of the monarch, and they enjoyed being able to share it. She referred to the Price Consort simply as “Albert”, to the Prince of Wales as “Bertie”, and to the Princess Royal as “Vicky”. The queen also wrote about her servants as if they were members of her family.</blockquote>
<p>Of course there was no Internet back then. Electricity was barely invented. But still, she wrote openly about her issues and the people she dealt with. It gave insight into her life. And it worked. She became very popular.</p>
<p>So Queen Victoria may be one of the front runners of what today we know as corporate blogging, or rather: royal blogging.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1204</wp:post_id>
		<wp:post_date>2007-01-19 19:46:03</wp:post_date>
		<wp:post_date_gmt>2007-01-19 18:46:03</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>corporate-blogging-in-the-1860s</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Talking Code: vraptor</title>
		<link>http://zef.me/2007/02/24/talking-code-vraptor/</link>
		<pubDate>Sat, 24 Feb 2007 10:06:21 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/02/24/talking-code-vraptor/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>I’ve been thinking for a while about doing some podcasting/netcasting again. After an e-mail I got from one of the <a href="http://vraptor.org" target="_blank">vraptor guys</a> I thought doing interviews with people involved with the development of programming languages and frameworks might be interesting. There are plenty of these that are not very well known but that people might be interested in. And I always like to hear the authors talk about their own creation.</p>
<p>So I started the <a href="http://www.talkingcode.org" target="_blank">Talking Code</a> netcast. February 8th I talked to Guilherme Silveira and Nico Steppat of <a href="http://vraptor.org" target="_blank">vraptor</a>. Vraptor is a Java webframework that favours convention over configuration. It borrows ideas from different JBoss projects and frameworks like Ruby on Rails. It took me a while to find time to edit the interview, <a href="http://www.talkingcode.org/2007/02/24/episode-1-vraptor/" target="_blank">but it’s up</a>!</p>
<p>It was the first time in my life that I did an interview, so I still have to get the hang of it. Any feedback is appreciated. If you know of any interesting projects to talk about, or run one yourself, drop me a line.</p>
<p>You can download the <a href="http://www.talkingcode.org/podpress_trac/web/5/0/talkingcode-vraptor.mp3" target="_blank">first episode here</a>. You can also <a href="http://www.talkingcode.org/feed/" target="_blank">subscribe to the feed</a> (for example in iTunes).</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1281</wp:post_id>
		<wp:post_date>2007-02-24 11:06:21</wp:post_date>
		<wp:post_date_gmt>2007-02-24 10:06:21</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>talking-code-vraptor</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Digg to Support OpenID</title>
		<link>http://zef.me/2007/02/23/digg-to-support-openid/</link>
		<pubDate>Fri, 23 Feb 2007 15:08:09 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/02/23/digg-to-support-openid/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p><a href="http://www.techcrunch.com/2007/02/20/kevin-rose-at-fowa-digg-adopts-openid/" target="_blank">TechCrunch</a>:</p>
<blockquote>Kevin Rose, speaking here at the Future of Web Apps conference in London, just announced that Digg will adopt the OpenID decentralized digital identity platform. Don’t expect this right away though — adoption will begin “later this year” according to Rose.</blockquote>
<p>This is great news. OpenID becomes more and more of a safe bet for single sign-on systems. Recently Microsoft and AOL have also announced they are going to support it. I have just been thinking if it’s understandable for “normal” people. With OpenID you login with an URL which seems counter-intuitive. You are not a website right?</p>
<p>A service like <a href="http://freeyourid.com/" target="_blank">FreeYourID</a> could be a solution to this. They decided to use the .name top-level domain extension for this purpose. So that your OpenID URL would become firstname.lastname.name. That would be zef.hemel.name in my case (actually works). This is fairly intuitive name, the problem is that this service will cost you after 90 days. Not much, but still.</p>
<p>I’m becoming more and more convinced for OpenID’s opportunity. I’ve finally updated my <a href="http://www.zefhemel.com/advocacy/" target="_blank">Advocacy</a> page and OpenID is up there.</p>
<p>If you’re a web application developer, have a look at OpenID libraries for your language, they are generally simple to use and make the sign-up process a lot more attractive to your prospective customers. I’m much more tempted to try some new service if all I have to do is type in my OpenID and not go through a sign-up process.</p>
<p><a href="http://www.openidenabled.com/openid/libraries" target="_blank">Here you can find libraries to use OpenID in Python, Perl, PHP, Ruby, .NET, Coldfusion and Java</a></p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1398</wp:post_id>
		<wp:post_date>2007-02-23 16:08:09</wp:post_date>
		<wp:post_date_gmt>2007-02-23 15:08:09</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>digg-to-support-openid</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Watching TV with Joost</title>
		<link>http://zef.me/2007/01/17/watching-tv-with-joost/</link>
		<pubDate>Wed, 17 Jan 2007 18:32:19 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/01/17/watching-tv-with-joost/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Who comes up with calling a piece of software <a href="http://www.joost.com" target="_blank">“Joost”</a>? A friend of mine is called Joost. Joost is a very common first name in Holland. I see the name popping up everywhere now: blogs, newspapers and every time I think it’s about my friend. Annoying. Imagine they called it “David” or “Matt” or something like that.</p>
<p>Anyway, Joost received a lot of press even though the only real news is its name change. It was known as “The Venice Project” before, which I thought was a nice tasteful mystical name. The goal of the project is to build TV for the internet. That also doesn’t sound very new or exciting. The factor that makes it “new and exciting” is that it is a project of the same guys that built <a href="http://www.skype.com" target="_blank">Skype</a> and <a href="http://www.kazaa.com" target="_blank">Kazaa</a>. This is what created the hype around the project. If it’s built by these guys it must be an upcoming successful product. And it might become one, for three reasons:</p>
<ol>
<li>It protects rights of the owners of its distributed content. I don’t think it will be possible to record anything, or if it would be possible there would be some DRM on it.</li>
<li>It is streaming and peer-to-peer technology. This saves <strong>huge</strong> amounts on bandwidth bills.</li>
<li>It allows plug-ins to be created.</li>
</ol>
<p>How does the fact that it allows the content’s owners to protect their content make it successful? Because current TV stations may buy into it. Right now we have vidcasting, or whatever you would like to call it — RSS feeds with video enclosures. Clients like iTunes and Democracy Player read these feeds and download the video files to the user’s hard drive. These files are unprotected, can be copied as much as people like. That’s fine for many amateurs, but TV studios generally are not a big fan of this. Where would their revenue come from? They can put ads in it, but it is very easy to skip. Joost gives the content providers the opportunity to put ads in their shows that you will not be able to skip. That’s it. That’s what TV studios need to make a profit.</p>
<p>Video bandwidth is a big problem. Any site that is a bit popular and offers video downloads has huge bandwidth bill. There are rumours that a site like YouTube has bandwidth bills of one million dollars a day, or at least hundreds of thousands of dollars. That is a lot of money. Skype and Kazaa used peer-to-peer techniques to not have to pay the bandwidth bills caused by their users. They let their users talk to each other directly, without them interfering much. Joost will do the same thing, video will be streamed from user to user. Yes, a video stream consumes a hell lot more bandwidth than a simple phone call, so you better start thinking of upgrading your internet connection a bit.</p>
<p>Apparently Joost uses <a href="http://www.mozilla.org/projects/xul/" target="_blank">Mozilla’s XUL</a> and allows developers to extend Joost with this. This would mean you can write plug-ins using Javascript and such. This could be very interesting. A chat client could let people watching the same show chat with each other. Again the Skype guys took the same approach. They created a proprietary platform, but have a plug-in system for third-party developers to exploit.</p>
<p>This is definitely a project worthy of following. However it seems they will not be supporting PowerPC Macs, so I won’t be able to use it for a while. Oh well, my <a href="http://www.getdemocracy.com" target="_blank">Democracy Player</a> has 40 videos left I still have to watch so there’s no hurry.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1463</wp:post_id>
		<wp:post_date>2007-01-17 19:32:19</wp:post_date>
		<wp:post_date_gmt>2007-01-17 18:32:19</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>watching-tv-with-joost</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>4 Years of Blogging</title>
		<link>http://zef.me/2007/02/10/4-years-of-blogging/</link>
		<pubDate>Sat, 10 Feb 2007 11:49:34 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/02/10/4-years-of-blogging/</guid>
		<description></description>
		<content:encoded><![CDATA[
<p>Today is my fourth blogging anniversary, hooray! :)</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1561</wp:post_id>
		<wp:post_date>2007-02-10 12:49:34</wp:post_date>
		<wp:post_date_gmt>2007-02-10 11:49:34</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>4-years-of-blogging</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Presently is Coming</title>
		<link>http://zef.me/2007/02/05/presently-is-coming/</link>
		<pubDate>Mon, 05 Feb 2007 09:48:28 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/02/05/presently-is-coming/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Another <a href="http://googlesystem.blogspot.com/2007/02/google-presently.html" target="_blank">secret Google project has been discovered</a>. This time it is an online presentation tool (code named “Writely”). Nice. I imagine there are some applications for this, however I do wonder if people would (or should) actually use this during actual presentations. Would be a shame if all of a sudden some Google error appeared, wouldn’t it?</p>
<p>A little while ago I’ve been playing with some of the already existing applications of <a href="http://docs.google.com" target="_blank">Google Docs &amp; Spreadsheets</a>. Horrible name by the way. What are they going to change it to now? Google Docs, Presentations &amp; Spreadsheets? Anyway, I played with the “Docs” part of it. I’m not really a spreadsheet user. Although I think the docs app is nice, you shouldn’t use it to export to Word and continue editing it there. The result for me was not that great. But I imagine it would be nice for collaborative document editing. Has anybody noticed that Google uses a kind of Office 2007-like ribbon menu system in both Google Docs and Google Spreadsheets by the way?</p>
<p>I also wonder if the things you can do within the “standard” rich editor inside the browser are not too limited for actual word processing. I fear its extensibility will proof too limited soon. And then what? Build a new editing component using Javascript and DOM tricks? I did some small tests to see if it was feasible completely reimplementing an edit component in Javascript, and my finding was that it would be way too slow (at least on my computer).</p>
<p>Yay, and I managed to write another incoherent post. Anyway, looking forward having a look at this Presently tool.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1613</wp:post_id>
		<wp:post_date>2007-02-05 10:48:28</wp:post_date>
		<wp:post_date_gmt>2007-02-05 09:48:28</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>presently-is-coming</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>The Browser as the Platform</title>
		<link>http://zef.me/2007/01/23/the-browser-as-the-platform/</link>
		<pubDate>Tue, 23 Jan 2007 16:20:34 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/01/23/the-browser-as-the-platform/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>I wrote about this a couple of times before, but as time progresses I start to see the picture clearer and clearer: operating systems will increasingly become less important. Forget about what OS you’re using, it’s just a frame around what really matters: the browser. Sun used to say: the network is the computer. I would add that indeed the (inter)net is the computer, with the browser as in increasingly thick client.</p>
<p>The browser used to be fairly limited in what it could do. It could show text and images, and that was about it. Then there were some companies that helped making websites more dynamic, some succeeded (notably Flash) and many failed (I would say, including Java applets). However gradually things were added to the browser that allowed for very dynamic behavior. Early on there was this little scripting language called Javascript, which could show simple dialogs and could manipulate the webpage a bit on the user’s screen. When all browsers started to support some kind of means to make HTTP calls back to the server through Javascript, this turned the browser into an incredibly powerful platform. The application platform of the future, I would say.</p>
<p>The current trend is that more and more of the web applications move a lot of their logic to the browser. This is what I predicted a long time ago already. I think that soon most of the application will run inside the browser and will only make callbacks to the server for storing and retrieving data. In fact this is basically what Gmail does.</p>
<p>It is important to make a distinction between two kinds of dynamic websites:</p>
<ol>
<li>
<em>Sites with some dynamic content.</em> These are sites that use Javascript and AJAX techniques just to make the experience more smooth, but do not rely on it. These sites have multiple pages and reload the whole content for most things you do. Wikis are an example of this, as are blogs and most content websites.</li>
<li>
<em>Single-Page Interfaces (SPIs).</em> These are the web applications that were built to replace the traditional desktop applications. You go to a single page and do not leave it for as long as you use the application. Examples of this are Gmail, the new Yahoo Mail, and many online feed readers, like Google Reader.</li>
</ol>
<p>The real revolution is happening with the SPI web applications. These applications have important implications however and pose a number of problems:</p>
<ol>
<li>
<em>Current SPIs assume an internet connection at all times.</em> This is unrealistic and will be unrealistic for some time. So there should be some means to download data to the browser, change it and push it back to the server when there is internet connectivity again. <a href="http://manual.dojotoolkit.org/WikiHome/DojoDotBook/Book50" target="_blank">Dojo’s storage framework</a> makes this browser-side storage of data possible.</li>
<li>
<em>Javascript is going to be the dominant programming language.</em> I think Javascript is fit for the job. It has to be, developers will have to build on the current Javascript engines currently around for many years, most people do not update their browser often. A lot of interesting work is being done on making writing software in Javascript easier and more pleasant. For browser makers it means they really should start focusing on their Javascript interpreters. As more and more code will run inside the browser this is of increasing importance.</li>
<li>
<em>Where is the user’s data stored?</em> Currently most web application providers store the user’s data on their servers. The question is, do users want this? At least it should be possible to move this data around, from the service to the user, but also between services I think. This is an issue not currently addressed, and I will talk about this more in a future post.</li>
</ol>
<p>To be continued…</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1642</wp:post_id>
		<wp:post_date>2007-01-23 17:20:34</wp:post_date>
		<wp:post_date_gmt>2007-01-23 16:20:34</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-browser-as-the-platform</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Fighting Injection Attacks with StringBorg</title>
		<link>http://zef.me/2007/02/07/fighting-injection-attacks-with-stringborg/</link>
		<pubDate>Wed, 07 Feb 2007 10:41:40 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/02/07/fighting-injection-attacks-with-stringborg/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p><a href="http://mbravenboer.blogspot.com/2007/02/our-take-on-injection-attacks.html" target="_blank">Martin Bravenboer</a> writes about a new way to fight code injection attacks. The most infamous example of this kind of attack is the SQL injection, which is caused by careless developers simply inserting a string from user input into their program, like this (PHP example):</p>
<pre>$results = mysql_query("SELECT * FROM users WHERE "<br>                        . "userid = {$_GET['id']}");</pre>
<p>When you see something like this you should start screaming “no no no!” immediately. This query works fine if $_GET[‘id’] contains “3” as its value, but what if it filled in by a malicious user who fills in “3; DROP TABLE users;” Woosh, and your users table is gone.</p>
<p>The most obvious solution to this problem is escaping and checking your inputs. If you expect an integer input, check if it actually is. However, a programmer is still human (or so they clame) and is bound to make mistakes.</p>
<p><a href="http://www.stringborg.org" target="_blank">StringBorg</a> attempts to solve this problem by adding special syntax for a “guest language” in the “host language”. The host language in the example above is PHP, the guest language is SQL. StringBorg introduces some new syntax for the different guest languages. It will most likely act as a precompiler. You write the code with special syntax in one of the supported languages (I think Java and PHP are currently supported), StringBorg takes this code and transforms it into normal safe PHP or Java code. Now what does this code look like? Here’s a snippet in Java:</p>
<pre>String s = "'; DROP TABLE Users; --";<br>SQL e = &lt;| username = ${s} |&gt;;<br>SQL q = &lt;| SELECT password FROM Users WHERE ${e} |&gt;;<br>System.out.println(q.toString());</pre>
<p><a href="http://mbravenboer.blogspot.com/2007/02/our-take-on-injection-attacks.html" target="_blank">More examples can be found here</a>.</p>
<p>In itself I’m a fan of integrating guest and host languages more. The C# team is doing very interesting work on this with <a href="http://msdn2.microsoft.com/en-us/netframework/aa904594.aspx" target="_blank">LINQ</a>, which will likely also solve this injection problem. However, that’s just C# (and VB.NET). StringBorg, although only addressing the injection problem, is an essentially generic solution. It could be implemented for any guest and host language in a more-or-less straight-forward way (assuming you scribble programming language grammars during your lunch break). And what’s nice is that you only have to do it for each guest programming language once. StringBorg already has support for shell, SQL, LDAP and JavaScript as guest languages, so if you wanted to add these safety features to, say, Python, you would only have to add support for Python as a host language and you’d get all this guest language support for free.</p>
<p>But let’s do a reality check. This is still very much an academic project. You can’t really expect the mainstream public to first compile and install 7 pieces of software that StringBorg depends before installing StringBorg itself. Furthermore these features will break IDE support for that language. I think Eclipse would not really appreciate my nice &lt;| bladiebla |&gt; notation. So there should be IDE support available too. If the StringBorg authors are serious about this project and want “normal” people to use it, it should come in a self-contained package. In case of using Java as a host language, it should come with IDE support and Ant tasks. And of course: docs, docs, docs!</p>
<p>I think StringBorg in itself is a interesting project, but it’s quite far from being ready from actually being used by non-academic developers. You can find the <a href="http://www.stratego-language.org/Stratego/StringBorg" target="_blank">StringBorg website here</a>, but it does not have a lot of information. Watch <a href="http://mbravenboer.blogspot.com" target="_blank">Martin Bravenboer’s blog</a> for more information on StringBorg.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1650</wp:post_id>
		<wp:post_date>2007-02-07 11:41:40</wp:post_date>
		<wp:post_date_gmt>2007-02-07 10:41:40</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>fighting-injection-attacks-with-stringborg</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Piping the New Web</title>
		<link>http://zef.me/2007/02/08/piping-the-new-web/</link>
		<pubDate>Thu, 08 Feb 2007 10:24:30 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/02/08/piping-the-new-web/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>The video I included below has been floating around on different weblogs in the past days. It is an almost inspirational video about the new web, or web 2.0 if you will. In just about 5 minutes it explains where we came from and where we’re heading. Have a look at it.</p>
<a href="https://www.youtube.com/v/6gmP4nk0EOE">https://www.youtube.com/v/6gmP4nk0EOE</a><p>This morning, all of the sudden, like half of the posts in my Google Reader were about the new Yahoo project: <a href="http://pipes.yahoo.com" target="_blank">Yahoo! Pipes</a>. It is being described as a visual mash-up creator. It allows you take data from different sources and combine them in some way. In this manner one could for example take the latest New York Times stories and run the title through the Flickr search and display the pictures it comes up with, <a href="http://pipes.yahoo.com/pipes/vvW1cD212xGMiR9aqu5lkA/" target="_blank">like is done here</a>.</p>
<p>If you want to know more about Yahoo! Pipes I’d like to refer you to just a few articles that have been written about this while I was sleeping:</p>
<ul>
<li><a href="http://radar.oreilly.com/archives/2007/02/pipes_and_filte.html" target="_blank">O’Reilly Radar: Pipes and Filters for the Internet</a></li>
<li><a href="http://radar.oreilly.com/archives/2007/02/yahoo_pipes_the.html" target="_blank">O’Reilly Radar: Yahoo! Pipes: The Modules For Building Pipes</a></li>
<li><a href="http://radar.oreilly.com/archives/2007/02/yahoo_pipes_dec.html" target="_blank">O’Reilly Radar: Yahoo! Pipes: Deconstructing a Pipe</a></li>
<li><a href="http://www.readwriteweb.com/archives/yahoo_pipes_rss_remixer.php" target="_blank">Read/Write Web: Yahoo Launches Pipes, an RSS Remixer</a></li>
<li><a href="http://gigaom.com/2007/02/07/yahoos-pipes-hard-to-grok-but-snazzy/" target="_blank">GigaOM: Yahoo’s Pipes Hard to Grok But Snazzy</a></li>
</ul>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1662</wp:post_id>
		<wp:post_date>2007-02-08 11:24:30</wp:post_date>
		<wp:post_date_gmt>2007-02-08 10:24:30</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>piping-the-new-web</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Another Change in Direction</title>
		<link>http://zef.me/2007/02/14/another-change-in-direction/</link>
		<pubDate>Wed, 14 Feb 2007 10:40:10 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/02/14/another-change-in-direction/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>After studying English for half a year (with great results by the way) I know and realize that I really enjoy it, but that it is not my future. The question then becomes whether to finish (by studying another 3–4 years) or quit and do something more “compliant” with your future. After my girlfriend applied for a Ph.D. position in the west of Holland (I currently live in the north), I started to think about this more. I considered finding a job in the west as well, but after talking to some people I reconsidered the option of doing a Ph.D.</p>
<p>I started looking around in the country to see if there were any interesting projects going on. Then I found <a href="http://swerl.tudelft.nl/bin/view/MoDSE/JobOpenings" target="_blank">this</a>. And it reminded me of what I posted almost 2.5 years ago in <a href="http://www.zefhemel.com/archives/2004/10/08/the-importance-of-laziness" target="_blank">The Importance of Laziness</a>:</p>
<blockquote>This is what I’m passionate about: being lazy, err, <a href="http://www.zefhemel.com/archives/2004/09/25/tools-tools-tools" target="_blank">tools</a> that make developers more productive. I like playing with them, <a href="http://www.zefhemel.com/archives/2004/03/28/eclipse-tour" target="_blank">promoting</a> them and creating them. It’s what I want to do. Not only tools, but also development paradigms and everything that improves the development experience, getting rid of the boring stuff and reducing it to the essentials.</blockquote>
<blockquote>That’s why I like languages like <a href="http://www.python.org" target="_blank">Python</a> and <a href="http://msdn.microsoft.com/vcsharp/" target="_blank">C#</a>. That’s why I like IDEs like <a href="http://www.eclipse.org" target="_blank">Eclipse</a> and <a href="http://msdn.microsoft.com/vstudio" target="_blank">Visual Studio</a>. That’s why I like paradigms like object oriented programming and <a href="http://www.zefhemel.com/archives/2004/09/23/data-in-data-out." target="_blank">code generation</a>. That’s why I like application frameworks like <a href="http://www.asp.net/" target="_blank">ASP.NET</a> and <a href="http://www.rubyonrails.org" target="_blank">Ruby On Rails</a> (which I’ll be looking into soon).</blockquote>
<blockquote>When I get my master(s), we’ll see where I can work on stuff like that. Having programmers only working one hour per day, yet doing the same amount of work they did in a day before, that’s my goal.</blockquote>
<p>When I read the research project’s full project plan I found this:</p>
<blockquote>The aim in development is to produce a high-quality system with the least possible effort. The aim in maintenance is to apply improvements and extensions with the least possible effort.</blockquote>
<p>When you set your goals so much in line with what I wrote about 2.5 years ago, how could I not apply for this position? So I did. And they were interested and invited me for a day of interviews American style.</p>
<p>Yesterday morning I got up at 5.30 in the morning, took two trains and two busses and arrived at the <a href="http://www.tudelft.nl" target="_blank">TU Delft</a> around 11. First I did an (almost) hour long presentation for their group (<a href="http://www.zefhemel.com/upload/Delft%20presentation.pdf" target="_blank">slides in PDF, 14 MB</a>) about my M.Sc. dissertation project, I think it went well. They had some valid remarks.</p>
<p>After lunch I had interviews with four of their group members. First the project leader <a href="http://swerl.tudelft.nl/bin/view/EelcoVisser" target="_blank">Eelco Visser</a>, then the professor, <a href="http://www.st.ewi.tudelft.nl/~arie/" target="_blank">Arie van Deursen</a>, then two of the current Ph.D. students: <a href="http://martin.bravenboer.name" target="_blank">Martin Bravenboer</a> and <a href="http://sepc.twi.tudelft.nl/~mesbah/" target="_blank">Ali Mesbah</a>. They all turned out to be really great people working on interesting projects. At the end of the day I was offered the job. This morning I accepted.</p>
<p>So, starting September 1st I will be a Ph.D. student at the TU Delft! I’m very excited and looking forward to it. I will have to move of course, so I have to find a place to live somewhere around there for me and Justyna, but I’m sure it will be fine.</p>
<p>If you think: hey, that is really interesting, I would want to do something like that, maybe you can. If you have a M.Sc. in computer science and interested in this have a look at <a href="http://swerl.tudelft.nl/bin/view/MoDSE/JobOpenings" target="_blank">this page</a>. They are still looking for one or two PhDs and a PostDoc. So if you have your Ph.D. already you can also apply. You will be working closely with a great group of people, among who will be… me. And honestly, who wouldn’t want to work with me ;)</p>
<p>I am not quitting my English studies yet though. I intend to more-or-less finish this year. I probably won’t take all classes (I also teach myself this semester which takes time), but I’m still studying.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1717</wp:post_id>
		<wp:post_date>2007-02-14 11:40:10</wp:post_date>
		<wp:post_date_gmt>2007-02-14 10:40:10</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>another-change-in-direction</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="personal"><![CDATA[Personal]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>WebFS: a Web of Data</title>
		<link>http://zef.me/2007/03/04/webfs-a-web-of-data/</link>
		<pubDate>Sun, 04 Mar 2007 13:07:25 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/03/04/webfs-a-web-of-data/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Interesting trends in data storage have been taking place in the past few years even though people often do not even realize it. Whereas we have been storing our data on disks locally for the past thirty years, slowly we are moving to storing more and more of our data remotely on the Internet. Examples of this are storing pictures on <a href="http://www.flickr.com" target="_blank">Flickr</a>, videos on <a href="http://www.youtube.com" target="_blank">Youtube</a>, e-mail on <a href="http://www.gmail.com" target="_blank">Gmail</a> and contact information on <a href="http://www.plaxo.com" target="_blank">Plaxo</a>. It will not stop there, soon people will do office work (word processing, spreadsheets and presentations) on services like <a href="http://docs.google.com" target="_blank">Google Docs</a> and <a href="http://www.zoho.com" target="_blank">Zoho</a>. This trend has major implications on data security, privacy and reliability, but also on ways we manage and manipulate our data. Whereas before all of our data was structured in a tree-like directory structure, currently our data lives all over the Internet, stored on different servers all over the world. Although we gain a lot from this move, such as having access to our data from any computer anywhere in the world, we also currently lose a lot: services offer different interfaces with different capabilities, it is easy to get data lock-in, meaning your data is not mobile, you cannot move it from one service to the other. The idea behind WebFS, the Web File System, is to define a uniform interface to data storage and bringing the data mobility and freedom of traditional storage to the emerging Internet storage.</p>
<p>Once there is a uniform way to access data it will finally become possible to also define uniform ways to manipulate this data. Manipulation of this data could happen through passing it through <em>web processes</em>. More or less analogous to the Unix command-line toolset, web processes are little web services that do one small task very well. This idea is very similar to the pipe and filter concept in Unix. Data is obtained from a data store, passed to a web process, then passed onto another one and so on, eventually the manipulated data could end up on a data store again. As an example one could imagine wanting to create a JPEG thumbnail of a RAW picture file. There are two web processes we could use for this: a image converter which converts RAW to JPEG and then a thumbnail web process which creates a thumbnail from the JPEG image.</p>
<p>With web processes we create little programs in the Unix tradition that do one little task well and can be chained to get a bigger task done. They are in essence web services, but they all conform to the same standard interface. This would not only make it easy for users to manipulate their data, but also for web developers to integrate into their applications. If a company like <a href="http://www.riya.com" target="_blank">Riya</a> would create a face-recognition web process, Flickr could pass its pictures through it to find out who is on these pictures. This could then be used to improve search results. If we look at other web application areas, such as online collaborative document editing, one could imagine a HTML to PDF converter web process, that users and application developers can use. Or web processes that aid in migration of data between services by converting between the different data formats of online spreadsheet programs or calendar applications (such as <a href="http://docs.google.com" target="_blank">Google Spreadsheets</a> and <a href="http://www.editgrid.com" target="_blank">EditGrid</a> or <a href="http://www.google.com/calendar" target="_blank">Google Calendar</a> and <a href="http://www.30boxes.com" target="_blank">30 Boxes</a>).</p>
<p>Before describing the architecture to make this work, let’s get a taste of what WebFS would enable people to do.</p>
<p><strong>Vision of a WebFS-enabled world</strong><br>Debbie no longer stores much of her data on her computer anymore, everything is stored on the Internet; she only keeps a small cache of it locally so she can also work offline. This is useful, because now she can access her data from any device. She sometimes listens to her music which she stored on <a href="http://www.mp3tunes.com/locker/" target="_blank">MP3 Tunes</a> and watches some videos she stored on Youtube on her mobile phone. Her phone uses a video conversion web process to resize the Youtube videos to the size of her screen. As she listens to her music, she can add tags to it or rate the songs, metadata that is persisted on the server.</p>
<p>When Debbie sits behind her laptop she fires up her data manager. In this data manager she sees a directory-like structure of all her data. It is possible to search through it quickly, as specialized search engines have been built for this purpose. She can search for all pictures she took between 2005 and 2007 in her favorite city in the world: Paris. The pictures have GPS location metadata associated with them, automatically added by her camera. This metadata was enriched by the “picture locator” web process before she uploaded the pictures. This web process finds picture GPS coordinates and appends city and country information to the metadata.</p>
<p>Even though the data appears as a big searchable tree-structure to Debbie, the data is actually stored on many different services. The Pictures folder, for example, lives on Flickr, although the Family folder inside the Pictures folder links to the family album she keeps on <a href="http://www.zooomr.com" target="_blank">Zooomr</a>. The Documents folder comes from <a href="http://docs.google.com" target="_blank">Google Docs &amp; Spreadsheets</a>. Debbie uses Google Docs extensively to collaboratively edit document with her friends, however sometimes it’s easier to edit it in Zoho Writer. She right-clicks on the file and selects “Open in Zoho writer”, she edits the document and saves it. She sends the document to her friend, however she knows her friend prefers to receive all documents in PDF. Therefore she invokes a web process that converts the document to PDF before it is sent.</p>
<p>Because Debbie is a bit scared that her photo collection will some day disappear, she creates a backup of all her photo albums on Flickr every month. She has a folder that is called Backups. All the items in this folder are stored on <a href="http://www.omnidrive.com" target="_blank">Omnidrive</a>. She runs a little program called “synchronizer”. Synchronizer compares the metadata of the items in the Backup folder and Pictures folder to see if anything has changed since it was last run. For this it uses special synchronization meta-data on each of the items. The program copies all changed and added pictures over from Flickr to Omnidrive.</p>
<p><strong>Architecture</strong><br>There are three main components needed to make this idea work:</p>
<ol>
<li>
<em>Data stores</em> that retrieve and store data (through a standardized interface)</li>
<li>
<em>Web processes</em> that take data as input, plus some parameters and give the manipulated data as output (through a standardized interface)</li>
<li>
<em>Applications</em> that interface with data stores and web processes</li>
</ol>
<p><em>Data stores</em><br>When we talk about data, we really talk about two things:</p>
<ul>
<li>Content data: the data that represents the content (JPEG image data, Word document data)</li>
<li>Metadata: data about the data, such as title, author, date created, size, tags, but also data type specific meta data like image width, image height, location where it was taken and so on</li>
</ul>
<p>WebFS-enabled data stores therefore need four fundamental operations on data items (such as contacts, documents and pictures):</p>
<ol>
<li>
<em>Get data</em>: retrieve the content data of the data item from the data store</li>
<li>
<em>Get metadata</em>: retrieve the metadata of the data item from the data store</li>
<li>
<em>Put data</em>: store the content data of the data item in the data store</li>
<li>
<em>Put metadata</em>: store the metadata of the data item in the data store</li>
</ol>
<p>Each data item has its own URL on which these operations are performed. The content data can have any form, such as JPEG for pictures, HTML for webpages and RTF for Word documents. Not every data store has to accept every type of data item. A picture service could only accept photos for example, forcing it to also store Word documents would not make much sense. A service like Omnidrive or <a href="http://aws.amazon.com" target="_blank">Amazon S3</a> on the other hand would accept any kind of data type.</p>
<p>There is one special kind of data item, which is the folder. The folder fundamentally is yet another data item, but as content it has a list of links (URLs) to data items that are contained within it. A photo album (which would be a sub-class of a folder) contains a list of links to pictures that are in that album. Because a folder contains a list of URLs, which could link to anywhere on the web, there is no set hierarchy intrinsic in the URL. So <a href="http://someuri.com/folder" target="_blank">http://someuri.com/folder</a> could be a folder containing <a href="http://someuri.com/folder2." target="_blank">http://someuri.com/folder2.</a> Looking at the URL structure these two folders seem siblings, but as URLs are purely identifiers in WebFS, the <a href="http://someuri.com/folder" target="_blank">http://someuri.com/folder</a> in this case is the parent of <a href="http://someuri.com/folder2." target="_blank">http://someuri.com/folder2.</a></p>
<p>For metadata it is desirable to look at technologies from the <a href="http://en.wikipedia.org/wiki/Semantic_Web" target="_blank">semantic web</a>. One of the ontology languages, such as <a href="http://www.w3.org/RDF/" target="_blank">RDF</a> (Resource Description Framework) or <a href="http://www.w3.org/TR/owl-features/" target="_blank">OWL</a> (Web Ontology Language), seem an obvious choice to provide semantic metadata about data items. They both have schema languages to predefine metadata sets. Describing metadata in a semantic way is useful to allow reasoners to reason about it. For example, if you’re searching for pictures taken in Italy and there are pictures tagged with “Rome” and “Pisa”, and somewhere on the semantic web it is stated that Rome and Pisa are cities in Italy, it can be inferred that these pictures are indeed from Italy. This allows for very interesting new ways of searching data, which will get only more interesting as semantic web research evolves.</p>
<p>Every data store has to be able to persist any kind of metadata that the user desires. It can choose how it does this itself; some metadata will be stored inside the file, some will have to be stored separately. Jon Udell <a href="http://blog.jonudell.net/2007/02/14/truth-files-microformats-and-xmp/" target="_blank">has a nice discussion on this issue</a>. The ability to fully persist any kind of metadata allows loss-less backups. It would be possible to fully backup a photo album including its tags and comments and restore it without any loss of data, for instance.</p>
<p><em>Web Processes</em><br>Web processes only have one single operation: invoke. What will be passed to a web process is the following:</p>
<ol>
<li>
<em>Parameters</em>: these can be compared to command line parameters, supplied by the user</li>
<li>
<em>Metadata</em>: the metadata of the data item</li>
<li>
<em>Content data</em>: the content of the data item (analogous to the standard input in Unix programs)</li>
</ol>
<p>A web process then has two outputs:</p>
<ol>
<li>
<em>Metadata</em>: the (possibly manipulated) metadata of the data item</li>
<li>
<em>Content data</em>: the (possibly manipulated) content of the data item (analogous to the standard output in Unix programs)</li>
</ol>
<p>An invocation therefore looks as follows:</p>
<p>The big issue to be resolved with web processes is privacy. Users will often be sending private, maybe even confidential data to these processes, how can they be sure that processes will not store this data themselves and hand it to third-parties? This is an important issue that has to be resolved, however in practice it is likely to come down to trust. Only use web processes where you know who built them and what their privacy policy is.</p>
<p><em>Applications</em><br>Because WebFS makes data storage on the Internet transparent, it also becomes completely unimportant where data is stored. Application and storage can be separated with WebFS as their interface; just like local file storage works now: your operating system manages storage and applications use that storage through operating system APIs.</p>
<p>Web applications currently usually store the user’s data themselves, but with WebFS there is no reason to have to do that anymore. The example mentioned of editing a document stored on Google Docs in Zoho writer could be applied to any other application. If a user has an Omnidrive account, which can store any kind of data, a web application could just use Omnidrive’s WebFS interface to store the user’s data on his or her Omnidrive. Something like this is already happening <a href="http://blogs.zoho.com/general/omnidrive-becomes-perfect-with-zoho/" target="_blank">with Zoho and Omnidrive</a>, but through Omnidrive’s proprietary API. Photo editing services such as <a href="http://www.preloadr.com/" target="_blank">Preloadr</a> and <a href="http://www.picture2life.com" target="_blank">Picture2Life</a> interface with sites like Flickr to store and retrieve photos to and from. A web application in this scenario simply becomes a front-end. Web applications would actually compete based on their feature-set and ease of use, rather than the fact that the user’s data is locked into their service and therefore cannot switch anymore. This is much healthier for both the user and the application vendors.</p>
<p>Companies whose core business is storing data and building web interfaces to this stored data (such as Omnidrive, <a href="http://www.xdrive.com" target="_blank">Xdrive</a> and others) can now also integrate other WebFS data stores into their product. So I could use Omnidrive’s built-in MP3 player to play music that I have currently stored on MP3 Tunes or Amazon S3; and move data between different WebFS stores. These applications would function as the file managers of the Internet.</p>
<p><strong>Where to move from here</strong><br>WebFS is no particular technology or standard at this point. Currently it is an architecture with some implementation ideas open to discussion. A few days ago I got an e-mail from a CEO of an important web storage company as a response to <a href="http://www.zefhemel.com/archives/2007/01/30/reinventing-web-storage" target="_blank">my previous post on WebFS</a>. He is working on getting support among companies to come up with an open standard for data storage and hoped I could help out. My previous post on WebFS was rather brief, so I thought it would be a good idea to first outline my vision of how this would work and what it would enable.</p>
<p>Even if web applications vendors do not start supporting WebFS immediately, it is an option to implement wrappers for them. It would not be very difficult to create a WebFS wrapper around the Flickr APIs for example, or around Amazon S3.</p>
<p><strong>Conclusion</strong><br>The idea behind WebFS is simple yet powerful. It brings the idea of uniform storage and pipes and filters to the Internet. This brings great advantages to consumers, because they regain data mobility and freedom to do with their data whatever they want. It can also bring advantages to web application developers because they can choose not to worry about data storage anymore and purely focus on their application itself. For WebFS to work, standards will have to be created and agreed upon, but when this happens it will be a great step forward for the Internet.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>137</wp:post_id>
		<wp:post_date>2007-03-04 14:07:25</wp:post_date>
		<wp:post_date_gmt>2007-03-04 13:07:25</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>webfs-a-web-of-data</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="best-of"><![CDATA[Best Of]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Useful Python Trick: Interpreter Code-Complete</title>
		<link>http://zef.me/2007/04/03/useful-python-trick-interpreter-code-complete/</link>
		<pubDate>Tue, 03 Apr 2007 17:17:24 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/04/03/useful-python-trick-interpreter-code-complete/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>I was looking at the <a href="http://www.webpy.org" target="_blank">web.py</a> documentation and found <a href="http://webpy.infogami.com/faq" target="_blank">this in the FAQ</a>:</p>
<blockquote><strong>5. How can i get auto completion in python after loading the webpy module?</strong></blockquote>
<blockquote>In IPython, after importing webpy auto completion may no longer work. You can still use ‘python’ with auto completion feature. Try it out directly. Fire up ‘python’:</blockquote>
<blockquote>import readline, rlcompleter<br>readline.parse_and_bind(“tab: complete”)</blockquote>
<blockquote>and tab it! :-)</blockquote>
<blockquote>To make in sort that this will be run default when you fire up ‘python’. Make a file called ‘~/.pythonstartup.py’ and put the import line in it. Then set the ‘PYTHONSTARTUP’ environment variable to point to that file.</blockquote>
<blockquote>With my bash, i do it like following; edit ~/.bashrc and add:</blockquote>
<blockquote>export PYTHONSTARTUP=~/.pythonstartup.py</blockquote>
<p>I tried it and it works very nicely:</p>
<pre>&gt;&gt;&gt; os.f<br>os.fchdir     os.fork       os.fpathconf  os.fsync<br>os.fdopen     os.forkpty    os.fstat      os.ftruncate<br>&gt;&gt;&gt; os.f</pre>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>189</wp:post_id>
		<wp:post_date>2007-04-03 19:17:24</wp:post_date>
		<wp:post_date_gmt>2007-04-03 17:17:24</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>useful-python-trick-interpreter-code-complete</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Google Desktop for the Mac</title>
		<link>http://zef.me/2007/04/04/google-desktop-for-the-mac/</link>
		<pubDate>Wed, 04 Apr 2007 14:13:13 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/04/04/google-desktop-for-the-mac/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p><a href="http://desktop.google.com/mac/" target="_blank">Google released Google Desktop for the Mac</a>, which is in my opinion Google’s least interesting product ever. On Windows there was a point to Google Desktop: Windows until a few months later did not have a proper desktop search product. But on the Mac we’ve had desktop search that works really well for a while now, so what’s the point of Google Desktop on the Mac? I haven’t a clue. Searching Gmail from your Desktop really isn’t enough of a feature to me. I’d prefer a Google Talk client for the Mac if I had to choose.</p>
<p><a href="http://www.tuaw.com/2007/04/04/google-desktop-for-the-mac/" target="_blank">Here’s a review of the software</a>. It seems it’s mostly interesting for Macies that are also Googlies — those who use a Mac and anything Google as a lifestyle choice — a group that I’m sure is growing.</p>
<p>An observation about desktop search engines in general: is it just me or are they really not that useful? I must admit I was quite excited about them when desktop search engines just came out, but now I hardly ever use them. Maybe it’s because I’m Dutch and it’s well known that Dutch people are the most organized people on the planet, but I simply don’t touch Spotlight (the Mac’s built-in desktop search) hardly at all. I use Spotlight features in some Mac applications, mostly Mail, but it has been ages since I actually used it from the Finder or that cute Spotlight icon at the top-right of my screen. In the beginning I used it for launching applications, but since I installed <a href="http://quicksilver.blacktree.com/" target="_blank">Quicksilver</a>, which does this task much faster, I haven’t really touched Spotlight anymore. Is it just me?</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>416</wp:post_id>
		<wp:post_date>2007-04-04 16:13:13</wp:post_date>
		<wp:post_date_gmt>2007-04-04 14:13:13</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>google-desktop-for-the-mac</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Peepel: More Web Offices</title>
		<link>http://zef.me/2007/04/04/peepel-more-web-offices/</link>
		<pubDate>Wed, 04 Apr 2007 08:27:19 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/04/04/peepel-more-web-offices/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Why do people still work on office suites for the desktop? I can come up with two reasons: they think they can do better than Microsoft Office or they are idealistic and feel there should be an open source, free office suite. In case of the latter — it already exists, it’s called <a href="http://www.openoffice.org" target="_blank">Open Office</a>. In case of the former, listen to me. People don’t care if your office suite is better than Microsoft Office, everybody uses MS Office so so will they. Microsoft completely dominates the market so there is no point on beating them on features. You will never have the deals with businesses and computer manufacturers that they have so just give it up.</p>
<p>The same goes for web-based office suites. Although there is not the software distribution issue anymore, still the market will be dominated by one player. In this case it’s not likely to be Microsoft, but it will be Google. Google within a year or two changed to a software company. Their major strength? The Google brand. The web-based office suite market was exciting for a while, just as the web-calendar market was. Until Google bought <a href="http://www.writely.com" target="_blank">Writely</a> and launched Google Spreadsheets and Google Calendar and all of that was over. The battle was won. Just like with Microsoft before, if Google gets on your path you better run because you’re not going to win it. Honestly, if you were a novice in this area and wanted to do word processing on the web and you saw two options: <a href="http://www.zoho.com" target="_blank">Zoho Writer</a> or <a href="http://docs.google.com" target="_blank">Google Docs</a>, which one would <em>you</em> choose?</p>
<p><a href="http://peepel.com" target="_blank">Peepel</a> is a new web office suite that just opened up its beta. It looks nice, clean, who knows, it might be better than Google Docs. But it’s irrelevant. It’s not Google, so it doesn’t matter. Maybe, maybe if it had some killer feature that Google Docs is missing, but “a true multiple windows system in an online desktop” is not going to do it. I’m sorry. People want to share their documents with other people. Before, that happened by e-mailing .docs, soon they will share a document through Google Docs.</p>
<p>The only place where web office suites will still matter are niches. A word processor for the blind, a word processor for the poet, a sound editor for the deaf. Hopefully they will be able to come up with better examples than these.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>422</wp:post_id>
		<wp:post_date>2007-04-04 10:27:19</wp:post_date>
		<wp:post_date_gmt>2007-04-04 08:27:19</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>peepel-more-web-offices</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Google Tech Talks</title>
		<link>http://zef.me/2007/02/26/google-tech-talks/</link>
		<pubDate>Mon, 26 Feb 2007 18:42:34 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/02/26/google-tech-talks/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>I think this is not really widely known as of yet. At least I wasn’t really aware of it. Google, on Google Video has a nice collection of Tech Talks. Talks (on video) by people working on interesting software projects. Of course there are a number of Python talks from Guido van Rossum (who works for Google right now), but there’s many others. Each of them is about an hour to an hour and a half. <a href="http://video.google.com/videosearch?q=tech+talks" target="_blank">You can find the list here</a>.</p>
<p>A selection of ones I watched or intend to watch:</p>
<ul>
<li><a href="http://video.google.com/videoplay?docid=2728972720932273543&amp;q=tech+talks" target="_blank">Ubuntu Linux</a></li>
<li><a href="http://video.google.com/videoplay?docid=-5182759758975402950&amp;q=tech+talks" target="_blank">Glimpse Inside a Metaverse: The Virtual World of Second Life</a></li>
<li><a href="http://video.google.com/videoplay?docid=6127548813950043200&amp;q=tech+talks" target="_blank">The Paradox of Choice — Why More Is Less</a></li>
<li><a href="http://video.google.com/videoplay?docid=4517640089762761598&amp;q=tech+talks" target="_blank">Are There Searche Engine Disruptive Ideas?</a></li>
<li><a href="http://video.google.com/videoplay?docid=236331448076587879&amp;q=tech+talks" target="_blank">Haiku: The Operating System</a></li>
<li>
<a href="http://video.google.com/videoplay?docid=6765603919277760697&amp;q=tech+talks" target="_blank">Camino</a> (Mac browser)</li>
</ul>
<p>Actually I’m only on page 3 out of 11 of these tech talks. I suggest <a href="http://video.google.com/videosearch?q=tech+talks" target="_blank">you have a look yourself for more interesting</a> ones ;)</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>487</wp:post_id>
		<wp:post_date>2007-02-26 19:42:34</wp:post_date>
		<wp:post_date_gmt>2007-02-26 18:42:34</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>google-tech-talks</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Structuring Your Notes with Stikkit</title>
		<link>http://zef.me/2007/03/20/structuring-your-notes-with-stikkit/</link>
		<pubDate>Tue, 20 Mar 2007 21:27:09 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/03/20/structuring-your-notes-with-stikkit/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>I recently found out about <a href="http://www.stikkit.com" target="_blank">stikkit</a> and have been thinking about it ever since. It’s premise looks very interesting to me. They take the idea of a post-it note, but start to discover structures in it. For example if you write (it’s all plain text):</p>
<pre>Stuff to do</pre>
<pre>- Go shopping<br>- Feed the dog<br>- Take a shower</pre>
<pre>Which in viewing mode will appear like this:</pre>
<pre>Then I can click the bullet and it will mark an item as done:</pre>
<pre>If I look at the source of the note again it has changed to:</pre>
<pre>Stuff to do</pre>
<pre>- Go shopping<br>+ Feed the dog<br>- Take a shower</pre>
<pre>They established this interaction between a view of the data and the data itself that interact with each other.</pre>
<pre>If you write down something in a note that looks like a date is being added to the calendar. If you write down something in a note that looks like an address, such as:</pre>
<pre>Susan Jacobs [sample stikkit]<br>232 First Street<br>Portland, OR 97209<br>503-555-2344<br>susan@valuesofn.com<br>http://www.valuesofn.com</pre>
<pre>Stikkit will recognize it as a "peep", change the colour of the note and add it to the address list.</pre>
<pre>Stikkit currently has three of these special "data types" inside notes: calendar dates, people and todos. This idea intrigued me. Can't it be made more generic? Why just these kinds of notes/kinds of data? Why not let users create these types themselves. This way somebody could start off by just scribbling down some things in notes, and then after a while when "note patterns" start to emerge, new note types can be created, so you essentially get a database of notes.</pre>
<pre>For example if one would write down this:</pre>
<pre>Name: Zef<br>Age: 23<br>City: Groningen<br>---<br>Name: Justyna<br>Age: 23<br>City: Poznan</pre>
<pre>This is probably something I could scribble down in a text document somewhere when I have to take notes quickly. But this is actually quite structured data. In fact it's <a href="http://www.zefhemel.com/archives/2004/10/30/yaml-because-xml-is-for-wussies" target="_blank">YAML data</a>. We could define a new type called Person which will have a name, age and city field. Once this type information is also "scribbled" down, we can start doing very interesting things with that. It just becomes a database. We can create views on the data and so on.</pre>
<pre>These are just some premature thoughts I thought I'd share. Welcome to my brain dump ;)</pre>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>495</wp:post_id>
		<wp:post_date>2007-03-20 22:27:09</wp:post_date>
		<wp:post_date_gmt>2007-03-20 21:27:09</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>structuring-your-notes-with-stikkit</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Gizmo: Not Bad After All</title>
		<link>http://zef.me/2007/03/23/gizmo-not-bad-after-all/</link>
		<pubDate>Fri, 23 Mar 2007 18:21:09 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/03/23/gizmo-not-bad-after-all/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>I found out about the <a href="http://www.gizmoproject.com" target="_blank">Gizmo Project</a> when I really had no use for it. Gizmo is a free Voice-over-IP program using the <a href="http://en.wikipedia.org/wiki/Session_Initiation_Protocol" target="_blank">SIP</a> protocol, which is an open standard for VoIP. At that time I used <a href="http://www.skype.com" target="_blank">Skype</a> which implemented its own proprietary VoIP protocol, but even with Skype I didn’t have that many people to call. That changed when I move to Dublin and when I got a girlfriend who lives about a thousand kilometers away.</p>
<p>We call on Skype for an hour at least every day. We like Skype a lot, but there’s a few problems. One problems that we’ve been having since a month or two is that when the internet connection goes bad we hear a <strong>very</strong> loud buzzing sound, the only way to stop it is hang up and call again, after which it might just happen again. Second of all we really would like to record a call sometimes. There is some software to do that, but it’s not a default feature. Other than that we kind of like voice mail and you have to pay for that with Skype.</p>
<p>A week or two ago I got an e-mail from Gizmo saying that version 3.0 was released. On top of Gizmo SIP calls you can now also call Google Talk, Yahoo! Messenger and Windows Live Messenger users. Cool, I thought and decided to install it again. I played with Gizmo before but had some connectivity problems. These seem to be solved now. My girlfriend and I have been calling with Gizmo a bit now and it works fine, the sound quality is just as good as Skype’s and we haven’t heard buzzing so far. Also you can easily record your conversations and leave voice mails for free (which are sent to the person by e-mail). There’s some other features such as your own ring tones, funny sounds you can play during the conversation, music playing while you put a call on hold and so on.</p>
<p>Another nice feature is the “All-Calls-Free” feature. When you use Gizmo regularly and so does your contact, and you or your contact sets their home numbers in their profile, you can make calls to this landline number (and in some countries also mobile number) for free.</p>
<p>Just like SkypeIn and SkypeOut there is also Gizmo Call In and Gizmo Call Out as you might have guessed, some prices seem the same, some are a bit more expensive than Skype, but still they are a good deal.</p>
<p>Another thing I really like about Gizmo is that Windows, Mac and Linux versions are more in sync. With Skype the Mac version is quite behind on the Windows version and I won’t even mention the Linux version, which looks like it’s still from 2000. About a week after Gizmo 3.0 for Windows was released there was a 3.0 for the Mac as well, which means I have all the same features as the Windows client, which is great.</p>
<p>Anyway, if you use VoIP and are an open standards fan (like me), I’d suggest you give Gizmo a try, it’s really pretty neat. If you want you can add me my Gizmo id is “zefhemel”, if you use some other SIP programme, my SIP number is: 1–747–666–3146</p>
<p><a href="http://www.gizmoproject.com/advanced-features.html" target="_blank">Here’s a nice list of Gizmo’s advanced features</a>.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>530</wp:post_id>
		<wp:post_date>2007-03-23 19:21:09</wp:post_date>
		<wp:post_date_gmt>2007-03-23 18:21:09</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>gizmo-not-bad-after-all</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Simpsons Linguistic Roundup</title>
		<link>http://zef.me/2007/03/19/simpsons-linguistic-roundup/</link>
		<pubDate>Mon, 19 Mar 2007 19:57:34 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/03/19/simpsons-linguistic-roundup/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>To show that I’m actually doing different stuff than computer science-related things, here’s a something linguistic that even many computer scientists will appreciate: <a href="http://heideas.blogspot.com/2007/03/third-annual-simpsons-st-patricks-day.html" target="_blank">The Third Annual Simpsons Linguistic Roundup</a>. One example:</p>
<blockquote>Bart’s watching a TV entertainment news broadcast called “Hip-Hoppenings”:</blockquote>
<blockquote>Rapping Anchor: Yo yo yo, here now the nuhzooz! The top artists of hip hop are comin’ to Springfield! This all-star concert, dubbed ‘Murder for Life’, features Da Glock-Pointers, Romeo Smooth, Queen Booty-Shakah, MC Champagne Millionaire and Assault Weapons magazine Man of the Year Alcatraz!<br>Bart (throwing gang symbols): Alcatraz is widespread! I’m talkin’ da junk!<br>Lisa (rolling her eyes): Just what we need. Another lame suburban kid who loves rap.<br>Bart: So? You like the blues!<br>Lisa (smugly): Yeah, but the blues are unpopular!<br>Bart (more symbols): Man, are you illin’!<br>Lisa: Rappers stopped saying illin’ twelve years ago!<br>Bart: I’m keepin’ it real!<br>Lisa: They stopped saying keepin’ it real three years ago.<br>Bart: Mom, Lisa’s dissin’ me!<br>Marge: Dissin’? Do rappers still say that?</blockquote>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>741</wp:post_id>
		<wp:post_date>2007-03-19 20:57:34</wp:post_date>
		<wp:post_date_gmt>2007-03-19 19:57:34</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>simpsons-linguistic-roundup</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>FireGPG, Finally!</title>
		<link>http://zef.me/2007/04/03/firegpg-finally/</link>
		<pubDate>Tue, 03 Apr 2007 17:44:28 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/04/03/firegpg-finally/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Look at <a href="http://firegpg.tuxfamily.org/index.php?page=home&amp;lang=en" target="_blank">this, doesn’t it look secure?</a></p>
<p>Personally, whenever I see a mention of signing or encrypting a mail message I’m like, whatever… Whenever I get an e-mail with a message digest to proof it hasn’t been changed by some evil third party I am like, pff, arrogant prick, who do you think you are assuming somebody even cares enough about you to change your e-mails? Do you honestly think I’m going to actually check this message hash or if this is done automatically that I’m going to take your mail more seriously? I don’t think so.</p>
<p>And honestly, if you would send business critical PGP encrypted contracts and stuff, would you really send it from Gmail? Come on.</p>
<p>Thankfully I hardly ever receive these “signed” e-mail messages, and if I do it’s usually from some nerd security fanatic, the kind that puts public keys on their business card to pick up girls (good luck with that).</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>899</wp:post_id>
		<wp:post_date>2007-04-03 19:44:28</wp:post_date>
		<wp:post_date_gmt>2007-04-03 17:44:28</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>firegpg-finally</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="cranky"><![CDATA[Cranky]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Pull Messaging</title>
		<link>http://zef.me/2007/04/03/pull-messaging/</link>
		<pubDate>Tue, 03 Apr 2007 14:15:22 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/04/03/pull-messaging/</guid>
		<description></description>
		<content:encoded><![CDATA[
<p>What makes <a href="http://twitter.com" title="Twitter" target="_blank">Twitter</a> fundamentally different from other messaging applications (and with that, similar to blogging) is that it is subscription based. Unlike with e-mail, who the readers of the message are is not determined by you, but by the readers themselves. Only people subscribed to (or visiting) your blog or Twitter account will read a message. That’s also why you don’t receive spam on Twitter or your feed reader, if you do that’s because you voluntarily subscribed to a feed containing spam. All you have to do to get rid of it is unsubscribe.<br> <br> Twitter is very simple currently, but I think either Twitter or soon-to-come Twitter clones will add functionality that opens a lot of new opportunity and will make it more than just a toy. The first thing is the ability to address individuals. This is already possible in Twitter to some extent through the Jabber and SMS text interface I think. You send Twitter “d username message” and message will be sent to only username. <a href="http://www.zefhemel.com/archives/2007/03/28/twitter-the-new-communication-platform" title="As I discussed before this opens a whole world of opportunity" target="_blank">As I discussed before this opens a whole world of opportunity</a>. Twitter, and this is important, only allows this if username is a friend or ‘follower’ of you, i.e. if username is subscribed to your messages. My guess is that soon it will be possible to create groups of users that you can address together. All of the people in your group will have to be friends or followers of course.<br> <br> With this subscription-based model you create an essentially spam-free messaging platform.<br> <br> It would get even more interesting if you can send individuals or groups special kinds of messages. Polls for example. Sometimes I want to have dinner with some friends. How I currently arrange this is by sending them an e-mail asking when they are available and where they want to go. I then collect this data and decide on a date and place, or if necessary send another e-mail with a more limited set of options asking for their opinion again. This is not very practical. There are some services that automate this process a bit more, but it is something that I would like to have in a messenger. So beyond normal text messages there could be other types of messages, such as date picker messages, poll messages and you can probably come up with others.<br> <br> Twitter messages, like IMs and e-mail have no context. It is not defined whether a message is a response to another message, sometimes this can be deduced from the order in which they appear or their content, but this makes discussions on Twitter pretty much impossible to follow. Therefore I think it would be nice if Twitter would keep track of which message is a reply to which. Public discussions and discussions within groups will be much easier as they can be displayed in a threaded structure.<br><br>Just a rather unstructured numbers ideas of where this new Twitter thing could head.<br><br>(I wrote and published this post from <a href="http://docs.google.com" title="Google Docs" target="_blank">Google Docs</a>, to see how that works.)</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>913</wp:post_id>
		<wp:post_date>2007-04-03 16:15:22</wp:post_date>
		<wp:post_date_gmt>2007-04-03 14:15:22</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>pull-messaging</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Flickr Technology</title>
		<link>http://zef.me/2007/03/31/flickr-technology/</link>
		<pubDate>Sat, 31 Mar 2007 15:21:05 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/03/31/flickr-technology/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p><a href="http://www.niallkennedy.com/blog/uploads/flickr_php.pdf" target="_blank">Over here</a> you can find a (slightly outdated) presentation given about <a href="http://www.flickr.com" target="_blank">Flickr</a>. Apparently it is implemented in PHP 4 using MySQL as a database. Some interesting stats from the presentation:</p>
<ul>
<li>60,000 lines of PHP4 code</li>
<li>60,000 lines of templates</li>
<li>70 custom smarty functions/modifiers</li>
<li>25,000 DB transactions/second at peak</li>
<li>1000 pages per second at peak</li>
</ul>
<p>Note these are outdated probably, but it’s nice to know for an indication. Somehow you expect that these kinds of sites use very fancy C++, Java, or whatever languages or frameworks, but that does not have to be the case.</p>
<p><a href="http://www.niallkennedy.com/blog/uploads/flickr_php.pdf" target="_blank">See the presentation here (PDF)</a>.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1065</wp:post_id>
		<wp:post_date>2007-03-31 17:21:05</wp:post_date>
		<wp:post_date_gmt>2007-03-31 15:21:05</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>flickr-technology</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>The April Fool’s Collection</title>
		<link>http://zef.me/2007/04/01/the-april-fools-collection/</link>
		<pubDate>Sun, 01 Apr 2007 07:46:09 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/04/01/the-april-fools-collection/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>I only just got up and the first three posts already cannot be trusted. Yes, it’s April’s Fool day again. Here’s some jokes I found already, I’ll update the list throughout the day as I find more, post yours in the comments:</p>
<ul>
<li>Mark Pilgrim: <a href="http://diveintomark.org/archives/2007/04/01/document-dot-wacko" target="_blank">document.wacko</a>
</li>
<li>Robert Scoble: <a href="http://scobleizer.com/2007/03/31/apple-collaborating-with-amazon-google-and-cingular-on-new-ireader/" target="_blank">Apple’s new iReader</a>
</li>
<li>Michael Arrington: <a href="http://www.techcrunch.com/2007/03/31/techcrunch-has-acquired-fuckedcompanycom/" target="_blank">TechCrunch acquired FuckedCompany</a>
</li>
<li>Google Operating System: <a href="http://googlesystem.blogspot.com/2007/03/google-writer.html" target="_blank">Google Writer</a>
</li>
<li>Seth Godin: <a href="http://sethgodin.typepad.com/seths_blog/2007/03/when_purple_cow.html" target="_blank">When Purple Cows go Mad</a>
</li>
<li>Google: <a href="http://googleblog.blogspot.com/2007/04/project-teaspoon.html" target="_blank">Project Teaspoon</a>
</li>
<li>Google: <a href="http://mail.google.com/mail/help/paper/more.html" target="_blank">Gmail Paper</a>
</li>
<li>Reddit: <a href="http://blog.reddit.com/2007/04/reddit-now-doubleplusgood.html" target="_blank">Reddit now doubleplusgood</a>
</li>
<li>Slashdot: <a href="http://slashdot.org/articles/07/03/31/2328233.shtml" target="_blank">Slashdot has Digg-like ratings</a>
</li>
<li>ThinkGeek: <a href="http://www.thinkgeek.com/index.shtml" target="_blank">8-bit tie and Wiihelp</a>
</li>
<li>WorldOfWarCraft: <a href="http://www.worldofwarcraft.com/info/items/tinfoilhat.xml" target="_blank">Tinfoil hat</a>
</li>
<li>Wikipedia: <a href="http://en.wikipedia.org/wiki/Main_Page" target="_blank">George Washington was an early inventor of instant coffee, and worked to ensure a full supply to soldiers fighting at the front.</a>
</li>
<li>AeroXP: <a href="http://www.aeroxp.org" target="_blank">Popular Vista site changed to Apple forum</a>
</li>
<li>The Independent: <a href="http://news.independent.co.uk/uk/health_medical/article2411405.ece" target="_blank">Grow your own viagra</a>
</li>
</ul>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1133</wp:post_id>
		<wp:post_date>2007-04-01 09:46:09</wp:post_date>
		<wp:post_date_gmt>2007-04-01 07:46:09</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-april-fools-collection</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>EMI Goes DRM-Free</title>
		<link>http://zef.me/2007/04/02/emi-goes-drm-free/</link>
		<pubDate>Mon, 02 Apr 2007 14:53:21 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/04/02/emi-goes-drm-free/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p><a href="http://www.techcrunch.com/2007/04/02/emi-apple-are-announcing-sale-of-non-drm-music/" target="_blank">TechCrunch</a>:</p>
<blockquote>EMI will offer all songs from its digital catalog without DRM. Testing earlier this year suggested people prefer non-DRM to DRM tracks 10:1. iTunes is first partner.</blockquote>
<blockquote>These songs will no longer be tied to iTunes and the iPod — any device that plays AAC format will play these songs.</blockquote>
<blockquote>Songs will be encoded at 256kbps AAC (current is 128kbps) and sold at $1.29 per song, $0.30 more per song than the current price. These will be offered along side the existing lower quality, DRM tracks, and consumers can choose.</blockquote>
<blockquote>Entire album purchases will stay at the same price, but have the higher audio quality and will be DRM free.</blockquote>
<blockquote>EMI music videos will be available DRM free with no change in price.</blockquote>
<blockquote>Customers who purchased tracks previously can upgrade to DRM free tracks for $0.30 per track.</blockquote>
<blockquote>Jobs says they are trying to do similar deals with other labels, and expects that 50% of all of their tracks sold will be DRM free by end of year.</blockquote>
<blockquote>Steve Jobs says that they are offering people nothing more than what they get when they buy a cd directly and rip it.</blockquote>
<p>This is great news!</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1266</wp:post_id>
		<wp:post_date>2007-04-02 16:53:21</wp:post_date>
		<wp:post_date_gmt>2007-04-02 14:53:21</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>emi-goes-drm-free</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Twitter: the New Communication Platform?</title>
		<link>http://zef.me/2007/03/28/twitter-the-new-communication-platform/</link>
		<pubDate>Wed, 28 Mar 2007 17:37:13 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/03/28/twitter-the-new-communication-platform/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>The first thing I thought when I saw <a href="http://twitter.com" target="_blank">Twitter</a> was, “meh, how is this new?” As so many people, I didn’t see it. But as time passed and people just can’t seem to stop talking about it and it even appeared <a href="http://www.ft.com/cms/s/d0ccbc46-daf7-11db-ba4d-000b5df10621.html" target="_blank">in the financial times</a>, me too started to see the power of this idea.</p>
<p>Twitter is a kind blogging system, but smaller, messages can just be 140 characters. They’re more like short SMS messages. This length is no coincidence: you can put messages on your twitter page by SMS texting it to some number. Twitter is <strong>extremely</strong> simple. All you can do is write a message:</p>
<p>Beside that you can add other Twitter users as your friends, the messages they write will appear on your home page as well. Other than that you can follow people (basically that is like a non-reciprocal friend or something). You can send and receive updates to and from twitter over the web, SMS and Jabber/GoogleTalk.</p>
<p>Soon it will also be able to send messages to individual users and that opens quite some potential. <a href="http://www.nik.com.au/archives/2007/03/27/twitter-as-a-communications-platform/" target="_blank">Nik Cubrilovic</a>:</p>
<blockquote>With this new functionality we can expect to soon see a number of services similar to those you can find at other SMS services such as Mozes. Services like weather (d weather 94027), news (d news headlines), search (d google nik) and much more.</blockquote>
<blockquote>The advantage that Twitter has is that it is a generic communications platform with social networking components. It can be accessed with SMS, Instant Messaging, the website itself and a plethora of applications that have already been built to read/write to Twitter. For potential service providers, Twitter has a rapidly growing base of users who originally signed up as a way to communicate with ‘real’ friends. These users have already registered their email addresses (for email in/out), mobile phones (for SMS in/out) and IM handles (for read/write via IM).</blockquote>
<p>This idea maybe has too much potential for one company to run the game, Twitter already is very slow as it is. Therefore people such as <a href="http://kosso.wordpress.com/2007/03/14/more-twittering/#addendum" target="_blank">kosso</a> and <a href="http://www.scripting.com/stories/2007/03/28/howBasicIsTwitter.html" target="_blank">Dave Winer</a> wonder if we shouldn’t create an open source twitter and standardize the APIs and let different Twitter “clones” interact with each other. Personally I would say: yes, we should standardize some kind of API, but I’m not sure if an open source twitter would be necessary. It would be kind of interesting to see what kind of companies would pop up implementing their own twitter-like services, that hopefully will be able to interact with other such services through the standard interface.</p>
<p>I spent much of the day thinking about Twitter and its potential and I do believe it’s huge. I have quite some ideas on improving this whole twitter thing and stuff you can do with it. I might just try out something myself, will have to see. Once again, interesting times!</p>
<p>Incidentally: <a href="http://twitter.com/zef" target="_blank">my Twitter page</a>.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1329</wp:post_id>
		<wp:post_date>2007-03-28 19:37:13</wp:post_date>
		<wp:post_date_gmt>2007-03-28 17:37:13</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>twitter-the-new-communication-platform</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Gmail gets Infinity+1 storage</title>
		<link>http://zef.me/2007/04/02/gmail-gets-infinity1-storage/</link>
		<pubDate>Mon, 02 Apr 2007 19:19:43 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/04/02/gmail-gets-infinity1-storage/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>This was posted on the 2nd of April so I assume it’s not an April Fool’s day joke. <a href="http://www.bbspot.com/News/2007/04/google-gmail-infinity-plus-one-storage.html" target="_blank">BBspot</a>:</p>
<blockquote>Mountain View, CA — Google announced today that soon customers of their Gmail service will have their storage size increased to “infinity plus one.” The announcement comes shortly after Yahoo’s announcement that their Yahoo mail customers would be given unlimited storage.</blockquote>
<blockquote>Greg Tomkins, an engineer at Google, is credited with coming up with the “infinity plus one” idea. “I was out in the yard when my kids ran up to me yelling at each other. My son said to my daughter, ‘I hate you to infinity.’ She replied, ‘I hate you to infinity plus one.’ And right then I knew I had the solution to competing with unlimited storage,” said Tomkins.</blockquote>
<p>It sounds like it could be true. Yahoo! mail does offer unlimited storage now and why would Google stay behind? And infinity+1 of space is a very typical thing for Google to pull. So, great news for Gmail users I would say.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1399</wp:post_id>
		<wp:post_date>2007-04-02 21:19:43</wp:post_date>
		<wp:post_date_gmt>2007-04-02 19:19:43</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>gmail-gets-infinity1-storage</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Advertising on Google Earth</title>
		<link>http://zef.me/2007/03/30/advertising-on-google-earth/</link>
		<pubDate>Fri, 30 Mar 2007 17:54:12 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/03/30/advertising-on-google-earth/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>The Dutch insurance company <a href="http://www.fbto.nl" target="_blank">FBTO</a> is putting its logo on the roof of its main office. The white lettering on a bright blue background should attract the attention of the users of <a href="http://www.google.com/earth" target="_blank">Google Earth</a> and Google Maps. The text, which spells “FBTO.NL”, the insurer’s company website, is very readable from a 300 meter height. “Within a few months the satellite will fly past here again”, says a FBTO spokesperson, “so we shall see how it will work out.”</p>
<p>The enormous painting is 30 meters long and 10 meters wide. According to the FBTO spokesperson FBTO is the first to target its advertising towards space.</p>
<p>Is this the beginning of a new trend?</p>
<p>(Source: <a href="http://www.dbvh.nl" target="_blank">Dagblad van het Noorden</a>)</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1436</wp:post_id>
		<wp:post_date>2007-03-30 19:54:12</wp:post_date>
		<wp:post_date_gmt>2007-03-30 17:54:12</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>advertising-on-google-earth</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Freebase</title>
		<link>http://zef.me/2007/03/10/freebase/</link>
		<pubDate>Sat, 10 Mar 2007 16:07:41 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/03/10/freebase/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p><a href="http://www.freebase.com/" target="_blank">Freebase</a> is a new semantic web database of, well, everything. I think a kind of semantic <a href="http://www.wikipedia.org" target="_blank">Wikipedia</a> would not be a bad name for it. I have been doing some things with semantic web technologies for my M.Sc. thesis and I got to see the importance of metadata.</p>
<p><a href="http://radar.oreilly.com/archives/2007/03/freebase_will_p_1.html" target="_blank">Tim O’Reilly</a> has given Freebase a try and is intrigued. <a href="http://www.techcrunch.com/2007/03/09/this-is-cool-unless-it-achieves-consciousness-and-kills-us-all/" target="_blank">Michael Arrington</a> also writes about it. Michael refers to it as a kind of <a href="http://base.google.com" target="_blank">Google Base</a> done right. I think very few people actually ever understood the power of the Google Base idea, myself included.</p>
<p>The problem I see with freebase is that it is a completely centralized model. They pull in data from Wikipedia and lots of other sources. Sure everything is licensed under a <a href="http://creativecommons.org/" target="_blank">Creative Commons</a> license, but I fear that it is too ambitious for a startup to want to be <strong>the</strong> database of everything. Basically a new version of the internet (web 3.0?) in one place. Wasn’t the power of the web that it was decentralized, do we not need that anymore all of the sudden?</p>
<p>Anyway, I signed up for the account waiting list <a href="http://www.freebase.com" target="_blank">on the site</a>.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1618</wp:post_id>
		<wp:post_date>2007-03-10 17:07:41</wp:post_date>
		<wp:post_date_gmt>2007-03-10 16:07:41</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>freebase</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Good Morning! And in Case I Don’t See Ya…</title>
		<link>http://zef.me/2007/03/29/good-morning-and-in-case-i-dont-see-ya/</link>
		<pubDate>Thu, 29 Mar 2007 13:38:09 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/03/29/good-morning-and-in-case-i-dont-see-ya/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Remember <a href="http://www.imdb.com/title/tt0120382/" target="_blank">the Truman Show</a>, the movie made barely 10 years ago? Well something very similar has now actually happened, but not without the “Truman” (his name is Justin) knowing about it. Justin is a guy walking around with a camera plastered to his face that is broadcasting live to his website: <a href="http://www.justin.tv" target="_blank">Justin.TV</a>:</p>
<p><a href="http://justin.tv/widgets/embedded.swf" target="_blank">http://justin.tv/widgets/embedded.swf</a></p>
<p>And he won’t take it off until he dies. We’ll see about that.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1653</wp:post_id>
		<wp:post_date>2007-03-29 15:38:09</wp:post_date>
		<wp:post_date_gmt>2007-03-29 13:38:09</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>good-morning-and-in-case-i-dont-see-ya</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Daily Show: YouTube vs Viacom</title>
		<link>http://zef.me/2007/03/24/daily-show-youtube-vs-viacom/</link>
		<pubDate>Sat, 24 Mar 2007 21:49:18 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/03/24/daily-show-youtube-vs-viacom/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>A great <a href="http://www.ifilm.com/video/2835488/show/17676" target="_blank">fragment of the Daily Show</a> on the YouTube vs Viacom lawsuit. Basically Viacom is suing Google for $1 billion because of copyright infringement, as people uploaded lots of Viacom stuff (Viacom owns, among other things, Comedy Central which creates The Daily Show and The Colbert Report).</p>
<p><a href="http://www.ifilm.com/video/2835488/show/17676" target="_blank">Watch it</a>.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1673</wp:post_id>
		<wp:post_date>2007-03-24 22:49:18</wp:post_date>
		<wp:post_date_gmt>2007-03-24 21:49:18</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>daily-show-youtube-vs-viacom</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>New Design, New Schedule</title>
		<link>http://zef.me/2007/04/04/new-design-new-schedule/</link>
		<pubDate>Wed, 04 Apr 2007 15:41:52 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/04/04/new-design-new-schedule/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>As you may have noticed my posting schedule changed a bit, before it was at the very most once a day (sometimes once a week, or even couple of weeks), now it’s sometimes a couple of times a day. Trying something, we’ll see how it works out.</p>
<p>With this change I also switched to a new design for ZefHemel.com. I use <a href="http://www.bloggingpro.com/archives/2007/04/03/wordpress-theme-release-insense/" target="_blank">InSense</a>, a very pretty WordPress theme with some changes to suit my needs.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1725</wp:post_id>
		<wp:post_date>2007-04-04 17:41:52</wp:post_date>
		<wp:post_date_gmt>2007-04-04 15:41:52</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>new-design-new-schedule</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Django: Naming URL Patterns</title>
		<link>http://zef.me/2007/04/10/django-naming-url-patterns/</link>
		<pubDate>Tue, 10 Apr 2007 08:39:14 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/04/10/django-naming-url-patterns/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Alright, this is just to those who use <a href="http://www.djangoproject.com" target="_blank">Django</a> to develop web-applications in Python. The rest can just stop reading.</p>
<p>Stop. Reading.</p>
<p>Considering you’re still reading this, let me just ask a simple Python question. What will the following line output?</p>
<pre>print apply(lambda a: a*a, range(10))</pre>
<p>Alright, if your answer was anything else than</p>
<pre>Traceback (most recent call last):<br>  File "&lt;stdin&gt;", line 1, in ?<br>TypeError: &lt;lambda&gt;() takes exactly 1 argument (10 given)</pre>
<p>you’d better stop reading this post, you clearly don’t know anything about Python.</p>
<p>Ok, I assume only realy Djangoers are still reading now.</p>
<p>Django is getting <a href="http://www.djangoproject.com/documentation/url_dispatch/#naming-url-patterns" target="_blank">Named URL Patterns!</a> Which means you don’t have to construct URLs yourself anymore (/bla/topic/{{ topic.id }} stuff), but they can be constructed from the information you have in your urls.py. Haha!</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>140</wp:post_id>
		<wp:post_date>2007-04-10 10:39:14</wp:post_date>
		<wp:post_date_gmt>2007-04-10 08:39:14</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>django-naming-url-patterns</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Easter Story</title>
		<link>http://zef.me/2007/04/08/easter-story/</link>
		<pubDate>Sun, 08 Apr 2007 10:41:18 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/04/08/easter-story/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Today’s youth has forgotten the real Easter Story. The story from which the Easter tradition originates: the death and return of Jebus, the Easter bunny and colored eggs. It’s a pity, because it’s a nice children’s story, one that should not be forgotten.</p>
<p>What? You don’t know the story either? Alright, let me tell you.</p>
<p>Once upon a time, about two thousand years ago, there was a special man. His name was Jebus and he was about thirty years old. He was a very interesting person, his father was a carpenter and learned his son everything he knew. His mother, Mary, was a house wife, there was not much interesting about her. Jebus could build anything you would want: tables, chairs, desks, it really was quite impressive. But Jebus’ skills were much greater than just carpeting. He became famous for being able to cut bread into many, many pieces by hand without using a knife. Also, he was the best, the very best at ice skating.</p>
<p>The king of the country that Jebus lived in didn’t quite like how popular Jebus was. He was very jealous of him. He was jealous enough to want… to kill him. Yes, the king was a very angry and evil man. It was hard to find out where Jebus would go before he got there. He went from place to place on his ice skates and fast and clever as he was, if the king thought he was going to the right, he could easily turn and go to the left instead. Jebus had many friends who often came along and skated with him. One of them was Jubas. He had been skating since he was a little kid. His father had been skating champion and his mother was great at ice dancing. Jubas’ parents were very demanding. They figured that because Jubas was the son of two skating champions, he would have to be the best ice skater in the world. And Jubas, indeed, was the best ice skater in the country, until Jebus came along. Jubas was extremely jealous. Still he followed Jebus wherever he went, hoping to discover his secret.</p>
<p>Jubas followed Jebus for three years, but never found Jebus’ secret. Jubas had enough of it. He knew where Jebus would go next and decided to tell the king about it. The king was very happy with Jubas telling him and gave him a lot of gold for it. But Jubas felt really bad accepting the gold. His parents always told him gold is something you win, not something you get for betraying Jebus. Still, he took the money, he thought he could use it to buy better ice skates, his current ones were getting really old. The king told Jubas to point out who Jebus was by kissing him on the cheek.</p>
<p>That Thursday, as Jebus and his friends had dinner, Jebus had some bad news. He said he would be gone soon. One of his friends was going to betray him that evening and he would be killed. The good news was that Jebus intended to return to life on the third day after his death. Jebus’ friends where confused. Who would betray Jebus? And for what? Jubas was also there and started to feel bad. How did Jebus know he was going to betray him, he thought. Still, Jubas couldn’t call it off and kissed Jebus on the cheek. The king’s guards came and arrested Jebus.</p>
<p>When Jebus came to the king on Friday, the king was very angry. He asked Jebus to tell him why he was so popular. What his secret was. Jebus was more popular than the king himself! And clearly, that was not how it was supposed to be. The king asked Jebus how to cut the bread into pieces with his hands. He asked how to build the marvelous chairs he made. He also asked how he could skate so well. Jebus did not answer. This made the king even more angry. He said he would teach him a lesson by killing him. That evening two guards nailed Jebus to a cross. His friends were there, but were afraid to do anything about it. Jebus’ mother, Mary and his girlfriend, also Mary, were there too. They were very sad and cried. Jebus died quickly.</p>
<p>Jebus’ friends couldn’t stop crying. What would they do without Jebus? He always had been so nice to them. He learned them new skating tricks and always gave them plenty to eat. For their birthdays they often got furniture. Where would they get such nice furniture now? They really were lost without him. They didn’t do anything during the whole of Saturday. They cried and told each other stories about all the adventures they had with Jebus. Then when it got late, they fell asleep.</p>
<p>The next morning Jebus’ friends decided to visit Jebus’ grave. Jebus had been buried in a cave, at the top of the mountain. It was quite a climb to get to it. When they finally arrived they saw that the grave had been opened. That was surprising. They decided to go in. But what had happened? Jebus was gone! Suddenly Jebus’ friends heard a voice from their right. There sat a very big bunny rabbit with a basket on his back. He told them he had been sitting there for hours, waiting for them to come. The friends asked where Jebus had gone. The bunny wondered if they forgot what Jebus had said the evening he was arrested. They did. The bunny sighed. He reminded them that Jebus would get back to life on the third day. Today was Sunday, so that was the third day. The friends were very happy. They asked the bunny where Jebus had gone. The bunny said it was not that simple. Jebus had been reborn. Jebus’ friends were confused. It means you are born again, the bunny explained, but the friends still did not quite understand. The bunny explained even more. Jebus had been reborn inside an egg, like a chick. So what they should do is try to find the egg from which Jebus had been born again. The friends understood, but where would they look for this egg? The bunny had a mysterious look on his face. He didn’t say anything. The next moment the bunny was gone.</p>
<p>Jebus’ friends decided to start looking. Without much effort they found an egg. That was easy, they thought. But how would they know if Jebus was in there? It was quite small. One of them, John, decided to put his ear on the egg and listen if he heard anything inside. He heard something, a very high squeaking. Then something unexpected happened. The egg broke… and out came a little chick. It was bright yellow. John hesitated. Was… was this Jebus? His friends started laughing. Of course it was not, Jebus was not a chick. They continued looking. They decided to fan out, to find Jebus’ egg quicker. It turned out there were a lot of eggs around. They put their ears on them to listen. John was followed by the little yellow chick everywhere he looked. When John looked behind him the chick quickly hid behind a rock.</p>
<p>Instead of the chick, what he saw was that Pete, another of Jebus’ friends was listening to an egg that John already checked before. He yelled to Pete that he had already listened to that egg and Jebus was not in there. Pete didn’t know, how could he? Then Pete came up with an idea. He quickly ran home and came back with loads of buckets with paint in different colors. Blue. Red. Yellow. Orange. Purple. Pete’s plan was that after you listened if Jebus was inside an egg, you would paint it so that it was clear to the others that you had checked it and Jebus was not in there. It was a great plan.</p>
<p>John, Pete and their friends had started to look at the West side of the mountain, but with little luck. What they did find, however, were lots of little chicks which were following them around everywhere they went. John thought it was really<br>annoying. The two Maries, who also helped looking, thought they were cute. After they looked West, North and South of the mountain, finally they started to look East. The eggs they found there were different. They were much bigger. It sometimes happened that someone would accidentally break an egg while listening if Jebus was in there. When this happened at the East side of the mountain they found out that the eggs were made of… chocolate! Others were made of other kinds of candy. The friends got really excited and started to eat many of the eggs. They had gotten quite hungry from all the searching.</p>
<p>Then, all of the sudden John stopped and looked amazed at an enormous egg. Pete, who was listening to an egg right behind John, hadn’t noticed it. John tapped Pete on the shoulder to point out what he had found. They were both amazed. The others joined them.</p>
<p>The egg was gigantic. It was brown and had a ribbon around it, but at the side the egg was broken, there was a hole. Pete and Mary decided to look inside. It was very dark. They decided to break the egg a bit more to let some light in. Then they saw there, lying in the middle of the egg: Jebus’ ice skates. They had found… the Easter egg.</p>
<p>And that’s the Easter Story. Happy Easter everybody!</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>241</wp:post_id>
		<wp:post_date>2007-04-08 12:41:18</wp:post_date>
		<wp:post_date_gmt>2007-04-08 10:41:18</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>easter-story</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Python at Google</title>
		<link>http://zef.me/2007/04/04/python-at-google/</link>
		<pubDate>Wed, 04 Apr 2007 18:10:55 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/04/04/python-at-google/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>No, not <a href="http://www.python.org" target="_blank">Python</a>… <a href="http://www.kingsnake.com/ihs/I.H.S.%202005%20PHOTO%20CONTEST/The%20big%20mouth%20of%20Burmese%20python%20-%20Michael%20D.%20Kern%20-%20WATCH%20OUT!,%20SM.jpg" target="_blank">Python</a>!</p>
<blockquote>Sent: Sunday, April 01, 2007 10:24 PM<br>Subject: [Everyone-ny] Pet Snake Missing in NYC office</blockquote>
<blockquote>Dear Googlers:</blockquote>
<blockquote>The timing of this email could not be more awkward. Over the weekend, a pet snake belonging to a Googler was released from its cage in a 4th floor cubicle near the Tech Stop. The snake is a 3-foot long, brown and grey ball python named Kaiser. Ball pythons are nonvenomous and are commonly kept as pets. Our exterminator, with Google’s security team and the snake’s owner are searching for it. Should you see the snake, please do not attempt to touch it or pick it up. Call security immediately.</blockquote>
<blockquote>Tempting as it might be, this is not an April Fool’s joke! We are sending this message to alert you to the situation and to let you know what to do in the event you see the snake. We will send an update to all New York Googlers at 8 a.m. on Tuesday, April 2 and post signs at office entrances. Should you have any particular concerns, please contact your immediate supervisor.</blockquote>
<blockquote>As a reminder, the pets policy of Google New York allows only dogs to be brought into the office by Googlers. Permission must be obtained from management before any other type of animal can be brought onto the premises.</blockquote>
<p>And a day later:</p>
<blockquote>Sent: Monday, April 02, 2007 8:41 AM<br>Subject: [Everyone-ny] Pet Snake still Missing in NY office</blockquote>
<blockquote>Dear Googlers:</blockquote>
<blockquote>I want to let you all know that Kaiser, the 3-foot ball python, is still missing from its tank on the 4th floor next to the Tech Stop. This morning, we will be putting up signs in the microkitchens with a photograph of a ball python so that you know what Kaiser looks like. Ball pythons tend to be shy and to hide themselves in small, dark spaces, while curled into a ball (hence the name “ball” python). Again, should you spot Kaiser, please contact security immediately.</blockquote>
<blockquote>Thank you,</blockquote>
<p><a href="http://valleywag.com/tech/rumormonger/python-on-the-loose-at-google-ny-248978.php" target="_blank">Source</a></p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>263</wp:post_id>
		<wp:post_date>2007-04-04 20:10:55</wp:post_date>
		<wp:post_date_gmt>2007-04-04 18:10:55</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>python-at-google</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Microsoft is Dead</title>
		<link>http://zef.me/2007/04/07/microsoft-is-dead/</link>
		<pubDate>Sat, 07 Apr 2007 07:46:35 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/04/07/microsoft-is-dead/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p><a href="http://www.paulgraham.com/microsoft.html" target="_blank">Paul Graham</a>:</p>
<blockquote>A few days ago I suddenly realized Microsoft was dead. I was talking to a young startup founder about how Google was different from Yahoo. I said that Yahoo had been warped from the start by their fear of Microsoft. That was why they’d positioned themselves as a “media company” instead of a technology company. Then I looked at his face and realized he didn’t understand. It was as if I’d told him how much girls liked Barry Manilow in the mid 80s. Barry who?</blockquote>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>343</wp:post_id>
		<wp:post_date>2007-04-07 09:46:35</wp:post_date>
		<wp:post_date_gmt>2007-04-07 07:46:35</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>microsoft-is-dead</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Time for a New PC?</title>
		<link>http://zef.me/2007/04/28/time-for-a-new-pc/</link>
		<pubDate>Sat, 28 Apr 2007 12:50:12 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/04/28/time-for-a-new-pc/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p><a href="http://ninjapirate.com/newcomputer.html" target="_blank">Funny post</a>:</p>
<blockquote>Every day millions of people struggle with slow computers. They don’t realize that buying a new computer is fast, easy, and has nothing to do with giving in to consumer culture by repeatedly buying faster and faster computers to do the same basic tasks they’ve been doing for years.</blockquote>
<blockquote>Let’s face it — an old 3Ghz computer is no longer sufficient to handle people’s day-to-day needs like chatting, checking email, and playing Sudoku. And yet most users are overwhelmed that they don’t know what to do about it. As you can see by these testimonials</blockquote>
<p><a href="http://ninjapirate.com/newcomputer.html" target="_blank">Read the rest</a>.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>549</wp:post_id>
		<wp:post_date>2007-04-28 14:50:12</wp:post_date>
		<wp:post_date_gmt>2007-04-28 12:50:12</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>time-for-a-new-pc</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Principles of Economy</title>
		<link>http://zef.me/2007/04/16/principles-of-economy/</link>
		<pubDate>Mon, 16 Apr 2007 14:48:13 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/04/16/principles-of-economy/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Here’s a great video of the “Standup economist”:</p>
<a href="https://www.youtube.com/v/VVp8UGjECt4">https://www.youtube.com/v/VVp8UGjECt4</a>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>624</wp:post_id>
		<wp:post_date>2007-04-16 16:48:13</wp:post_date>
		<wp:post_date_gmt>2007-04-16 14:48:13</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>principles-of-economy</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="video"><![CDATA[Video]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>To Oxford</title>
		<link>http://zef.me/2007/04/28/to-oxford/</link>
		<pubDate>Sat, 28 Apr 2007 18:51:36 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/04/28/to-oxford/</guid>
		<description></description>
		<content:encoded><![CDATA[
<p>Tomorrow morning I’ll be getting up at 4.20 a.m. to go to Oxford (UK). I’ll be going there for a one-week study trip. Really looking forward to it (except for the getting up). Blog to you in a week!</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>643</wp:post_id>
		<wp:post_date>2007-04-28 20:51:36</wp:post_date>
		<wp:post_date_gmt>2007-04-28 18:51:36</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>to-oxford</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="personal"><![CDATA[Personal]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>No one belongs here more than you</title>
		<link>http://zef.me/2007/04/10/no-one-belongs-here-more-than-you/</link>
		<pubDate>Tue, 10 Apr 2007 08:29:01 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/04/10/no-one-belongs-here-more-than-you/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>A very interesting way of… promoting a book. Just <a href="http://noonebelongsheremorethanyou.com/" target="_blank">have a look</a>.</p>
<p><a href="http://mirandajuly.com" target="_blank">Here’s the author’s website</a>.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>658</wp:post_id>
		<wp:post_date>2007-04-10 10:29:01</wp:post_date>
		<wp:post_date_gmt>2007-04-10 08:29:01</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>no-one-belongs-here-more-than-you</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Google Apps Video</title>
		<link>http://zef.me/2007/04/20/google-apps-video/</link>
		<pubDate>Fri, 20 Apr 2007 10:47:50 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/04/20/google-apps-video/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Google explains how Google Apps are useful:</p>
<a href="https://www.youtube.com/v/wY2bpr1TAA4">https://www.youtube.com/v/wY2bpr1TAA4</a>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>807</wp:post_id>
		<wp:post_date>2007-04-20 12:47:50</wp:post_date>
		<wp:post_date_gmt>2007-04-20 10:47:50</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>google-apps-video</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="video"><![CDATA[Video]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Python as a First Language</title>
		<link>http://zef.me/2007/04/05/python-as-a-first-language/</link>
		<pubDate>Thu, 05 Apr 2007 16:01:37 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/04/05/python-as-a-first-language/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p><a href="http://mcsp.wartburg.edu/zelle/python/python-first.html" target="_blank">John M. Zelle, Wartburg College</a>:</p>
<blockquote>Currently, there is little consensus about which programming language is most appropriate for introductory computer science classes. Most schools use a traditional system programming language such as C, C++, Java, or Ada in CS1 and CS2. However, scripting languages such as Tcl, Perl and Python are becoming increasingly popular software development tools. This article discusses the advantages of using a scripting language as the first language in the computer science curriculum. Scripting languages are simpler, safer and more flexible than system languages. Python in particular emerges as a near ideal candidate for a first programming language.</blockquote>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>841</wp:post_id>
		<wp:post_date>2007-04-05 18:01:37</wp:post_date>
		<wp:post_date_gmt>2007-04-05 16:01:37</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>python-as-a-first-language</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Chicken</title>
		<link>http://zef.me/2007/04/16/chicken/</link>
		<pubDate>Mon, 16 Apr 2007 15:07:45 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/04/16/chicken/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Chicken, chicken, chicken.</p>
<a href="https://www.youtube.com/v/yL_-1d9OSdk">https://www.youtube.com/v/yL_-1d9OSdk</a>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>876</wp:post_id>
		<wp:post_date>2007-04-16 17:07:45</wp:post_date>
		<wp:post_date_gmt>2007-04-16 15:07:45</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>chicken</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="video"><![CDATA[Video]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Movitational Techniques with David Brent</title>
		<link>http://zef.me/2007/04/16/movitational-techniques-with-david-brent/</link>
		<pubDate>Mon, 16 Apr 2007 15:13:40 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/04/16/movitational-techniques-with-david-brent/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>It seems to be Video Monday. Here’s another one from my favourite TV series The Office (the original BBC version):</p>
<a href="https://www.youtube.com/v/pknvdBlOels">https://www.youtube.com/v/pknvdBlOels</a>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1069</wp:post_id>
		<wp:post_date>2007-04-16 17:13:40</wp:post_date>
		<wp:post_date_gmt>2007-04-16 15:13:40</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>movitational-techniques-with-david-brent</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="video"><![CDATA[Video]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Ms. Dewey</title>
		<link>http://zef.me/2007/04/07/ms-dewey/</link>
		<pubDate>Sat, 07 Apr 2007 10:01:23 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/04/07/ms-dewey/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p><a href="http://www.msdewey.com/" target="_blank">Ms. Dewey</a> is a new search lady. You can go to her website and ask her a question, if you’re lucky (i.e. if you ask about “art”, “country” or some other general term), she will tell you something about it. If you’re unlucky she will tell you she has nothing to say about that or give you some random wisdom which has no relevancy whatsoever.</p>
<p>Next to her you will see the search results of your query from <a href="http://www.live.com" target="_blank">Live search</a>.</p>
<p>Pretty pointless, but fun for about 10 minutes.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1140</wp:post_id>
		<wp:post_date>2007-04-07 12:01:23</wp:post_date>
		<wp:post_date_gmt>2007-04-07 10:01:23</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ms-dewey</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Prom Queen</title>
		<link>http://zef.me/2007/04/07/prom-queen/</link>
		<pubDate>Sat, 07 Apr 2007 18:37:30 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/04/07/prom-queen/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Interesting things are happening in the Internet TV space. Its newest show? <a href="http://www.promqueen.tv/" target="_blank">Prom Queen</a>.</p>
<p>It’s a teenage drama series. Each episode effectively is about a minute and a half long. There will be 80 episodes. I watched the first 6 episodes and it’s OK, it’s not really my kind of series, but I wouldn’t be surprised if it will be a big hit with teenagers. It’s very professionally produced. I certainly believe there’s a future in these short episode series.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1205</wp:post_id>
		<wp:post_date>2007-04-07 20:37:30</wp:post_date>
		<wp:post_date_gmt>2007-04-07 18:37:30</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>prom-queen</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Fast Machine for Email</title>
		<link>http://zef.me/2007/04/05/fast-machine-for-email/</link>
		<pubDate>Thu, 05 Apr 2007 15:44:20 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/04/05/fast-machine-for-email/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Hi, my name is Greg. I like email, I email a lot. But email is really slow, ya know? I’m like waiting ages for my mail to send. Thats not gansta. So I need a new mailingmachine. Now Apple came out with a new <a href="http://www.apple.com/macpro/" target="_blank">Mac Pro</a></p>
<p>Dunnit look cool? You’re all like looking up to it? It has all of them bullet halls all over it? That’s phat.</p>
<p>It has like 8 cores, dunno what them are but it sounds like the shit right? They say a core is like a small processer but cooler. And I’m cool, so thats exactly what I need. With eight of them cores I figure I can send like 8 emails simelten… at the same time. That I figure has to be at least 5 times more I do now.</p>
<p>Ofcourse I ain’t no sissy, so I maxed at that bitch out like theres no tomorrow. Now I got plenty space for my emails and Im sure they will sent like crazy!</p>
<p>With them two 30 insh moniters I can type two emails at the same time y’all! I had to buy the stupid “USB modem” thing, because my momma wont buy me DSL. And you know whats great about them Apple guys? They ship you all this stuff FOR FREE! Thats what Im talkin’ about. Thats an offer ya cant refuse.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1352</wp:post_id>
		<wp:post_date>2007-04-05 17:44:20</wp:post_date>
		<wp:post_date_gmt>2007-04-05 15:44:20</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>fast-machine-for-email</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="because-i-care"><![CDATA[Because I Care]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>More WebFS</title>
		<link>http://zef.me/2007/05/07/more-webfs/</link>
		<pubDate>Mon, 07 May 2007 07:15:23 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/05/07/more-webfs/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>I’m back from Oxford! It was great.</p>
<p>I feared for a bit that my <a href="http://www.zefhemel.com/archives/2007/03/04/webfs" target="_blank">WebFS</a> idea was dead, which would be kind of a pity. But it was picked up by some people, in particular <a href="http://www.nik.com.au/" target="_blank">Nik Cubrilovic</a> (of <a href="http://www.omnidrive.com" target="_blank">OmniDrive</a>). He’s created a <a href="http://webfs.omnidrive.com/HomePage" target="_blank">WebFS wiki</a> and <a href="http://groups.google.com/group/webfs-discuss" target="_blank">mailing list</a>. It’s still early, but it’s kinda nice to see things you say are taken seriously. Even <a href="http://www.scripting.com/stories/2007/04/30/webfs.html" target="_blank">Dave Winer</a> posted about it.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1422</wp:post_id>
		<wp:post_date>2007-05-07 09:15:23</wp:post_date>
		<wp:post_date_gmt>2007-05-07 07:15:23</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>more-webfs</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>If You Need Anything</title>
		<link>http://zef.me/2007/04/07/if-you-need-anything/</link>
		<pubDate>Sat, 07 Apr 2007 08:43:26 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/04/07/if-you-need-anything/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>I was just watching a fragment of Demetri Martin on Youtube. If you watch the Daily Show you may know him. The video is entertaining, but there was one joke that I really liked:</p>
<p>I went to a clothing store. There was a girl there, helping me. I picked some clothes and she pointed me to the dressing room. She said, “if you need anything, my name is Jill.” “That’s amazing”, I thought, “I never met a girl with a conditional identity before. What if I don’t need help?” “Then it’s Eugene.”</p>
<a href="https://www.youtube.com/v/XiFrfeJ8dKM">https://www.youtube.com/v/XiFrfeJ8dKM</a>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1460</wp:post_id>
		<wp:post_date>2007-04-07 10:43:26</wp:post_date>
		<wp:post_date_gmt>2007-04-07 08:43:26</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>if-you-need-anything</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Micro Investments, Good Causes</title>
		<link>http://zef.me/2007/04/19/micro-investments-good-causes/</link>
		<pubDate>Thu, 19 Apr 2007 08:23:54 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/04/19/micro-investments-good-causes/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p><a href="http://blog.mattmecham.com/archives/2007/04/investing_in_poverty.html" target="_blank">Matt Mecham</a>:</p>
<blockquote>
<a href="http://www.kiva.org/" target="_blank">Kiva</a> is a website that allows one to invest in companies located in developing parts of the world. In a nutshell, you offer an interest free micro-loan (from $25 upwards) to pre-vetted companies registered with the website. When the company has enough lenders, they are given the money with a view to paying it back.</blockquote>
<blockquote>Personally, I think this is a break-out idea that can have a real impact on poverty in developing countries. Small donations to large organizations can be frittered away and make little impact into helping the cause they support but loaning money directly to people trying to start up or expand their small businesses will really help.</blockquote>
<blockquote>Selfishly, it also makes one feel good knowing that you’ve helped a small business and you may even get your money back to withdraw or re-invest. So far Kiva has a 100% repayment rate although you should accept that you may not get your money back.</blockquote>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1504</wp:post_id>
		<wp:post_date>2007-04-19 10:23:54</wp:post_date>
		<wp:post_date_gmt>2007-04-19 08:23:54</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>micro-investments-good-causes</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>There’s Something Wrong With The Sheep!</title>
		<link>http://zef.me/2007/04/06/theres-something-wrong-with-the-sheep/</link>
		<pubDate>Fri, 06 Apr 2007 13:02:33 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/04/06/theres-something-wrong-with-the-sheep/</guid>
		<description></description>
		<content:encoded><![CDATA[

<a href="https://www.youtube.com/v/XvjJBHk9Yrs">https://www.youtube.com/v/XvjJBHk9Yrs</a><p>Best. Movie. Ever.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1563</wp:post_id>
		<wp:post_date>2007-04-06 15:02:33</wp:post_date>
		<wp:post_date_gmt>2007-04-06 13:02:33</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>theres-something-wrong-with-the-sheep</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>TV Shows (Mac)</title>
		<link>http://zef.me/2007/04/06/tv-shows-mac/</link>
		<pubDate>Fri, 06 Apr 2007 13:06:38 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/04/06/tv-shows-mac/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p><a href="http://www.zefhemel.com/archives/2006/10/23/tv-torrent-feeds" target="_blank">It’s here</a>.</p>
<p><a href="http://tvshows.sourceforge.net/" target="_blank">TVShows</a>:</p>
<blockquote>TVShows is a Mac OS X application that automatically downloads your favourite shows. You don’t need anymore to manually download torrent files, TVShows does it for you. Manage your subscriptions and preferences from within the TVShows application, and TVShows takes care of the rest: a background process is automatically launched at a regular interval to check for new episodes.</blockquote>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1674</wp:post_id>
		<wp:post_date>2007-04-06 15:06:38</wp:post_date>
		<wp:post_date_gmt>2007-04-06 13:06:38</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>tv-shows-mac</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Jesus Came Back and He’s a Phone Now</title>
		<link>http://zef.me/2007/06/29/jesus-came-back-and-hes-a-phone-now/</link>
		<pubDate>Fri, 29 Jun 2007 14:55:40 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/06/29/jesus-came-back-and-hes-a-phone-now/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Today is the day that will go into history as the launch of the best thing since slide bread: the release of the <a href="http://www.apple.com/iphone" target="_blank">iPhone</a>, or the <a href="http://www.google.com/search?q=jesus+phone&amp;ie=utf-8&amp;oe=utf-8&amp;aq=t&amp;rls=org.mozilla:en-US:official&amp;client=firefox-a" target="_blank">Jesus Phone</a> as it is often referred to.</p>
<p>We’ll see how it will play out. In the meantime <a href="http://www.pvponline.com/article/3075/tue-jan-09" target="_blank">here’s a nice comic</a>.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>128</wp:post_id>
		<wp:post_date>2007-06-29 16:55:40</wp:post_date>
		<wp:post_date_gmt>2007-06-29 14:55:40</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>jesus-came-back-and-hes-a-phone-now</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Google Gears</title>
		<link>http://zef.me/2007/06/02/google-gears/</link>
		<pubDate>Sat, 02 Jun 2007 09:33:35 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/06/02/google-gears/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p><a href="http://gears.google.com/" target="_blank">Google has launched a beta of Google Gears</a>. Google Gears is a plugin for your web browser that allows web applications to store some data on your computer. Without Google Gears this is only possible with the use of (flash) cookies and the like, which can only store small amounts of data. Future versions of browsers, at least Firefox 3.0 will also have support for client-side storage for web applications.</p>
<p>So what is it good for? Off-line web applications. So far the only (major) web application that uses Google Gears is <a href="http://www.google.com/reader" target="_blank">Google Reader</a>. If you have Gears installed you can now download 2000 RSS items locally so you can read it offline. Google Reader with that got an offline mode. When you go back online the changes will be synced back to Google Reader.</p>
<p>Anybody can use Google Gears in their application. <a href="http://code.google.com/apis/gears/" target="_blank">APIs are described on the Google Code site</a>. Gears consists of three components:</p>
<ul>
<li><em>LocalServer: To cache and serve application resources (HTML, JavaScript, images, etc.) locally</em></li>
<li>
<em>Database</em>: a full relational database (SQLite) on the client side.</li>
<li>
<em>WorkerPool</em>: “Make your web applications more responsive by performing resource-intensive operations asynchronously”</li>
</ul>
<p>Another interesting development for AJAX web application development.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>145</wp:post_id>
		<wp:post_date>2007-06-02 11:33:35</wp:post_date>
		<wp:post_date_gmt>2007-06-02 09:33:35</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>google-gears</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>WebFS: the Case for RDF</title>
		<link>http://zef.me/2007/05/21/webfs-the-case-for-rdf/</link>
		<pubDate>Mon, 21 May 2007 15:10:24 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/05/21/webfs-the-case-for-rdf/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>One of the powerful parts of WebFS, as I see it, will be its metadata capabilities. Metadata is data describing data. For instance metadata about music can be artist information, song title, album, ratings and so on. For Word documents this can be author, date written, number of pages, number of words and so on. Traditionally file systems support a fixed set of this kind of data. In many operating systems these are file name, file size, last time change, time created, owner and permissions.</p>
<p>Recently however, files system are getting richer when it comes to the kinds of metadata they can store. This is caused mainly by the recent rise of the desktop search engine. Desktop search engines index the full text of word documents, powerpoint presentations and e-mails, but also their metadata individually. Results of searches improve as metadata of files improve. For example it would be possible to search for all songs, written between 1998 and 2002 by Madonna, which are longer than four minutes, which without proper metadata indexing would not be possible.</p>
<p>However, how does one represent metadata properly? A simple way is to use name/value pairs. For example:</p>
<pre>title: What's the Story<br>author: Oasis<br>bitrate: 192<br>length: 4:52</pre>
<p>However, this has some issues. If applications want to create their own sets of metadata that they can associate with files you can run into namespace issues. One application may use a metadata attribute called “length” for the number of pages, another for the length of a song in minutes. An XML format, which has support for multiple namespaces, would therefore be a better solution. There is one XML format in particular that was designed and proved very apt to represent metadata, it is called RDF: Resource Description Framework. RDF was developed as a foundation for the Semantic Web. The Semantic Web is an effort to represent data on the web in such a way that computers understand them better, so that they can reason with information on the web. Whether you are a semantic-web believer or not, RDF is a pretty nice format to describe resources. RDF, as the name implies, is a framework for describing resources. Resources are identified by URIs. Essentially an RDF document is nothing more than a list of triples: (resource, property, value) serialized in an XML format.</p>
<pre>&lt;?xml version="1.0" encoding="utf-8"?&gt;<br>&lt;rdf:RDF<br>  xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#'<br>  xmlns:dc='http://purl.org/dc/elements/1.1/'<br>&gt;<br>   &lt;rdf:Description rdf:about="http://www.zefhemel.com"&gt;<br>      &lt;dc:title&gt;Zef Hemel&lt;/p:title&gt;<br>      &lt;dc:author&gt;Zef's mom and dad&lt;/dc:author&gt;<br>   &lt;/rdf:Description&gt;<br>&lt;/rdf:RDF&gt;</pre>
<p>There is an extension to RDF, called RDFS, which, essentially, adds a typing system to RDF. You can define classes and their properties, you can define sub-classes and so on.</p>
<p>So how would we apply RDF(S) to WebFS? Before I attempt to answer that question let’s first define some terminology.</p>
<p>Personally I think we should abstract from the idea of dealing with “files” in a file system. I would prefer the term “item”, or “data item”. Also I would like to use the term “container” for what is in a traditional filesystem called a “folder” or “directory”. The reason is that in WebFS it does not really matter how things are stored in the actual local file system, or if they’re stored on a filesystem at all (they may be stored in a database). It matters that they are data items. An e-mail is a data item, even if you store a thousand of them in one file — the file is a low-level concept that I would like WebFS to abstract from. My problem with the terms directory and folder are that they are very specific to documents. You put a document in a folder, but do you put music in a folder, or pictures? No, you put them in an album, or more generally: in something that contains something else — a container.</p>
<p>Alright, back to the question about how to use RDF within WebFS.</p>
<p>I propose to do this in the following way. Every item on WebFS will have its own, unique URI. Every item has a set of metadata associated with it. This metadata is represented in RDF. WebFS itself defines a base RDFS class called “Item” and a sub-class of that, called “Container”. Every data item will be of type Item or a sub-class of that. “Container” is a special kind of Item, namely one representing a set of other Items.</p>
<p>Then a whole bunch of Item sub-classes can be defined, some inheriting from Item directly, others from Container. Some examples could me: Music (inheriting from Item), Photo (inheriting from Item), PhotoAlbum (inheriting from Container) and so on. For these classes properties would be defined. We would also predefine some properties for the Item class, for instance: title, author, date created, permission, content type — the general set of metadata that would be valid for any kind of data item. Then for a Music class we could add properties like: album, year, song writer and so on. An example WebFS RDFS class hierarchy:</p>
<pre>Item<br>+-- Container<br>|   +-- PhotoAlbum<br>|   +-- MusicAlbum<br>+-- Music<br>+-- Video</pre>
<p>We could standardize a set of standard Item types (such as Music, Video, Photo, PhotoAlbum). However, applications should be able to define their own types of metadata types too. A synchronization application should be able to add properties to current items for example (which RDF allows). An application called, let’s say, tagger for example may allow their users to tag any kind of data item they own. RDFS is very flexible in allowing this.</p>
<p>An example RDF description of a data item (plus some made-up synchronization metadata):</p>
<pre>&lt;?xml version="1.0" encoding="utf-8"?&gt;<br>&lt;rdf:RDF<br>  xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#'<br>  xmlns:dc='http://purl.org/dc/elements/1.1/'<br>  xmlns:webfs='http://www.webfilesystem.org/specs/core#'<br>  xmlns:sync='http://www.syncer.org/spec#'<br>&gt;<br>  &lt;webfs:Image rdf:about="http://zuzia.local/~zef/webfs/tmpfs/iceskating.jpg"&gt;<br>    &lt;dc:title&gt;iceskating.jpg&lt;/dc:title&gt;<br>    &lt;dc:date&gt;1176025423&lt;/dc:date&gt;<br>    &lt;dc:creator&gt;zef&lt;/dc:creator&gt;<br>    &lt;webfs:mimeType&gt;image/jpeg&lt;/webfs:mimeType&gt;<br>    &lt;webfs:width&gt;1024&lt;/webfs:width&gt;<br>    &lt;webfs:height&gt;768&lt;/webfs:height&gt;<br>    &lt;sync:data&gt;<br>       &lt;sync:SyncRecord rdf:about="sync:http://zuzia.local/~zef/webfs/tmpfs/iceskating.jpg"&gt;<br>          &lt;sync:lastSync&gt;1176025400&lt;/sync:lastSync&gt;<br>          &lt;sync:deviceId&gt;hh-22-C00&lt;/sync:deviceId&gt;<br>       &lt;/sync:SyncRecord&gt;<br>    &lt;/sync:data&gt;<br>  &lt;/webfs:Image&gt;<br>&lt;/rdf:RDF&gt;</pre>
<p>To make all this work there is one very important thing that every WebFS storage provider should adhere to: all metadata should be persisted. A WebFS storage provider should be able to persist an arbitrary set of metadata for each item, even if it does not use the metadata itself. The reason for this is to allow (client) applications to define metadata on items for their own usage, but it also means that the user could copy their photo albums on Flickr to, let’s say, OmniDrive and back without any metadata being lost.</p>
<p>Creating a metadata system with RDF is simple yet powerful. There are RDF libraries available for practically any platform. Once we establish this system we can see what the metadata system can be used for beyond what is described here. I can imagine using it for the permission system as well. We could define a “canBeReadBy” and “canBeWrittenBy” property on items, define who has read and write permissions to a particular data item.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>171</wp:post_id>
		<wp:post_date>2007-05-21 17:10:24</wp:post_date>
		<wp:post_date_gmt>2007-05-21 15:10:24</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>webfs-the-case-for-rdf</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>AJAX Reality Check</title>
		<link>http://zef.me/2007/06/14/ajax-reality-check/</link>
		<pubDate>Thu, 14 Jun 2007 13:33:01 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/06/14/ajax-reality-check/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Recent announcements like that the iPhone will allow 3rd party developers develop “applications” for it using “modern web 2.0 technologies” and Adobe’s Apolle, err, <a href="http://labs.adobe.com/technologies/air/" target="_blank">AIR</a> that brings these “modern web 2.0 technologies” to the desktop, made me wonder. Does anybody realize where we came from and that these “web 2.0 technologies” aren’t great at all, but just the best we could do — in the <em>browser</em>?</p>
<p>Let’s go back a few years. Developing web application was ok. You had HTML, CSS and if you were very fancy, a bit of Javascript. You had some form that the user could fill in and every link you clicked and button you pushed brought back a new page. It was slow and it was a bad user experience. But still, it was all running through a web browser. Everybody has a web browser and it worked no matter what operating system you were running on. It was the best we had.</p>
<p>Then some companies, most notably Google, came out with <a href="http://gmail.com" target="_blank">Gmail</a>. They used this Javascript thing called XmlHttpRequest, which could do HTTP requests in the background. Using this approach Google with lots of rocket science managed to create something that was getting pretty close to a user experience similar to a regular desktop mailing application. This technique was later dubbed AJAX (Asynchronous Javascript And XML, or something). Creating such application was difficult at first, but hey, people chose to build their applications in the browser so you have to do as well as you can. Now a few years later there’s loads of javascript libraries to make building AJAX applications a bit easier. But still you need a lot of knowledge of HTML, CSS, Javascript and maybe Flash and SVG and other oddballs like <a href="http://www.cometd.com/" target="_blank">Comet</a>. And what does it give you? An experience more and more approaching a desktop app experience.</p>
<p>More and more approaching, but never exceeding or even matching.</p>
<p>Let’s just face it, the enormous amounts of time that it takes now to build an interface close to a desktop-like experience could have been done in a fraction of the time using an actual, proper client application framework like Java, .NET, GTK+, Cocoa or Visual Basic. And then you could also use cool features like 3D rendering and it would all be a whole lot faster too.</p>
<p>But people seem to have forgotten that things like client-side Java, .NET, Cocoa, GTK+ and Visual Basic even exist and how you could often drag and drop your interfaces. The horrible AJAX development experience has become the new cool, hip, modern web 2.0 technology. An experience that “we” apparently want everywhere now. Adobe is happy to bring it to the desktop. Thanks Adobe!</p>
<p>And now Steve Jobs wants to bring it to the phone. Thanks Steve! “Yeah, we have this new amazing modern way of developing applications for your phone, it’s called a website!” Awesome. “It integrates great with all the iPhone features. For example you can create a “call:0123223222” link to call somebody!” Great. Except you always need an internet connection to use it, it’s slow, you can’t create an icon for it in the menu. And… oh yeah… it’s a frickin’ website! Apparently this was done for “security reasons”. What about Java, Steve? Every frickin’ phone supports Java. It all runs in a sandbox, it’s all secure. It even runs without an internet connection and it’s responsive (yes, that has become a feature in the web 2.0 day and age). Why no Java on the iPhone, explain it to me.</p>
<p>Listen, I’m all for web applications in general. And I really believed in this AJAX thing, but maybe we really have to think again about this. I really wonder why Java Applets never worked. They were perfect in concept. But I guess they came too early and were too slow back then. Maybe we really need an Adobe Flex or a Microsoft Silverlight to <em>really</em> bring richness to the browser. AJAX will only bring us so far and admit it: Javascript, CSS and HTML suck. You don’t want to create user interface in that. At least, I don’t.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>330</wp:post_id>
		<wp:post_date>2007-06-14 15:33:01</wp:post_date>
		<wp:post_date_gmt>2007-06-14 13:33:01</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ajax-reality-check</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="cranky"><![CDATA[Cranky]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Google Mashup Editor</title>
		<link>http://zef.me/2007/06/02/google-mashup-editor/</link>
		<pubDate>Sat, 02 Jun 2007 09:44:32 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/06/02/google-mashup-editor/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>After that <a href="http://www.zefhemel.com/archives/2007/02/08/piping-the-new-web" target="_blank">Yahoo entered the mashup market with its Pipes product</a>, it could not be long until Google would do the same. And they, did with their new <a href="http://googlemashups.com/" target="_blank">Google Mashup Editor</a> product that just opened to a limited number of test users. What’s surprising is that this editor is really a lot less visual than <a href="http://pipes.yahoo.com" target="_blank">Yahoo! Pipes</a>. It’s not visual at all in fact. What is interesting to see is that apparently Google also managed to create a code highlighting component for it, as you can see in this screenshot:</p>
<p>Mashups are combinations of different web services into one more useful service. For example you can “mash” a real estate’s house offerings with Google Maps so you can see where the real estate agent has houses for sale.</p>
<p>Personally I don’t care all that much about mashups, but they’re really hot right now, so what can you do.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>497</wp:post_id>
		<wp:post_date>2007-06-02 11:44:32</wp:post_date>
		<wp:post_date_gmt>2007-06-02 09:44:32</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>google-mashup-editor</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>JamVM</title>
		<link>http://zef.me/2007/05/26/jamvm/</link>
		<pubDate>Sat, 26 May 2007 11:24:31 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/05/26/jamvm/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p><a href="http://jamvm.sourceforge.net/" target="_blank">JamVM</a>:</p>
<blockquote>JamVM is a new Java Virtual Machine which conforms to the JVM specification version 2 (blue book). In comparison to most other VM’s (free and commercial) it is extremely small, with a stripped executable on PowerPC of only ~160K, and Intel 140K. However, unlike other small VMs (e.g. KVM) it is designed to support the full specification, and includes support for object finalisation, Soft/Weak/Phantom References, class-unloading, the Java Native Interface (JNI) and the Reflection API.</blockquote>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>543</wp:post_id>
		<wp:post_date>2007-05-26 13:24:31</wp:post_date>
		<wp:post_date_gmt>2007-05-26 11:24:31</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>jamvm</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Lost Puppy</title>
		<link>http://zef.me/2007/05/30/lost-puppy/</link>
		<pubDate>Wed, 30 May 2007 08:55:50 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/05/30/lost-puppy/</guid>
		<description></description>
		<content:encoded><![CDATA[
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>774</wp:post_id>
		<wp:post_date>2007-05-30 10:55:50</wp:post_date>
		<wp:post_date_gmt>2007-05-30 08:55:50</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>lost-puppy</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="because-i-care"><![CDATA[Because I Care]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Some Things are just Cool</title>
		<link>http://zef.me/2007/05/16/some-things-are-just-cool/</link>
		<pubDate>Wed, 16 May 2007 07:29:57 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/05/16/some-things-are-just-cool/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p><a href="http://www.morle.net/phil/" target="_blank">Phil Morle</a> is the former CTO of <a href="http://www.kazaa.com" target="_blank">Kazaa</a> who recently joined <a href="http://www.omnidrive.com" target="_blank">OmniDrive</a> as their CTO. One of his reasons was, <a href="http://www.morle.net/phil/archives/2007/05/phil_30_a_users.html" target="_blank">according to his blog post</a>:</p>
<blockquote>One idea really caught my attention and the vision is huge and important. When I met Nik Cubrilovic (Omnidrive’s CEO) in the Darling Harbour Starbucks he told me about his idea for WebFS — a standard for exchanging files on the web. Sounds a bit dull at first doesn’t it? But when you start to think about it for a little while it comes alive because it is one of those big ideas that has a profound effect on things.</blockquote>
<blockquote>I see WebFS as an important missing link in the software-as-services concept. As soon as services can start moving files around as easy as they do data today, some interesting new things will become possible and I am excited about being a part of that.</blockquote>
<blockquote>I am particularly interested in the idea that the user in a WebFS world owns their own files again. So if I sign up for the latest online document editing service, I am not having to lock myself in by storing my files with them also. Future apps like Google Docs and Flickr will become interfaces to our files and data, not the repository itself for our stuff.</blockquote>
<p>This is him on Skype:</p>
<p>A true believer ;)</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>844</wp:post_id>
		<wp:post_date>2007-05-16 09:29:57</wp:post_date>
		<wp:post_date_gmt>2007-05-16 07:29:57</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>some-things-are-just-cool</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>REST as in Take it Easy</title>
		<link>http://zef.me/2007/05/07/rest-as-in-take-it-easy/</link>
		<pubDate>Mon, 07 May 2007 13:52:10 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/05/07/rest-as-in-take-it-easy/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p><a href="http://www.tbray.org/ongoing/When/200x/2007/04/30/REST-is-easy" target="_blank">Tim Bray</a>:</p>
<blockquote>Microsoft coding guru <a href="http://pluralsight.com/blogs/tewald/" target="_blank">Tim Ewald</a> got a lot of<br>people talking when he announced <a href="http://pluralsight.com/blogs/tewald/archive/2007/04/26/46984.aspx" target="_blank">I<br>finally get REST. Wow.</a> and followed up with <a href="http://pluralsight.com/blogs/tewald/archive/2007/04/28/47067.aspx" target="_blank">Three reasons that REST is not RPC</a>. It’s nice that the word is spreading, but many REST converts see complicated magic where I see a few simple easy-to-understand virtues.</blockquote>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>893</wp:post_id>
		<wp:post_date>2007-05-07 15:52:10</wp:post_date>
		<wp:post_date_gmt>2007-05-07 13:52:10</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>rest-as-in-take-it-easy</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Syntax Highlighting Editor Within Browser</title>
		<link>http://zef.me/2007/05/26/syntax-highlighting-editor-within-browser/</link>
		<pubDate>Sat, 26 May 2007 10:49:45 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/05/26/syntax-highlighting-editor-within-browser/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p><a href="http://marijn.haverbeke.nl/highlight/index.html" target="_blank">Martijn Haverbeke</a> has created a syntax highlighting editor within the browser. It highlights Javascript syntax. It works quite well. <a href="http://marijn.haverbeke.nl/highlight/story.html" target="_blank">His implementation notes are here</a>.</p>
<p>Quite impressive.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>989</wp:post_id>
		<wp:post_date>2007-05-26 12:49:45</wp:post_date>
		<wp:post_date_gmt>2007-05-26 10:49:45</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>syntax-highlighting-editor-within-browser</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Applish Ruby on Rails Commercials</title>
		<link>http://zef.me/2007/05/24/applish-ruby-on-rails-commercials/</link>
		<pubDate>Thu, 24 May 2007 11:48:40 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/05/24/applish-ruby-on-rails-commercials/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>If you’re familiar with Apple’s “I’m a Mac, and I’m a PC” commercials, have a look at these two Ruby on Rails commercials. Actually these particular two (there are some more that aren’t that great) are not half bad:</p>
<p>Ruby on Rails and Java</p>
<a href="https://www.youtube.com/v/PQbuyKUaKFo">https://www.youtube.com/v/PQbuyKUaKFo</a><p>Ruby on Rails and PHP</p>
<a href="https://www.youtube.com/v/p5EIrSM8dCA">https://www.youtube.com/v/p5EIrSM8dCA</a>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1103</wp:post_id>
		<wp:post_date>2007-05-24 13:48:40</wp:post_date>
		<wp:post_date_gmt>2007-05-24 11:48:40</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>applish-ruby-on-rails-commercials</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="video"><![CDATA[Video]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>All Estonians Get OpenID</title>
		<link>http://zef.me/2007/05/25/all-estonians-get-openid/</link>
		<pubDate>Fri, 25 May 2007 15:37:54 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/05/25/all-estonians-get-openid/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p><a href="http://www.notsorelevant.com/2007-05-22/openid-for-all-estonians/" target="_blank">Carsten Pötter</a>:</p>
<blockquote>Estonia started issuing electronic Identity Cards (eID) in 2002 to its citizens. Those eID’s will be OpenID’s soon! Beta tests are running at the moment.</blockquote>
<blockquote>Although Estonia is a small country with just 1.37 million inhabitants more than one million Estonians and foreigners residing in the country will have an OpenID. Open.id.ee=Estonian eID. Those OpenID’s are very secure because smart cards are required which make phishing and identity theft impossible.</blockquote>
<blockquote>Besides being identity cards and OpenID’s those eID’s have a lot more functions. They contain two certificates for authentication and signing and a permanent email address which is forwarding emails to people’s real email provider; it is also used as a health card so there is no need for an extra card.<br>Other applications can be developed by using core components of the eID software. Estonians can use their eID for tax declaration, public transport, WiFi access, and even internet voting. Quite impressive actually.</blockquote>
<p>Great! They should do that in Holland.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1160</wp:post_id>
		<wp:post_date>2007-05-25 17:37:54</wp:post_date>
		<wp:post_date_gmt>2007-05-25 15:37:54</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>all-estonians-get-openid</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>My Take on the iPhone</title>
		<link>http://zef.me/2007/06/12/my-take-on-the-iphone/</link>
		<pubDate>Tue, 12 Jun 2007 16:54:30 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/06/12/my-take-on-the-iphone/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Everyone has done it, but who cares — here’s my take on the iPhone. I think the iPhone is interesting. Not because it’s the best and most advanced phone in the world — it’s not — but because it once again proves that a good design UI is worth lots. History is repeating for Apple. Apple always used to be the company that sold good looking, quality computers for a higher price than the average PC. They sold computers, but not all that many (compared to IBM-compatible PCs). Then after a while prices sunk and now they are roughly at the same level as “normal” PCs.</p>
<p>They are doing something very similar with the iPhone. The iPhone is good looking. The iPhone is probably the most expensive phone in the world: $999 without a contract. A thousand bucks! Usually you purchase it with a 2-year contract and then it’s <em>only</em> $500. And the funny thing… it will sell like crazy. At the very least the first batch.</p>
<p>Why? Because it’s Apple. Apple since the Macintosh has become the designer computer firm. The company with taste. Everyone has an iPod these days. More and more buy MacBooks (I used to be one of the few in my surroundings with a Mac, now it’s many more). Design thing is one thing, but the second is UI design. Apple has made UI design into an art. If you look at how the UI of the iPhone is designed — it’s good. It’s clever. It’s <em>simple</em>. I recently bought a Nokia N95 and I love it, it can do many things more than the iPhone, but it’s not as easy to use as the iPhone.</p>
<p>And that’s attractive. Ease of use and good design is value. If only more companies would get that.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1218</wp:post_id>
		<wp:post_date>2007-06-12 18:54:30</wp:post_date>
		<wp:post_date_gmt>2007-06-12 16:54:30</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>my-take-on-the-iphone</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>A Day of Pimpin’ my Mobile</title>
		<link>http://zef.me/2007/05/15/a-day-of-pimpin-my-mobile/</link>
		<pubDate>Tue, 15 May 2007 16:52:59 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/05/15/a-day-of-pimpin-my-mobile/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>It was not my intention, but you know how these things go. I’m considering switching my mobile provider and have been doing some research. Not only did I spend hours and hours comparing plans — today I also looked into flashing my phone. Those who know me a bit know I’m not the hacker type. I’m not somebody who spends days and weeks getting some exotic computer set-up to work. For me things just have to work and keep working. The same goes for my mobile phone.</p>
<p>However, my phone — a Motorola PEBL U6 — has been branded by T-Mobile, my current mobile provider. That means the logo is everywhere, including a nice “T-Zones” option in the middle of my main menu. That’s kinda annoying, especially if, for example, I would switch to Vodafone or some other company. So this morning I decided to look into flashing my phone. I heard the term before, I roughly had an idea what it was, but had never done it.</p>
<p>Now flashing (or reflashing), it turns out, is like reformatting your harddrive and reinstalling your OS. Except it’s faster, it only takes a few minutes. I’m on a Mac so all the Windows flashing software does not really work. But I found out there’s a nice <a href="http://mac.themotoguide.com/flashingflexing.php" target="_blank">Motorola on Mac</a> flashing tutorial available. I found a recent flash file for my phone and flashed it, except nothing appeared to have happened when it was done. All the logos were still there. It turned I had just updated the software. If I wanted to replace the rest too (menus, sounds and all that stuff) I had to use something called an MP — a <em>Monster Pack</em>. I downloaded one and installed it and every looked, well, let’s say different. The background was moving like some kind of 3D shooter. The fonts looked crazy, the menu was completely different and I had a different set of applications available now. Not what I wanted, but we were getting somewhere.</p>
<p>What I feared might happen, happened trying the next MP: the phone did no longer boot. The screen just remained black. Luckily I was able to get back to the booter by holding * and # simultaneously while starting the phone and I could install another MP. After a few tries I found the default unbranded Motorola PEBL flash file, which is now running on my phone. Everything seems to work fine, I have no T-Mobile stuff in there anymore.</p>
<p>All this did take me the whole morning and a bit of my afternoon however, but the result is that I have now pimped my phone. I’m a regular sir pimpalot.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1256</wp:post_id>
		<wp:post_date>2007-05-15 18:52:59</wp:post_date>
		<wp:post_date_gmt>2007-05-15 16:52:59</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>a-day-of-pimpin-my-mobile</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="personal"><![CDATA[Personal]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Fake Steve</title>
		<link>http://zef.me/2007/06/14/fake-steve/</link>
		<pubDate>Thu, 14 Jun 2007 08:06:47 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/06/14/fake-steve/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>After seeing and hearing it being mentioned a few times I decided to subscribe to <a href="http://fakesteve.blogspot.com" target="_blank">The Secret Diary of Steve Jobs</a>. It’s fake, but it’s very funny fake. Which is just up from just funny fake. Below that is just fake, which is not all that impressive. But let’s not get into the funny-fakeness spectrum discussion again. <a href="http://www.blogger.com/profile/15043759939497216186" target="_blank">Here’s Steve’s Blogger profile</a>. His location is set right, so you know it is really him.</p>
<a href="https://www.youtube.com/v/Bf5qZrFfQFg">https://www.youtube.com/v/Bf5qZrFfQFg</a><p>Let’s be honest if <a href="http://fakesteve.blogspot.com/2007/06/jesus-wept.html" target="_blank">you refer to this guy</a>:</p>
<p>In this manner:</p>
<blockquote>This Brad Pitt look-alike went out and got a Zune logo tattooed on his arm. See here on the “Zune Scene” website. I want to believe this is some kind of fake photo. But the link shows a closeup which looks pretty real. Well, Microsoft, you really know how to market and advertise, I’ll give you that.</blockquote>
<p>That’s golden comedy ;)</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1345</wp:post_id>
		<wp:post_date>2007-06-14 10:06:47</wp:post_date>
		<wp:post_date_gmt>2007-06-14 08:06:47</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>fake-steve</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Steve Jobs and Bill Gates Interview</title>
		<link>http://zef.me/2007/06/09/steve-jobs-and-bill-gates-interview/</link>
		<pubDate>Sat, 09 Jun 2007 11:22:39 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/06/09/steve-jobs-and-bill-gates-interview/</guid>
		<description></description>
		<content:encoded><![CDATA[
<p>If you have an hour and a half to spare, I hope you do, I suggest you have a look at the <a href="http://link.brightcove.com/services/link/bcpid716692140/bclid756513564/bctid958475626" target="_blank">Steve Jobs and Bill Gates interview at the D conference</a>. It’s an interesting interview with the two most important people in the personal computer industry today. You can also download the video (over 900MB) through the podcast on the iTunes Music Store (just go to the podcast directory inside the iTunes Music store, I think it’s the most popular one on the list right now.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1400</wp:post_id>
		<wp:post_date>2007-06-09 13:22:39</wp:post_date>
		<wp:post_date_gmt>2007-06-09 11:22:39</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>steve-jobs-and-bill-gates-interview</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Recent Going Ons</title>
		<link>http://zef.me/2007/05/15/recent-going-ons/</link>
		<pubDate>Tue, 15 May 2007 17:22:00 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/05/15/recent-going-ons/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>I haven’t been blogging much the past weeks because I’ve been busy with different things. First I was in Oxford for a week. Then I spent a lot of time preparing my parents’ 25th wedding anniversary, which they celebrated last Saturday (yay!). We’ve organized to give them a week trip to New York, which they were very happy with. Tomorrow I’m leaving to Texel, which is one of Holland’s islands, for a short family holiday.</p>
<p>Throughout this time I’ve also spent quite some time looking at places for rent in the west of the country. It’s amazing how much time you can spend on that.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1601</wp:post_id>
		<wp:post_date>2007-05-15 19:22:00</wp:post_date>
		<wp:post_date_gmt>2007-05-15 17:22:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>recent-going-ons</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="personal"><![CDATA[Personal]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Gay Bomb</title>
		<link>http://zef.me/2007/06/16/gay-bomb/</link>
		<pubDate>Sat, 16 Jun 2007 17:02:12 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/06/16/gay-bomb/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>You won’t believe this…</p>
<p><a href="http://www.iol.co.za/index.php?set_id=1&amp;click_id=31&amp;art_id=nw20070616123327456C203466" target="_blank">IOL</a>:</p>
<blockquote>The Pentagon had once considered the creation of a hormone weapon that would turn enemy soldiers into homosexuals who’d rather make love than war, according to government documents.</blockquote>
<blockquote>The US Air Force’s Wright Laboratory in Ohio had asked in 1994 for 7.5 million dollars to develop a bomb containing a powerful aphrodisiac chemical that would cause “homosexual behaviour” to affect “discipline and morale in enemy units.”</blockquote>
<blockquote>The document, obtained under the US Freedom of Information Act, is now drawing scorn and ridicule on the Web.</blockquote>
<p>Oh. My. God. It’s already on <a href="http://en.wikipedia.org/wiki/Gay_bomb" target="_blank">Wikipedia</a>.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1608</wp:post_id>
		<wp:post_date>2007-06-16 19:02:12</wp:post_date>
		<wp:post_date_gmt>2007-06-16 17:02:12</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>gay-bomb</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Beyond World Peace</title>
		<link>http://zef.me/2007/05/29/beyond-world-peace/</link>
		<pubDate>Tue, 29 May 2007 07:44:23 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/05/29/beyond-world-peace/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Riyo Mori, from Japan, was just chosen as the new <a href="http://en.wikipedia.org/wiki/Miss_Universe" target="_blank">miss universe</a>. Not that interesting in itself, except that her deepest wish was not “World Peace” as is traditional for the often peanut-size-brained contestants of such pageants. No, Riyo wished for something much more…</p>
<p>Riyo wished for a solution for the tabs-vs-spaces issue. You know, should you, as a programmer, use tabs or spaces in your source code? It’s a discussion that has been going on for generations without any real solution. Wishing for something seemingly impossible to realize, yet a bit more realistic than world peace, resulted in instant gratification for Riyo.</p>
<p>People, the world has been freed of one of its main challenges. I sincerely hope that future misses universe (miss universes?) will keep hitting them out of the world with a stick, and “pull a Riyo” as I like to say. Inspired by Riyo, and who wouldn’t be, <a href="http://nickgravgaard.com/elastictabstops/" target="_blank">Nick Gravgaard solved the issue once and for all</a>:</p>
<blockquote>The solution then is to redefine how tabs are interpreted by the text editor. Rather than saying that a tab character will move the cursor until the cursor’s position is a multiple of N characters, we should say that a tab character is a delimiter between table cells in a manner more reminiscent of how they’re used in tab separated value (TSV) files.</blockquote>
<p>This fundamental insight wiped out the tabs vs. spaces issue once and for all. And to make things even better, Nick implemented his idea in Riyo’s favorite editor: gedit. She will be pleased, Nick.</p>
<p>And with that, I would like to suggest the next world problem to be addressed: the use of stupid parameter, variable and method names in example code.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1616</wp:post_id>
		<wp:post_date>2007-05-29 09:44:23</wp:post_date>
		<wp:post_date_gmt>2007-05-29 07:44:23</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>beyond-world-peace</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Microsoft Surface</title>
		<link>http://zef.me/2007/06/28/microsoft-surface/</link>
		<pubDate>Thu, 28 Jun 2007 16:58:55 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/06/28/microsoft-surface/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Some may already have seen this video, but I think it’s great. It’s about Microsoft’s new project, the Surface computer. Enjoy.</p>
<a href="https://www.youtube.com/v/CZrr7AZ9nCY">https://www.youtube.com/v/CZrr7AZ9nCY</a>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1738</wp:post_id>
		<wp:post_date>2007-06-28 18:58:55</wp:post_date>
		<wp:post_date_gmt>2007-06-28 16:58:55</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>microsoft-surface</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="video"><![CDATA[Video]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>GTTSE and GWT</title>
		<link>http://zef.me/2007/07/04/gttse-and-gwt/</link>
		<pubDate>Wed, 04 Jul 2007 08:04:12 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/07/04/gttse-and-gwt/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>I’m here at the <a href="http://wiki.di.uminho.pt/twiki/bin/view/Events/GTTSE2007/WebHome" target="_blank">GTTSE </a>’07, the Generative and Transformational Techniques in Software Engineering summer school which I participate in to get started in the area of transformational techniques which an important part of model-driven engineering, which is what I will be doing my Ph.D. on.</p>
<p>There’s quite a few interesting people walking around here. Yesterday I had a chat with Scott Blum of Google, who works on <a href="http://code.google.com/webtoolkit/" target="_blank">GWT (Google Web Toolkit)</a> and gave an implementation on their Java to Javascript compiler and all the optimizations they are doing there. We talked, among other things, about why Google develops a framework to basically make it easier to compete with them. The reason for that is that Google wants to convince more companies and people to build web applications, when companies do that (hopefully using GWT and a slew of Google tools, like the Google APIs) the playing field is leveled. Which application is used no longer depends on who gets the best software distribution deals, like which software is pre-installed on Dell desktops, but instead everybody gets a fair shot at getting using them — on the web. That also means that it is easier for Google, or anybody else, to compete.</p>
<p>GWT is not something that was developed in-house, originally. It was developed by a company that already worked on Java to Javascript compilation and AJAX before Google Maps and the AJAX term was coined. Quickly thereafter the company was bought into Google and now they’re working with about 14 people (if I remember correctly) on it in Atlanta. GWT is not currently used for any of the big products that they run, but it is considered for some new projects and some projects are actually being developed with it now. The focus, however, for the GWT team has been mostly at advocating it to the outside world rather than to Google internally.</p>
<p>I find the GWT project very interesting. They do a lot of the annoying, difficult work that you would otherwise have to do yourself. The Java to Javascript compiler is quite amazing, they do a lot of clever optimizations that can make your Javascript code a lot smaller than it would otherwise be (for example by removing all classes and methods and other pieces of code from libraries that are not used).</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>230</wp:post_id>
		<wp:post_date>2007-07-04 10:04:12</wp:post_date>
		<wp:post_date_gmt>2007-07-04 08:04:12</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>gttse-and-gwt</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="personal"><![CDATA[Personal]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Coding Perl with Vista’s Voice Recognition</title>
		<link>http://zef.me/2007/07/11/coding-perl-with-vistas-voice-recognition/</link>
		<pubDate>Wed, 11 Jul 2007 10:08:41 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/07/11/coding-perl-with-vistas-voice-recognition/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Windows Vista has a voice recognition tool. Here’s a great video of someone attempting to code perl using it. It’s absolutely hilarious.</p>
<a href="https://www.youtube.com/v/KyLqUf4cdwc">https://www.youtube.com/v/KyLqUf4cdwc</a>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>368</wp:post_id>
		<wp:post_date>2007-07-11 12:08:41</wp:post_date>
		<wp:post_date_gmt>2007-07-11 10:08:41</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>coding-perl-with-vistas-voice-recognition</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Simulating Ants in Second Life</title>
		<link>http://zef.me/2007/06/30/simulating-ants-in-second-life/</link>
		<pubDate>Sat, 30 Jun 2007 12:52:36 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/06/30/simulating-ants-in-second-life/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>A guy wrote a simulation of ants inside Second Life. I’m not a second life user/player myself although I would like to have a good look at it, my iBook just appears to be too slow for it sadly. It’s kind of cool that you can do stuff like this in it though. The video is below.</p>
<a href="https://www.youtube.com/v/ehEzRUu4_RM">https://www.youtube.com/v/ehEzRUu4_RM</a>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>415</wp:post_id>
		<wp:post_date>2007-06-30 14:52:36</wp:post_date>
		<wp:post_date_gmt>2007-06-30 12:52:36</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>simulating-ants-in-second-life</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Fake Steve is Dan Lyons</title>
		<link>http://zef.me/2007/08/06/fake-steve-is-dan-lyons/</link>
		<pubDate>Mon, 06 Aug 2007 08:15:39 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/08/06/fake-steve-is-dan-lyons/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p><a href="http://www.nytimes.com/2007/08/06/technology/06steve.html?ex=1344052800&amp;en=f826e2e579cf8ea4&amp;ei=5088&amp;partner=rssnyt&amp;emc=rss" target="_blank">New York Times</a>:</p>
<blockquote>“I’m stunned that it’s taken this long,” said Mr. Lyons, 46, when a reporter interrupted his vacation in Maine on Sunday to ask him about Fake Steve. “I have not been that good at keeping it a secret. I’ve been sort of waiting for this call for months.”</blockquote>
<blockquote>Mr. Lyons writes and edits technology articles for Forbes and is the author of two works of fiction, most recently a 1998 novel, “Dog Days.” In October, Da Capo Press will publish his satirical novel written in the voice of the Fake Steve character, “Options: The Secret Life of Steve Jobs, a Parody.”</blockquote>
<p>Quite frankly, he doesn’t look at all like someone who would write a <a href="http://fakesteve.blogspot.com" target="_blank">blog like that</a>. <a href="http://fakesteve.blogspot.com/2007/08/damn-i-am-so-busted-yo.html" target="_blank">Here’s Fake Steve’s response</a>.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>445</wp:post_id>
		<wp:post_date>2007-08-06 10:15:39</wp:post_date>
		<wp:post_date_gmt>2007-08-06 08:15:39</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>fake-steve-is-dan-lyons</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Re-Introducing Javascript</title>
		<link>http://zef.me/2007/07/16/re-introducing-javascript/</link>
		<pubDate>Mon, 16 Jul 2007 12:52:59 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/07/16/re-introducing-javascript/</guid>
		<description></description>
		<content:encoded><![CDATA[
<p><a href="http://developer.mozilla.org/en/docs/A_re-introduction_to_JavaScript" target="_blank">Here’s a nice and long Javascript tutorial</a>. I haven’t done much with Javascript for the past years and was never that familiar with the things beyond basic control structure, simple DOM things and functions and things. This tutorial gives a nice introduction into JS’s object model. A good read.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>448</wp:post_id>
		<wp:post_date>2007-07-16 14:52:59</wp:post_date>
		<wp:post_date_gmt>2007-07-16 12:52:59</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>re-introducing-javascript</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>One of Those Moments</title>
		<link>http://zef.me/2007/08/06/one-of-those-moments/</link>
		<pubDate>Mon, 06 Aug 2007 17:11:16 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/08/06/one-of-those-moments/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>An hour ago I had to think of a poem I once read for my English studies. <a href="http://www.bartleby.com/119/1.html" target="_blank">The Road Not Taken</a>, by Robert Frost. I don’t know why I had to think of that. Maybe it was because it was briefly cited in <a href="http://www.imdb.com/title/tt0097165/" target="_blank">Dead Poets Society</a>, which I saw again a few nights ago. But still, I don’t know what made me think of this poem.</p>
<p>Then I started to read in my <a href="http://www.google.com/reader" target="_blank">Google Reader</a> and I <a href="http://www.intertwingly.net/blog/2007/08/06/Joe-Takes-the-Road-Less-Traveled" target="_blank">found this</a>. I guess it was my sixth sense at work.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>547</wp:post_id>
		<wp:post_date>2007-08-06 19:11:16</wp:post_date>
		<wp:post_date_gmt>2007-08-06 17:11:16</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>one-of-those-moments</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="personal"><![CDATA[Personal]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Ask A Ninja: Movie Pitch</title>
		<link>http://zef.me/2007/07/20/ask-a-ninja-movie-pitch/</link>
		<pubDate>Fri, 20 Jul 2007 11:15:56 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/07/20/ask-a-ninja-movie-pitch/</guid>
		<description></description>
		<content:encoded><![CDATA[
<p>I love this. Enjoy.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>715</wp:post_id>
		<wp:post_date>2007-07-20 13:15:56</wp:post_date>
		<wp:post_date_gmt>2007-07-20 11:15:56</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ask-a-ninja-movie-pitch</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>The Two Things on my Radar</title>
		<link>http://zef.me/2007/07/20/the-two-things-on-my-radar/</link>
		<pubDate>Fri, 20 Jul 2007 10:01:50 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/07/20/the-two-things-on-my-radar/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>There are two things going on right now that really capture my attention (as far as web 2.0 goes):</p>
<ol>
<li>
<a href="http://www.twitter.com" target="_blank">Twitter</a>, <a href="http://www.jaiku.com" target="_blank">Jaiku</a> and to a lesser extent <a href="http://www.pownce.com" target="_blank">Pownce</a>
</li>
<li><a href="http://www.facebook.com" target="_blank">Facebook</a></li>
</ol>
<p>I talked about Twitter before (<a href="http://www.zefhemel.com/archives/2007/04/03/pull-messaging" target="_blank">here</a> and <a href="http://www.zefhemel.com/archives/2007/03/28/twitter-the-new-communication-platform" target="_blank">here</a>). I did not mention facebook much I think. I became a member a month or two ago and have been loving it ever since. Not only is it the best and cleanest social networking site that I’ve come across, the recent additions of applications into facebook is very interesting. It is possible for third-party developers to build application <em>inside</em> facebook. There are now a couple of hundred of those, most interesting web apps also run in facebook now, such as last.fm, the zoho apps, google reader and many more. <a href="http://www.facebook.com/p/Zef_Hemel/711120810" target="_blank">Here’s my public facebook page</a> (it only shows very little information).</p>
<p>Facebook is aiming at becoming an operating system, which I find fascinating. People have been trying to build Web OSs for years but none really succeeded, will facebook succeed? They just might I think. If you don’t use facebook yet, I suggest you <a href="http://www.facebook.com" target="_blank">give it a shot</a>.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>742</wp:post_id>
		<wp:post_date>2007-07-20 12:01:50</wp:post_date>
		<wp:post_date_gmt>2007-07-20 10:01:50</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-two-things-on-my-radar</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Armagetron</title>
		<link>http://zef.me/2007/07/11/armagetron/</link>
		<pubDate>Wed, 11 Jul 2007 19:18:13 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/07/11/armagetron/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>I’m not a gamer, not even close to it. But today and yesterday I have been playing <a href="http://www.armagetronad.net" target="_blank">Armagetron Advanced</a> a lot. It’s a simple 3D open source game that runs on Windows, Linux and the Mac (yay!) based on the Tron movie. What I like about it that it’s live action and in essence very simple. You can play quite well by simply using two keys (one to go to the left and one to the right). You can play it locally or on the internet. I just won my first game online, wooh! ;)</p>
<p>You can give it a try for free here: <a href="http://www.armagetronad.net/" target="_blank">Armagetron Advanced website</a>. Recommended!</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>764</wp:post_id>
		<wp:post_date>2007-07-11 21:18:13</wp:post_date>
		<wp:post_date_gmt>2007-07-11 19:18:13</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>armagetron</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="personal"><![CDATA[Personal]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Awesome Bridge</title>
		<link>http://zef.me/2007/07/12/awesome-bridge/</link>
		<pubDate>Thu, 12 Jul 2007 12:26:35 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/07/12/awesome-bridge/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p><a href="http://www.londondesignfestival.com/Gallery.aspx?id=1787" target="_blank">London Design Festival 2006</a>:</p>
<blockquote>Bridge, by Michael Cross, is a series of steps that rise out of the water as you walk across them, as if walking on water. On entering the exhibition the visitor is met by an empty expanse of water with one step at its edge: stepping on to it forces it…</blockquote>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>901</wp:post_id>
		<wp:post_date>2007-07-12 14:26:35</wp:post_date>
		<wp:post_date_gmt>2007-07-12 12:26:35</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>awesome-bridge</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>iPhone First Impressions</title>
		<link>http://zef.me/2007/06/30/iphone-first-impressions/</link>
		<pubDate>Sat, 30 Jun 2007 12:49:57 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/06/30/iphone-first-impressions/</guid>
		<description></description>
		<content:encoded><![CDATA[
<p><a href="http://daringfireball.net/2007/06/iphone_first_impressions" target="_blank">John Gruber</a> posted his first impressions with the iPhone. He seems to be enthusiastic about it. What I notice however is how quickly seem to get over the fact that it’s a $600 phone and you have to take a $60/month contract with it for 2 years, if understand it well. So for two years in total you pay $2040 for a phone (including some minutes and internet access). That’s quite a bit.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>910</wp:post_id>
		<wp:post_date>2007-06-30 14:49:57</wp:post_date>
		<wp:post_date_gmt>2007-06-30 12:49:57</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>iphone-first-impressions</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>IT Conservative</title>
		<link>http://zef.me/2007/07/17/it-conservative/</link>
		<pubDate>Tue, 17 Jul 2007 11:57:30 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/07/17/it-conservative/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>I had some more time to read some and explore some new weblogs the past few days. One of the more amusing ones is a new kid on the block: <a href="http://itconservative.blogspot.com/" target="_blank">IT Conservative</a>. Written by someone who clearly is no big fan of free software, given the tag-line: “Fighting the war against Free Software fundamentalism.” His (or her?) posts are often amusing, here are some:</p>
<ul>
<li><a href="http://itconservative.blogspot.com/2007/07/open-library-bound-to-fail.html" target="_blank">The Open Library, Bound to Fail</a></li>
<li><a href="http://itconservative.blogspot.com/2007/07/free-phone.html" target="_blank">Free Phone</a></li>
<li><a href="http://itconservative.blogspot.com/2007/07/being-geek.html" target="_blank">Being a Geek</a></li>
</ul>
<p>Subscribed.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>936</wp:post_id>
		<wp:post_date>2007-07-17 13:57:30</wp:post_date>
		<wp:post_date_gmt>2007-07-17 11:57:30</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>it-conservative</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Paris’ Phone</title>
		<link>http://zef.me/2007/07/11/paris-phone/</link>
		<pubDate>Wed, 11 Jul 2007 19:37:49 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/07/11/paris-phone/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>&lt;Uninteresting&gt;<br>Look, Paris is back from jail (and apparently continues her life like before):</p>
<p>Hey, but what’s it she’s holding there against her face? Is a remote control, a face warmer maybe? Let’s have a closer look.</p>
<p>Yesssss, it’s an iPhone! She has been saving in jail and can now afford one. Paris is cool!</p>
<p>&lt;/Uninteresting&gt;</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1137</wp:post_id>
		<wp:post_date>2007-07-11 21:37:49</wp:post_date>
		<wp:post_date_gmt>2007-07-11 19:37:49</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>paris-phone</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="because-i-care"><![CDATA[Because I Care]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>iPhone vs. Nokia N95</title>
		<link>http://zef.me/2007/07/01/iphone-vs-nokia-n95/</link>
		<pubDate>Sun, 01 Jul 2007 07:59:21 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/07/01/iphone-vs-nokia-n95/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>These are some nice Apple-style ads comparing the iPhone to the Nokia N95 (incidentally, the phone that I own). They’re kind of cool and making a point that I like seeing made ;)</p>
<p><a href="http://www.youtube.com/profile_videos?user=Rcadden&amp;p=r" target="_blank">Here are all 6 of them</a>.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1188</wp:post_id>
		<wp:post_date>2007-07-01 09:59:21</wp:post_date>
		<wp:post_date_gmt>2007-07-01 07:59:21</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>iphone-vs-nokia-n95</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Phil Morle on WebFS (Video)</title>
		<link>http://zef.me/2007/07/19/phil-morle-on-webfs-video/</link>
		<pubDate>Thu, 19 Jul 2007 06:45:35 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/07/19/phil-morle-on-webfs-video/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p><a href="http://www.omnidrive.com/blog/2007/07/18/video-phil-at-webjam3-talkin-webfs/" target="_blank">Phil Morle talked about WebFS on Webjam 3</a>. It’s a short 3 minute presentation but it gives a nice idea on what is supposed to do.</p>
<a href="http://www.viddler.com/player/77accd20/">http://www.viddler.com/player/77accd20/</a><p>Still don’t get it? Check my <a href="http://www.zefhemel.com/advocacy/" target="_blank">advocacy page</a>.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1209</wp:post_id>
		<wp:post_date>2007-07-19 08:45:35</wp:post_date>
		<wp:post_date_gmt>2007-07-19 06:45:35</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>phil-morle-on-webfs-video</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>10 Years of XML</title>
		<link>http://zef.me/2007/07/22/10-years-of-xml/</link>
		<pubDate>Sun, 22 Jul 2007 08:51:06 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/07/22/10-years-of-xml/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>XML is almost 10 years old now. <a href="http://itconservative.blogspot.com/2007/07/10-years-of-xml-global-warming.html" target="_blank">IT Conservative</a> brings up something, albeit making it bigger than it really is, that is a point worth making:</p>
<blockquote>I grew up with the idea that it is better to put a bit more effort into something at the beginning so that you would safe a lot of cost later. XML is the perfect example of something that does exactly the opposite. XML is simple. It’s simple to write, it’s simple to program with, but it is very verbose. Simple things take kilobytes of space. Why is that bad? Because it takes memory, processing power and bandwidth. You only have to program something once, but the memory usage, waste of CPU cycles and waste of bandwidth just keeps going on and on and on forever.</blockquote>
<p>I know that binary XML has been brought up over and over again, but it might not be such a bad idea.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1237</wp:post_id>
		<wp:post_date>2007-07-22 10:51:06</wp:post_date>
		<wp:post_date_gmt>2007-07-22 08:51:06</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>10-years-of-xml</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Mac vs PC — the Rap</title>
		<link>http://zef.me/2007/08/02/mac-vs-pc-the-rap/</link>
		<pubDate>Thu, 02 Aug 2007 17:16:56 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/08/02/mac-vs-pc-the-rap/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>In case you hadn’t seen it yet:</p>
<a href="https://www.youtube.com/v/Jkrn6ecxthM">https://www.youtube.com/v/Jkrn6ecxthM</a>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1279</wp:post_id>
		<wp:post_date>2007-08-02 19:16:56</wp:post_date>
		<wp:post_date_gmt>2007-08-02 17:16:56</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>mac-vs-pc-the-rap</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="video"><![CDATA[Video]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>New Media</title>
		<link>http://zef.me/2007/07/17/new-media/</link>
		<pubDate>Tue, 17 Jul 2007 11:22:28 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/07/17/new-media/</guid>
		<description></description>
		<content:encoded><![CDATA[
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1347</wp:post_id>
		<wp:post_date>2007-07-17 13:22:28</wp:post_date>
		<wp:post_date_gmt>2007-07-17 11:22:28</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>new-media</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="because-i-care"><![CDATA[Because I Care]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>The Road to an Open Source Google</title>
		<link>http://zef.me/2007/08/04/the-road-to-an-open-source-google/</link>
		<pubDate>Sat, 04 Aug 2007 08:11:02 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/08/04/the-road-to-an-open-source-google/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>On the <a href="http://revision3.com/gigaom" target="_blank">first episode of the GigaOM Show</a>, they briefly talked about that creating an open source search engine may just be the only way to beat Google. Om Malik said that Yahoo! in particular should be interested in getting a project like that off the ground.</p>
<p><a href="http://lucene.apache.org/hadoop/" target="_blank">Hadoop</a> is a new Apache project that aims to build a very Google-like distributed computing environment. Google gets its speed and efficiency from <a href="http://labs.google.com/papers/mapreduce.html" target="_blank">MapReduce</a>. Hadoop has an open source implementation of this MapReduce. It also has an open source implementation of a large-scale distributed file system very much like <a href="http://en.wikipedia.org/wiki/Google_File_System" target="_blank">GoogleFS</a>. <a href="http://developer.amazonwebservices.com/connect/entry.jspa?externalID=873&amp;categoryID=112" target="_blank">Here’s a tutorial on running Hadoop with Amazon EC2 and S3</a>.</p>
<p>Interestingly, the Hadoop project is a sub-project of the <a href="http://lucene.apache.org/" target="_blank">Apache Lucene</a> project, which, as you may know, is probably the best open source search engine out there.</p>
<p>May they be up to something?</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1548</wp:post_id>
		<wp:post_date>2007-08-04 10:11:02</wp:post_date>
		<wp:post_date_gmt>2007-08-04 08:11:02</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-road-to-an-open-source-google</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>The Day the Internet Crashed</title>
		<link>http://zef.me/2007/08/05/the-day-the-internet-crashed/</link>
		<pubDate>Sun, 05 Aug 2007 14:38:36 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/08/05/the-day-the-internet-crashed/</guid>
		<description></description>
		<content:encoded><![CDATA[
<a href="https://www.youtube.com/v/z4vDClhnJjs">https://www.youtube.com/v/z4vDClhnJjs</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1716</wp:post_id>
		<wp:post_date>2007-08-05 16:38:36</wp:post_date>
		<wp:post_date_gmt>2007-08-05 14:38:36</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-day-the-internet-crashed</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>OpenID 2.0</title>
		<link>http://zef.me/2007/12/05/openid-2-0/</link>
		<pubDate>Wed, 05 Dec 2007 20:53:43 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/12/05/openid-2-0/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Although it’s on my <a href="/advocacy" target="_blank">advocacy</a> page, I haven’t talked (or thought, for that matter) about OpenID a lot recently. But apparently, there’s an <a href="http://radar.oreilly.com/archives/2007/12/openid_20_final.html" target="_blank">OpenID 2.0 spec</a> out now. Have no idea what’s new, but lots of people are talking about it. So probably it’s a big deal. I do know that <a href="http://www.blogger.com" target="_blank">Blogger</a> now also supports comments with OpenID identification. Cool.</p>
<p>Powered by <a href="http://scribefire.com/" target="_blank">ScribeFire</a>.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>127</wp:post_id>
		<wp:post_date>2007-12-05 21:53:43</wp:post_date>
		<wp:post_date_gmt>2007-12-05 20:53:43</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>openid-2-0</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>More on WebDSL and MoDSE</title>
		<link>http://zef.me/2007/11/29/more-on-webdsl-and-modse/</link>
		<pubDate>Thu, 29 Nov 2007 15:09:46 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/11/29/more-on-webdsl-and-modse/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p><a href="http://www.zefhemel.com/archives/2007/11/27/some-updates#comments" target="_blank">Thomas asks</a> in response to my brief post on WebDSL:</p>
<blockquote>Do you think that languages like this will be the Next Big Thing in web development world?</blockquote>
<p>The MoDSE project that I’m working on has the belief that languages like this will not only be the Next Big Thing in the web development world, but in software engineering in general. We work with big companies such as Atos Origin, Getronics PinkRoccade and others that are also taking their first steps in this kind of software development. “This kind of software development” being <a href="http://en.wikipedia.org/wiki/Model_Driven_Engineering" target="_blank">model driven engineering</a>.</p>
<p>The general idea is that we feel in software development you still work at a very low level. In web applications you still deal with request parameters, type checking them, handling sessions, writing database schemas. We want to abstract from all that and let you work at a higher level of abstraction. In MDE this is the general idea: come up with some language that offers you an as high level of abstraction as is suitable, then use this language to describe/build your software in. Then compile this high level language to the low-level language that you otherwise would have to code in. Of course the question is what is a suitably high level of abstraction, and how do you design and implement a compiler for such a (domain specific) language. Both these issues are things we’re researching in this project.</p>
<p>The “E” in MoDSE, stands for Evolution. Once you come up with a language to describe your applications in, how do you evolve your program. What if, for example, I would add a field to an entity in my WebDSL application. That would mean the database schema has to be adapted and still the current data should be retained. Adding a field is a simple one to solve; it becomes more difficult when you start moving fields, or renaming them. But this only one type of evolution, another is evolving the language itself. An example is syntax changes. In an old version of WebDSL an entity was described as follows:</p>
<pre>SomeEntity {<br>   title :: String<br>}</pre>
<p>But then we decided it really needed a keyword:</p>
<pre>entity SomeEntity {<br>   title :: String<br>}</pre>
<p>The result of this change was that all our old WebDSL software no longer compiled. We had to add the “entity” keyword everywhere. Ideally you would automate this process, your applications should evolve with the language.</p>
<p>Just some issues we’re looking at.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>144</wp:post_id>
		<wp:post_date>2007-11-29 16:09:46</wp:post_date>
		<wp:post_date_gmt>2007-11-29 15:09:46</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>more-on-webdsl-and-modse</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Rectification: Forced Linux</title>
		<link>http://zef.me/2007/10/05/rectification-forced-linux/</link>
		<pubDate>Fri, 05 Oct 2007 07:00:52 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/10/05/rectification-forced-linux/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Only minutes after my post about some advantages I found about Linux over Mac I already started receiving comments that OS X does, in fact, have all the features I mentioned. In Finder, if you start typing a name, it will go to that file or folder (this, apparently, even works in iTunes — I was so sure I tried that and was always frustrated that it didn’t work, but it does), and you can, indeed, set the exact path where you want to save any file.</p>
<p>Anyway, I’m back in OS X now. Parallels works again with networking and I’m compiling my stuff inside a virtual machine. It’s not perfect, but it works. The reason for the switch back to Mac OS X was that it was easier to get my new 24" Dell screen and new <a href="http://www.apple.com/mightymouse/" target="_blank">Mighty Mouse</a> to work there. I have an extended desktop now. One laptop screen (13" 1280x800) and a 24" TFT monitor (24" 1900x1200). It’s amazing. So much more room for my Emacs ;)</p>
<p>(Click for larger version)</p>
<p>The wireless mighty mouse I got is ok. I have to get used to it a bit. The scrolling works nicely, I can left- and right-click now. The buttons on the side (the squeezing) is something I don’t use. You <em>really</em> have to squeeze for it to respond. But all in all, it’s not as bad as I heard people say.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>419</wp:post_id>
		<wp:post_date>2007-10-05 09:00:52</wp:post_date>
		<wp:post_date_gmt>2007-10-05 07:00:52</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>rectification-forced-linux</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="personal"><![CDATA[Personal]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Hacking iPhone to Work in Holland</title>
		<link>http://zef.me/2007/08/24/hacking-iphone-to-work-in-holland/</link>
		<pubDate>Fri, 24 Aug 2007 12:20:59 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/08/24/hacking-iphone-to-work-in-holland/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p><a href="http://www.iphoneclub.nl/primeur-iphone-werkt-op-het-nederlandse-netwerk-van-t-mobile/" target="_blank">Vincent Everts managed to make a phone call</a> (link in Dutch) on the network of <a href="http://www.t-mobile.nl" target="_blank">T-Mobile</a> in Holland using a Dutch T-Mobile SIM card. With that he’s the first person to get the iPhone to work on a network and with a SIM card other than AT&amp;T’s.</p>
<p>The trick is to use a v1 SIM card. This type of SIM card is still rarely supported in Europe where most providers use v2 and v3 cards.</p>
<p>Here’s a video showing it working (notice the T-Mobile logo at the top left of the screen):</p>
<a href="https://www.youtube.com/v/ZPLjGamMQ-U">https://www.youtube.com/v/ZPLjGamMQ-U</a><p>Instructions (in Dutch) can be found at <a href="http://www.iphoneclub.nl/primeur-iphone-werkt-op-het-nederlandse-netwerk-van-t-mobile/" target="_blank">iphoneclub.nl</a>.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>437</wp:post_id>
		<wp:post_date>2007-08-24 14:20:59</wp:post_date>
		<wp:post_date_gmt>2007-08-24 12:20:59</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>hacking-iphone-to-work-in-holland</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Google to Offer Premium Storage</title>
		<link>http://zef.me/2007/08/16/google-to-offer-premium-storage/</link>
		<pubDate>Thu, 16 Aug 2007 08:35:17 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/08/16/google-to-offer-premium-storage/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>I’m a bit behind. I’m sorry. Too busy with preparations for our new house that we’re moving to quite soon (I’m moving tomorrow in fact).</p>
<p><a href="http://googleblog.blogspot.com/2007/08/simple-way-to-get-more-storage.html" target="_blank">Official Google Blog</a>:</p>
<blockquote>As someone who tests Google products daily, I know that the simplest solution is often the one that works best. In the case of online storage, whether it’s a picture, a video or an email, you should just, well, be able to store it without having to worry about whether you’ve got enough space in each particular product. That’s why the Picasa team is pleased to tell you that in a few hours we’ll be rolling out extra storage that you can purchase to use across several Google products (today, Picasa Web Albums and Gmail; soon, other applications like Google Docs &amp; Spreadsheets). That will help make storage really useful, like letting you upload lots of full resolution images to Picasa Web Albums.</blockquote>
<blockquote>When you reach the limit of free storage (i.e., 1GB for Picasa Web Albums, 2.8GB for Gmail), consider this your overflow solution. Plans start at $20/year for 6GB (yes, $5 cheaper than before), with larger plans ranging up to 250GB. If only testing everything were this easy.</blockquote>
<p>What this means is two things: we can forget about unlimited storage for Gmail. A feature that Yahoo Mail has had for a while now. The second thing is that it won’t be long until the Google Disk. Everything is place now, including a way to get storage that you can share across Google services.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>443</wp:post_id>
		<wp:post_date>2007-08-16 10:35:17</wp:post_date>
		<wp:post_date_gmt>2007-08-16 08:35:17</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>google-to-offer-premium-storage</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Simpsons Quotes to Enter Oxford Dictionary</title>
		<link>http://zef.me/2007/08/24/simpsons-quotes-to-enter-oxford-dictionary/</link>
		<pubDate>Fri, 24 Aug 2007 11:26:22 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/08/24/simpsons-quotes-to-enter-oxford-dictionary/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p><a href="http://www.telegraph.co.uk/news/main.jhtml;jsessionid=DQCLRMLM0LQNHQFIQMGSFFWAVCBQWIV0?xml=/news/2007/08/22/nsimpsons122.xml" target="_blank">Telegraph.co.uk</a>:</p>
<blockquote>The latest edition of the Oxford Dictionary of Modern Quotations, published today, is a testament to the growing popularity and influence of characters from The Simpsons.</blockquote>
<blockquote>Homer Simpson phrases include: “Kids, you tried your best and you failed miserably. The lesson is never try.”</blockquote>
<blockquote>Another Homer quotation featured is: “Kids are the best, Apu. You can teach them to hate the things you hate. And they practically raise themselves, what with the internet and all.”</blockquote>
<blockquote>Also included is the much-repeated reference to the French by the Scottish caretaker Willie who remarks: “Bonjour, you cheese-eating surrender monkeys” in a 1995 episode.</blockquote>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>473</wp:post_id>
		<wp:post_date>2007-08-24 13:26:22</wp:post_date>
		<wp:post_date_gmt>2007-08-24 11:26:22</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>simpsons-quotes-to-enter-oxford-dictionary</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="because-i-care"><![CDATA[Because I Care]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Strategy Letter IV</title>
		<link>http://zef.me/2007/09/19/strategy-letter-iv/</link>
		<pubDate>Wed, 19 Sep 2007 07:27:37 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/09/19/strategy-letter-iv/</guid>
		<description></description>
		<content:encoded><![CDATA[
<p><a href="http://www.joelonsoftware.com/items/2007/09/18.html" target="_blank">Joel Spolsky posted his Strategy Letter IV</a>. Like most of his posts (and in particular his strategy letters), worth a read.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>491</wp:post_id>
		<wp:post_date>2007-09-19 09:27:37</wp:post_date>
		<wp:post_date_gmt>2007-09-19 07:27:37</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>strategy-letter-iv</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Former Spoon</title>
		<link>http://zef.me/2007/08/13/former-spoon/</link>
		<pubDate>Mon, 13 Aug 2007 19:59:09 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/08/13/former-spoon/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>“Don’t worry honey, there are more spoons out there.”</p>
<p>“There’s not just one spoon in the world. Believe me, there is a right spoon for all of us. Even for you.”</p>
<p>“Stop crying now, sweetie. You’re making your blouse all wet.”</p>
<p>“I’m sure it was not you. Spoons have their strange ways. They’re unpredictable.”</p>
<p>“Now, sweetheart, I’m sure it has nothing to do with your face.”</p>
<p>“No, it’s not because you’re fat. On the back of a spoon everybody’s equally fat.”</p>
<p>“No, spoons don’t mind that you’re missing one of your front teeth, it’s practical for them.”</p>
<p>“What are you yelling at me for? I suggested you’d go with a tea spoon to start off with, but no — missy <em>had</em> to take on a big one straight away.”</p>
<p>“Yes, I am saying you asked for it.”</p>
<p>“Yes, you are fat, but that has noth… oh for crying out loud, I told you so many times you shouldn’t use mascara, it’s only making things worse.”</p>
<p>“No, nothing is wrong with your nose. Surprisingly.”</p>
<p>“What?”</p>
<p>“No I’m sure there are other spoons that would go crazy for a girl like you.”</p>
<p>“Are you crazy? Your fake eye is a great thing — gives them something to scoop.”</p>
<p>“Everything will be OK, honey pie. You’ll find a new spoon someday.”</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>866</wp:post_id>
		<wp:post_date>2007-08-13 21:59:09</wp:post_date>
		<wp:post_date_gmt>2007-08-13 19:59:09</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>former-spoon</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="because-i-care"><![CDATA[Because I Care]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Facebook Application API</title>
		<link>http://zef.me/2007/08/22/facebook-application-api/</link>
		<pubDate>Wed, 22 Aug 2007 09:32:49 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/08/22/facebook-application-api/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Yesterday I took a little time to have a look at <a href="http://developer.facebook.com" target="_blank">the Facebook developer’s documentation</a>. It looks really nice. They put a lot of effort in building technologies to make developing facebook applications as easy as possible.</p>
<p>I had never really thought about it, but facebook applications don’t actually run on the facebook server itself, but on the developer’s machines. Of course, this makes sense, you don’t want random developer’s code running on your machine. That also means that this facebook architecture is essentially <a href="http://www.zefhemel.com/archives/2005/03/09/web-application-plugins" target="_blank">the one I described over 2 years ago: Web-Application Plugins</a>. At the time I feared that performance would be a huge problem, but as I use facebook I realise that it’s not. The applications are usually quite fast.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>898</wp:post_id>
		<wp:post_date>2007-08-22 11:32:49</wp:post_date>
		<wp:post_date_gmt>2007-08-22 09:32:49</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>facebook-application-api</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Do we really want touch screen monitors?</title>
		<link>http://zef.me/2007/12/05/do-we-really-want-touch-screen-monitors/</link>
		<pubDate>Wed, 05 Dec 2007 18:41:20 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/12/05/do-we-really-want-touch-screen-monitors/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p><a href="http://www.engadget.com/2007/12/04/troll-touch-ships-touchscreen-imacs/" target="_blank">Engadget</a>:</p>
<blockquote>Sure, it’s not the real thing, but those of you aching for a taste of Steve’s “research project” touch Macs can now order up the latest and greatest iMacs retrofitted with touchscreens from Troll Touch. The company’s been putting its PSRT touchscreens on all sorts of displays for years, and much like the ModBook, the tech pretty much just works. Pricing for the new iMacs starts at $2499 for the base 2.0GHz 20-inch model and runs up to $3899 for the 2.8GHz 24-inch Core 2 Extreme, while those of you who want to upgrade your existing machines can get in on the action for $1099 (20 inch) or $1599 (24 inch). Shipping now, apparently.</blockquote>
<p>I can imagine that you would want a touch screen on a device you can hold in your hand. Let’s say a phone, or even tablet PC. But is a touch screen on a desktop computer really desirable? The screen I use at work I cannot reach with my hands when I’m working and to be honest I would like to keep it like that (better on the eyes). Do we really want computer touch screens?</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>919</wp:post_id>
		<wp:post_date>2007-12-05 19:41:20</wp:post_date>
		<wp:post_date_gmt>2007-12-05 18:41:20</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>do-we-really-want-touch-screen-monitors</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Future of Software</title>
		<link>http://zef.me/2007/08/23/future-of-software/</link>
		<pubDate>Thu, 23 Aug 2007 15:45:10 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/08/23/future-of-software/</guid>
		<description></description>
		<content:encoded><![CDATA[
<p><a href="http://future.gigaom.com/" target="_blank">The Future of Software</a> is an interesting blog (part of the <a href="http://www.gigaom.com" target="_blank">GigaOM</a> network) about, well, the future of software.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>932</wp:post_id>
		<wp:post_date>2007-08-23 17:45:10</wp:post_date>
		<wp:post_date_gmt>2007-08-23 15:45:10</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>future-of-software</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>WebFS and the Future of the Mobile Connected Device</title>
		<link>http://zef.me/2007/09/11/webfs-and-the-future-of-the-mobile-connected-device/</link>
		<pubDate>Tue, 11 Sep 2007 09:28:06 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/09/11/webfs-and-the-future-of-the-mobile-connected-device/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>I was <a href="http://www.zefhemel.com/archives/2007/06/14/ajax-reality-check" target="_blank">kind of sceptical</a> when Apple introduced web apps as <em>the</em> application platform of the iPhone. I was not impressed. And although Apple may soon introduce an actual iPhone software SDK for client-side apps, I think Apple may not be that stupid after all.</p>
<p>Recently I also started to believe that the phone’s web browser may soon become the application delivery platform of the future. Just as it on the desktop. Three developments caused me to change my mind. First of all, the iPhone web apps that people have been creating. <a href="http://iphone.facebook.com" target="_blank">Facebook is one of them</a> (you can open this in a normal browser too). It looks great and has very iPhone-like transitions between pages. Second, the recent launch of the <a href="http://www.apple.com/ipodtouch/" target="_blank">iPod touch</a>, which also comes with the Safari browser and wifi built in. So it would really surprise me if the iPhone web apps wouldn’t work on this iPod too. Third is the rumored arrival of the Google Phone.</p>
<p>Of course nobody really knows what this phone is going to be like, or heck, that it ever actually is going to come out. But if you think about it, Google has been doing web apps. Just web apps and some extensions to these web apps on the desktop, such as notifiers, tiny messenger applications and so forth. So what is a Google Phone essentially going to be? A web browser in a mobile device. Probably in the iPhone tradition: big touch screen.</p>
<p>So what is going to be the way to develop applications for mobile phones and other internet connected mobile devices? In the case of the iPhone, iPod and Google Phone it’s going to be web apps. And I’m sure those three are not going to be the end of it. My Nokia N95 has the same web browser (based on Web Kit) built in and can also run these apps (albeit that the screen is smaller). Web applications on mobile devices with unlimited data plans are the answer. Unless you’re roaming and don’t have wifi nearby, then you’re screwed.</p>
<p>But leaving that aside. Here’s where <a href="http://www.zefhemel.com/archives/2007/03/04/webfs" target="_blank">WebFS</a> comes in. Neither the iPhone nor iPod allow you to put random files on your phone. You can load music, video and pictures on them, but what you can do with this data is very limited. This is not very likely to change. The Google Phone is not likely to be any different. When has Google pushed files to your local hard drive? Never. They even prefer you to read Microsoft Word documents and PDFs in their environment — the web browser. So, your data, as with web applications today, on these phones will have to be stored in the cloud, on the internet.</p>
<p>Where? How? How do I not get locked into one application with my data? The answer is already here of course: WebFS. Duh. The model of storing your data with a party you trust and then giving web applications permission to access this data ought to work very well in the mobile (as well as the desktop) space. And WebFS would allow you to do that.</p>
<p>Now all we have to do is actually make <a href="http://webfs.omnidrive.com/HomePage" target="_blank">WebFS happen</a>.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1073</wp:post_id>
		<wp:post_date>2007-09-11 11:28:06</wp:post_date>
		<wp:post_date_gmt>2007-09-11 09:28:06</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>webfs-and-the-future-of-the-mobile-connected-device</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Forced Linux</title>
		<link>http://zef.me/2007/10/03/forced-linux/</link>
		<pubDate>Wed, 03 Oct 2007 07:35:45 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/10/03/forced-linux/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>For my work — oh yeah right, I didn’t officially announce that I started yet, but I’m a Ph.D. student now, more on that later — I got a new MacBook. After a few days of struggle however, it appeared that the software that we use (<a href="http://www.stratego-language.org/Stratego" target="_blank">Stratego/XT</a>), still has some issues on Mac OS X. For a week or so I “solved” this problem by installing Linux in a virtual machine (Parallels) and SSH-ing into that to compile my stuff. Not an ideal solution.</p>
<p>A week later, the networking stopped working in the virtual machine. Long story short, I installed Linux on my MacBook (dual boot) and am now working in Linux all day.</p>
<p>That sucks, right? Having a cool MacBook and working in something like Linux all day, while you could be using shiny OS X.</p>
<p>Well, it turns out, it’s not so bad. In fact, the MacBook makes a pretty good Linux laptop. I am running Ubuntu (first feisty, but now upgraded to the gutsy beta) and mostly everything I need works. Networking works, the graphics card works (including cool effects if I wanted them), wireless network works, the built-in iSight works (in some applications), the Apple Remote that I can use to stop, pause forward my music or videos work. Printing works. Suspend worked for a bit, but does not in Gutsy (still have to look into that). So hardware wise it’s pretty ok. Syncing my phone is a bit more problematic.</p>
<p>Software wise it’s not too shabby either. On OS X I was using mostly open source software and web applications anyway (Gmail for e-mail, Google reader for RSS reading, Emacs for editing code and so on). I was surprised to find out how quickly you get used to annoying little things in OS X. For example, in the Finder, when I start typing I really want it to go to the folder that match the name I’m typing. So if I type “Pictures” I want that folder to be selected. This, in OS X and Windows too, does not work. It listens to the first character you press, but then stops. In Gnome (not only in “nautilus”, its finder/explorer) this does work, and it does work too in save and open dialogs. It’s very convenient. Another annoying thing in OS X that I forgot about was that when you save a file, very often you can only pick a few selected directories to store that file in — your “favorites” let’s say. You cannot select any other directory, but have to move the file afterwards. Don’t ask me why, but that’s how it is. At least, I have never found out how to change this behavior. On GNOME, this just works as expected, you can select any folder you like.</p>
<p>And last, but not least: virtual desktops. OS X has never officially supported this, but has programs that can do it. Still, it’s considered un-Mac-like (at least until OS X 10.5, when it’s a built-in feature), so you don’t use these things, you use Expose. On Linux, virtual desktops have been around since forever and I use them all the time (I have 6).</p>
<p>All in all, I’m not disliking this Linux thing at all. It’s not perfect. But it’s very acceptable. It’s Linux in a nice, white, beautiful box.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1131</wp:post_id>
		<wp:post_date>2007-10-03 09:35:45</wp:post_date>
		<wp:post_date_gmt>2007-10-03 07:35:45</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>forced-linux</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Gmail to get IMAP support</title>
		<link>http://zef.me/2007/10/25/gmail-to-get-imap-support/</link>
		<pubDate>Thu, 25 Oct 2007 07:25:25 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/10/25/gmail-to-get-imap-support/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Gmail will be rolling out IMAP support to all its users over the next few days. This is great news to some. Currently I’m using my host’s IMAP server and read mail in Mail.app (Apple’s mail client), so I probably won’t use it much. However, it is great news for Gmail users especially those who want to read mail on their phones (which do not support Java).</p>
<p>I checked and I don’t have IMAP on my account yet, but there are a few things that I wonder about how you can map the IMAP model (folders containing messages) with Gmail’s model (conversations that can have one or more labels). The conversation part I get, each message in a conversation becomes a separate message in IMAP, but how about labels mapping to folders? <a href="http://mail.google.com/support/bin/topic.py?topic=12760" target="_blank">There are some answers on the Gmail help site</a>, but still I wonder. The problem is that in IMAP, generally, one message is in one folder. However, a conversation in Gmail can have multiple labels. When you login to Gmail through IMAP, you will see the labels as if they were folders. <a href="http://mail.google.com/support/bin/answer.py?answer=78758&amp;topic=12762" target="_blank">According to this</a>, you can add multiple labels to one message by <em>copying</em> them to another folder. This means that messages will appear in different folders. There’s an “Inbox”, there’s an “All mail” folder and a folder for each label. So if I have a message in my inbox, labeled as “Work” and “Paper”, it will be in 4 IMAP folders: Inbox, All mail, Work and Paper. I wonder, how do IMAP clients deal with this? Will they recognize that these are one and the same message? I’m not an IMAP expert but do they have these messages have unique ids so you they are recognizable as copies? Or will this message appear 4 times in my search result when I search for it in my mail application? Because that would be kind of stupid.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1244</wp:post_id>
		<wp:post_date>2007-10-25 09:25:25</wp:post_date>
		<wp:post_date_gmt>2007-10-25 07:25:25</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>gmail-to-get-imap-support</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>The Kindle</title>
		<link>http://zef.me/2007/11/28/the-kindle/</link>
		<pubDate>Wed, 28 Nov 2007 08:24:02 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/11/28/the-kindle/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>I know this is late (what we call in Dutch, for some odd reason “spuit 11”), but either way, here’s my brief take on the Kindle.</p>
<p>The Kindle is <a href="http://www.amazon.com/Kindle-Amazons-Wireless-Reading-Device/dp/B000FI73MA" target="_blank">Amazon’s new e-book reader</a>. Personally I think it looks like crap (probably everybody agree on that), it looks like a ’90 PC crushed by a fridge falling from 10 feet high. But that’s not the point. The point is that it might just be the first mass-market e-book reader. The question really is are e-book readers a good idea. And I think they are. Although I do have to admit it’s kinda nice to be able to fill up a number of shelfs with books, at a certain point you just have too many of them. I myself have about 7 boxes full of computer science book still at my parents’, I don’t have room for them in my new apartment and, honestly, it’s unlikely that I will every need them again.</p>
<p>E-books solve that problem.</p>
<p>What I’ve wanted for a long time is a cheap e-book reader to come out, nothing fancy just a reasonably sized device with a nice-to-read screen on which I could put PDFs to read. That would be great, especially now that I’m a Ph.D. student the papers on my desk just keep piling up and it doesn’t look pretty. In fact I found that it’s generally a better idea to throw out a paper after reading it, because in this huge pile it’s faster to find it on my hard drive again and print it, than to sift through all these old papers in my drawer.</p>
<p>E-books solve that problem.</p>
<p>What I found the most interesting about the kindle as an instance of an e-book reader (God, I’m such a computer scientist, talking like that), is its wireless capabilities. It doesn’t use Wifi, it uses the mobile phone network for connectivity. Using that you can order books from Amazon and read them on your Kindle straight away. Apparently, you can also e-mail a PDF to some special e-mail address and it will appear on your Kindle as an e-book.</p>
<p>Whether this is a good model remains to be seen, and the Kindle might just flop (as most people seem to be expecting), but either way at some point there’s going to be an e-book reader that will work.</p>
<p>And does not cost $400.</p>
<p>Now it’s time to clean up my desk.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1312</wp:post_id>
		<wp:post_date>2007-11-28 09:24:02</wp:post_date>
		<wp:post_date_gmt>2007-11-28 08:24:02</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-kindle</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Britney is Still Hot</title>
		<link>http://zef.me/2007/12/03/britney-is-still-hot/</link>
		<pubDate>Mon, 03 Dec 2007 14:21:45 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/12/03/britney-is-still-hot/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>You got to hand it to her, nobody would have expected that when Britney Spears came around, she would still be so popular 7 years later. For completely different reasons of course, but still.</p>
<p><a href="http://www.techcrunch.com/2007/12/03/yahoo-top-searches-2007-please-people-stop-typing-britney-spears-into-search-boxes/" target="_blank">TechCruch</a>: “Please, People, Stop Typing Britney Spears into Search Boxes”</p>
<blockquote>It’s that time of year again for the major search engines to release their top search queries of the year. Yahoo traditionally goes first, and today’s the day. And once again, people can’t seem to help but type “Britney Spears” into every search box they come across.</blockquote>
<blockquote>The top queries of the year on Yahoo are:</blockquote>
<ul>
<li>Britney Spears</li>
<li>WWE</li>
<li>Paris Hilton</li>
<li>Naruto</li>
<li>Beyonce</li>
<li>Lindsay Lohan</li>
<li>Rune Scape</li>
<li>Fantasy Football</li>
<li>Fergie</li>
<li>Jessica Alba</li>
</ul>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1505</wp:post_id>
		<wp:post_date>2007-12-03 15:21:45</wp:post_date>
		<wp:post_date_gmt>2007-12-03 14:21:45</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>britney-is-still-hot</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="because-i-care"><![CDATA[Because I Care]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>The Eee</title>
		<link>http://zef.me/2007/11/30/the-eee/</link>
		<pubDate>Fri, 30 Nov 2007 16:01:46 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/11/30/the-eee/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Asus recently came out with the <a href="http://eeepc.asus.com/global/" target="_blank">Eee</a>. It’s a very small laptop (7" screen, weighs less than a kilogram) running Linux.</p>
<p>It can be used by cute little children.</p>
<p>and nice looking women on the beach (is it me or does this look like a photoshopped picture?).</p>
<p>Why is this laptop interesting to me? Two reasons: it’s really small and cheap ($300/300 euro) and it runs Linux by default. Linux still doesn’t have a big market share on the desktop. It has a big share of the server market and even an increasing share on devices (music players, PDAs, smart phones), but still not that many people use it on the desktop. There are, of course, many good reasons for this (software compatibility, user-unfriendliness, defacto standards). What makes the Eee interesting is that it’s not really suitable as a “main” computer. It’s too tiny. This makes it feel more like a gadget, an additional computer you can just use on the road or for presentations. It’s a powerful one, however. I think that, if lots of people buy this kind of device, they will realize it does mostly everything they need (other than being really tiny). You can browse the web, read email, make presentations. They may see that Linux can be user friendly (the UI of the Eee seems really simple).</p>
<p>It might just change Linux’s image and adoption a bit.</p>
<p>Either way, I want one. Just don’t know what I would use it for.</p>
<p><a href="http://en.wikipedia.org/wiki/Asus_eee" target="_blank">More info on the Eee (including specs)</a>.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1520</wp:post_id>
		<wp:post_date>2007-11-30 17:01:46</wp:post_date>
		<wp:post_date_gmt>2007-11-30 16:01:46</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-eee</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Upgraded to Wordpress 3.2</title>
		<link>http://zef.me/2007/12/03/upgraded-to-wordpress-3-2/</link>
		<pubDate>Mon, 03 Dec 2007 09:09:29 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/12/03/upgraded-to-wordpress-3-2/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>I haven’t upgraded my wordpress installation for this blog for quite a while, thought it would be time.</p>
<p>If anything’s broken, let me know.</p>
<p>I also changed the theme again.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1524</wp:post_id>
		<wp:post_date>2007-12-03 10:09:29</wp:post_date>
		<wp:post_date_gmt>2007-12-03 09:09:29</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>upgraded-to-wordpress-3-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Python Makes You Fly</title>
		<link>http://zef.me/2007/12/06/python-makes-you-fly/</link>
		<pubDate>Thu, 06 Dec 2007 06:38:07 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/12/06/python-makes-you-fly/</guid>
		<description></description>
		<content:encoded><![CDATA[
<p>(<a href="http://xkcd.com/353/" target="_blank">Source</a>)</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1537</wp:post_id>
		<wp:post_date>2007-12-06 07:38:07</wp:post_date>
		<wp:post_date_gmt>2007-12-06 06:38:07</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>python-makes-you-fly</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Some Updates</title>
		<link>http://zef.me/2007/11/27/some-updates/</link>
		<pubDate>Tue, 27 Nov 2007 18:40:35 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/11/27/some-updates/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>I intend to make my posting here more regular from now on, basically I haven’t been posting anything at all lately. So here’s the first one.</p>
<p>As you may or may not know, I recently (well, three months ago) start with my Ph.D. It’s part of the <a href="http://swerl.tudelft.nl/bin/view/MoDSE" target="_blank">MoDSE</a> project (Model Driven Software Evolution). I have a post in my drafts folder about what exactly that is all about, but I have a hard time finishing it, so I’ll just briefly explain what I’m work on at the moment.</p>
<p>We’re working on a DSL (Domain Specific Language) for the web, called <a href="http://www.webdsl.org/" target="_blank">WebDSL</a> (better website, built with WebDSL is coming up). The idea behind this language is that web development today always consists of combining many different technologies and languages. Some examples are HTML, CSS, PHP and some database. WebDSL attempts to combine all these things into one language. It has language constructs to define page structure, business logic and data access (through embedded HQL, a kind of SQL). Layout currently is still a separate thing (done in CSS), but this will be integrated as well. The nice thing about this is that not only do you have to learn half a dozen frameworks and languages, it is also easier to check that all the different components work well together (you can do type checking for example).</p>
<p>We translate WebDSL applications into a J2EE applications, using Java, JSF, Hibernate and SEAM (running on JBoss), a script will then compile all that and you will end up with a .ear file that you can deploy on any JBoss Java application server. For the parsing and translating we use SDF and <a href="http://www.program-transformation.org/Stratego/WebHome" target="_blank">Stratego/XT</a>.</p>
<p>WebDSL is essentially an exercise in designing and building such programming languages geared towards a particular domain. There will be more information when the first WebDSL version will be released, (planned on December 20th), but here’s a piece of WebDSL code (a very bare-bone wiki system), so you can get a flavor of what it looks like (the only thing missing are some simple templates and the CSS):</p>
<pre>application com.example.wiki</pre>
<pre>description {<br>  This is an automatically generated description<br>}</pre>
<pre>imports templates</pre>
<pre>section data model</pre>
<pre>entity Page {<br>  name :: String (name, id)<br>  text :: WikiText<br>}</pre>
<pre>section global variables</pre>
<pre>globals {<br>   var mainPage : Page := Page {<br>      name := "HomePage"<br>      text := "This is text for the main page.nn<br>Here's a link to [[page(AnotherPage)|another page]]"<br>   };<br>}</pre>
<pre>section pages</pre>
<pre>define page home() {<br>  main()<br>  define body() {<br>    section {<br>       header {"All page"}<br>       list {<br>         for(p : Page) {<br>           listitem { output(p) }<br>         }<br>       }<br>    }<br>  }<br>}</pre>
<pre>define page page(p : Page) {<br>  init {<br>    if(p.text = "") {<br>      goto editPage(p);<br>    }<br>  }<br>  main()<br>  define body() {<br>    section {<br>       header {output(p.name)}<br>       output(p.text)<br>       section { navigate(editPage(p)) { "Edit this page" } }<br>    }<br>  }<br>}</pre>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1701</wp:post_id>
		<wp:post_date>2007-11-27 19:40:35</wp:post_date>
		<wp:post_date_gmt>2007-11-27 18:40:35</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>some-updates</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Assembly Language of the Web</title>
		<link>http://zef.me/2007/12/27/assembly-language-of-the-web/</link>
		<pubDate>Thu, 27 Dec 2007 14:30:45 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/12/27/assembly-language-of-the-web/</guid>
		<description></description>
		<content:encoded><![CDATA[
<p>I was watching this <a href="http://www.ongwt.com/post/2007/12/22/GWT-Gears-javascript-and-java-%3A-Interview-with-Dion-Almaer-at-Javapolis" target="_blank">video interview with Dion Almaer</a> of Google and it reminded me of a view that I have, and that I think is shared within the WebDSL team. It might be controversial, maybe it’s not. The view is that we see (X)HTML, CSS and Javascript as the assembly languages of the web. I feel that, although coding HTML, CSS and Javascript was fun for a while — we can do better. What you’d want is a higher-level language (be it WebDSL or GWT or whatever else) that abstracts from those low-level languages. I think there are better languages to be designed that can be compiled to a combination of those three.<br><br>GWT is the most mainstream implementation of this. You feed it Java code and it produces HTML and Javascript. We do the same in WebDSL (although we did not base it on Java). Web development is hard, and frankly, annoying because you have to deal with differences in browser implementations, browser versions and so on. All stuff you don’t care about. The solution is to abstract from that, and come up with a language + compiler that generates the browser-dependent code for you so you can focus on the problem at hand rather than spending 2 hours fixing the lack of support for CSS’s <em>a:hover</em> in IE 5.5 (or whatever, I don’t know zip about CSS).</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>315</wp:post_id>
		<wp:post_date>2007-12-27 15:30:45</wp:post_date>
		<wp:post_date_gmt>2007-12-27 14:30:45</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>assembly-language-of-the-web</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Twittering</title>
		<link>http://zef.me/2007/12/06/twittering/</link>
		<pubDate>Thu, 06 Dec 2007 08:19:12 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/12/06/twittering/</guid>
		<description></description>
		<content:encoded><![CDATA[
<p>I’ve been starting to experiment with <a href="http://twitter.com/zef" target="_blank">my twitter account</a> a bit again. It’s kinda nice for brief notes on the progress of my research for example. Maybe I should build something like twitter as a test case in WebDSL. Should only take a few lines…</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>404</wp:post_id>
		<wp:post_date>2007-12-06 09:19:12</wp:post_date>
		<wp:post_date_gmt>2007-12-06 08:19:12</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>twittering</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Ranting on Rails</title>
		<link>http://zef.me/2008/01/02/ranting-on-rails/</link>
		<pubDate>Wed, 02 Jan 2008 16:12:45 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2008/01/02/ranting-on-rails/</guid>
		<description></description>
		<content:encoded><![CDATA[
<p>Zed (please, do not confuse him with me) — of Mongrel fame, apparently (I had never heard of him) — is hitting it hard in <a href="http://www.zedshaw.com/rants/rails_is_a_ghetto.html" target="_blank">Rails is a Ghetto</a>. It’s a long rant with, how shall I put it, a lot of f-words and c-words. Mongrel is a webserver (as I understand it) for Ruby on Rails, which was developed by Zed. He’s now cutting off from the Ruby on Rails community in a way that’s not seen a lot (thankfully). If you have some time and are a good at skimming long texts there are some funny and/or interesting things in there on people in the Ruby on Rails community (which are according to him the most arrogant bunch around) and <a href="http://www.thoughtworks.com/" target="_blank">ThoughtWorks</a> as well. I’ve heard more stories about arrogant Ruby on Rails people. Such as this <a href="http://diveintomark.org/archives/2007/04/16/dhh-translation" target="_blank">amusing piece by Mark Pilgrim about a David Heinemeier Hansson (creator or RoR) blog post</a> from around the time that Twitter had all these performance problems (Twitter is built on RoR).</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>463</wp:post_id>
		<wp:post_date>2008-01-02 17:12:45</wp:post_date>
		<wp:post_date_gmt>2008-01-02 16:12:45</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ranting-on-rails</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Jungle Disk Plus</title>
		<link>http://zef.me/2007/12/24/jungle-disk-plus/</link>
		<pubDate>Mon, 24 Dec 2007 12:01:53 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/12/24/jungle-disk-plus/</guid>
		<description></description>
		<content:encoded><![CDATA[
<p>I’m a long-time user of <a href="http://www.jungledisk.com" target="_blank">JungleDisk</a>,the software that allows you to access your Amazon S3 space as if it were a hard drive. During their beta period were free, but now they charge a small amount. They keep improving their software and truly are committed to offer a multi-platform solution. They now offer a version in which you can <a href="http://blog.jungledisk.com/2007/12/21/jungle-disk-plus-released/" target="_blank">mount your JungleDisk using fuse</a> right into your file system under Linux. It’s still a beta, but it works well. As part of “Jungle Disk Plus” (their monthly subscription option — free for the first year) they now also give you web-based access to your files, which is very convenient.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>507</wp:post_id>
		<wp:post_date>2007-12-24 13:01:53</wp:post_date>
		<wp:post_date_gmt>2007-12-24 12:01:53</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>jungle-disk-plus</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="personal"><![CDATA[Personal]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Why I Use Gmail</title>
		<link>http://zef.me/2007/12/23/why-i-use-gmail/</link>
		<pubDate>Sun, 23 Dec 2007 12:43:54 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/12/23/why-i-use-gmail/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Whenever I talk to people while they are e-mailing and their e-mail client crashes or misbehaves they ask me what I use for mail. “Gmail” I say. “Ah,” and they silently assume I’m one of those people who use a web-based mailer because I’m one from the “hotmail” generation. Those who are not even aware that you can use software other than a web browser to read your mail.<br><br>Although I am part of this “generation”, I am very aware of mailing clients, I have used many of them for a very long time. My choice of switching to Gmail is a very conscience one — no desktop mailer matches Gmail’s functionality. Email services like hotmail and yahoo try to mimic desktop clients like Outlook as much as possible, Gmail does not. Here are three reasons where Gmail does (in my opionion) better than any email application I’ve used:<br><strong><br>1. Conversations</strong><br>This, to me, is by far the most important reason to use Gmail — the fact that it’s built around conversations rather than individual e-mails. Sure, many desktop client have a “thread view”, but they only show the thread structure, the messages you still have to read individually. Plus, it only groups messages in threads that are in the same folder. My own messages (which are in the Sent folder) do not appear in there. Gmail also hides the quoted parts of emails by default in this conversation view, which lets you read your email conversations in a very comfortable manner. <br><br><strong>2. Archiving rather than moving or deleting</strong><br>When I receive a message there are three things that I might do:</p>
<ol>
<li>Mark it as spam — I don’t do this much, I don’t get that much spam on Gmail.</li>
<li>Delete it — I don’t do this much either, the only things I delete are messages from sites like CD Now, Amazon and so on. Mails that I’m sure I’ll never have to read again.</li>
<li>Read and archive.</li>
</ol>
<p>When I used IMAP I had a big folder structure for my e-mails. Whenever I read an e-mail I had to decide what do do with it. Either delete it or move it to one of the folders (which meant dragging it there). I had archive folders for general mail (one per year, for performance reasons) and folders for my work, personal mails, projects and so on. But as the amount of mail becomes big in those folders you either have to split them up, or remove mail from them. Of course having to move these mails yourself is annoying and often it’s pretty obvious where it should go. I could create mail rules that automatically move them there <em>as they come in</em>. The problem is that, then, my Inbox does not show me all mails anymore, it only shows the uncategorized ones. I have to look at my folder list if there are any other new mails.<br><br>In Gmail you don’t have this problem. There’s a “flat namespace” for all conversations. There are no folders. What you do have are labels. Every conversation can have zero or more labels. New mail automatically gets the “Inbox” label, which you can remove by archiving it (and it won’t display in the inbox anymore, only in the “All Mail” box). You can create your own labels (for example “work”, “project”, “personal”) and filters that automatically attach one more more of these labels to incoming mails. When you attach a label to a conversation you <em>add</em> it, not replace the current one. So my new mail can be both in the Inbox and in the WebDSL label listing. For instance, all the email coming in from the WebDSL mailing list is automatically labeled with the “WebDSL” label. When I read it, I archive it and it will disappear (but is easily retrieved by clicking on the “WebDSL” label). That means that <em>once I read mails I don’t have to think about where to archive it</em>. This makes my email reading process a lot more efficient.<br><br><strong>3. Keyboard shortcuts</strong><br>I operate Gmail entirely using the keyboard. This is a feature that is not enabled by default, you have to enable it in the settings. After enabling it you can press “?” to get a help screen with all the shortcuts. They include: j (next message) k (previous message) o (open message) # (delete message) a (archive message) ! (mark message as spam) s (star message), / (search email), x (mark an email and perform batch operations on it later) and so on. When you get familiar with these keys reading, responding to and managing your email gets really efficient.<br><br>What are generally considered drawbacks of web-based e-mail are two:</p>
<ol>
<li>You’re locked in, you cannot easily get your email out. This is not true for Gmail as you can use both POP3 and IMAP to download email.</li>
<li>What if you don’t have an internet connection? I suspect Gmail will soon come out with a version that uses <a href="http://gears.google.com" target="_blank">Google Gears</a> that at least will make your email accessible without an internet connection. But you can also use POP3 or IMAP of course. As we speak I am downloading all my mail to my laptop, just in case.</li>
</ol>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>517</wp:post_id>
		<wp:post_date>2007-12-23 13:43:54</wp:post_date>
		<wp:post_date_gmt>2007-12-23 12:43:54</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>why-i-use-gmail</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="because-i-care"><![CDATA[Because I Care]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>WebFS and DataPortability.org</title>
		<link>http://zef.me/2008/01/04/webfs-and-dataportability-org/</link>
		<pubDate>Fri, 04 Jan 2008 14:42:19 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2008/01/04/webfs-and-dataportability-org/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>The work I was going to do with OmniDrive (and their “dozens of partners”) on WebFS is <a href="http://www.readwriteweb.com/archives/omnidrive_heading_for_deadpool.php" target="_blank">probably never going to happen</a>. I was a bit surprised by their <a href="http://www.omnidrive.com/blog/2007/12/" target="_blank">last blog post</a> about OmniDrive’s 1.0 release which states that “The new release will fully implement WebFS and will allow user to mount Gmail, Facebook, Flickr, FTP and many other storage endpoints and to make them accessible from a single point (and API)”, even though, as far as I know, there’s no WebFS spec at all.</p>
<p>Therefore, just before 2007 ended I decided to take WebFS to <a href="http://www.dataportability.org" target="_blank">the data portability workgroup</a>, a group of people promoting and working on standards to make set the user’s data free. Of course, this is what WebFS is all about and thus it seems a good fit.<br><br>I am now going to help some people in the data portability workgroup on a project that they had already started — WRFS. The Web Relational FileSystem (don’t worry — just a working title). Some <a href="http://groups.google.com/group/dataportability-public/web/web-relational-file-system---wrfs" target="_blank">information can be found here</a>. It seems that they have been working mostly on a protocol for data discovery and linking that to the user’s OpenID. So, if you would log in to some WRFS-enabled web application using OpenID, you can instantly give it access to your data (such as pictures, documents and so forth) that you may have stored on other services.<br><br>The work <a href="http://www.webfilesystem.org" target="_blank">I’ve been doing on WebFS</a> is more about how to retrieve, store and manipulate data and data collections. So it seems our work will complement perfectly.<br><br>Today and yesterday you read about <a href="http://www.dataportability.org" target="_blank">dataportability.org</a> everywhere, because of mr. Scoble. <a href="http://scobleizer.com/2008/01/03/ive-been-kicked-off-of-facebook/" target="_blank">Who was kicked off facebook</a> for a while, because he used <a href="http://scobleizer.com/2008/01/03/what-i-was-using-to-hit-facebook/" target="_blank">software</a> to pull out all of his friendship information (his “social graph”). Of course, this raises data portability issues. He decided to join the DP workgroup too. Just now, the story broke that Chris Saad (the leader of the DP workgroup) has<a href="http://www.techcrunch.com/2008/01/04/facebook-invited-to-join-the-dataportability-work-group/" target="_blank"> publicly invited facebook to join DP</a>.<br><br>Things can move fast when they involve Robert Scoble.<br><br>I don’t care all that much about making social graphs portable, I care more about my other data. Anyway, I’m looking forward to actually making the WebFS/WRFS vision happen. To participate consider joining the <a href="http://groups.google.com/group/dataportability-public" target="_blank">public dataportability mailing list</a>.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>562</wp:post_id>
		<wp:post_date>2008-01-04 15:42:19</wp:post_date>
		<wp:post_date_gmt>2008-01-04 14:42:19</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>webfs-and-dataportability-org</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Amazon’s new SimpleDB</title>
		<link>http://zef.me/2007/12/16/amazons-new-simpledb/</link>
		<pubDate>Sun, 16 Dec 2007 19:33:49 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/12/16/amazons-new-simpledb/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Amazon is about to launch it’s super-scalable database web service, SimpleDB. This is supposed to be the missing link in their <a href="http://www.amazon.com/S3-AWS-home-page-Money/b/ref=sc_fe_l_2?ie=UTF8&amp;node=16427261&amp;no=3435361&amp;me=A36L942TSJ2AJA" target="_blank">great storage service</a> and <a href="http://www.amazon.com/b/ref=sc_fe_l_2?ie=UTF8&amp;node=201590011&amp;no=3435361&amp;me=A36L942TSJ2AJA" target="_blank">virtual server</a> service. Looking forward to play with it. Amazon is now offering a great package for small companies who want to launch (web 2.0) applications on the web. You can run your application on EC2, store your data on S3 and your relational data in SimpleDB. I haven’t looked at SimpleDB in detail yet, but here’s some links of good articles about SimpleDB:</p>
<ul>
<li><a href="http://www.readwriteweb.com/archives/amazon_web_services_simpledb.php" target="_blank">On Read/Write Web</a></li>
<li><a href="http://radar.oreilly.com/archives/2007/12/amazon_launches.html" target="_blank">On O’Reilly Radar</a></li>
<li><a href="http://gigaom.com/2007/12/14/amazon-simple-db/" target="_blank">On GigaOM</a></li>
</ul>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>594</wp:post_id>
		<wp:post_date>2007-12-16 20:33:49</wp:post_date>
		<wp:post_date_gmt>2007-12-16 19:33:49</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>amazons-new-simpledb</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Reinventing the Wheel Attempt 2: Web Plugins</title>
		<link>http://zef.me/2007/12/26/reinventing-the-wheel-attempt-2-web-plugins/</link>
		<pubDate>Wed, 26 Dec 2007 10:17:52 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/12/26/reinventing-the-wheel-attempt-2-web-plugins/</guid>
		<description></description>
		<content:encoded><![CDATA[
<p>The nice thing about a big shift like moving from desktop applications to web applications is that you get to reinvent a lot of stuff. Things that have been around in desktop applications and operating systems forever are reinvented for the web and people get excited about it.<br><br>Over two and a half years ago I wrote about <a href="http://www.zefhemel.com/archives/2005/03/09/web-application-plugins" target="_blank">web-application plugins</a>. As the name suggests these are very similar to plugins for desktop applications, like Adobe Photoshop, Mozilla Firefox, Microsoft Word and so on — except they’re for the web! A pretty obvious idea right? The only thing I had to come up with is how this would operate (you need a two-way communication mechanism between the plugin’s server and application’s server), but it was nothing a webservice couldn’t solve. Well guess what, this year it turned out I was way ahead of the curve. The current state of the art is set by Facebook, Google’s OpenSocial and Netvibes. What they did is <em>reintroduce windows</em>. Windows? No, not the operating system, the desktop metaphor. The idea of having a square area in which an “application” operates. Facebook calls these applications “facebook apps”, I don’t know what OpenSocial calls them, I’m guessing widgets or social widgets or something. Netvibes is much the same, only simpler. With this, these websites become “web operating systems”. Interaction between these Facebook apps/widgets is limited or non-existent. Interaction between the apps and their operating system is also restricted. I’m not very familiar with OpenSocial, but I know that Facebook apps can go outside the box a bit too. Facebook provides the developer with a couple of hooks where he, or (hypothetically) she, can plug-in new functionality (like a “stab me in the back” link underneath your profile photo).<br><br>Other web applications are panicking because platformization is the new pink. You thought that you would keep your developer users happy with your brand new RSS feeds or fancy REST API? Hah! No, now they want to build applications that not only accompany your web app, but even run <em>inside</em> it. The question is, does this make sense for your application? For Facebook and other social networks it does. However, does it make sense to run these kinds of applications inside your online office suite, your e-mail application, your whatsidoodad? Well it depends how much you’re attached to the idea of having <em>applications</em> run inside your application (yeah, I know… not confusing at all). Something much more interesting is allowing developer users <em>plug in</em> to your application and extend its functionality. Get it? They need a <em>web plugin API</em>!<br><br>You might say, “hey! We already can extend current web applications, have you heard of <a href="https://addons.mozilla.org/en-US/firefox/addon/748" target="_blank">GreaseMonkey</a>? It’s frickin’ awesome!” I must say that I disagree, it’s not that awesome. GreaseMonkey is a Firefox add-on. You can download scripts that can modify the behavior of certain websites. Like, <a href="http://code.google.com/p/gmail-greasemonkey/" target="_blank">integrate Google Reader into Gmail, add saved searches</a>. If the web applications provides no plug-in API whatsoever, then, sure, this is the best you can do. However, can you see how suboptimal this is? The whole point of web applications is that you can log in to them from everywhere and get the same behavior, all your data travels with you and so on. GreaseMonkey scripts do away with that. If I want the same behavior and cool features everywhere, I have to take my scripts and GreaseMonkey add-ons with me everywhere.<a href="http://www.rememberthemilk.com/services/gmail/" target="_blank"> Remember the Milk</a>, is another great feature for Gmail, but it requires a firefox extension, so I’m not going to use it — I want my Gmail to look the same everywhere I log in, I’m strange like that.<br><br>What you want is Google to open up their interface. To let them <em>offer you a plug-in API</em>. “But they’d never do that, they’re not going to open Gmail up!” you might say. But you’re wrong. They already do, except they did it at the wrong level. In the <a href="http://code.google.com/p/gmail-greasemonkey/wiki/GmailGreasemonkey10API" target="_blank">new version of Gmail there’s a GreaseMonkey API</a>! Doesn’t that seem absurd? (Some say it’s awesome.) What I would like is a way to load up Gmail plugins from my Gmail settings and have them available everywhere I go. Why are they not doing this? It’s not that hard. And let’s face it, it’s the obvious next wheel to invent.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>625</wp:post_id>
		<wp:post_date>2007-12-26 11:17:52</wp:post_date>
		<wp:post_date_gmt>2007-12-26 10:17:52</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>reinventing-the-wheel-attempt-2-web-plugins</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Our Sunshine Buddies</title>
		<link>http://zef.me/2007/12/29/our-sunshine-buddies/</link>
		<pubDate>Sat, 29 Dec 2007 10:57:00 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/12/29/our-sunshine-buddies/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Powered by the sun.</p>

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>951</wp:post_id>
		<wp:post_date>2007-12-29 11:57:00</wp:post_date>
		<wp:post_date_gmt>2007-12-29 10:57:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>our-sunshine-buddies</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="personal"><![CDATA[Personal]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>This Saddens Me</title>
		<link>http://zef.me/2007/12/12/this-saddens-me/</link>
		<pubDate>Wed, 12 Dec 2007 08:07:05 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/12/12/this-saddens-me/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p><a href="http://www.boingboing.net/2007/12/11/w00t-is-merriamwebst.html" target="_blank">BoingBoing</a> (and many others): “W00t is Meriam-Webster’s Word of the Year for 2007”:</p>
<blockquote>Voters at Merriam-Webster’s Word of the Year 2007 poll have chosen<br>“w00t” as 2007’s most iconic word. M-W says that the word is a gamer’s<br>acronym for “we own the other team,” but I’m inclined to thing that<br>that’s a backronym, a back-formed acronym created to explain a word<br>already in use.</blockquote>
<p>And I’m inclined to think that a bunch of nerds hacked the poll.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1030</wp:post_id>
		<wp:post_date>2007-12-12 09:07:05</wp:post_date>
		<wp:post_date_gmt>2007-12-12 08:07:05</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>this-saddens-me</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="because-i-care"><![CDATA[Because I Care]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>On the Eee</title>
		<link>http://zef.me/2007/12/10/on-the-eee/</link>
		<pubDate>Mon, 10 Dec 2007 12:01:42 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/12/10/on-the-eee/</guid>
		<description></description>
		<content:encoded><![CDATA[
<p>When I <a href="http://www.zefhemel.com/archives/2007/11/30/the-eee" target="_blank">talked about the Eee</a>, <a href="http://sourcesmouth.co.uk/blog/Forget-the-Linux-Desktop-it-s-the-Linux-Laptop-that-matters.html" target="_blank">this is what I really wanted to say</a>.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1299</wp:post_id>
		<wp:post_date>2007-12-10 13:01:42</wp:post_date>
		<wp:post_date_gmt>2007-12-10 12:01:42</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>on-the-eee</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="because-i-care"><![CDATA[Because I Care]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>No Bubble</title>
		<link>http://zef.me/2007/12/11/no-bubble/</link>
		<pubDate>Tue, 11 Dec 2007 08:05:46 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/12/11/no-bubble/</guid>
		<description></description>
		<content:encoded><![CDATA[
<a href="https://www.youtube.com/v/fi4fzvQ6I-o&amp;rel=1"></a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1351</wp:post_id>
		<wp:post_date>2007-12-11 09:05:46</wp:post_date>
		<wp:post_date_gmt>2007-12-11 08:05:46</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>no-bubble</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="because-i-care"><![CDATA[Because I Care]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Anyone Having Trouble with Gmail?</title>
		<link>http://zef.me/2007/12/11/anyone-having-trouble-with-gmail/</link>
		<pubDate>Tue, 11 Dec 2007 08:10:13 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/12/11/anyone-having-trouble-with-gmail/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Anybody seeing this as often as I do when going to Gmail?</p>
<p>For the past week now I see this every so often. Kind of annoying, especially when there’s an email you want to read. The “basic HTML view” usually works though, but it’s not the same.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1425</wp:post_id>
		<wp:post_date>2007-12-11 09:10:13</wp:post_date>
		<wp:post_date_gmt>2007-12-11 08:10:13</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>anyone-having-trouble-with-gmail</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="personal"><![CDATA[Personal]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>How the ID Looks Like</title>
		<link>http://zef.me/2007/12/07/how-the-id-looks-like/</link>
		<pubDate>Fri, 07 Dec 2007 11:02:46 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/12/07/how-the-id-looks-like/</guid>
		<description></description>
		<content:encoded><![CDATA[
<p>I want to apologize upfront if I come through as an arrogant know-it-all, but this thing has been bugging me for a while now. You could ask who I think I am, clearly assuming I can lecture other people on their English, even though mine is far from perfect — but I’m going to anyway.<br><br>Dutch English speakers (Dutch people that speak English) listen up. There are two mistakes that I hear Dutch people make all the time. And the problem with these things is that once you notice them, you’ll keep noticing them forever. You may argue that it is in fact me who has the problem, so I should deal with it, however for me it’s much easier if the entire Dutch population changes its ways rather than me working on my stickler ears.<br><br>Mistake #1: Pronouncing the word “idea” as “aidee” instead of “aideeah” (there is an “a” sound there people). This often confuses me, because they may actually both mean “ID” (identifier, or something like a passport) or “idea”.<br><br>Mistake #2: “How does it look like?” This is wrong. It’s either “How does it look?” or “What does it look like?” Germans also seem to make this mistake a lot.<br><br>That’s it. If everyone could stop making those two mistakes, that would life much more pleasurable for me.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1426</wp:post_id>
		<wp:post_date>2007-12-07 12:02:46</wp:post_date>
		<wp:post_date_gmt>2007-12-07 11:02:46</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>how-the-id-looks-like</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="because-i-care"><![CDATA[Because I Care]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Hulu Invite Anyone?</title>
		<link>http://zef.me/2007/12/10/hulu-invite-anyone/</link>
		<pubDate>Mon, 10 Dec 2007 07:11:32 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/12/10/hulu-invite-anyone/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Got an invitation in the mail this morning to try out <a href="http://www.hulu.com/" target="_blank">Hulu</a>. Hulu is the new — I think NBC and some others — site where you can watch new episodes of their TV series (The Office, The Simpsons, My Name is Earl and many more). It turns out to be US only. And as I’m not in the US, there’s not much point in me using the invite. So, if you are a US citizen and would like to try out Hulu (it turns out there are not that many people who have access), drop me a line.</p>
<p><strong>Update:</strong> The invite is gone. Sorry.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1458</wp:post_id>
		<wp:post_date>2007-12-10 08:11:32</wp:post_date>
		<wp:post_date_gmt>2007-12-10 07:11:32</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>hulu-invite-anyone</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>RIP IT Conservative</title>
		<link>http://zef.me/2007/12/21/rip-it-conservative/</link>
		<pubDate>Fri, 21 Dec 2007 12:13:53 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/12/21/rip-it-conservative/</guid>
		<description></description>
		<content:encoded><![CDATA[
<p><a href="http://itconservative.blogspot.com/2007/12/everything-has-to-end.html" target="_blank">Everything has to end</a>.<br><br>For those who didn’t read IT Conservative, feel free to <a href="http://itconservative.blogspot.com" target="_blank">browse the archives</a>. I had a good time writing it. But there’s simply not enough time.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1487</wp:post_id>
		<wp:post_date>2007-12-21 13:13:53</wp:post_date>
		<wp:post_date_gmt>2007-12-21 12:13:53</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>rip-it-conservative</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="because-i-care"><![CDATA[Because I Care]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>What is Business Software, Really?</title>
		<link>http://zef.me/2007/12/10/what-is-business-software-really/</link>
		<pubDate>Mon, 10 Dec 2007 08:04:26 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/12/10/what-is-business-software-really/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>One of the goals of the <a href="http://swerl.tudelft.nl/bin/view/MoDSE" target="_blank">MoDSE</a> project is to build actual enterprise software in a model-driven manner. Doesn’t that sound cool? Apparently, and sadly, enterprise software is <a href="http://blogs.zdnet.com/projectfailures/?p=524" target="_blank">not cool</a>. Pity. The question then becomes, if enterprise software is not cool, then, what is it? I was reminded of this question again when I read <a href="http://blogs.zdnet.com/projectfailures/?p=524" target="_blank">this article</a>, which states the following about enterprise software:</p>
<blockquote>Enterprise software is all about helping organizations conduct their basic business in a better, more cost-effective manner. In software jargon, it’s intended to “enable core business processes” with a high degree of reliability, security, scalability, and so on. These aren’t sexy, cool attributes, but are absolutely essential to the smooth running of businesses, organizations, and governments around the world.</blockquote>
<p>This description of the purpose of enterprise software is quite clear. But whenever I hear things like “enable core business processes”, “implement business rules”, “business logic”, I’m like, what the hey are you <em>really</em> talking about? A few years ago, just for “fun”, I decided to look into Enterprise Java Beans (version 2 at the time). The main reason was probably that I thought it sounded cool. Man, was I disappointed. EJB was not cool, far from it. To me, it seemed like yet another overly-complex way (involving writing 5 types of Java interfaces to the same thing) of managing and manipulating rows in a database and keeping state. And honestly, now that we are generating EJB (albeit EJB 3.0) from our WebDSL code, I cannot conclude anything more than that EJBs are not much more than that. Simply data entities and variables — database tables essentially. Polished-up and prefixed by the enterprise “E” to look shiny to the enterprise.<br><br>The nice thing is that in WebDSL, data entities just look like simple database rows again. And state really is not much more than a set of variables. We demoed WebDSL to some “enterprise programmers”, and they seem hooked, but will that be enough?<br><br>We will have to work on an extra shiny logo to compensate for the lack of complexity ;)</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1533</wp:post_id>
		<wp:post_date>2007-12-10 09:04:26</wp:post_date>
		<wp:post_date_gmt>2007-12-10 08:04:26</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>what-is-business-software-really</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>VirtualBox… I’m impressed!</title>
		<link>http://zef.me/2007/12/24/virtualbox-im-impressed/</link>
		<pubDate>Mon, 24 Dec 2007 13:22:30 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/12/24/virtualbox-im-impressed/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>I’ve been playing around with different virtualization programs lately. When I was running OS X I tried Parallels and VMWare fusion. Now that I’m running Linux I tried VMWare Server and Player. They all work well, but <a href="http://www.virtualbox.org/" target="_blank">VirtualBox</a> blew me away. VirtualBox is free and it has the seamless feature (where you can have windows of your guest operating system floating around the screen, outside the VM screen). Parallels and VMWare fusion both have this feature, but I hadn’t yet seen it on Linux (or Windows). It works really well!</p>
<p><em>(Click for a larger version)</em></p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1598</wp:post_id>
		<wp:post_date>2007-12-24 14:22:30</wp:post_date>
		<wp:post_date_gmt>2007-12-24 13:22:30</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>virtualbox-im-impressed</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Moved to Slicehost!</title>
		<link>http://zef.me/2007/12/27/moved-to-slicehost/</link>
		<pubDate>Thu, 27 Dec 2007 11:14:35 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/12/27/moved-to-slicehost/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p><a href="http://www.dreamhost.com" target="_blank">Dreamhost</a> was getting really slow lately (the server was under a load of 11–12 constantly). So I decided to get a my own VPS (Virtual Private Server) again. I chose <a href="http://www.slicehost.com" target="_blank">Slicehost</a> because I’ve been hearing good things about them and because they’re cheap ($20/month). I got 256mb RAM and 10G of space, and because it’s a VPS you get root access (mine is running Ubuntu Gutsy Server). I was considering getting a slice with 512MB ram so that I could run production WebDSL sites (you need at least 512mb of ram for JBoss to run), but decided that I would wait with that for a while, I can upgrade later anyway.</p>
<p>Hope you’re enjoying the site’s improved speed!</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1651</wp:post_id>
		<wp:post_date>2007-12-27 12:14:35</wp:post_date>
		<wp:post_date_gmt>2007-12-27 11:14:35</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>moved-to-slicehost</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Volta: Microsoft’s answer to Google’s GWT</title>
		<link>http://zef.me/2007/12/10/volta-microsofts-answer-to-googles-gwt/</link>
		<pubDate>Mon, 10 Dec 2007 09:55:00 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2007/12/10/volta-microsofts-answer-to-googles-gwt/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p><a href="http://ajaxian.com/archives/microsoft-labs-volta-net-web-toolkit" target="_blank">Microsoft announces Volta</a>:</p>
<blockquote>“The idea is that you start out building your application, focusing on the functionality, the look and feel, until you’re satisfied with it and then you repurpose it into an AJAX application or whatever,” Erik Meijer, Volta’s principal architect and a member of Microsoft’s SQL Server team, said in an interview. “You incrementally morph a standard client-only application into a Web application. The programmer specifies the intent and then we’re going to insert all the necessary code to do the ‘how.’”</blockquote>
<p>I’ve always been intrigued by the work Erik Meijer has been doing at Microsoft (and before) — and not only because he’s Dutch. LINQ, which he co-architected, is a great idea and in WebDSL I’m stealing some bits and pieces of it. The idea behind Volta, as he describes it seems perfect to me. Your initial thought should not be about whether you’ll deploy it as a web application or desktop application, but what it should do. Software should be easily retargetable, and that is what Volta is geared at, for those using Microsoft technologies.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1727</wp:post_id>
		<wp:post_date>2007-12-10 10:55:00</wp:post_date>
		<wp:post_date_gmt>2007-12-10 09:55:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>volta-microsofts-answer-to-googles-gwt</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Emacs vs Vim</title>
		<link>http://zef.me/2008/01/13/emacs-vs-vim/</link>
		<pubDate>Sun, 13 Jan 2008 17:30:20 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2008/01/13/emacs-vs-vim/</guid>
		<description></description>
		<content:encoded><![CDATA[
<p>Funny. I have been a heavy emacs user the past months at my job (and not because everybody else is using it, they’re not) and it’s been quite great. During my recent formatting on my laptop to make more room for my Linux installation (I only Linux installed on my Macbook now) I accidentally removed my .emacs file (which contains all the customizations) and I realized how depentent I am on that. It took me months to customize emacs to my liking. And it was all gone. What now? For now I switched back to Vim, which does mostly what I want without any customization. When searching around a bit I found that <a href="http://www.oreilly.com/pub/a/oreilly/ask_tim/1999/unix_editor.html" target="_blank">Tim O’Reilly had the same experience</a>. He’s a vim user now because of that. Let’s see how things will go with me.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>179</wp:post_id>
		<wp:post_date>2008-01-13 18:30:20</wp:post_date>
		<wp:post_date_gmt>2008-01-13 17:30:20</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>emacs-vs-vim</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="important"><![CDATA[Important]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Ordered Presentation Zen, the Book</title>
		<link>http://zef.me/2008/01/11/ordered-presentation-zen-the-book/</link>
		<pubDate>Fri, 11 Jan 2008 09:42:16 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2008/01/11/ordered-presentation-zen-the-book/</guid>
		<description></description>
		<content:encoded><![CDATA[
<p><a href="http://www.presentationzen.com/" target="_blank">Presentation Zen</a> has been one of my favorite blogs for a while now. And the nice thing about blogs is that if you have enough of an audience, it’s a great opportunity for a publisher to get the author to write a book. That’s what happened to Garr Reynolds of Presentation Zen and <a href="http://www.amazon.com/gp/product/0321525655/103-6148611-3957463?ie=UTF8&amp;tag=garrreynoldsc-20&amp;linkCode=xm2&amp;camp=1789&amp;creativeASIN=0321525655" target="_blank">his book is out now</a>. I pre-ordered the book and according to Amazon it has shipped now. Looking forward to it!</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>314</wp:post_id>
		<wp:post_date>2008-01-11 10:42:16</wp:post_date>
		<wp:post_date_gmt>2008-01-11 09:42:16</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ordered-presentation-zen-the-book</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="personal"><![CDATA[Personal]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Apple a bit Needy?</title>
		<link>http://zef.me/2008/01/28/apple-a-bit-needy/</link>
		<pubDate>Mon, 28 Jan 2008 08:33:04 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2008/01/28/apple-a-bit-needy/</guid>
		<description></description>
		<content:encoded><![CDATA[
<p>Last Saturday we went to Saturn, a <em>huge</em> electronics store in Rotterdam, to buy Justyna an iPod. Incidentally, this is the kind of shopping that I like, much better than acting as a clothes hanger for three hours in a row.<br><br>She got an iPod nano 4GB with a “cute” pink leather “jacket”. Great. When we got home we set it up. It’s always fun to see how people who are not that much involved in IT that much see things and what they notice. Of course the setup went smooth, you can leave that to Apple. What disturbed her, however, was Apple’s pushing of (1) registering her iPod which included giving her name, address, phone number and work industry and after that (2) pushing her to get a iTunes Music Store account, which means more information plus yet another user name and password. Even though she will most probably never buy any song there. Or, as she put it, “I don’t want a stupid Apple ID!”<br><br>We decided to break off the registration procedure. But now, every time you plugin the device, it will ask to register and then, every time you plug in the device, you have to click “Later”. We’ll see how long she will be able to resist.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>346</wp:post_id>
		<wp:post_date>2008-01-28 09:33:04</wp:post_date>
		<wp:post_date_gmt>2008-01-28 08:33:04</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>apple-a-bit-needy</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="because-i-care"><![CDATA[Because I Care]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="personal"><![CDATA[Personal]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Bazaar Version Control System</title>
		<link>http://zef.me/2008/01/20/bazaar-version-control-system/</link>
		<pubDate>Sun, 20 Jan 2008 20:43:23 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2008/01/20/bazaar-version-control-system/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>The company behind <a href="http://www.ubuntu.com" target="_blank">Ubuntu</a> has now released version 1.0 of <a href="http://bazaar-vcs.org/" target="_blank">Bazaar,</a> a distributed version control system. Features:</p>
<ul>
<li>
<strong>Friendly</strong>. Distributed version control doesn’t need to be complex. Bazaar is <em>Distributed Version Control for Human Beings</em>. Bazaar has a natural feel because we focus on usability, particularly task efficiency.</li>
<li>
<strong>Smart</strong>. Bazaar has perfect support for renaming files AND directories. This means developers can refactor without holding back because of fear of merging. It also means you can unleash your community and merge efficiently even from contributors who are radically restructuring the tree.</li>
<li>
<strong>Fast</strong>. Almost every open source project can get the advanced features of Bazaar without slowing down its developers. See our impressive <a href="http://bazaar-vcs.org/Benchmarks" target="_blank">benchmark results</a> across a wide range of open source projects.</li>
<li>
<strong>Efficient</strong>. Bazaar’s default storage format is highly efficient, clearly better than its main competitors according to our <a href="http://bazaar-vcs.org/Benchmarks/SpaceEfficiency" target="_blank">disk space benchmarks</a>.</li>
<li>
<strong>Lightweight</strong>. No dedicated server with Bazaar installed is needed, just FTP access to a web server. A smart server is available for those requiring additional performance or security but it is not required in many cases — Bazaar 1.x over plain http performs well.</li>
<li>
<strong>Just a tool</strong>. Bazaar can play a key role is helping you get from <em>great idea</em> to <em>running code in the hands of end users</em>. Tools are only part of the puzzle though so our documentation explicitly sets out to make you productive, explaining how to use Bazaar effectively, presenting best practices and insightful tips.</li>
<li>
<strong>Extensible</strong>. Bazaar is designed as a Python API with a plugin system, so it is easy to embed in your tools and projects and easy to extend or integrate with existing infrastructure. Integration via XML is supported by a plugin. Whether you are a single user keeping track of configuration files or a team of 100s of people on multiple continents, Bazaar is a great choice.</li>
<li>
<strong>Embeddable</strong>. A key design feature of Bazaar is support from the ground up for pluggable storage formats. One size does not fit all, particularly when new application delivery platforms — like the OLPC, iPod and Amazon’s S3 — have different characteristics to traditional filesystems. If you want intelligent version control embedded into your application or content management system, Bazaar has the architecture you need.</li>
<li>
<strong>Safe</strong>. Bazaar is backed by a thriving open source community and sponsored by Canonical, one of the fastest growing open source companies around. The development process follows best practices with code review of all core and community changes. Bazaar has a huge test suite (over 10,000 tests) that ensures that new features can be rapidly added without breaking existing ones. We are rapidly building the world’s best VCS, delivering several dozen improvements to our adopters each and every month.</li>
<li>
<strong>Free</strong>. Bazaar is available under the GPL v2 or later. If you want to embed Bazaar into your products under a different license, please contact us.</li>
</ul>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>373</wp:post_id>
		<wp:post_date>2008-01-20 21:43:23</wp:post_date>
		<wp:post_date_gmt>2008-01-20 20:43:23</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>bazaar-version-control-system</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Cool as in Software</title>
		<link>http://zef.me/2008/01/06/cool-as-in-software/</link>
		<pubDate>Sun, 06 Jan 2008 17:21:15 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2008/01/06/cool-as-in-software/</guid>
		<description></description>
		<content:encoded><![CDATA[
<p>Since I’ve moved over to Linux for my work, I thought I’d look around for some good Linux podcasts. A week ago or so I found out about the <a href="http://www.linuxactionshow.com" target="_blank">Linux Action Show</a>. I must admit, the title sounds kind of lame, but when you forget about that, this podcast is great! The first episode I listened to (<a href="http://www.linuxactionshow.com/?p=159" target="_blank">episode 68</a>) is pure gold. Especially the second half where they talk to one of the KDE 4 guys. I’m not all that interested in KDE (I use GNOME), but Bryan’s (one of the two hosts) view on the Free Software vs. Open Source is something I can get behind. He too has problems with Richard Stallman and many other of the FSF people. It’s a shame I stopped writing <a href="http://itconservative.blogspot.com/2007/12/everything-has-to-end.html" target="_blank">IT Conservative</a>, I could have written a nice post about this ;)<br><br>What Bryan (or Chris? I forgot) proposes in this episode is to get rid of all the Free Software and Open Source talk. Stop the fundamentalism and confusing terminology and obnoxious definitions of freedom. He proposes to call it simply “cool software”. No difficult legal licenses, just the CPL (Cool Public License) which would simply say “Don’t be a dick. Just be cool.”<br><br>If you download software and make some improvements, you send the modifications back to the author. Not because you <em>have</em> to or because it’s <em>immoral not to</em>, but just because it’s the <em>cool thing to do</em>. If you use a library in your own software, you give the author credit for that. Not because the library’s license says you have to, but <em>because it’s the cool thing to do</em>.<br><br>Don’t be a dick. Just be cool.<br><br>If you wrote some software and your life does not depend on selling that software, just release it for free. If people ask for the source code because they want to make modifications. Just release that too. That’s the cool thing to do.<br><br>But isn’t coolness a very subjective term? Meh. Not really.<br><br>But isn’t this just very naive, can’t people then just take your software, sell it and keep all the profits? Not really, because that’s not cool.<br><br>Don’t be a dick. Just be cool.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>382</wp:post_id>
		<wp:post_date>2008-01-06 18:21:15</wp:post_date>
		<wp:post_date_gmt>2008-01-06 17:21:15</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>cool-as-in-software</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="because-i-care"><![CDATA[Because I Care]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Sun Acquires MySQL</title>
		<link>http://zef.me/2008/01/16/sun-acquires-mysql/</link>
		<pubDate>Wed, 16 Jan 2008 13:39:51 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2008/01/16/sun-acquires-mysql/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p><a href="http://radar.oreilly.com/archives/2008/01/sun_acquires_mysql.html" target="_blank">Tim O’Reilly</a>:</p>
<blockquote>Sun Microsystems announced this morning that it has agreed to acquire open source database leader MySQL AB<br>for $1 billion in cash and assumed stock options. [..]<br><br>This seems to me to be a great deal both for Sun and for MySQL. Anyone<br>who follows this blog or has heard my talks will have seen me say “Data<br>is the Intel Inside” of the next generation of internet applications,<br>the very heart of Web 2.0. And of course, most of those Web 2.0<br>applications are built on the LAMP stack, where M stands for MySQL, far<br>and away the leading open source database.</blockquote>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>616</wp:post_id>
		<wp:post_date>2008-01-16 14:39:51</wp:post_date>
		<wp:post_date_gmt>2008-01-16 13:39:51</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>sun-acquires-mysql</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Microsoft joins DataPortability.org</title>
		<link>http://zef.me/2008/01/23/microsoft-joins-dataportability-org/</link>
		<pubDate>Wed, 23 Jan 2008 16:01:36 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2008/01/23/microsoft-joins-dataportability-org/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p><a href="http://www.readwriteweb.com/archives/microsoft_joining_dataportabil.php" target="_blank">Read/WriteWeb</a>:</p>
<blockquote>Chris Saad, Chairman of the Data Portability Working Group, confirmed to me this morning that Microsoft’s David Treadwell, a VP at Windows Live,<br>will be joining the organization. Microsoft is expected to make a<br>formal announcement in the coming days. News first leaked out via a<br>shadowy post at Computerworld this morning.</blockquote>
<p>Things are moving fast, at least in terms of support of the initiative. Next: results.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>795</wp:post_id>
		<wp:post_date>2008-01-23 17:01:36</wp:post_date>
		<wp:post_date_gmt>2008-01-23 16:01:36</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>microsoft-joins-dataportability-org</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>A New Series: Ideas That Never Happened</title>
		<link>http://zef.me/2008/02/05/a-new-series-ideas-that-never-happened/</link>
		<pubDate>Tue, 05 Feb 2008 09:03:56 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2008/02/05/a-new-series-ideas-that-never-happened/</guid>
		<description></description>
		<content:encoded><![CDATA[
<p>I am an impulsive person. Every so often I come up with an idea, and before I know it I set up a website for it, bought a domain name and am ready to go. A few days, sometimes hours later I see that it wasn’t such a good idea anyway, or if it was: that there’s no way I have time for it.<br><br>I thought that, instead of letting the idea drown and be forgotten, I could share some of them with you. Who know somebody does see value, or at least gets a laugh about this silly naive side of Mr. Zef.<br><br><strong>Idea 1: The Curves</strong><br><br>Mostly I was infatuated with the cool name I came up with, but that hardly is a reason to actually pursue it.<br><br><em>Idea:</em> start a new blog about curves in technology and companies involved in it, i.e. big changes that either are about to happen (ahead of the curve) or are in the process of happening. This would be sort of like TechCruch and Read/Write Web, instead more focussed on the bigger picture. Personal goal: actually blogging finished quality thoughts, rather than half done stories as I post too often on this blog. Long term goal: hire other journalists to write it with me.<br><br><em>Reason for not doing it:</em> This costs time and lots of it. I have a full-time job and a girlfriend I like to spend time with in the evenings and weekends. When am I supposed to do this? Other than that, what qualifies me to in fact find these curves in the market? Bad idea.<br><br>More to come. I’m sure.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>982</wp:post_id>
		<wp:post_date>2008-02-05 10:03:56</wp:post_date>
		<wp:post_date_gmt>2008-02-05 09:03:56</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>a-new-series-ideas-that-never-happened</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>SIOC</title>
		<link>http://zef.me/2008/01/04/sioc/</link>
		<pubDate>Fri, 04 Jan 2008 17:30:32 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2008/01/04/sioc/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p><a href="http://sioc-project.org" target="_blank">SIOC</a> seems like a very interesting project:</p>
<blockquote>Semantically-Interlinked Online Communities or SIOC is a framework aimed at connecting online community sites and internet-based discussions. Currently, online communities (boards, blogs, etc.) are like islands — they contain valuable information but are not well connected. SIOC allows us to interlink these sites, and enables the extraction of richer information from various discussion services.</blockquote>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1024</wp:post_id>
		<wp:post_date>2008-01-04 18:30:32</wp:post_date>
		<wp:post_date_gmt>2008-01-04 17:30:32</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>sioc</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Macbook in the Air</title>
		<link>http://zef.me/2008/01/16/macbook-in-the-air/</link>
		<pubDate>Wed, 16 Jan 2008 08:12:37 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2008/01/16/macbook-in-the-air/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>During yesterday’s keynote, Apple’s CEO, Steve Jobs introduced the <a href="http://www.apple.com/macbookair/" target="_blank">Macbook Air</a>.</p>
<p>It’s an ultra-thin and light Macbook. <a href="http://www.apple.com/macbookair/specs.html" target="_blank">It has</a> a 13" screen, 1.6 Ghz C2Duo processor, 2GB of RAM, 80GB hard drive, full-size keyboard, multitouch touchpad, one Micro-DVI out and one USB 2.0 port. It’s an interesting product. But I wonder is where it fits in.<br><br>For use as a main computer it might be a tad limited. The processor is acceptable, as is the memory, but the hard drive might not be sufficient. Also I think <em>one</em> USB port is <em>really</em> not enough. I have two on my MacBook and I already have problems with that. Also, there’s no UTC network connector and no CD/DVD drive. There are ways around that (such as a USB CD player, or this new feature that is called remote CD or whatever), but still, as a main computer — I’m not convinced.<br><br>So, what would it be used for instead? As a travel mate maybe. It’s light, so you can bring it anywhere, to work, in the train, on the plane. Its battery life is acceptable (up to 5 hours, an hour less than my Macbook). But if it’s a laptop that you’re supposed to have just for travel, presentations, and generally, to carry around with you everywhere, then the price tag is a <em>bit</em> high (this baby costs $1799).<br><br>And if you want something to carry around with you, something you only use for presentations and while traveling, but not as your main work station, isn’t an <a href="http://www.zefhemel.com/archives/2007/11/30/the-eee" target="_blank">Asus Eee</a> much more interesting? For one it’s heck of a lot cheaper ($299), which also means it’s not as much of a disaster if you accidentally leave it in the train (not something that would happen to me of course *cough*). Sure it’s not as powerful (it has a 900Mhz processor, 512MB RAM, 4–8GB of HD space), and it’s much smaller (it has a 7" display), but that’s the point. It’s a cheap device for on the go. It’s not <em>trying</em> to be a full-blown desktop. It’s pretty clear where Asus positioned it: as a cheap, ultra-portable device. Great for presentations, great for doing a bit (but admittedly — not a lot) of work on the go.<br><br>So I’m not all that thrilled with the Macbook Air.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1183</wp:post_id>
		<wp:post_date>2008-01-16 09:12:37</wp:post_date>
		<wp:post_date_gmt>2008-01-16 08:12:37</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>macbook-in-the-air</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="because-i-care"><![CDATA[Because I Care]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>DataPortability video</title>
		<link>http://zef.me/2008/01/15/dataportability-video/</link>
		<pubDate>Tue, 15 Jan 2008 20:56:06 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2008/01/15/dataportability-video/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>It’s kind of cool:</p>
<a href="http://www.vimeo.com/moogaloop.swf?clip_id=610179&amp;server=www.vimeo.com&amp;fullscreen=1&amp;show_title=1&amp;show_byline=1&amp;show_portrait=0&amp;color="></a><p><a href="http://www.vimeo.com/610179/l:embed_610179" target="_blank">DataPortability — Connect, Control, Share, Remix</a> from <a href="http://www.vimeo.com/smashcutmedia/l:embed_610179" target="_blank">Smashcut Media</a> on <a href="http://vimeo.com/l:embed_610179" target="_blank">Vimeo</a>.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1264</wp:post_id>
		<wp:post_date>2008-01-15 21:56:06</wp:post_date>
		<wp:post_date_gmt>2008-01-15 20:56:06</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>dataportability-video</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="because-i-care"><![CDATA[Because I Care]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Today’s links</title>
		<link>http://zef.me/2008/02/05/todays-links/</link>
		<pubDate>Tue, 05 Feb 2008 10:17:52 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2008/02/05/todays-links/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Today’s interesting links (from <a href="http://www.google.com/reader/shared/15370108285519011666" target="_blank">Google Reader</a>):</p>
<ul>
<li>
<a href="http://diveintomark.org/archives/2008/02/05/writing-with-ease" target="_blank">Writing with ease</a> [<a href="http://diveintomark.org/" target="_blank">dive into mark</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/boingboing/iBag/~3/229209299/unboxing-an-apple-ii.html" target="_blank">Unboxing an Apple IIc</a> [<a href="http://www.boingboing.net/" target="_blank">Boing Boing</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/boingboing/iBag/~3/227446330/story-a-about-woody.html" target="_blank">Story about Woody Allen’s favorite typeface</a> [<a href="http://www.boingboing.net/" target="_blank">Boing Boing</a>]</li>
<li>
<a href="http://www.flickr.com/photos/cgriego/2235500622/" target="_blank">Leopard Preview Bug</a> [<a href="http://www.flickr.com/photos/zefhemel/friends/" target="_blank">Photos from Zef Hemel’s contacts</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/PaulGrahamUnofficialRssFeed/~3/228641497/arcchallenge.html" target="_blank">The Arc Challenge</a> [<a href="http://www.paulgraham.com" target="_blank">Paul Graham: Unofficial RSS Feed</a>]</li>
<li>
<a href="http://dannyayers.com/2008/02/01/google-gets-foaf" target="_blank">Google gets FOAF</a> [<a href="http://dannyayers.com/" target="_blank">Raw</a>]</li>
<li>
<a href="http://diveintomark.org/archives/2008/02/02/the-real-2011-list" target="_blank">The real 2011 list</a> [<a href="http://diveintomark.org/" target="_blank">dive into mark</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/oreilly/radar/atom/~3/227417341/google_social_graph_api.html" target="_blank">Social Graph API: One small step for Google, one giant step for the Internet Operating System</a> [<a href="http://radar.oreilly.com/" target="_blank">O’Reilly Radar</a>]</li>
<li>
<a href="http://www.macrumors.com/2008/02/01/microsoft-makes-44-6-billion-bid-to-acquire-yahoo/" target="_blank">Microsoft Makes $44.6 Billion Bid to Acquire Yahoo</a> [<a href="http://www.macrumors.com" target="_blank">MacRumors : Mac News and Rumors</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/boingboing/iBag/~3/226785651/amazon-buys-audible.html" target="_blank">Amazon buys Audible, promises to kill DRM if we complain</a> [<a href="http://www.boingboing.net/" target="_blank">Boing Boing</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/Techcrunch/~3/226604644/" target="_blank">Amazon Strengthens Its Digital Hand With $300 Million Purchase of Audible</a> [<a href="http://www.techcrunch.com" target="_blank">TechCrunch</a>]</li>
<li>
<a href="http://feeds.engadget.com/~r/weblogsinc/engadget/~3/226543780/" target="_blank">Amazon adds Audible to its digital empire</a> [<a href="http://www.engadget.com" target="_blank">Engadget</a>]</li>
<li>
<a href="http://blog.w-nz.com/archives/2008/01/31/evolving-the-object-paradigm/" target="_blank">Evolving the Object Paradigm</a> [<a href="http://blog.w-nz.com" target="_blank">Intrepid Blog</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/boingboing/iBag/~3/226059457/vpro-gids-cover-1.html" target="_blank">Vpro Gids cover</a> [<a href="http://www.boingboing.net/" target="_blank">Boing Boing</a>]</li>
<li>
<a href="http://www.macworld.com/article/131864/2008/01/macbookair.html" target="_blank">Thick Review for Thin Notebook</a> [<a href="http://daringfireball.net/" target="_blank">Daring Fireball</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/readwriteweb/~3/226111968/the_rise_of_twitter_as_a_platform_for_serious_discourse.php" target="_blank">The Rise of Twitter as a Platform for Serious Discourse</a> [<a href="http://www.readwriteweb.com/" target="_blank">ReadWriteWeb</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/readwriteweb/~3/226280903/amazon_web_services_bigger_than_amazon.php" target="_blank">Amazon Web Services: Bigger Than Amazon</a> [<a href="http://www.readwriteweb.com/" target="_blank">ReadWriteWeb</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/DataPortability/~3/226245948/dataportability-report-1-30th-jan-08.html" target="_blank">The DataPortability Report #1–30th Jan 08</a> [<a href="http://www.mysyndicaat.com/myfeed/blog/default/ChrisSaad_DataPortability" target="_blank">DataPortability.org Format Updates</a>]</li>
<li>
<a href="http://davelargo.blogspot.com/2008/01/compiz-in-3d.html" target="_blank">Compiz In 3D</a> [<a href="http://planet.gnome.org/" target="_blank">Planet GNOME</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/ajaxian/~3/225727605/make-your-own-oreilly-book-cover" target="_blank">Make Your Own O’Reilly Book Cover</a> [<a href="http://ajaxian.com" target="_blank">Ajaxian</a>]</li>
</ul>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1283</wp:post_id>
		<wp:post_date>2008-02-05 11:17:52</wp:post_date>
		<wp:post_date_gmt>2008-02-05 10:17:52</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>todays-links</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Europe a Country?</title>
		<link>http://zef.me/2008/01/11/europe-a-country/</link>
		<pubDate>Fri, 11 Jan 2008 17:55:13 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2008/01/11/europe-a-country/</guid>
		<description></description>
		<content:encoded><![CDATA[
<a href="https://www.youtube.com/v/juOQhTuzDQ0&amp;rel=1"></a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1288</wp:post_id>
		<wp:post_date>2008-01-11 18:55:13</wp:post_date>
		<wp:post_date_gmt>2008-01-11 17:55:13</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>europe-a-country</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="because-i-care"><![CDATA[Because I Care]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Facebook, Google and Plaxo to Join DataPortability.org</title>
		<link>http://zef.me/2008/01/08/facebook-google-and-plaxo-to-join-dataportability-org/</link>
		<pubDate>Tue, 08 Jan 2008 19:43:34 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2008/01/08/facebook-google-and-plaxo-to-join-dataportability-org/</guid>
		<description></description>
		<content:encoded><![CDATA[
<p>Remember about the <a href="http://www.zefhemel.com/archives/2008/01/04/webfs-and-dataportabilityorg" target="_blank">dataportability workgroup</a> I recently joined? Well, as it turns out, we <a href="http://www.techcrunch.com/2008/01/08/this-day-will-be-remembered-facebook-google-and-plaxo-join-the-dataportability-workgroup/" target="_blank">recently got some new members</a>.<br><br>Busy times ahead.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1340</wp:post_id>
		<wp:post_date>2008-01-08 20:43:34</wp:post_date>
		<wp:post_date_gmt>2008-01-08 19:43:34</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>facebook-google-and-plaxo-to-join-dataportability-org</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Why WADL is Awesome</title>
		<link>http://zef.me/2008/01/08/why-wadl-is-awesome/</link>
		<pubDate>Tue, 08 Jan 2008 19:40:34 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2008/01/08/why-wadl-is-awesome/</guid>
		<description></description>
		<content:encoded><![CDATA[
<p>Many years ago, when I just learned about XML web services (it was around the time of the .NET 1.0 betas), one of the coolest things about it, I thought, was <a href="http://www.w3.org/TR/wsdl" target="_blank">WSDL.</a> The Web Service Description Language — this is a language in which you essentially define the interface of a SOAP webservice. Not because it’s a cool XML format (XML formats are hardly ever cool), but because it would allow to generate client proxies automatically from this description. So you’d find some XML webservice online, feed its WDSL interface description to some program and what you’d end up with is some C# class that allowed you to call the remote SOAP methods exposed on the web service, as method calls on a local object. Since then, generators that would do this have been developed for mostly every programming language. XML Webservices were going to conquer the world.<br><br>But not really. SOAP was considered too complex, too un-web-like. Too enterprisey. Too icky. Too, well, let’s just say it, Microsofty. <a href="http://www.xfront.com/REST-Web-Services.html" target="_blank">REST</a> was the hot new thing. And it has been ever since. Google used to offer a SOAP interface, as well as JSON and other interfaces, but recently it stopped supporting SOAP. REST has become one of the main ingredients of every web 2.0 application. Yay for the web. Yay for simplicity. Yay for, diversification?<br><br>For a while now I’ve been wondering about why SOAP didn’t make it. And especially if <a href="http://www.xmlrpc.com/" target="_blank">XML-RPC</a> wouldn’t be a good replacement for RPC (Remote Procedure Call). REST is mostly about manipulating resources (represented as URIs). You create them (POST), you write new content to them (PUT), you retrieve their content (GET) and you delete them (DELETE). Not everything can be represented like this, sometimes you just want to execute some method. Like in any program, objects don’t only have properties, they have methods too. XML-RPC is very simple, is not coming from Microsoft and is pretty well supported. Why weren’t we using that? Why all the awkward encoding of things in semi-REST calls?<br><br>But that’s just how it is.<br><br>Back to a remark I made earlier, diversification. What I refer to here is that the format of results and data you send to a REST webservice is not more precisely defined than “dude, it’s XML!” It’s different for every service. Compare the flickr API to the Twitter API. If you were writing software that uses either of those services, there’s not much of the code you can reuse. Sure you have your XML and HTTP libraries, but that’s about it. Sure, it’s not <em>difficult</em> to implement, but still it’s engineering work. And quite some engineering work. And in case you didn’t realize, it involves reading and writing XML files. Need I say more?<br><br>Now look back at XML web services. Remember about WSDL, where you can simply <em>generate</em> this interfacing code to the web services? That was pretty nifty. That saved a lot of work. Can’t we do the same with RESTful web services? Well, yes, you can. And yes, finally I’m coming to my point.<br><br>You can do this with <a href="https://wadl.dev.java.net/" target="_blank">WADL</a>. WADL stands for Web Application Description Language. It allows you to describe essentially any HTTP-based API to any web service Including SOAP webservices, if you would feel so inclined. But you can also describe the flickr API, the twitter API and the yahoo API in WADL. And guess what it can do…<br><br>It can generate client-side proxy code to interface with these Web APIs. Yes, it’s like WSDL, but more general. Generalized to also support REST and basically any kind of (I guess) XML-based web service.<br><br>The main implementation is in <a href="https://wadl.dev.java.net/" target="_blank">Java</a>, but apparently there are also generators for <a href="http://blogs.sun.com/theaquarium/entry/more_wadl_php_ruby_and" target="_blank">PHP, Ruby and Python</a>. If WADL descriptions would be available to every awesome 2.0 web app available, people would spend a whole lot less time on writing libraries like <a href="http://rubyforge.org/projects/flickr/" target="_blank">this</a>, <a href="http://flickrj.sourceforge.net/" target="_blank">this</a>, <a href="http://flickrapi.sourceforge.net/" target="_blank">this</a> and <a href="http://www.codeplex.com/FlickrNet" target="_blank">this</a>.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1356</wp:post_id>
		<wp:post_date>2008-01-08 20:40:34</wp:post_date>
		<wp:post_date_gmt>2008-01-08 19:40:34</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>why-wadl-is-awesome</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="because-i-care"><![CDATA[Because I Care]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Java: Evolutionary Dead End</title>
		<link>http://zef.me/2008/01/13/java-evolutionary-dead-end/</link>
		<pubDate>Sun, 13 Jan 2008 21:21:15 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2008/01/13/java-evolutionary-dead-end/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p><a href="http://www.artima.com/weblogs/viewpost.jsp?thread=221903" target="_blank">Bruce Eckel</a>:</p>
<blockquote>So when features like Java Generics are added badly (in my opinion)<br>to the language, I find it frustrating and my perspective is that they<br>should have just done the right thing when adding the feature.<br>But it never really occurred to me that maybe the right thing to do<br>is just not add the feature at all (what fun is that?). That if you<br>can’t do it right then maybe the language should stop growing and<br>become stable. That it should stop chasing every language feature du<br>jour.<br>Arguably one of the best features of C is that it hasn’t changed at<br>all for decades. C++ has also been very stable. In that context it<br>doesn’t sound so bad that Java stabilize.</blockquote>
<p>Interesting.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1443</wp:post_id>
		<wp:post_date>2008-01-13 22:21:15</wp:post_date>
		<wp:post_date_gmt>2008-01-13 21:21:15</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>java-evolutionary-dead-end</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Compiz in 3D</title>
		<link>http://zef.me/2008/01/30/compiz-in-3d/</link>
		<pubDate>Wed, 30 Jan 2008 14:19:56 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2008/01/30/compiz-in-3d/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>The <a href="http://davelargo.blogspot.com/2008/01/compiz-in-3d.html" target="_blank">Compiz guys</a> (compiz is a composite engine for Linux that implements cool visual effects) have implemented a 3D mode. If you own a pair of 3D glasses, those with one red and one blue glass, you will see the desktop in actual 3D. Cool :)</p>
<figure>

<img data-width="320" data-height="240" src="https://cdn-images-1.medium.com/max/800/0*vgFKrwEKFRwO3p0X.jpg">
</figure>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1543</wp:post_id>
		<wp:post_date>2008-01-30 15:19:56</wp:post_date>
		<wp:post_date_gmt>2008-01-30 14:19:56</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>compiz-in-3d</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Using Email Addresses as OpenID</title>
		<link>http://zef.me/2008/01/04/using-email-addresses-as-openid/</link>
		<pubDate>Fri, 04 Jan 2008 17:44:19 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2008/01/04/using-email-addresses-as-openid/</guid>
		<description></description>
		<content:encoded><![CDATA[
<p>Eran Hammer-Lahav has put forward a proposal to also <a href="http://www.hueniverse.com/hueniverse/2008/01/addressing-open.html" target="_blank">allow email addresses to be used as OpenID identifiers</a>. Previously an OpenID identifier always was a URL or hostname (such as <a href="http://www.zefhemel.com," target="_blank">http://www.zefhemel.com,</a> or more briefly zefhemel.com). I always considered this OpenID’s main usability issue.<br><br>Allowing email addresses seems much more natural. In fact, many sites already do that — all of Google’s and Microsoft Password websites ask for email addresses.<br><br>The implementation is also not that complicated, it can simply be done by adding a few DNS records to the domains that are to be used by OpenID (if I wanted to use zef@zefhemel.com as my OpenID I would have to add a special DNS record for the zefhemel.com domain, which would then work for all users at that domain).<br><br>I hope the proposal will be worked into the OpenID spec, it would be a great usability improvement. You can follow the <a href="http://openid.net/pipermail/specs/2008-January/thread.html" target="_blank">discussions on the mailing list about this</a>.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1624</wp:post_id>
		<wp:post_date>2008-01-04 18:44:19</wp:post_date>
		<wp:post_date_gmt>2008-01-04 17:44:19</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>using-email-addresses-as-openid</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Elisa</title>
		<link>http://zef.me/2008/01/07/elisa/</link>
		<pubDate>Mon, 07 Jan 2008 15:37:44 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2008/01/07/elisa/</guid>
		<description></description>
		<content:encoded><![CDATA[
<p>If you use OS X or Linux, you may want to have a look at <a href="http://elisa.fluendo.com/" target="_blank">Elisa,</a> which is a pretty nifty media center application. Similar to Apple’s Frontrow, but written in Python and very extensible. You can also view slideshows of flickr and view youtube videos through it.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1734</wp:post_id>
		<wp:post_date>2008-01-07 16:37:44</wp:post_date>
		<wp:post_date_gmt>2008-01-07 15:37:44</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>elisa</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Phew… First Paper Submitted</title>
		<link>http://zef.me/2008/02/04/phew-first-paper-submitted/</link>
		<pubDate>Mon, 04 Feb 2008 08:28:31 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2008/02/04/phew-first-paper-submitted/</guid>
		<description></description>
		<content:encoded><![CDATA[
<p>After a few weeks of hard work our first paper is finished. We submitted it to the <a href="http://www.model-transformation.org/ICMT2008/" target="_blank">International Conference on Model Transformations </a>’08. In March we’ll hear if it is accepted or not. I won’t go into details about what we wrote about exactly (not quite sure what I can say and what not), but it’s a paper about how the <a href="http://www.webdsl.org" target="_blank">WebDSL</a> generator is constructed.<br><br>Did you notice that link just now? I linked to <a href="http://www.webdsl.org/webdslorg/home" target="_blank">webdsl.org</a>, that means that we launched the first alpha! The reason I didn’t post about it before is partly lack of time, but mostly because I don’t feel it’s ready for prime time yet. It really is an alpha. We have some performance issues (the site can be quite slow, especially when you’re logged in) and the behaviour of WebDSL models can sometimes <em>seem</em> unpredicatable if you’re not that familiar with it. Plus, there’s hardly any documentation. Oh, and installing it works mostly, as long as you use the <a href="http://nix.cs.uu.nl/" target="_blank">Nix package manager</a> to do so, which — I am very aware — is not nearly mainstream (but also not that hard to install). I was working on whipping up some debian packages, but had some trouble on the way. Either way, if you feel like trying it, go ahead. This week WebDSL is taught as an example DSL for the program transformation course that is taught here. I’m sure documentation will improve then and we’ll most likely find loads of bugs.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1745</wp:post_id>
		<wp:post_date>2008-02-04 09:28:31</wp:post_date>
		<wp:post_date_gmt>2008-02-04 08:28:31</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>phew-first-paper-submitted</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Compiling…</title>
		<link>http://zef.me/2008/02/07/compiling/</link>
		<pubDate>Thu, 07 Feb 2008 14:26:56 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2008/02/07/compiling/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>I got some time for blogging again. Why? Because I’m doing some development of our <a href="http://www.webdsl.org" target="_blank">WebDSL compiler again</a>, or rather, debugging. And as compiling this thing takes like 2 minutes, I got more time to write. Great way of keeping posts short.</p>
<p>(<a href="http://xkcd.com/303/" target="_blank">source</a>)<br><br>Ok, the two minutes have passed.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>142</wp:post_id>
		<wp:post_date>2008-02-07 15:26:56</wp:post_date>
		<wp:post_date_gmt>2008-02-07 14:26:56</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>compiling</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="because-i-care"><![CDATA[Because I Care]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Google Scholar’s Killer Feature: BibTeX Exports</title>
		<link>http://zef.me/2008/02/11/google-scholars-killer-feature-bibtex-exports/</link>
		<pubDate>Mon, 11 Feb 2008 10:23:30 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2008/02/11/google-scholars-killer-feature-bibtex-exports/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>For my research I use <a href="http://scholar.google.com" target="_blank">Google Scholar</a> quite a bit. It works reasonably well, although I would like more control over the results I get (like ordering them by date published). Last week, however, I found the killer feature:</p>
<p>As many, I use LaTeX to write papers and BibTeX for keeping track of papers I cite. The annoying thing is it is often hard to get the information about papers (title, authors, conference, years etc.) in BibTeX format. Now, it turns out Google Scholar offers this as a feature, it’s hidden, but it’s there. Go to your <a href="http://scholar.google.com/scholar_preferences" target="_blank">preferences</a> and check the “Show links to import citations into BibTeX” radio button as shown above. Then, with every article result in Google Scholar you find:</p>
<p>I know, this is the kind of thing I get excited about these days. You can laugh, but <em>I </em>at least still appreciate the smaller things in life.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>331</wp:post_id>
		<wp:post_date>2008-02-11 11:23:30</wp:post_date>
		<wp:post_date_gmt>2008-02-11 10:23:30</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>google-scholars-killer-feature-bibtex-exports</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>AOL Open Mobile Platform: Who Cares?</title>
		<link>http://zef.me/2008/02/11/aol-open-mobile-platform-who-cares/</link>
		<pubDate>Mon, 11 Feb 2008 19:13:22 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2008/02/11/aol-open-mobile-platform-who-cares/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p><a href="http://www.readwriteweb.com/archives/aol_announces_open_mobile_platform.php" target="_blank">ReadWriteWeb</a>:</p>
<blockquote>AOL today announced the <a href="http://dev.aol.com/openmobile" target="_blank">Open Mobile Platform</a>, which the company plans to release to developers this summer. AOL says the software development platform will help developers create applications across major mobile device operating systems including BREW, Java, Linux, RIM, Symbian, and Windows Mobile. The platform will consist of three parts: an XML-based scripting language, a device client, and an application server.</blockquote>
<blockquote>AOL’s platform differs from efforts like Google’s Android, which was <a href="http://www.engadget.com/2008/02/11/google-attacks-android-at-mobile-world-congress/" target="_blank">demoed today</a> at the Mobile World Congress in Barcelona, Spain, in that it isn’t a singular phone operating system that attempts to lock users into one way of doing things. Rather, it is a software development platform for multiple operating systems that aims to make it easier for developers to deploy apps across the various mobile OS and platform options.</blockquote>
<p>First of all, as someone who works in modeling/program language design, a XML-based scripting language, <em>really</em>? This might have been a <em>hot</em> idea in the ’90s, but come on, nobody wants to program in XML. Admitted, I didn’t look into this platform beyond this ReadWriteWeb post, so they could have misunderstood. But if not: XML programming languages — stupid idea. Easy to parse, but beyond that, utterly stupid.<br><br>Then, the obvious question. Do we need yet another mobile platform? We have Java, Symbian, Windows Mobile, and more recently Apple’s iPhone platform and Google’s Android. What’s the new thing that AOL brings to the table other than integrating with AOL services that I never use? According to AOL:</p>
<blockquote>The AOL Open Mobile Platform will also give developers the ability to monetize their mobile applications by utilizing advertising resources, such as clickable banner ads, provided by AOL’s Platform-A.</blockquote>
<p>Banner ads in mobile applications. Awesome.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>357</wp:post_id>
		<wp:post_date>2008-02-11 20:13:22</wp:post_date>
		<wp:post_date_gmt>2008-02-11 19:13:22</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>aol-open-mobile-platform-who-cares</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="cranky"><![CDATA[Cranky]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Spottt Brings Back Memories</title>
		<link>http://zef.me/2008/02/13/spottt-brings-back-memories/</link>
		<pubDate>Wed, 13 Feb 2008 09:05:16 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2008/02/13/spottt-brings-back-memories/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p><a href="http://www.spottt.com" target="_blank">Spottt</a> (yes, that’s three t’s) is a free banner advertising network. Those who were active building websites on the internet in the mid-nineties must be familiar with this concept. Especially when I say one (what we would now call wiki-) word: LinkExchange.</p>
<p>LinkExchange was, like Spottt, a banner exchange service. You upload your banner and put some HTML code on your own website that displays banners of other people on the network. Every banner display on your own website earned you a credit, every 2 credits earned you a banner display on another website on the network. A great way to advertise your website for free. A great business for the banner exchange service too, because every other ad displayed on the network was a paid one. Hence the 2:1 ratio. At the time there were dozens of such banner exchange networks, some with better ratio than the 2:1 that LinkExchange offered, but there was something about LinkExchange. It was classy. Classy in its own peculiar ugly way.<br><br>Class. At that time I felt a website wasn’t really a website without a huge 468x80 (or whatever the size was) banner on it. LinkExchange’s banners were a bit too small in fact. A big banner signaled that you were serious, that this website was not just a <em>homepage</em> made by some teenager — which I was — but a <em>real</em> website. A banner said: “Hey, we have a business plan!” Even though my websites did not get a lot of hits I signed up for all kinds of banner exchanges and paid banner ad networks. Of course I got around maybe 10 visitors a day back then, but hey that was like 300 a month, right!<br><br>Then <a href="http://en.wikipedia.org/wiki/LinkExchange" target="_blank">Microsoft bought LinkExchange</a> and the <a href="http://en.wikipedia.org/wiki/Dot-com_bubble" target="_blank">bubble burst</a>.<br><br>Thankfully there is <a href="http://www.spottt.com" target="_blank">Spottt</a>, to bring us back to the nineties, except with smaller banners and gayer colors.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>405</wp:post_id>
		<wp:post_date>2008-02-13 10:05:16</wp:post_date>
		<wp:post_date_gmt>2008-02-13 09:05:16</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>spottt-brings-back-memories</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="because-i-care"><![CDATA[Because I Care]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>“Don’t Model Everything”</title>
		<link>http://zef.me/2008/02/14/dont-model-everything/</link>
		<pubDate>Thu, 14 Feb 2008 10:39:52 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2008/02/14/dont-model-everything/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>From different directions I received <a href="http://steve-yegge.blogspot.com/2008/02/portrait-of-n00b.html" target="_blank">links to Steve Yegge’s post “Portrait of a N00b”</a> and although the <a href="http://www.zefhemel.com/archives/2008/02/07/attention-spans" target="_blank">length of it certainly qualifies it not to be read by me</a>, at a certain point you just give in.<br><br>Now Yegge’s post is long, read it during your lunch break or something. This is my 100-words-or-less summary: new programmers are metadata obsessed and as you grow older (10+ years or more programming experience) you start to see that metadata (such as comments and excessive modeling) is not the answer to all problems in life.<br><br>The picture of Heidi Klum at the right is completely unrelated to this post by the way, except for the fact she’s also a <em>model</em> (and often <em>object</em>ified) — and not everything nor everyone has to be a model. There’s some random wisdom for ya.<br><br>Anyway. Some quotes I find relevent to my work:</p>
<blockquote>And Haskell, OCaml and their ilk are part of a 45-year-old static-typing movement within academia to try to force people to model everything. Programmers hate that. These languages will never, ever enjoy any substantial commercial success, for the exact same reason the Semantic Web is a failure. You can’t force people to provide metadata for everything they do. They’ll hate you.<br><br>One very real technical problem with the forced-modeling approaches that static type systems are often “wrong”. It may be hard to imagine, because by a certain definition they can’t be “wrong”: the code (or data) is programmatically checked to conform to whatever constraints are imposed by the type system. So the code or data always matches the type model. But the type system is “wrong” whenever it cannot match the intended computational model. Every time want to use multiple inheritance or mixins in Java’s type system, Java is “wrong”, because it can’t do what you want. You have to take the most natural design and corrupt it to fit Java’s view of the world.<br><br>[…]<br><br>Java has been overrun by metadata-addicted n00bs. You can’t go to a bookstore or visit a forum or (at some companies) even go to the bathroom without hearing from them. You can’t actually model everything; it’s formally impossible and pragmatically a dead-end. But they try. And they tell their peers (just like our metadata-addicted logical data modelers) that you have to model everything or you’re a Bad Citizen.</blockquote>
<p>I feel I should respond to this, because it seems to be a direct attack at the work that <a href="http://swerl.tudelft.nl/bin/view/MoDSE" target="_blank">we are doing</a>. Are we the part of the “static-typing movement within academia”?<br><br>We do like static typing. <a href="http://www.webdsl.org" target="_blank">WebDSL</a> is fully typechecked. And we do force you to model everything. I’m not so sure this the kind of modeling that Yegge refers to here though. In my view there are two kinds of modeling:</p>
<ol>
<li>Modeling as a means to organize the software (directories, libraries, modules, classes, methods) — this is what I think Yegge refers to</li>
<li>Semantic modeling (in WebDSL: entities, pages, actions, access control rules) — this is what we try to do</li>
</ol>
<p>The first one you could argue is not always absolutely necessary. Your software works just as well when you dump everything in one directory and one namespace or even class (why else would there be such a thing as a God class?). The second kind of modeling is what we attempt to do. The win in this kind of modeling is that we can write software that actually “understands” these models and can do clever things with it.<br><br>You should really avoid abusing models for means they were not intended for, as Yegge points out. Often you can achieve a lot with clever tricks, but what should really be done is extending the meta-model. Meta-wha!? Extending the programming language, essentially. In Java this is not really possible, of course. The compilers we build for our modeling languages (such as WebDSL), however, are designed to be (relatively) easy to extend so that <em>if</em> you cannot model something, it is easy to extend the language to add construct that make modeling of it possible, or at least simpler.<br><br>The third point from Yegge’s quote is about how you cannot model everything. That is probably true, so in the future we will work on “back doors” within our modeling languages to lower-level languages such as Java. So that if there is something you cannot model, and it is really not worth extending the language to add a modeling mechanism for this, you can just quickly hack it in Java, or whatever the target language may be.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>567</wp:post_id>
		<wp:post_date>2008-02-14 11:39:52</wp:post_date>
		<wp:post_date_gmt>2008-02-14 10:39:52</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>dont-model-everything</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Links for 2008–02–14</title>
		<link>http://zef.me/2008/02/15/links-for-2008-02-14/</link>
		<pubDate>Thu, 14 Feb 2008 23:00:09 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2008/02/15/links-for-2008-02-14/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Today’s interesting links:</p>
<ul>
<li>
<a href="http://feeds.feedburner.com/~r/boingboing/iBag/~3/235107744/jesus-hit-by-lightni.html" target="_blank">Jesus hit by lightning</a> [<a href="http://www.boingboing.net/" target="_blank">Boing Boing</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/oreilly/radar/atom/~3/235093311/generate_kml_wi.html" target="_blank">Generate KML With Google Spreadsheets</a> [<a href="http://radar.oreilly.com/" target="_blank">O’Reilly Radar</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/OmMalik/~3/235004632/" target="_blank">Rethinking the Spreadsheet: Google Forms and Live Data</a> [<a href="http://gigaom.com" target="_blank">GigaOM</a>]</li>
<li>
<a href="http://dmoerman.be/wtfs-m" target="_blank">WTFs/m</a> [<a href="http://dmoerman.be" target="_blank">dmoerman.be -</a>]</li>
<li>
<a href="http://www.techmeme.com/080214/p7#a080214p7" target="_blank">How I started Seesmic and raised $6 million (Loïc Le Meur/Loic Le Meur Blog)</a> [<a href="http://www.techmeme.com/" target="_blank">Techmeme</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/DataPortability/~3/234763997/video-dataportabilityandme-chris-saad.html" target="_blank">VIDEO — DataPortabilityAndMe — Chris Saad Responds</a> [<a href="http://www.mysyndicaat.com/myfeed/blog/default/ChrisSaad_DataPortability" target="_blank">DataPortability.org Format Updates</a>]</li>
<li>
<a href="http://digg.com/travel_places/Oasis_In_the_Middle_of_Nowhere_PICS" target="_blank">Oasis In the Middle of Nowhere (PICS)</a> [<a href="http://digg.com/" target="_blank">Digg</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/Techcrunch/~3/234736813/" target="_blank">Yahoo Makes Its Case in Letter to Shareholders</a> [<a href="http://www.techcrunch.com" target="_blank">TechCrunch</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/DataPortability/~3/234656686/video-some-dataportability-and-me.html" target="_blank">VIDEO — Some DataPortability and Me videos</a> [<a href="http://www.mysyndicaat.com/myfeed/blog/default/ChrisSaad_DataPortability" target="_blank">DataPortability.org Format Updates</a>]</li>
</ul>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>570</wp:post_id>
		<wp:post_date>2008-02-15 00:00:09</wp:post_date>
		<wp:post_date_gmt>2008-02-14 23:00:09</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>links-for-2008-02-14</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Links for 2008–02–06</title>
		<link>http://zef.me/2008/02/07/links-for-2008-02-06/</link>
		<pubDate>Wed, 06 Feb 2008 23:00:05 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2008/02/07/links-for-2008-02-06/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Today’s interesting links:</p>
<ul>
<li>
<a href="http://feeds.gawker.com/~r/valleywag/full/~3/230388105/leaked-yang-memo-calls-for-hard-work-commitment-and-anybody-but-microsoft" target="_blank">Leaked Yang memo calls for hard work, commitment, and anybody but Microsoft [Yahoo]</a> [<a href="http://valleywag.com" target="_blank">Valleywag</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/boingboing/iBag/~3/230435887/funny-story-about-co.html" target="_blank">Funny story about computer confiscation in Denmark</a> [<a href="http://www.boingboing.net/" target="_blank">Boing Boing</a>]</li>
<li>
<a href="http://chyrp.net/" target="_blank">Chyrp</a> [<a href="http://daringfireball.net/" target="_blank">Daring Fireball</a>]</li>
<li>
<a href="http://www.calacanis.com/2008/02/06/great-moments-in-dave-winerdom-3/" target="_blank">Great moments in Dave Winerdom #3</a> [<a href="http://www.calacanis.com" target="_blank">The Jason Calacanis Weblog</a>]</li>
<li>
<a href="http://digg.com/arts_culture/Holland_to_Become_World_s_First_Floating_Country" target="_blank">Holland to Become World’s First Floating Country</a> [<a href="http://digg.com/" target="_blank">Digg</a>]</li>
<li>
<a href="http://feeds.engadget.com/~r/weblogsinc/engadget/~3/230260585/" target="_blank">3G + N95 + JoikuSpot + WiFi + iPhone = 3G iPhone (the hard way)</a> [<a href="http://www.engadget.com" target="_blank">Engadget</a>]</li>
<li>
<a href="http://feeds.engadget.com/~r/weblogsinc/engadget/~3/229789896/" target="_blank">Linus Torvalds calls Apple’s file system “utter crap”</a> [<a href="http://www.engadget.com" target="_blank">Engadget</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/OmMalik/~3/230140334/" target="_blank">Data Property Rights, Not Portability</a> [<a href="http://gigaom.com" target="_blank">GigaOM</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/OmMalik/~3/229951199/" target="_blank">Turn Your Symbian S60 Phone Into A Hot Spot</a> [<a href="http://gigaom.com" target="_blank">GigaOM</a>]</li>
</ul>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>610</wp:post_id>
		<wp:post_date>2008-02-07 00:00:05</wp:post_date>
		<wp:post_date_gmt>2008-02-06 23:00:05</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>links-for-2008-02-06</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Links for 2008–02–07</title>
		<link>http://zef.me/2008/02/08/links-for-2008-02-07/</link>
		<pubDate>Thu, 07 Feb 2008 23:00:05 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2008/02/08/links-for-2008-02-07/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Today’s interesting links:</p>
<ul>
<li>
<a href="http://feeds.feedburner.com/~r/Techcrunch/~3/231025656/" target="_blank">OpenID Welcomes Microsoft, Google, Verisign and IBM</a> [<a href="http://www.techcrunch.com" target="_blank">TechCrunch</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/blogspot/dtKx/~3/231011214/j-walking-with-reader.html" target="_blank">J-walking with Reader</a> [<a href="http://googlereader.blogspot.com/" target="_blank">Official Google Reader Blog</a>]</li>
<li>
<a href="http://xkcd.com/378/" target="_blank">Real Programmers</a> [<a href="http://xkcd.com/" target="_blank">xkcd.com</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/Techcrunch/~3/230944825/" target="_blank">AdCamo Offers Background Advertising: Hmmmm</a> [<a href="http://www.techcrunch.com" target="_blank">TechCrunch</a>]</li>
<li>
<a href="http://daringfireball.net/2008/02/yahoo_translation" target="_blank">★ Translation From PR-Speak to English of Selected Portions of Yahoo CEO Jerry Yang’s Company-Wide Memo Regarding the Microsoft Takeover Bid</a> [<a href="http://daringfireball.net/" target="_blank">Daring Fireball</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/Techcrunch/~3/230742764/" target="_blank">Google Docs Gets Forms, More Access Like Little By Little</a> [<a href="http://www.techcrunch.com" target="_blank">TechCrunch</a>]</li>
</ul>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>766</wp:post_id>
		<wp:post_date>2008-02-08 00:00:05</wp:post_date>
		<wp:post_date_gmt>2008-02-07 23:00:05</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>links-for-2008-02-07</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Welcome to my weblog</title>
		<link>http://zef.me/2008/02/10/welcome-to-my-weblog/</link>
		<pubDate>Sun, 10 Feb 2008 07:23:55 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2008/02/10/welcome-to-my-weblog/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Posted on February 10th, 2003: <a href="http://www.zefhemel.com/archives/2003/02/10/welcome-to-my-weblog" target="_blank">Welcome to my weblog:</a></p>
<blockquote>I just installed my weblog, here I will post all kinds of stuff, you’ll see what’ll come.</blockquote>
<p>5 years ago today.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>958</wp:post_id>
		<wp:post_date>2008-02-10 08:23:55</wp:post_date>
		<wp:post_date_gmt>2008-02-10 07:23:55</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>welcome-to-my-weblog</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Links for 2008–02–09</title>
		<link>http://zef.me/2008/02/10/links-for-2008-02-09/</link>
		<pubDate>Sat, 09 Feb 2008 23:00:12 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2008/02/10/links-for-2008-02-09/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Today’s interesting links:</p>
<ul>
<li>
<a href="http://feeds.feedburner.com/~r/Techcrunch/~3/232308865/" target="_blank">Yahoo’s Bold Whimper</a> [<a href="http://www.techcrunch.com" target="_blank">TechCrunch</a>]</li>
<li>
<a href="http://feeds.arstechnica.com/~r/arstechnica/BAaf/~3/232290310/20080209-yahoo-to-microsoft-talk-to-the-hand-we-say-nohoo.html" target="_blank">Yahoo to Microsoft: talk to the hand, we say Nohoo!</a> [<a href="http://arstechnica.com/index.ars" target="_blank">Ars Technica</a>]</li>
<li>
<a href="http://feeds.gawker.com/~r/valleywag/full/~3/231749843/mark-zuckerberg-convinces-1500-spanish-speakers-to-paint-his-fence" target="_blank">Mark Zuckerberg convinces 1,500 Spanish speakers to paint his fence [Lost In Translation]</a> [<a href="http://valleywag.com" target="_blank">Valleywag</a>]</li>
<li>
<a href="http://digg.com/movies/Paris_Hilton_Goes_to_Harvard_2" target="_blank">Paris Hilton Goes to Harvard</a> [<a href="http://digg.com/" target="_blank">Digg</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/readwriteweb/~3/231869149/social_ads_have_social_consequences.php" target="_blank">When Facebook Ads Go Wrong</a> [<a href="http://www.readwriteweb.com/" target="_blank">ReadWriteWeb</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/readwriteweb/~3/231947054/tiinker_is_the_antidigg.php" target="_blank">Tiinker is the Anti-Digg</a> [<a href="http://www.readwriteweb.com/" target="_blank">ReadWriteWeb</a>]</li>
</ul>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>981</wp:post_id>
		<wp:post_date>2008-02-10 00:00:12</wp:post_date>
		<wp:post_date_gmt>2008-02-09 23:00:12</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>links-for-2008-02-09</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Links for 2008–02–12</title>
		<link>http://zef.me/2008/02/13/links-for-2008-02-12/</link>
		<pubDate>Tue, 12 Feb 2008 23:00:10 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2008/02/13/links-for-2008-02-12/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Today’s interesting links:</p>
<ul>
<li>
<a href="http://feeds.engadget.com/~r/weblogsinc/engadget/~3/233940224/" target="_blank">Haiku brings back those BeOS glory days</a> [<a href="http://www.engadget.com" target="_blank">Engadget</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/readwriteweb/~3/233939084/twittershare.php" target="_blank">Twittershare Brings File Sharing to Twitter</a> [<a href="http://www.readwriteweb.com/" target="_blank">ReadWriteWeb</a>]</li>
<li>
<a href="http://www.osnews.com/story.php?news_id=19327" target="_blank">Innotek Bought by Sun</a> [<a href="http://www.osnews.com/" target="_blank">OSNews</a>]</li>
<li>
<a href="http://www.osnews.com/story.php?news_id=19326" target="_blank">‘Fluxbuntu: User-Friendly Featherweight Linux?’</a> [<a href="http://www.osnews.com/" target="_blank">OSNews</a>]</li>
<li>
<a href="http://www.intertwingly.net/blog/2008/02/12/CouchDB-ASF" target="_blank">CouchDB @ ASF</a> [<a href="http://www.intertwingly.net/blog/" target="_blank">Sam Ruby</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/Techcrunch/~3/233808907/" target="_blank">Building a Killer Web App In 45 Minutes</a> [<a href="http://www.techcrunch.com" target="_blank">TechCrunch</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/Techcrunch/~3/233874176/" target="_blank">Spottt Reincarnates LinkExchange</a> [<a href="http://www.techcrunch.com" target="_blank">TechCrunch</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/readwriteweb/~3/233898487/liquidplanner_offers_online_pr.php" target="_blank">LiquidPlanner Offers Online Project Management</a> [<a href="http://www.readwriteweb.com/" target="_blank">ReadWriteWeb</a>]</li>
<li>
<a href="http://feeds.engadget.com/~r/weblogsinc/engadget/~3/233766973/" target="_blank">Give up: 77.3m Symbian phones shipped in 2007</a> [<a href="http://www.engadget.com" target="_blank">Engadget</a>]</li>
<li>
<a href="http://googlesystem.blogspot.com/2008/02/designing-googles-logo.html" target="_blank">Designing Google’s Logo</a> [<a href="http://googlesystem.blogspot.com/" target="_blank">Google Operating System</a>]</li>
<li>
<a href="http://feeds.gawker.com/~r/valleywag/full/~3/233361896/techcrunch-fails-to-hire-uncov-editor" target="_blank">TechCrunch fails to hire Uncov editor [Blogging For Dollars]</a> [<a href="http://valleywag.com" target="_blank">Valleywag</a>]</li>
<li>
<a href="http://blog.twitter.com/2008/02/do-you-want-sandy.html" target="_blank">Do You Want Sandy?</a> [<a href="http://blog.twitter.com/" target="_blank">Twitter Blog</a>]</li>
<li>
<a href="http://www.techmeme.com/080211/p185#a080211p185" target="_blank">10.5.2 update shows Apple listens to users (Dan Frakes/Macworld)</a> [<a href="http://www.techmeme.com/" target="_blank">Techmeme</a>]</li>
<li>
<a href="http://www.dilbert.com/comics/dilbert/archive/dilbert-20080212.html" target="_blank">Comic for 12 Feb 2008</a> [<a href="http://www.dilbert.com/" target="_blank">Dilbert</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/readwriteweb/~3/233353835/gmail_delivery_delays.php" target="_blank">Gmail Delivery Delays — Will a Reply from Google Ever Arrive?</a> [<a href="http://www.readwriteweb.com/" target="_blank">ReadWriteWeb</a>]</li>
</ul>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1012</wp:post_id>
		<wp:post_date>2008-02-13 00:00:10</wp:post_date>
		<wp:post_date_gmt>2008-02-12 23:00:10</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>links-for-2008-02-12</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Links for 2008–02–08</title>
		<link>http://zef.me/2008/02/09/links-for-2008-02-08/</link>
		<pubDate>Fri, 08 Feb 2008 23:00:07 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2008/02/09/links-for-2008-02-08/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Today’s interesting links:</p>
<ul>
<li>
<a href="http://www.scripting.com/stories/2008/02/08/mccainsBaggage.html" target="_blank">McCain’s baggage</a> [<a href="http://www.scripting.com/" target="_blank">Scripting News</a>]</li>
<li>
<a href="http://www.boingboing.net/2008/02/08/la-pequena-prohibida.html" target="_blank">La Peque??a Prohibida</a> [<a href="http://www.boingboing.net/" target="_blank">Boing Boing</a>]</li>
<li>
<a href="http://scobleizer.com/2008/02/08/is-dataportabilityorg-just-pr/" target="_blank">Is Dataportability.org just PR?</a> [<a href="http://scobleizer.com" target="_blank">Scobleizer — Tech geek blogger</a>]</li>
<li>
<a href="http://feeds.gawker.com/~r/valleywag/full/~3/231487865/ustreamtv-negotiating-50-million-sale-to-microsoft" target="_blank">Ustream.tv negotiating $50 million sale to Microsoft [Exclusive]</a> [<a href="http://valleywag.com" target="_blank">Valleywag</a>]</li>
<li>
<a href="http://pluralsight.com/blogs/dbox/archive/2008/02/07/50180.aspx" target="_blank">XML: Done like a well-cooked steak</a> [<a href="http://pluralsight.com/blogs/dbox/" target="_blank">Don Box’s Spoutlet</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/Techcrunch/~3/231144335/" target="_blank">Heroku Lifts Ruby on Rails Development into the Cloud</a> [<a href="http://www.techcrunch.com" target="_blank">TechCrunch</a>]</li>
<li>
<a href="http://www.osnews.com/story.php?news_id=19301" target="_blank">MacBook Air SSD: the Ars Review</a> [<a href="http://www.osnews.com/" target="_blank">OSNews</a>]</li>
<li>
<a href="http://www.tbray.org/ongoing/When/200x/2008/02/07/Past-2038" target="_blank">Thirty Years to Live</a> [<a href="http://www.tbray.org/ongoing/" target="_blank">ongoing</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/eeeuser/~3/231291034/" target="_blank">I Gave Up My Notebook For An Eee PC Parts 1–3</a> [<a href="http://www.eeeuser.com" target="_blank">EeeUser.com</a>]</li>
</ul>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1120</wp:post_id>
		<wp:post_date>2008-02-09 00:00:07</wp:post_date>
		<wp:post_date_gmt>2008-02-08 23:00:07</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>links-for-2008-02-08</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Links for 2008–02–10</title>
		<link>http://zef.me/2008/02/11/links-for-2008-02-10/</link>
		<pubDate>Sun, 10 Feb 2008 23:00:11 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2008/02/11/links-for-2008-02-10/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Today’s interesting links:</p>
<ul>
<li>
<a href="http://www.tbray.org/ongoing/When/200x/2008/02/10/XML-People" target="_blank">XML People</a> [<a href="http://www.tbray.org/ongoing/" target="_blank">ongoing</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/ajaxian/~3/232634537/heroku-web-based-rails-hosting" target="_blank">Heroku: Web based Rails Hosting</a> [<a href="http://ajaxian.com" target="_blank">Ajaxian</a>]</li>
<li>
<a href="http://digg.com/linux_unix/Virtualization_in_Linux_A_Review_of_Four_Software_Choices" target="_blank">Virtualization in Linux: A Review of Four Software Choices</a> [<a href="http://digg.com/" target="_blank">Digg</a>]</li>
<li>
<a href="http://feeds.gawker.com/~r/valleywag/full/~3/232350649/guy-kawasaki-inflates-egos-that-dont-need-inflating-with-alltop" target="_blank">Guy Kawasaki inflates egos that don’t need inflating with Alltop [Alltop]</a> [<a href="http://valleywag.com" target="_blank">Valleywag</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/Techcrunch/~3/232417830/" target="_blank">The New Safari Is Amazingly Quick, Firefox Watch Out</a> [<a href="http://www.techcrunch.com" target="_blank">TechCrunch</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/boingboing/iBag/~3/232414360/writers-strike-end-i.html" target="_blank">Writers’ strike end imminent, and an online vid is worth $1200.</a> [<a href="http://www.boingboing.net/" target="_blank">Boing Boing</a>]</li>
</ul>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1271</wp:post_id>
		<wp:post_date>2008-02-11 00:00:11</wp:post_date>
		<wp:post_date_gmt>2008-02-10 23:00:11</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>links-for-2008-02-10</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Links for 2008–02–11</title>
		<link>http://zef.me/2008/02/12/links-for-2008-02-11/</link>
		<pubDate>Mon, 11 Feb 2008 23:00:14 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2008/02/12/links-for-2008-02-11/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Today’s interesting links:</p>
<ul>
<li>
<a href="http://feeds.feedburner.com/~r/readwriteweb/~3/233298446/delver_reinvents_search.php" target="_blank">Delver Reinvents Search</a> [<a href="http://www.readwriteweb.com/" target="_blank">ReadWriteWeb</a>]</li>
<li>
<a href="http://feeds.gawker.com/~r/valleywag/full/~3/233270142/yangs-latest-internal-memo-were-on-the-move" target="_blank">Yang’s latest internal memo: “We’re on the move” [Yahoo]</a> [<a href="http://valleywag.com" target="_blank">Valleywag</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/Techcrunch/~3/233173019/" target="_blank">Yahoo Confirms Rejection Letter to Microsoft</a> [<a href="http://www.techcrunch.com" target="_blank">TechCrunch</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/Techcrunch/~3/232822578/" target="_blank">TipJoy — A Better Tip Jar For Content</a> [<a href="http://www.techcrunch.com" target="_blank">TechCrunch</a>]</li>
</ul>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1297</wp:post_id>
		<wp:post_date>2008-02-12 00:00:14</wp:post_date>
		<wp:post_date_gmt>2008-02-11 23:00:14</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>links-for-2008-02-11</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Jon Stewart on the WGA Strike</title>
		<link>http://zef.me/2008/02/13/jon-stewart-on-the-wga-strike/</link>
		<pubDate>Wed, 13 Feb 2008 11:45:18 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2008/02/13/jon-stewart-on-the-wga-strike/</guid>
		<description></description>
		<content:encoded><![CDATA[
<p>John’s Stewart’s take on the WGA (Writer’s Guild of America) strike:</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1339</wp:post_id>
		<wp:post_date>2008-02-13 12:45:18</wp:post_date>
		<wp:post_date_gmt>2008-02-13 11:45:18</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>jon-stewart-on-the-wga-strike</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Attention Spans</title>
		<link>http://zef.me/2008/02/07/attention-spans/</link>
		<pubDate>Thu, 07 Feb 2008 08:21:39 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2008/02/07/attention-spans/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Since I started working full time, and don’t feel I have (or at least should spend) a lot of time reading the (116) blogs I’m subscribed to, I notice I started skipping long posts. Especially 1200 word almost philosophical essays, like are often posted on <a href="http://www.readwriteweb.com/" target="_blank">ReadWriteWeb</a>.<br><br>During my bachelor in computer science we had to take communication classes. A typical result of companies complaining about computer science students being really smart, but not being able to communicate through other means than IRC and Jabber. Ironically, the class was taught by the most nerdy caveman of them all. Incidentally, without the contemporary west-coast American accent like in the not-so-hilarious Comedy Central sitcom <a href="http://en.wikipedia.org/wiki/Cavemen_%28TV_series%29" target="_blank">Cavemen</a>.<br><br>But I digress. One day, a guest speaker came to talk about writing for the web. She gave some rules. Most importantly: keep it short. “People do not like reading on computer screens, so keep it snappy and to the point. Make key words jump out, for instance by <em>italicizing</em> them or making them <strong>bold</strong>. Add illustrations that draw attention and are illustrative. And, if for some odd reason you need more space. Write a longer document and offer it as a PDF download.”</p>
<p>The initial weblogs were essentially link dumps. You’d link to some funny cat picture and write “funny cat!” Now that was snappy, that was to the point, that was consumable. Why did we ever move away from that?</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1428</wp:post_id>
		<wp:post_date>2008-02-07 09:21:39</wp:post_date>
		<wp:post_date_gmt>2008-02-07 08:21:39</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>attention-spans</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="because-i-care"><![CDATA[Because I Care]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Hyphens</title>
		<link>http://zef.me/2008/02/09/hyphens/</link>
		<pubDate>Sat, 09 Feb 2008 10:49:04 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2008/02/09/hyphens/</guid>
		<description></description>
		<content:encoded><![CDATA[

<figure>

<img data-width="500" data-height="342" src="https://cdn-images-1.medium.com/max/800/0*6qCOHxVsDjHnI9V6.jpg">
</figure><p>(<a href="http://xkcd.com/37/" target="_blank">source</a>)</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1451</wp:post_id>
		<wp:post_date>2008-02-09 11:49:04</wp:post_date>
		<wp:post_date_gmt>2008-02-09 10:49:04</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>hyphens</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="because-i-care"><![CDATA[Because I Care]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Jerry Yang Letter to Yahoo! Employees</title>
		<link>http://zef.me/2008/02/08/jerry-yang-letter-to-yahoo-employees/</link>
		<pubDate>Fri, 08 Feb 2008 08:55:04 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2008/02/08/jerry-yang-letter-to-yahoo-employees/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>You probably have not missed it. Microsoft put a hostile take-over bid of around $40 billion for Yahoo! People generally agree that a Microsoft buying Yahoo! is a crazy idea, but the bid is there. So something has to happen. Jerry Yang, the CEO of Yahoo wrote <a href="http://valleywag.com/353285/leaked-yang-memo-calls-for-hard-work-commitment-and-anybody-but-microsoft" target="_blank">an internal memo to all employees</a>, which, quite frankly, I found utterly stupid.</p>
<blockquote>Subject: Building on our strengths<br>yahoos -<br>first off, I want to thank you for the great job youre doing staying<br>focused on executing our priorities. theres obviously been a lot of<br>talk about yahoo! in recent days and we wont let it distract us from<br>pursuing our transformation strategy.</blockquote>
<blockquote>roy and I have communicated about the thorough review process our<br>board is going through right now. the board is focused on maximizing<br>the value of yahoo!s tremendous assets for our shareholders. and it is<br>going to take the time it needs to do it right.</blockquote>
<blockquote>as weve said, no decisions have been made about microsofts proposal.<br>our board is thoughtfully evaluating a wide range of potential<br>strategic alternatives in what is a complex and evolving landscape. and<br>weve hired top advisors to assist through the process.</blockquote>
<blockquote>whats become clear in the past few days is how much people care<br>about this company. weve seen a strong show of support from our users,<br>advertisers, and publishers, reminding us how much they love our<br>products and services. and ive heard from many of you — and from other<br>friends and colleagues from around silicon valley and across the globe<br>- that we need to do whats best for yahoo! and our shareholders. i<br>promise you that the board is going to do that.</blockquote>
<blockquote>the microsoft interest highlights the tremendous strength of the<br>yahoo! brand and assets: our half billion users around the world, our<br>leading products and services, our open ad network, our technology, and<br>most of all, our amazingly talented people.</blockquote>
<blockquote>we have a lot to be excited about and theres more good news to come.<br>yesterday we announced a digital music partnership with rhapsody and<br>our acquisition of foxytunes, maker of the popular music toolbar<br>plugin. today we launched zimbra 5.0, a next generation e-mail and<br>collaboration suite thats a great milestone in our open platform and<br>starting point strategies. and stay tuned for exciting announcements<br>next week at the mobile world congress.</blockquote>
<blockquote>as we look to build on the progress weve been making, i want to make<br>sure you all realize how essential you are to yahoo!s success. as this<br>process moves forward, were going to keep you informed. your hard work<br>and strong commitment are more important now than ever before.</blockquote>
<blockquote>jerry</blockquote>
<p>Who writes like that other than PR people? What would you feel if you received a letter like that from your biggest boss? And — I’m sorry, but I’m me and this is what I notice — what’s up with not using any capital letters, who is he, a seven-year-old? In case you <a href="http://www.zefhemel.com/archives/2008/02/08/links-for-2008-02-07" target="_blank">hadn’t seen it in my links post</a>, here’s <a href="http://daringfireball.net/2008/02/yahoo_translation" target="_blank">John Gruber’s translation</a> of that letter.<br><br>It looks <a href="http://www.techcrunch.com/2008/02/08/yahoo-board-to-determine-fate-of-company-today/" target="_blank">we will find out what Yahoo!’s going to do today</a>.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1497</wp:post_id>
		<wp:post_date>2008-02-08 09:55:04</wp:post_date>
		<wp:post_date_gmt>2008-02-08 08:55:04</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>jerry-yang-letter-to-yahoo-employees</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="cranky"><![CDATA[Cranky]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Links for 2008–02–13</title>
		<link>http://zef.me/2008/02/14/links-for-2008-02-13/</link>
		<pubDate>Wed, 13 Feb 2008 23:00:08 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2008/02/14/links-for-2008-02-13/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Today’s interesting links:</p>
<ul>
<li>
<a href="http://feeds.feedburner.com/~r/boingboing/iBag/~3/234458905/radiohead-to-remixer.html" target="_blank">Radiohead to remixer: naw, it’s cool, go ahead.</a> [<a href="http://www.boingboing.net/" target="_blank">Boing Boing</a>]</li>
<li>
<a href="http://feeds.gawker.com/~r/valleywag/full/~3/234442991/one-yahoos-last-free-triple-non+fat-latte-from-beantrees" target="_blank">One Yahoo’s last “free triple non-fat latte from Beantrees” [Layoffs]</a> [<a href="http://valleywag.com" target="_blank">Valleywag</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/boingboing/iBag/~3/234462874/lil-j-hit-me-up-on-m.html" target="_blank">Li’l J: hit me up on my mufuggin MySpace.</a> [<a href="http://www.boingboing.net/" target="_blank">Boing Boing</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/OmMalik/~3/234404655/" target="_blank">Sun Buys VirtualBox Virtualization Software</a> [<a href="http://gigaom.com" target="_blank">GigaOM</a>]</li>
<li>
<a href="http://digg.com/people/Man_learns_to_read_after_17_years_of_teaching_high_school" target="_blank">Man learns to read after 17 years of teaching high school</a> [<a href="http://digg.com/" target="_blank">Digg</a>]</li>
<li>
<a href="http://share.skype.com/sites/en/2008/02/one_hundred_billion_reasons_to.html" target="_blank">One hundred billion reasons to call this a milestone</a> [<a href="http://share.skype.com/sites/en/" target="_blank">Skype Blogs</a>]</li>
<li>
<a href="http://blog.eelcovisser.net/index.php?/archives/64-Pull-Deployment-of-Services.html" target="_blank">Pull Deployment of Services</a> [<a href="http://blog.eelcovisser.net/" target="_blank">Transformations and Abstractions</a>]</li>
</ul>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1592</wp:post_id>
		<wp:post_date>2008-02-14 00:00:08</wp:post_date>
		<wp:post_date_gmt>2008-02-13 23:00:08</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>links-for-2008-02-13</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>90’s classic: Alice’s First Mobile Phone</title>
		<link>http://zef.me/2008/02/08/90s-classic-alices-first-mobile-phone/</link>
		<pubDate>Fri, 08 Feb 2008 08:29:55 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2008/02/08/90s-classic-alices-first-mobile-phone/</guid>
		<description></description>
		<content:encoded><![CDATA[
<p><em>2:32 p.m.</em>: “Hon, when you get home tonight could you pick up some tomatoes in the store? We ran out.”<br><br><em>2:35 p.m.</em>: “Something went wrong. I heard a beep sound coming from the bedroom, like 2 seconds after I sent my message.”<br><br><em>2:40 p.m.</em>: “I think I might have aimed my phone wrong. I was pointed it towards the bedroom, thought it wouldn’t matter. How silly of me.”<br><br><em>2:44 p.m.</em>: “Hon, where do we keep the map? Want to see which direction I should point to send the message to your work.”<br><br><em>2:48 p.m.</em>: “I keep hearing those beep sounds from the bedroom. Maybe the messages are bouncing the walls back to the bedroom.”<br><br><em>2:55 p.m.</em>: “Hon, which street is you work at again? 22nd street or 24th street?”<br><br><em>3:02 p.m.</em>: “Test”<br><br><em>3:07 p.m.</em>: “No, still doesn’t work.”<br><br><em>3:15 p.m.</em>: “I give up. Again a beep from the bedroom. Phone is broken. You should return it tomorrow.”</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1643</wp:post_id>
		<wp:post_date>2008-02-08 09:29:55</wp:post_date>
		<wp:post_date_gmt>2008-02-08 08:29:55</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>90s-classic-alices-first-mobile-phone</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="because-i-care"><![CDATA[Because I Care]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>“Mac Users Arrogant”</title>
		<link>http://zef.me/2008/02/18/mac-users-arrogant/</link>
		<pubDate>Mon, 18 Feb 2008 15:36:37 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2008/02/18/mac-users-arrogant/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Are you a Mac user? <a href="http://link.brightcove.com/services/link/bcpid1078966384/bclid1137812485/bctid1420178886" target="_blank">The Street.com thinks you are arrogant</a>.</p>
<p>I do use a Mac. I, however, don’t think I’m superior to everybody else.<br><br>I just <em>am</em>.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>399</wp:post_id>
		<wp:post_date>2008-02-18 16:36:37</wp:post_date>
		<wp:post_date_gmt>2008-02-18 15:36:37</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>mac-users-arrogant</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="because-i-care"><![CDATA[Because I Care]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Links for 2008–02–20</title>
		<link>http://zef.me/2008/02/21/links-for-2008-02-20/</link>
		<pubDate>Wed, 20 Feb 2008 23:00:11 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2008/02/21/links-for-2008-02-20/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Today’s interesting links:</p>
<ul>
<li>
<a href="http://feeds.feedburner.com/~r/Techcrunch/~3/238268960/" target="_blank">Yahoo Search Wants to Be More Like Google, Embraces Hadoop</a> [<a href="http://www.techcrunch.com" target="_blank">TechCrunch</a>]</li>
<li>
<a href="http://www.johnbreslin.com/blog/2008/02/20/dataportability-and-me-jb/" target="_blank">DataPortability and me, JB</a> [<a href="http://www.johnbreslin.com/blog" target="_blank">Cloudlands</a>]</li>
<li>
<a href="http://www.knowing.net/PermaLink,guid,12374545-a6b1-4e08-bd7a-94a72e3fc518.aspx" target="_blank">Clever</a> [<a href="http://www.knowing.net/" target="_blank">Knowing.NET</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/OmMalik/~3/237951336/" target="_blank">10 Apps To Have For Your Symbian S60 Phone</a> [<a href="http://gigaom.com" target="_blank">GigaOM</a>]</li>
<li>
<a href="http://xkcd.com/386/" target="_blank">Duty Calls</a> [<a href="http://xkcd.com/" target="_blank">xkcd.com</a>]</li>
</ul>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>482</wp:post_id>
		<wp:post_date>2008-02-21 00:00:11</wp:post_date>
		<wp:post_date_gmt>2008-02-20 23:00:11</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>links-for-2008-02-20</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Links for 2008–02–27</title>
		<link>http://zef.me/2008/02/28/links-for-2008-02-27/</link>
		<pubDate>Wed, 27 Feb 2008 23:00:06 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2008/02/28/links-for-2008-02-27/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Today’s interesting links:</p>
<ul>
<li>
<a href="http://scobleizer.com/2008/02/27/what-made-me-cry-microsofts-world-wide-telescope/" target="_blank">What made me cry: Microsoft’s World Wide Telescope</a> [<a href="http://scobleizer.com" target="_blank">Scobleizer — Tech geek blogger</a>]</li>
<li>
<a href="http://feeds.engadget.com/~r/weblogsinc/engadget/~3/241090208/" target="_blank">Xbox 360 HD DVD drive now officially $49.99</a> [<a href="http://www.engadget.com" target="_blank">Engadget</a>]</li>
<li>
<a href="http://tirania.org/blog/archive/2008/Feb-26.html" target="_blank">Mono and the Game Developers Conference</a> [<a href="http://tirania.org/blog/index.html" target="_blank">Miguel de Icaza</a>]</li>
<li>
<a href="http://www.osnews.com/story.php?news_id=19388" target="_blank">Another GNOME-Mono Discussion</a> [<a href="http://www.osnews.com/" target="_blank">OSNews</a>]</li>
</ul>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>525</wp:post_id>
		<wp:post_date>2008-02-28 00:00:06</wp:post_date>
		<wp:post_date_gmt>2008-02-27 23:00:06</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>links-for-2008-02-27</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Links for 2008–02–19</title>
		<link>http://zef.me/2008/02/20/links-for-2008-02-19/</link>
		<pubDate>Tue, 19 Feb 2008 23:00:06 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2008/02/20/links-for-2008-02-19/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Today’s interesting links:</p>
<ul>
<li>
<a href="http://feeds.engadget.com/~r/weblogsinc/engadget/~3/237708776/" target="_blank">In case you missed it: peace broke out in the format war, HD DVD is dead</a> [<a href="http://www.engadget.com" target="_blank">Engadget</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/boingboing/iBag/~3/237567373/mit-profs-notorious.html" target="_blank">MIT prof’s notorious talk on How to Talk</a> [<a href="http://www.boingboing.net/" target="_blank">Boing Boing</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/readwriteweb/~3/237600428/scribd_launches_new_platform_and_ipaper.php" target="_blank">Scribd Launches New Platform and iPaper, a New Format for Web Docs</a> [<a href="http://www.readwriteweb.com/" target="_blank">ReadWriteWeb</a>]</li>
<li>
<a href="http://googlesystem.blogspot.com/2008/02/most-frequently-used-features-in.html" target="_blank">The Most Frequently Used Features in Microsoft Office</a> [<a href="http://googlesystem.blogspot.com/" target="_blank">Google Operating System</a>]</li>
<li>
<a href="http://www.joelonsoftware.com/items/2008/02/19.html" target="_blank">Why are the Microsoft Office file formats so complicated? (And some workarounds)</a> [<a href="http://www.joelonsoftware.com" target="_blank">Joel on Software</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/Techcrunch/~3/237468903/" target="_blank">Mixx To Cluster Related Stories — Digg Should Have Done This</a> [<a href="http://www.techcrunch.com" target="_blank">TechCrunch</a>]</li>
<li>
<a href="http://googlesystem.blogspot.com/2008/02/translate-text-from-web-page-inline.html" target="_blank">Translate Text From a Web Page Inline</a> [<a href="http://googlesystem.blogspot.com/" target="_blank">Google Operating System</a>]</li>
</ul>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>693</wp:post_id>
		<wp:post_date>2008-02-20 00:00:06</wp:post_date>
		<wp:post_date_gmt>2008-02-19 23:00:06</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>links-for-2008-02-19</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Links for 2008–03–01</title>
		<link>http://zef.me/2008/03/02/links-for-2008-03-01/</link>
		<pubDate>Sat, 01 Mar 2008 23:00:08 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2008/03/02/links-for-2008-03-01/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Today’s interesting links:</p>
<ul>
<li>
<a href="http://feeds.feedburner.com/~r/ajaxian/~3/243549270/firefox-3-performance-numbers" target="_blank">Firefox 3 Performance Numbers</a> [<a href="http://ajaxian.com" target="_blank">Ajaxian</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/Techcrunch/~3/243594570/" target="_blank">Technorati To Launch Blogger Advertising Network</a> [<a href="http://www.techcrunch.com" target="_blank">TechCrunch</a>]</li>
<li>
<a href="http://tirania.org/blog/archive/2008/Feb-29.html" target="_blank">Wooohooo! Am on Channel9!</a> [<a href="http://tirania.org/blog/index.html" target="_blank">Miguel de Icaza</a>]</li>
</ul>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>765</wp:post_id>
		<wp:post_date>2008-03-02 00:00:08</wp:post_date>
		<wp:post_date_gmt>2008-03-01 23:00:08</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>links-for-2008-03-01</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Links for 2008–02–17</title>
		<link>http://zef.me/2008/02/18/links-for-2008-02-17/</link>
		<pubDate>Sun, 17 Feb 2008 23:00:06 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2008/02/18/links-for-2008-02-17/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Today’s interesting links:</p>
<ul>
<li>
<a href="http://feeds.gawker.com/~r/valleywag/full/~3/235606252/yahoo-board-splinters-in-yang-versus-bostock-battle" target="_blank">Yahoo board splinters in Yang versus Bostock battle [Nerdfight]</a> [<a href="http://valleywag.com" target="_blank">Valleywag</a>]</li>
<li>
<a href="http://feeds.engadget.com/~r/weblogsinc/engadget/~3/236617121/" target="_blank">Elonex One: England’s 100 quid laptop</a> [<a href="http://www.engadget.com" target="_blank">Engadget</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/boingboing/iBag/~3/235596943/eyeball-stickers-to.html" target="_blank">Eyeball stickers to place over eyelids</a> [<a href="http://www.boingboing.net/" target="_blank">Boing Boing</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/Techcrunch/~3/235648257/" target="_blank">Amazon Web Services Goes Down, Takes Many Startup Sites With It</a> [<a href="http://www.techcrunch.com" target="_blank">TechCrunch</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/OmMalik/~3/235612224/" target="_blank">Amazon S3 Storage Service Goes Down, Still Not Up</a> [<a href="http://gigaom.com" target="_blank">GigaOM</a>]</li>
<li>
<a href="http://daringfireball.net/2008/02/macbook_air_appeal" target="_blank">★ The Appeal of the MacBook Air</a> [<a href="http://daringfireball.net/" target="_blank">Daring Fireball</a>]</li>
</ul>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>896</wp:post_id>
		<wp:post_date>2008-02-18 00:00:06</wp:post_date>
		<wp:post_date_gmt>2008-02-17 23:00:06</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>links-for-2008-02-17</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Little Things I Notice in Linux, Part 1</title>
		<link>http://zef.me/2008/02/22/little-things-i-notice-in-linux-part-1/</link>
		<pubDate>Fri, 22 Feb 2008 15:31:34 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2008/02/22/little-things-i-notice-in-linux-part-1/</guid>
		<description></description>
		<content:encoded><![CDATA[
<p>As I use Linux full-time, I from time to time notice little details that I haven’t seen in other operating systems, such as Windows or OS X. I’ll post them as I find them. Of course Linux is a general thing, in particular I’m using GNOME 2.20 on Ubuntu 7.10.<br><br>Something I noticed today in the file manager (Nautilus): files that are in fact archives (zip files, gzip files, tar files) but do not have a typical archive extension (.zip, .gz, .tar) still appear as archives in Nautilus. Handy. Just noticed this with a “.ywl” file (<a href="http://www.yawl-system.com" target="_blank">YAWL</a>). Apparently Nautilus does some file inspection when it is not sure of the file type. Thumbnails of PDF documents can also be handy sometimes (although OS X beats this with its quicklook feature, to quickly view certain document types).</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>905</wp:post_id>
		<wp:post_date>2008-02-22 16:31:34</wp:post_date>
		<wp:post_date_gmt>2008-02-22 15:31:34</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>little-things-i-notice-in-linux-part-1</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Links for 2008–02–26</title>
		<link>http://zef.me/2008/02/27/links-for-2008-02-26/</link>
		<pubDate>Tue, 26 Feb 2008 23:00:07 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2008/02/27/links-for-2008-02-26/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Today’s interesting links:</p>
<ul>
<li>
<a href="http://feeds.feedburner.com/~r/boingboing/iBag/~3/241095082/smoking-pistachio-nu.html" target="_blank">Smoking pistachio nut</a> [<a href="http://www.boingboing.net/" target="_blank">Boing Boing</a>]</li>
<li>
<a href="http://blog.mattmecham.com/2008/02/26/goodbye-mighty-mouse/" target="_blank">Goodbye, Mighty Mouse</a> [<a href="http://blog.mattmecham.com" target="_blank">Matt’s Blog</a>]</li>
<li>
<a href="http://feeds.engadget.com/~r/weblogsinc/engadget/~3/241495938/" target="_blank">Apple MacBook, MacBook Pro get refreshed with faster CPUs, multi-touch</a> [<a href="http://www.engadget.com" target="_blank">Engadget</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/Techcrunch/~3/241288652/" target="_blank">FriendFeed Raises $5 Million, Now Open to Everyone</a> [<a href="http://www.techcrunch.com" target="_blank">TechCrunch</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/boingboing/iBag/~3/241353266/quake-live-inbrowser.html" target="_blank">Quake Live: in-browser, ad-supported Quake III</a> [<a href="http://www.boingboing.net/" target="_blank">Boing Boing</a>]</li>
<li>
<a href="http://blog.twitter.com/2008/02/little-shop-of-twitters.html" target="_blank">Little Shop of Twitters</a> [<a href="http://blog.twitter.com/" target="_blank">Twitter Blog</a>]</li>
<li>
<a href="http://www.presentationzen.com/presentationzen/2008/02/if-your-present.html" target="_blank">Inspiration matters</a> [<a href="http://www.presentationzen.com/presentationzen/" target="_blank">Presentation Zen</a>]</li>
</ul>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>911</wp:post_id>
		<wp:post_date>2008-02-27 00:00:07</wp:post_date>
		<wp:post_date_gmt>2008-02-26 23:00:07</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>links-for-2008-02-26</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Engaged!</title>
		<link>http://zef.me/2008/02/27/engaged/</link>
		<pubDate>Wed, 27 Feb 2008 10:18:21 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2008/02/27/engaged/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>About a week and a half ago, February 16th, Justyna and I got engaged! It happened in a hotel, just after sunset at the seaside, it was very romantic :)</p>
<p>(Old picture, and I look a bit weird — but Justyna likes this picture)<br><br>Because Justyna is Polish we will probably do two weddings. The civil wedding end of November (hopefully) in Schiedam (the Netherlands, where we live) and the church wedding maybe in June next year in Koszalin, Poland (where Justyna is from).<br><br>We’re very happy :)</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1034</wp:post_id>
		<wp:post_date>2008-02-27 11:18:21</wp:post_date>
		<wp:post_date_gmt>2008-02-27 10:18:21</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>engaged</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="personal"><![CDATA[Personal]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Britney Spears joins DataPortabilty.org as New Chairman, Uhuh</title>
		<link>http://zef.me/2008/02/19/britney-spears-joins-dataportabilty-org-as-new-chairman-uhuh/</link>
		<pubDate>Tue, 19 Feb 2008 10:04:05 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2008/02/19/britney-spears-joins-dataportabilty-org-as-new-chairman-uhuh/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p><a href="http://whydoeseverythingsuck.com/2008/01/britney-spears-joins-dataportabiltyorg.html" target="_blank">Hank Williams</a>:</p>
<blockquote>After an <a href="http://www.25hoursaday.com/weblog/2008/01/11/DataportabilityorgIsTheNewBlack.aspx" target="_blank">avalanche</a> of <a href="http://www.techcrunch.com/2008/01/08/this-day-will-be-remembered-facebook-google-and-plaxo-join-the-dataportability-workgroup/" target="_blank">new members</a> in the last week, including Facebook, Plaxo, Linkedin, Flickr, SixApart, and Twitter, <a href="http://www.dataportability.org/" target="_blank">DataPortability.org</a> made a surprise announcement that Britney Spears would join the organization as chairman. She replaces founder Chris Saad.</blockquote>
<p>Uhuh. Ok… Enough with the silliness.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1047</wp:post_id>
		<wp:post_date>2008-02-19 11:04:05</wp:post_date>
		<wp:post_date_gmt>2008-02-19 10:04:05</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>britney-spears-joins-dataportabilty-org-as-new-chairman-uhuh</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Golden Oldie: The Church of XML</title>
		<link>http://zef.me/2008/02/18/golden-oldie-the-church-of-xml/</link>
		<pubDate>Mon, 18 Feb 2008 16:05:51 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2008/02/18/golden-oldie-the-church-of-xml/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>I was just having a look at my referrer logs and found some referrers to an older article of mine, from 2004. Still amusing today :)<br><br><a href="http://www.zefhemel.com/archives/2004/09/12/the-church-of-xml" target="_blank">The Church of XML</a>:</p>
<blockquote>XML is female. Of course she is. XML is beautiful, XML is sexy, everybody wants a piece of her, and everyone can have a piece of her. But XML is not to own, XML is all about sharing. Perfection is also one of XML’s properties. Perfection on a higher level. It’s not about verboseness, it’s not about efficiency, it’s about openness, sharing and most of all: love. You don’t need condoms if you’ve got XML-DOMs.</blockquote>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1130</wp:post_id>
		<wp:post_date>2008-02-18 17:05:51</wp:post_date>
		<wp:post_date_gmt>2008-02-18 16:05:51</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>golden-oldie-the-church-of-xml</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="because-i-care"><![CDATA[Because I Care]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Links for 2008–02–29</title>
		<link>http://zef.me/2008/03/01/links-for-2008-02-29/</link>
		<pubDate>Fri, 29 Feb 2008 23:00:08 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2008/03/01/links-for-2008-02-29/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Today’s interesting links:</p>
<ul>
<li>
<a href="http://www.presentationzen.com/presentationzen/2008/02/sir-ken-robinso.html" target="_blank">Sir Ken Robinson on public speaking</a> [<a href="http://www.presentationzen.com/presentationzen/" target="_blank">Presentation Zen</a>]</li>
<li>
<a href="http://www.macrumors.com/2008/02/29/unofficial-iphone-game-demos-unique-possibilities/" target="_blank">Unofficial iPhone Game Demos Unique Possibilities</a> [<a href="http://www.macrumors.com" target="_blank">MacRumors : Mac News and Rumors</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/readwriteweb/~3/243041919/google_sites_the_next_sharepoint_maybe_notwhy_google_apps_could_lose_the_enterprise_market.php" target="_blank">Google Sites the Next Sharepoint? Maybe Not….Why Google Apps Could Lose the Enterprise Market</a> [<a href="http://www.readwriteweb.com/" target="_blank">ReadWriteWeb</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/Techcrunch/~3/243062503/" target="_blank">Data is the New Links. Tim Berners-Lee Says Sites That Don’t Give Users Their Data Back Are Boring</a> [<a href="http://www.techcrunch.com" target="_blank">TechCrunch</a>]</li>
</ul>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1150</wp:post_id>
		<wp:post_date>2008-03-01 00:00:08</wp:post_date>
		<wp:post_date_gmt>2008-02-29 23:00:08</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>links-for-2008-02-29</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Links for 2008–02–21</title>
		<link>http://zef.me/2008/02/22/links-for-2008-02-21/</link>
		<pubDate>Thu, 21 Feb 2008 23:00:07 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2008/02/22/links-for-2008-02-21/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Today’s interesting links:</p>
<ul>
<li>
<a href="http://feeds.feedburner.com/~r/readwriteweb/~3/238912966/microsoft_makes_public_commitm.php" target="_blank">Microsoft Makes Public Commitments to Data Portability and Interoperability</a> [<a href="http://www.readwriteweb.com/" target="_blank">ReadWriteWeb</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/Techcrunch/~3/238996756/" target="_blank">Microsoft Bumps Online Storage To 5GB</a> [<a href="http://www.techcrunch.com" target="_blank">TechCrunch</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/readwriteweb/~3/238879746/cloudo_an_internet_os_launches.php" target="_blank">Cloudo, an Internet OS, Launches Alpha</a> [<a href="http://www.readwriteweb.com/" target="_blank">ReadWriteWeb</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/istartedsomething/~3/238619973/" target="_blank">Live Messenger misleads users about 64-bit compatibility</a> [<a href="http://www.istartedsomething.com" target="_blank">istartedsomething</a>]</li>
</ul>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1282</wp:post_id>
		<wp:post_date>2008-02-22 00:00:07</wp:post_date>
		<wp:post_date_gmt>2008-02-21 23:00:07</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>links-for-2008-02-21</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Links for 2008–02–22</title>
		<link>http://zef.me/2008/02/23/links-for-2008-02-22/</link>
		<pubDate>Fri, 22 Feb 2008 23:00:08 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2008/02/23/links-for-2008-02-22/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Today’s interesting links:</p>
<ul>
<li>
<a href="http://feeds.feedburner.com/~r/boingboing/iBag/~3/239303231/stephen-fry-on-the-a.html" target="_blank">Stephen Fry on the Asus Eee</a> [<a href="http://www.boingboing.net/" target="_blank">Boing Boing</a>]</li>
<li>
<a href="http://feeds.gawker.com/~r/valleywag/full/~3/239022474/microsoft-buries-programmers-in-30000-pages-of-documentation" target="_blank">Microsoft buries programmers in 30,000 pages of documentation [Open Source]</a> [<a href="http://valleywag.com" target="_blank">Valleywag</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/readwriteweb/~3/239128573/red_hat_sends_cd_to_dataportab.php" target="_blank">Red Hat Sends C&amp;D to DataPortability.org…Over Its Logo</a> [<a href="http://www.readwriteweb.com/" target="_blank">ReadWriteWeb</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/DataPortability/~3/239145585/" target="_blank">Redhat send Data Portability group Cease and Desist letter, are the logos that similar?</a> [<a href="http://www.mysyndicaat.com/myfeed/blog/default/ChrisSaad_DataPortability" target="_blank">DataPortability.org Format Updates</a>]</li>
</ul>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1328</wp:post_id>
		<wp:post_date>2008-02-23 00:00:08</wp:post_date>
		<wp:post_date_gmt>2008-02-22 23:00:08</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>links-for-2008-02-22</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Links for 2008–03–03</title>
		<link>http://zef.me/2008/03/04/links-for-2008-03-03/</link>
		<pubDate>Mon, 03 Mar 2008 23:00:09 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2008/03/04/links-for-2008-03-03/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Today’s interesting links:</p>
<ul>
<li>
<a href="http://feeds.feedburner.com/~r/boingboing/iBag/~3/244942022/linux-downloader-for.html" target="_blank">Linux downloader for Amazon MP3 store</a> [<a href="http://www.boingboing.net/" target="_blank">Boing Boing</a>]</li>
<li>
<a href="http://feeds.engadget.com/~r/weblogsinc/engadget/~3/244953847/" target="_blank">Hands-on with the 9-inch Eee PC</a> [<a href="http://www.engadget.com" target="_blank">Engadget</a>]</li>
<li>
<a href="http://feeds.engadget.com/~r/weblogsinc/engadget/~3/244919550/" target="_blank">ASUS set to announce 9-inch Eee PC 900?</a> [<a href="http://www.engadget.com" target="_blank">Engadget</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/readwriteweb/~3/244932844/microsofts_world_wide_telescope_demo_video.php" target="_blank">Microsoft’s World Wide Telescope Demo Video</a> [<a href="http://www.readwriteweb.com/" target="_blank">ReadWriteWeb</a>]</li>
<li>
<a href="http://www.presentationzen.com/presentationzen/2008/03/larry-lessigs-l.html" target="_blank">Lawrence Lessig’s last “Free Culture” presentation</a> [<a href="http://www.presentationzen.com/presentationzen/" target="_blank">Presentation Zen</a>]</li>
</ul>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1364</wp:post_id>
		<wp:post_date>2008-03-04 00:00:09</wp:post_date>
		<wp:post_date_gmt>2008-03-03 23:00:09</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>links-for-2008-03-03</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Question for People with Big-Ass Cars/Big Ass-Cars</title>
		<link>http://zef.me/2008/02/20/question-for-people-with-big-ass-cars-big-ass-cars/</link>
		<pubDate>Wed, 20 Feb 2008 10:32:02 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2008/02/20/question-for-people-with-big-ass-cars-big-ass-cars/</guid>
		<description></description>
		<content:encoded><![CDATA[
<p><strong>Question 2</strong> (5 credits)<br><br>Why, in an urban area, are you driving a car with four-wheel drive, killing the North Pole ice caps, that takes up almost the whole width of the street, so nobody can pass, including cyclists?<br>In your answer do not use the phrases “cool”, “awesome” and “because I can”.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1417</wp:post_id>
		<wp:post_date>2008-02-20 11:32:02</wp:post_date>
		<wp:post_date_gmt>2008-02-20 10:32:02</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>question-for-people-with-big-ass-cars-big-ass-cars</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="because-i-care"><![CDATA[Because I Care]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Links for 2008–02–24</title>
		<link>http://zef.me/2008/02/25/links-for-2008-02-24/</link>
		<pubDate>Sun, 24 Feb 2008 23:00:11 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2008/02/25/links-for-2008-02-24/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Today’s interesting links:</p>
<ul><li>
<a href="http://www.calacanis.com/2008/02/23/pmog-the-playful-web-and-some-brilliant-stuff-that-almost-chan/" target="_blank">PMOG, the playful web, and some brilliant stuff that almost changed the world (Virtual Places and Third Voice)</a> [<a href="http://www.calacanis.com" target="_blank">The Jason Calacanis Weblog</a>]</li></ul>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1489</wp:post_id>
		<wp:post_date>2008-02-25 00:00:11</wp:post_date>
		<wp:post_date_gmt>2008-02-24 23:00:11</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>links-for-2008-02-24</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Links for 2008–02–28</title>
		<link>http://zef.me/2008/02/29/links-for-2008-02-28/</link>
		<pubDate>Thu, 28 Feb 2008 23:00:12 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2008/02/29/links-for-2008-02-28/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Today’s interesting links:</p>
<ul>
<li>
<a href="http://feeds.feedburner.com/~r/Techcrunch/~3/242500874/" target="_blank">Google Docs Gets A Visual Overhaul, Now More Office Like</a> [<a href="http://www.techcrunch.com" target="_blank">TechCrunch</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/Techcrunch/~3/242512819/" target="_blank">It Took 16 Months, But Google Relaunches Jotspot</a> [<a href="http://www.techcrunch.com" target="_blank">TechCrunch</a>]</li>
</ul>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1695</wp:post_id>
		<wp:post_date>2008-02-29 00:00:12</wp:post_date>
		<wp:post_date_gmt>2008-02-28 23:00:12</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>links-for-2008-02-28</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Ubuntu Mobile</title>
		<link>http://zef.me/2008/02/28/ubuntu-mobile/</link>
		<pubDate>Thu, 28 Feb 2008 08:01:45 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2008/02/28/ubuntu-mobile/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p><a href="http://www.electronista.com/articles/08/02/26/ubuntu.mobile/" target="_blank">Electronista</a>:</p>
<blockquote>Canonical today hoped to preempt all comers today with news of <a href="http://macnn.com/rd/96457==http://www.ubuntu.com/products/mobile" target="_blank">Ubuntu Mobile</a>. Its first Linux variant aimed at handhelds, the software is tailored for the Mobile Internet Devices (MIDs) expected to launch in spring based on Intel’s <a href="http://macnn.com/rd/96458==http://www.electronista.com/articles/08/02/04/intel.silverthorne.details/" target="_blank">Silverthorne</a> technology and is designed to recognize basic iPhone-like gestures such as swiping to scroll through menus and websites. A scrolling visual front end based on Flash or Clutter replaces the traditional Ubuntu desktop and is designed to be used solely with fingers, including with an on-screen keyboard.<br><br>MIDs based on Ubuntu Mobile will also have full feature support once users launch actual programs, Canonical promises. In addition to full web browsing support, any handheld should support 3D through OpenGL and will have support for 3G cellular Internet access, Wi-Fi, and WiMAX through services such as Sprint’s Xohm network. Bluetooth, GPS, USB webcams and other add-ons often used with handheld devices will be supported without needing special support.</blockquote>
<p>I really wonder what kind of devices this will run on. The article mentions it’s for devices with 4–7" screens — not really mobile phone size. I guess it’s mostly targeted at smaller tablet-like computers.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1755</wp:post_id>
		<wp:post_date>2008-02-28 09:01:45</wp:post_date>
		<wp:post_date_gmt>2008-02-28 08:01:45</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ubuntu-mobile</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Links for 2008–02–18</title>
		<link>http://zef.me/2008/02/19/links-for-2008-02-18/</link>
		<pubDate>Mon, 18 Feb 2008 23:00:06 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2008/02/19/links-for-2008-02-18/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Today’s interesting links:</p>
<ul>
<li>
<a href="http://pyside.blogspot.com/2008/02/there-are-many-things-you-can-say-about.html" target="_blank">There are many things you can say about Emacs…</a> [<a href="http://pyside.blogspot.com/" target="_blank">The Py Side of Life</a>]</li>
<li>
<a href="http://pyside.blogspot.com/2007/10/new-in-python-3-extended-unpacking.html" target="_blank">New in Python 3: Extended unpacking</a> [<a href="http://pyside.blogspot.com/" target="_blank">The Py Side of Life</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/readwriteweb/~3/237054791/mosso_cloud_computing_for_the_rest_of_us.php" target="_blank">Mosso: Cloud Computing for the Rest of Us</a> [<a href="http://www.readwriteweb.com/" target="_blank">ReadWriteWeb</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/JeffreyGelens/~3/236999679/" target="_blank">Introducing Towa</a> [<a href="http://www.gelens.org" target="_blank">Jeffrey Gelens’ blog feed</a>]</li>
<li>
<a href="http://www.dilbert.com/comics/dilbert/archive/dilbert-20080218.html" target="_blank">Comic for 18 Feb 2008</a> [<a href="http://www.dilbert.com/" target="_blank">Dilbert</a>]</li>
<li>
<a href="http://www.tbray.org/ongoing/When/200x/2008/02/17/Linux-Aggro" target="_blank">Linux Aggro</a> [<a href="http://www.tbray.org/ongoing/" target="_blank">ongoing</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/oreilly/radar/atom/~3/236622699/saving_extinct_languages.html" target="_blank">Saving Extinct Languages</a> [<a href="http://radar.oreilly.com/" target="_blank">O’Reilly Radar</a>]</li>
<li>
<a href="http://googlesystem.blogspot.com/2008/02/gmails-humble-beginning.html" target="_blank">Gmail’s Humble Beginning</a> [<a href="http://googlesystem.blogspot.com/" target="_blank">Google Operating System</a>]</li>
<li>
<a href="http://xkcd.com/385/" target="_blank">How it Works</a> [<a href="http://xkcd.com/" target="_blank">xkcd.com</a>]</li>
</ul>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1771</wp:post_id>
		<wp:post_date>2008-02-19 00:00:06</wp:post_date>
		<wp:post_date_gmt>2008-02-18 23:00:06</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>links-for-2008-02-18</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Links for 2008–03–15</title>
		<link>http://zef.me/2008/03/16/links-for-2008-03-15/</link>
		<pubDate>Sat, 15 Mar 2008 23:00:06 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2008/03/16/links-for-2008-03-15/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Today’s interesting links:</p>
<ul>
<li>
<a href="http://tirania.org/blog/archive/2008/Mar-14-1.html" target="_blank">Banshee Release</a> [<a href="http://tirania.org/blog/index.html" target="_blank">Miguel de Icaza</a>]</li>
<li>
<a href="http://tirania.org/blog/archive/2008/Mar-14.html" target="_blank">MonoDevelop 1.0 has been Released</a> [<a href="http://tirania.org/blog/index.html" target="_blank">Miguel de Icaza</a>]</li>
<li>
<a href="http://www.mono-project.com/news/archive/2008/Mar-14.html" target="_blank">MonoDevelop 1.0 has been Released</a> [<a href="http://www.mono-project.com/news/index.html" target="_blank">Mono Project News</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/readwriteweb/~3/250854286/yahoo_supports_semantic_web.php" target="_blank">And Nerds Became Kings: Yahoo! to Announce Semantic Web Support</a> [<a href="http://www.readwriteweb.com/" target="_blank">ReadWriteWeb</a>]</li>
<li>
<a href="http://googlesystem.blogspot.com/2008/03/google-docs-to-add-menu-and-print.html" target="_blank">Google Docs to Add a Menu and Print Layout</a> [<a href="http://googlesystem.blogspot.com/" target="_blank">Google Operating System</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/Techcrunch/~3/249650322/" target="_blank">Guy Kawasaki Formally Launches Alltop. Wow, It’s Bad.</a> [<a href="http://www.techcrunch.com" target="_blank">TechCrunch</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/readwriteweb/~3/249639477/twine_disappoints.php" target="_blank">Twine Disappoints After Semantic Web Hype</a> [<a href="http://www.readwriteweb.com/" target="_blank">ReadWriteWeb</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/readwriteweb/~3/249797581/alltop_rss_for_the_masses.php" target="_blank">On Alltop and RSS For The Masses</a> [<a href="http://www.readwriteweb.com/" target="_blank">ReadWriteWeb</a>]</li>
<li>
<a href="http://pragdave.blogs.pragprog.com/pragdave/2008/03/the-language-in.html" target="_blank">The ‘Language’ in Domain-Specific Language Doesn’t Mean English (or French, or Japanese, or …)</a> [<a href="http://pragdave.blogs.pragprog.com/pragdave/" target="_blank">PragDave</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/readwriteweb/~3/249114077/mark_zuckerberg_on_data_portab.php" target="_blank">Mark Zuckerberg on Data Portability: An Interview</a> [<a href="http://www.readwriteweb.com/" target="_blank">ReadWriteWeb</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/OmMalik/~3/249198299/" target="_blank">GigaOM Interview: Mark Zuckerberg, Founder &amp; CEO Facebook</a> [<a href="http://gigaom.com" target="_blank">GigaOM</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/readwriteweb/~3/249298629/4_technologies_for_portability.php" target="_blank">4 Technologies for Portability in Social Networks: A Primer</a> [<a href="http://www.readwriteweb.com/" target="_blank">ReadWriteWeb</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/readwriteweb/~3/248666697/why_apple_will_dominate_next_gen_computing.php" target="_blank">Why Apple Will Dominate Next Gen Computing</a> [<a href="http://www.readwriteweb.com/" target="_blank">ReadWriteWeb</a>]</li>
<li>
<a href="http://xkcd.com/394/" target="_blank">Kilobyte</a> [<a href="http://xkcd.com/" target="_blank">xkcd.com</a>]</li>
<li>
<a href="http://damienkatz.net/2008/03/what_sucks_abou.html" target="_blank">What Sucks About Erlang</a> [<a href="http://damienkatz.net/" target="_blank">Damien Katz</a>]</li>
</ul>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>143</wp:post_id>
		<wp:post_date>2008-03-16 00:00:06</wp:post_date>
		<wp:post_date_gmt>2008-03-15 23:00:06</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>links-for-2008-03-15</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>CouchDB</title>
		<link>http://zef.me/2008/03/06/couchdb/</link>
		<pubDate>Thu, 06 Mar 2008 10:27:27 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2008/03/06/couchdb/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Yesterday I discovered <a href="http://www.couchdb.com" target="_blank">CouchDB</a>. It’s a little early, but I want to give people who are interested some links to have a look at, if they are interested.</p>
<ul>
<li><a href="http://www.couchdbwiki.com/index.php?title=Main_Page" target="_blank">CouchDB documentation wiki</a></li>
<li><a href="http://code.google.com/p/couchdb/" target="_blank">Google Code page (to download it)</a></li>
<li><a href="http://blog.leetsoft.com/2007/9/2/futuretalk-couchdb" target="_blank">Futuretalk: CouchDB</a></li>
<li><a href="http://www.cmlenz.net/archives/2007/10/couchdb-joins" target="_blank">CouchDB “Joins”</a></li>
</ul>
<p>To play with it, have a look at the many APIs in practically any language on the wiki. Things in my mind while looking at CouchDB: is this the same transition in the database space as dynamic typing is to static typing in programming language space? Should <a href="http://www.amazon.com/b/ref=sc_fe_l_2?ie=UTF8&amp;node=342335011&amp;no=3435361&amp;me=A36L942TSJ2AJA" target="_blank">Amazon’s SimpleDB</a> really be <em>this</em>? And: how the hell can this scale?<br><br><strong>Update:</strong> a <a href="http://www.automatthew.com/2007/12/amazon-simpledb-and-couchdb-compared.html" target="_blank">comparison between SimpleDB and CouchDB</a>.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>159</wp:post_id>
		<wp:post_date>2008-03-06 11:27:27</wp:post_date>
		<wp:post_date_gmt>2008-03-06 10:27:27</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>couchdb</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Sittin’ on the CouchDB</title>
		<link>http://zef.me/2008/03/11/sittin-on-the-couchdb/</link>
		<pubDate>Tue, 11 Mar 2008 15:10:34 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2008/03/11/sittin-on-the-couchdb/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>For the past few days I’ve been dabbling with <a href="http://www.couchdb.com" target="_blank">CouchDB</a>. Trying to figure out what it can do and how it’s different than traditional relational databases. <a href="http://www.couchdbwiki.com/index.php?title=CouchDb_Quick_Overview" target="_blank">According to the site</a>:</p>
<blockquote>CouchDB is designed for document-oriented applications. A typical real-world document oriented activity, if it weren’t computerized, would consist mostly of physical paper documents. These documents would need to get sent around, edited, photocopied, approved, denied, pinned to the wall, filed away, buried in soft peat for six months, etc. They could be simple yellow sticky notes or 10,000 page legal documents. Not all document-oriented applications have real world counterparts.</blockquote>
<blockquote>Some examples of document-oriented applications:</blockquote>
<ul>
<li>CRM</li>
<li>Contact Address/Phone Book</li>
<li>Forum/Discussion</li>
<li>Bug Tracking</li>
<li>Document Collaboration/Wiki</li>
<li>Customer Call Tracking</li>
<li>Expense Reporting</li>
<li>To-Dos</li>
<li>Time Sheets</li>
<li>E-mail</li>
<li>Help/Reference Desk</li>
</ul>
<p>Looking at this list I’m like, what application is not document-oriented? It seems that the applications I use: address books, email, blogs, twitter, calendar and so on are all document-oriented applications. So, I decided to look a bit deeper. What makes CouchDB different than, say, MySQL? <a href="http://damienkatz.net/files/What%20is%20CouchDB.pdf" target="_blank">This presentation</a> gave me the best answer to that question:<br><br><br><strong>SQLCouchDB</strong>Predefined, explicit schemaDynamic, implicit schemaUniform tables of dataCollection of named documents with varying structureNormalized. Objects spread across tables. Duplication reduced.Denormalized. Docs usually self contained. Data often duplicated.Must know schema to read/write a complete objectMust know only document nameDynamic queries of static schemasStatic queries of dynamic schemas<br>CouchDB seems to tell you: forget everything you learned about database design and be pragmatic. Don’t normalize — aggregate, don’t plan ahead — evolve. To play around with these ideas I decided to port my blog to CouchDB. It’s not really done yet, but I moved over most of the data and have a basic index page view now. Let me tell you how the approach I took with CouchDB differs from the one taken for SQL databases in <a href="http://www.wordpress.org" target="_blank">WordPress.</a><br><br>Unlike MySQL and other SQL databases, you access CouchDB through a web service API, a RESTful service API in fact. The protocol is extremely simple and that’s also why there are client “libraries” in about every language imaginable. It also comes with a convenient browser admin interface that allows you to create new databases, create documents, edit them, remove them and so forth. This is what my blog database looks like (click for a larger version):</p>
<p>As you can see every document has a <em>Document ID</em>, this is similar to a primary key in SQL. When you click on a document you will see the content of that document (click for a larger version):</p>
<p>As you can see a documents consists of a number fields with associated values. What field names you use is entirely up to you, but there are a couple that have a special meaning. Every document has at least two fields: “_id” (which contains the document’s ID) and “_rev” (which contains the document’s revision number). Indeed, CouchDB keeps old revisions of all your documents, which is really cool and useful. It means that it’s almost trivial to produce a revision history of your blog posts, or if you implement a wiki system with CouchDB — a revision history of pages is very simple to obtain.<br><br>A field’s value can be of any <a href="http://json.org/" target="_blank">JSON</a> type, so: a number, a string, a list or a hash table.<br><br>In my blog application I defined a number of other fields, they are:</p>
<ul>
<li>author (containing the post’s author name)</li>
<li>tags (a list of tags associated with the post, note that this is a list</li>
<li>comments (a list of comments, each of which is a hash table containing the comment’s date of posting, the content of the comment and the name, URL and email address of the poster)</li>
<li>content_parser (this is a string saying what format the post’s content is in, for example wordpress’s HTML with newline preservation)</li>
<li>content (the actual content of the post)</li>
<li>date (the date of the posting)</li>
<li>title (the title of the post)</li>
<li>type (for a post always “post”)</li>
<li>slug (the post slug)</li>
</ul>
<p>People who ever designed a database schema for a relational database will look at the tags and comments fields and think: what the? In SQL databases this is absolutely not-done, partly because you don’t usually have list types, let alone lists of hashtable types in SQL databases, but also because it’s not normalized and very hard to query.<br><br>Now I will admit, this denormalization has its problems. For instance, if I change the name of a tag I would have to run through every single post and change its name — very inefficient, whereas in a SQL database there would be a “tag” table with a tag ID and tag name, and I would simply change the name. Also, it’s not very efficient to store data in this manner, because you have data duplication all over the place. However, querying this nested data is not a problem, because CouchDB has views.<br><br>A view in CouchDB is yet another document adhering to a couple of conventions, first of all, its Document ID should start with “_design/” and the document should have a “views” field with a hashmap that maps view names to Javascript functions (click for larger version):</p>
<p>Now let’s have a look at the two views that are defined here. The first one is the simplest one: “latest_posts”. Here is the Javascript code:<br><br>function(doc) {<br> if(doc.type == ‘post’) {<br> map(doc.date, {‘title’: doc.title, ‘author’: doc.author,<br> ‘content’: doc.content, ‘tags’: doc.tags,<br> ‘comment_count’: doc.comments.length})<br> }<br>}<br><br>The idea with views is simple. You provide CouchDB with a function in some language (Javascript out of the box, but other languages can easily be supported, there are means to write those functions in Python for instance). This function takes one argument: the document. The function decides whether or not this document will be in the view, and if so what the key will be and what shall be the contents of the entry for this document. They key can be used to sort and be filtered on. The content can be any JSON type, but typically it’s a hash map (as in this case). The function to call to tell CouchDB what to put in the view is called <em>map</em>. Now, if you have done some functional programming this will seem odd to you, because typically <em>map</em> is a function that applies some function to a list of values. In this context however <em>map</em> refers to acting as the map bit of the map/reduce algorithm using which CouchDB is implemented. Personally I’m not a big fan of <em>map</em> as a name, as<br> users don’t really care about map/reduce, they care about what <em>map</em> does. In the Python support this function is using Python’s <em>yield</em> keyword, which, in my view, is more descriptive of what it does.<br><br>Now you might wonder, why use something like <em>map</em> or <em>yield</em>, why not simply use <em>return</em>? Well, the interesting thing is that this view function doesn’t have to return 0 or 1 view entry, it can return any number of view entries. In the “latest_posts” example this didn’t make much sense. But let’s have a look at the view function for “latest_comments”. As you will remember comments are not separate documents in my blog model, they are contained in a field of a post document. Now how would you retrieve a list of the latest comments? Obviously the answer is a view, and this is what it looks like:<br><br>function(doc) {<br> if(doc.type == ‘post’) {<br> for(var i = 0; i &lt; doc.comments.length; i++) {<br> var comment = doc.comments[i];<br> map(comment.date, {‘post_title’: doc.title, ‘post_id’: doc._id,<br> ‘author’: comment.author,<br> ‘content’: comment.content});<br> }<br> }<br>}<br><br>What happens here is that for every comment in every post document, <em>map</em> is called returning information about the comment and using <em>comment.date</em> as the key so that it is possible to sort based on that.<br><br>Using these two views you already implemented quite a bit of the application. To create a post, simply add a document. For the front page simply use the “latest_posts” view, for the individual post page simply retrieve the document, which contains all the information you need. If you want a list of latest comments in the sidebar, you can use “latest_comments” view. Put a simple frontend to it, and there you go, a CouchDB powered blog (click for bigger version):</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>180</wp:post_id>
		<wp:post_date>2008-03-11 16:10:34</wp:post_date>
		<wp:post_date_gmt>2008-03-11 15:10:34</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>sittin-on-the-couchdb</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Relational Databases are Dead, Long Live Relational Databases</title>
		<link>http://zef.me/2008/04/10/relational-databases-are-dead-long-live-relational-databases/</link>
		<pubDate>Thu, 10 Apr 2008 07:00:02 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2008/04/10/relational-databases-are-dead-long-live-relational-databases/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p><a href="http://code.google.com/appengine/docs/datastore/gqlreference.html" target="_blank">Google’s BigTable — GQL Reference</a>:</p>
<blockquote>A GQL query cannot perform a SQL-like “join” query.</blockquote>
<p><a href="http://groups.google.com/group/google-appengine/browse_thread/thread/8631dc954b5d5e76/7fe019aa86824913?hl=en&amp;amp;amp;lnk=gst&amp;amp;amp;q=joins#7fe019aa86824913" target="_blank">A Google employee</a> (second post by “ryan”):</p>
<blockquote>We’ve had good results when we take a step back and think about our data models from a different angle. Most app developers are accustomed to designing SQL data models in a certain way, with a normalized schema, foreign keys, fixed column types, etc. With Google App Engine, you can often get good results by loosening the normalization and other restrictions, and often by doing more work in writes instead of queries.</blockquote>
<p><a href="http://www.cmlenz.net/archives/2007/10/couchdb-joins" target="_blank">Joins in CouchDB</a></p>
<blockquote>If you’d be using an SQL database, you’d obviously have two tables with foreign keys and you’d be using joins. But what would the “obvious” approach in CouchDB look like?</blockquote>
<p><a href="http://www.jacobian.org/writing/2007/oct/18/couchdb/" target="_blank">CouchDB first impressions</a>:</p>
<blockquote>Joins, of course, are simply not possible… but in the right situations you wouldn’t need ‘em.</blockquote>
<p><a href="http://www.nickhalstead.com/2007/12/16/amazon-simpledb-a-different-perspective/" target="_blank">Amazon SimpleDB — A different perspective</a> (in the comments):</p>
<blockquote>You are right as far as I can see, that there is no join syntax in SimpleDB.</blockquote>
<p>Normalization and table joins are so 2007.</p>
<p><strong>Update:</strong> for more discussion <a href="http://reddit.com/r/programming/info/6fbws/comments/" target="_blank">see the reddit comments</a>.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>332</wp:post_id>
		<wp:post_date>2008-04-10 09:00:02</wp:post_date>
		<wp:post_date_gmt>2008-04-10 07:00:02</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>relational-databases-are-dead-long-live-relational-databases</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Playing with CouchDB</title>
		<link>http://zef.me/2008/03/07/playing-with-couchdb/</link>
		<pubDate>Fri, 07 Mar 2008 07:58:27 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2008/03/07/playing-with-couchdb/</guid>
		<description></description>
		<content:encoded><![CDATA[
<p>I spent some more time with <a href="http://www.couchdb.com" target="_blank">CouchDB</a> yesterday. Something useful to do while my work project is compiling ;) I’m considering building some simple applications with CouchDB to figure out what the applications of CouchDB are and its limitations. Maybe a blog application or something like that. For now I’m dabbling a bit, trying to create some reasonable databases together. I wrote a little Python script that imports an Outlook CSV file (coming from Gmail — don’t worry) into an address book database. Now I run simple queries on this data set, such as:<br><br>function(doc) {<br> if(doc.lastname == ‘Hemel’) {<br> map(doc.firstname, {‘name’: doc.firstname + ‘ ‘ + doc.lastname, ‘email’: doc.email});<br> }<br>}<br><br>Which gives me back the full names of all people in my family and their email addresses. Not particularly useful, but hey, it’s something. Currently I have a script running that pulls the last 20 messages from twitter every minute and dumps them in a database. This stuff is easy to do because CouchDB’s documents are free form, you can dump any simple hashtable into it, including the one that the Python Twitter API returns. Here’s my script:<br>import twitter, couchdb, time<br><br>s = couchdb.Server(‘http://localhost:5984')<br>db = s[‘twitter’] # use ‘twitter’ database<br>ta = twitter.Api()<br>while True:<br> for s in ta.GetPublicTimeline():<br> dict = s.AsDict()<br> try: # Hacky way to check if message is already in the database<br> dummy = db[str(dict[‘id’])]<br> except:<br> db[str(dict[‘id’])] = dict # If not, store it<br> print ‘Added new message: %d’ % dict[‘id’]<br> time.sleep(60)<br><br>Why am I doing this? Dunno, need some data to play with and have to see what interesting information I can extract from this. For instance, to figure out which twitterers are from the Netherlands, I have the following query:<br><br>function(doc) {<br> if(doc.user.location.toLowerCase().indexOf(‘netherlands’) != -1) {<br> map(doc.user.screen_name, doc);<br> }<br>}<br><br>One application of CouchDB I found already it simply a database to play with data without putting too much thought into. Dabbling.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>362</wp:post_id>
		<wp:post_date>2008-03-07 08:58:27</wp:post_date>
		<wp:post_date_gmt>2008-03-07 07:58:27</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>playing-with-couchdb</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Some more CouchDB Links</title>
		<link>http://zef.me/2008/03/09/some-more-couchdb-links/</link>
		<pubDate>Sun, 09 Mar 2008 08:31:39 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2008/03/09/some-more-couchdb-links/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>I intend to play with CouchDB a bit more later today, for now some links I collected over the past few days:</p>
<ul>
<li>
<a href="http://jan.prima.de/%7Ejan/plok/archives/108-Programming-CouchDB-with-Javascript.html" target="_blank">Programming CouchDB with Javascript</a>, a nice tutorial about how to build a simple todo list with only CouchDB and Javascript.</li>
<li>
<a href="http://damienkatz.net/files/What%20is%20CouchDB.pdf" target="_blank">Damien Katz’ CouchDB Project presentation</a>, especially slide 15 was helpful to me.</li>
<li><a href="http://www.windley.com/archives/2008/03/couchdb_from_10000_feet.shtml" target="_blank">CouchDB from 10,000 feet</a></li>
<li>
<a href="http://www.ajatus.info/" target="_blank">Ajatus</a>, a CRM based on CouchDB</li>
<li><a href="http://damienkatz.net/2007/12/couchdb_roundup.html" target="_blank">CouchDB Roundup</a></li>
</ul>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>371</wp:post_id>
		<wp:post_date>2008-03-09 09:31:39</wp:post_date>
		<wp:post_date_gmt>2008-03-09 08:31:39</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>some-more-couchdb-links</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Links for 2008–04–08</title>
		<link>http://zef.me/2008/04/09/links-for-2008-04-08/</link>
		<pubDate>Tue, 08 Apr 2008 23:00:10 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2008/04/09/links-for-2008-04-08/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Today’s interesting links:</p>
<ul>
<li>
<a href="http://www.scripting.com/stories/2008/04/08/earlyNotesOnGoogleapps.html" target="_blank">Early notes on GoogleApps</a> [<a href="http://www.scripting.com/" target="_blank">Scripting News</a>]</li>
<li>
<a href="http://photoshopdisasters.blogspot.com/2008/04/infdaily-photo-editors-pants-on-fire.html" target="_blank">INFDaily: Photo Editor’s Pants On Fire</a> [<a href="http://photoshopdisasters.blogspot.com/" target="_blank">PhotoshopDisasters</a>]</li>
</ul>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>440</wp:post_id>
		<wp:post_date>2008-04-09 01:00:10</wp:post_date>
		<wp:post_date_gmt>2008-04-08 23:00:10</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>links-for-2008-04-08</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Centralwings</title>
		<link>http://zef.me/2008/03/20/centralwings/</link>
		<pubDate>Thu, 20 Mar 2008 06:55:14 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2008/03/20/centralwings/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>In May, Justyna and I would fly out to Gdansk, Poland to visit her family. We would fly with <a href="http://www.centralwings.com" target="_blank">Centralwings</a>. Justyna flew with Centralwings before and her flight was canceled and flew a few days later. Now it turns out that centralwings has huge debts and is closing down lines left and right. In fact, currently it is not possible to book the flight from Amsterdam to any other destination in Poland other than Crackow. A friend from Poland, who was going to come here in April, called that her flight from Warsaw was cancelled. We are trying to figure out if ours in May is also cancelled, but it’s difficult because if you check on the website you always get a “database is too busy” page, if you call the international number it is never picked up and if you call the local numbers they either don’t answer or there huge queues.<br><br>Their slogan:</p>
<p>Anyway, my point is: only fly with <a href="http://www.centralwings.com" target="_blank">Centralwings</a> if you don’t really care whether you’re going or not.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>688</wp:post_id>
		<wp:post_date>2008-03-20 07:55:14</wp:post_date>
		<wp:post_date_gmt>2008-03-20 06:55:14</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>centralwings</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="cranky"><![CDATA[Cranky]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Links for 2008–03–09</title>
		<link>http://zef.me/2008/03/10/links-for-2008-03-09/</link>
		<pubDate>Sun, 09 Mar 2008 23:00:07 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2008/03/10/links-for-2008-03-09/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Today’s interesting links:</p>
<ul>
<li>
<a href="http://www.presentationzen.com/presentationzen/2008/03/guy-kawasaki-an.html" target="_blank">‘Odd Couple’ keynote engages audience at MIX08</a> [<a href="http://www.presentationzen.com/presentationzen/" target="_blank">Presentation Zen</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/readwriteweb/~3/248210146/sxsw_lessons_learned_at_37signals.php" target="_blank">SXSW: Lessons Learned at 37 Signals</a> [<a href="http://www.readwriteweb.com/" target="_blank">ReadWriteWeb</a>]</li>
</ul>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>710</wp:post_id>
		<wp:post_date>2008-03-10 00:00:07</wp:post_date>
		<wp:post_date_gmt>2008-03-09 23:00:07</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>links-for-2008-03-09</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Links for 2008–03–04</title>
		<link>http://zef.me/2008/03/05/links-for-2008-03-04/</link>
		<pubDate>Tue, 04 Mar 2008 23:00:07 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2008/03/05/links-for-2008-03-04/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Today’s interesting links:</p>
<ul>
<li>
<a href="http://feeds.feedburner.com/~r/readwriteweb/~3/245631683/office_live_workspace_vs_google_docs_feature_by_feature.php" target="_blank">Office Live Workspace vs Google Docs: Feature-by-Feature Comparison</a> [<a href="http://www.readwriteweb.com/" target="_blank">ReadWriteWeb</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/Techcrunch/~3/245631185/" target="_blank">Silverlight On Nokia Phones, Offline Announcement Perhaps Tomorrow</a> [<a href="http://www.techcrunch.com" target="_blank">TechCrunch</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/Techcrunch/~3/245315668/" target="_blank">Google Gears Goes Mobile</a> [<a href="http://www.techcrunch.com" target="_blank">TechCrunch</a>]</li>
<li>
<a href="http://daringfireball.net/2008/03/expandrive" target="_blank">★ ExpanDrive</a> [<a href="http://daringfireball.net/" target="_blank">Daring Fireball</a>]</li>
</ul>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>777</wp:post_id>
		<wp:post_date>2008-03-05 00:00:07</wp:post_date>
		<wp:post_date_gmt>2008-03-04 23:00:07</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>links-for-2008-03-04</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>For my Dutch readers: Zef.nu is back</title>
		<link>http://zef.me/2008/04/04/for-my-dutch-readers-zef-nu-is-back/</link>
		<pubDate>Fri, 04 Apr 2008 16:44:20 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2008/04/04/for-my-dutch-readers-zef-nu-is-back/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>If you are Dutch, Belgian or otherwise Dutch speaking. Check out the new <a href="http://zef.nu" target="_blank">Zef.nu</a>. Not only does this website have an incredibly cool URL, it’s also my Dutch website and contains none of the geeky stuff you find here. Before it got hacked it contained only personal stories, now it’s quite different.</p>
<p>Ik zie jullie daar! En als je geen Nederlands spreekt ben je een sul, hihihi ;)</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>823</wp:post_id>
		<wp:post_date>2008-04-04 18:44:20</wp:post_date>
		<wp:post_date_gmt>2008-04-04 16:44:20</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>for-my-dutch-readers-zef-nu-is-back</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Links for 2008–03–22</title>
		<link>http://zef.me/2008/03/23/links-for-2008-03-22/</link>
		<pubDate>Sat, 22 Mar 2008 23:00:08 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2008/03/23/links-for-2008-03-22/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Today’s interesting links:</p>
<ul>
<li>
<a href="http://googlesystem.blogspot.com/2008/03/google-launched-another-ajax-api-this.html" target="_blank">Google Translate API</a> [<a href="http://googlesystem.blogspot.com/" target="_blank">Google Operating System</a>]</li>
<li>
<a href="http://xkcd.com/399/" target="_blank">Travelling Salesman Problem</a> [<a href="http://xkcd.com/" target="_blank">xkcd.com</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/readwriteweb/~3/255000408/amazon_web_fulfillment_api.php" target="_blank">Amazon’s Newest Web Service: Shipping Center APIs</a> [<a href="http://www.readwriteweb.com/" target="_blank">ReadWriteWeb</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/Techcrunch/~3/254323245/" target="_blank">Would You Pay An Extra $100 For An All-You-Can-Listen-To iPod</a> [<a href="http://www.techcrunch.com" target="_blank">TechCrunch</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/OmMalik/~3/254830622/" target="_blank">Connecting Your Nokia Calendar to Google Calendar</a> [<a href="http://gigaom.com" target="_blank">GigaOM</a>]</li>
<li>
<a href="http://blog.eelcovisser.net/index.php?/archives/72-Code-Generation-by-Model-Transformation.html" target="_blank">Code Generation by Model Transformation</a> [<a href="http://blog.eelcovisser.net/" target="_blank">Transformations and Abstractions</a>]</li>
<li>
<a href="http://feeds.engadget.com/~r/weblogsinc/engadget/~3/254006575/" target="_blank">Apple evaluating “all you can eat” iTunes option?</a> [<a href="http://www.engadget.com" target="_blank">Engadget</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/readwriteweb/~3/253870370/google_maps_now_editable_by_an.php" target="_blank">Google Maps Now Editable by Anyone</a> [<a href="http://www.readwriteweb.com/" target="_blank">ReadWriteWeb</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/Techcrunch/~3/254189633/" target="_blank">More Bloggers Raising Money. Here Come The Politics. And Here Comes My Rant.</a> [<a href="http://www.techcrunch.com" target="_blank">TechCrunch</a>]</li>
<li>
<a href="http://photoshopdisasters.blogspot.com/2008/03/spiderman-2-mary-jane-is-mister.html" target="_blank">Spiderman 2: Mary Jane Is Mister Fantastic</a> [<a href="http://photoshopdisasters.blogspot.com/" target="_blank">PhotoshopDisasters</a>]</li>
<li>
<a href="http://feeds.arstechnica.com/~r/arstechnica/BAaf/~3/252788745/past-present-future-file-systems.ars" target="_blank">From BFS to ZFS: past, present, and future of file systems</a> [<a href="http://arstechnica.com/index.ars" target="_blank">Ars Technica</a>]</li>
</ul>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1181</wp:post_id>
		<wp:post_date>2008-03-23 00:00:08</wp:post_date>
		<wp:post_date_gmt>2008-03-22 23:00:08</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>links-for-2008-03-22</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Superlanguages</title>
		<link>http://zef.me/2008/03/19/superlanguages/</link>
		<pubDate>Wed, 19 Mar 2008 07:01:39 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2008/03/19/superlanguages/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Imagine a language that can be both generic and domain specific. A language that is extensible is every way imaginable. You can define your own syntax. You can extend the type system. It would be a kind of, a kind of… superlanguage!</p>
<p>In short this is what <a href="http://www.ceteva.com/xmf.html" target="_blank">XMF</a> is. And yes, as I typed that name I mistyped it as XML, but do not worry, it has nothing to do with XML, thank god. You can download a <a href="http://www.ceteva.com/book.html" target="_blank">free book on the XMF superlanguage</a>. I’m reading it now. It’s not just for fun for me, it’s work — it’s an alternative approach to building DSLs which needs to be investigated. That’s what we, scientists do.<br><br>That, and make the world a better place. With super languages for instance.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1221</wp:post_id>
		<wp:post_date>2008-03-19 08:01:39</wp:post_date>
		<wp:post_date_gmt>2008-03-19 07:01:39</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>superlanguages</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>First Paper Accepted</title>
		<link>http://zef.me/2008/03/19/first-paper-accepted/</link>
		<pubDate>Wed, 19 Mar 2008 09:01:39 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2008/03/19/first-paper-accepted/</guid>
		<description></description>
		<content:encoded><![CDATA[
<p>This morning we got an e-mail saying that our paper entitled “Code Generation by Model Transformation. A Case Study” has been accepted to the <a href="http://www.model-transformation.org/ICMT2008/" target="_blank">International Conference on Model Transformation </a>’08. Which means that the first paper I co-wrote will be published! The paper is about the implementation of <a href="http://www.webdsl.org" target="_blank">WebDSL</a> and the two dimensions of modularity that we applied to organize the WebDSL generator and make it extensible.<br><br>The paper will be presented in Zurich, Switzerland this July, I’m not sure who of the three of us will be there. We’ll see.<br><br><strong>Update:</strong> Abstract: The realization of model-driven software development requires effective techniques for implementing code generators. In this paper, we present a case study of code generation by model transformation with Stratego, a high-level transformation language based on the paradigm of rewrite rules with programmable strategies that integrates model-to-model, model-to-code, and code-to-code transformations. The use of concrete object syntax guarantees syntactic correctness of code patterns, and supports the subsequent transformation of generated code. The composability of strategies supports two dimensions of transformation modularity. Vertical modularity is achieved by designing a generator as a pipeline of model-to-model transformations that gradually transforms a high-level input model to an implementation. Horizontal modularity is achieved by supporting the definition of plugins which implement all aspects of a language feature. We discuss the application of these techniques in the implementation of WebDSL, a domain-specific language for dynamic web applications with a rich data model.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1229</wp:post_id>
		<wp:post_date>2008-03-19 10:01:39</wp:post_date>
		<wp:post_date_gmt>2008-03-19 09:01:39</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>first-paper-accepted</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Links for 2008–03–08</title>
		<link>http://zef.me/2008/03/09/links-for-2008-03-08/</link>
		<pubDate>Sat, 08 Mar 2008 23:00:06 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2008/03/09/links-for-2008-03-08/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Today’s interesting links:</p>
<ul>
<li>
<a href="http://www.phdcomics.com/comics.php?f=987" target="_blank">03/7/08 PHD comic: ‘Tales from the road — Wisconsin’</a> [<a href="http://www.phdcomics.com" target="_blank">PHD Comics</a>]</li>
<li>
<a href="http://lambda-the-ultimate.org/node/2711" target="_blank">Applied Metamodelling: A Foundation for Language Driven Development</a> [<a href="http://lambda-the-ultimate.org" target="_blank">Lambda the Ultimate — Programming Languages Weblog</a>]</li>
<li>
<a href="http://daringfireball.net/2008/03/iphone_sdk_impressions_and_questions" target="_blank">★ iPhone Enterprise and SDK: First Impressions and Questions</a> [<a href="http://daringfireball.net/" target="_blank">Daring Fireball</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/Techcrunch/~3/247021356/" target="_blank">iPhone 2.0: Enterprise Ready. Developer Ready.</a> [<a href="http://www.techcrunch.com" target="_blank">TechCrunch</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/readwriteweb/~3/247158328/the_iphone_gets_serious.php" target="_blank">The iPhone Gets Serious: A Summary of Today’s Announcements</a> [<a href="http://www.readwriteweb.com/" target="_blank">ReadWriteWeb</a>]</li>
</ul>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1316</wp:post_id>
		<wp:post_date>2008-03-09 00:00:06</wp:post_date>
		<wp:post_date_gmt>2008-03-08 23:00:06</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>links-for-2008-03-08</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>SlideRocket is awesome!</title>
		<link>http://zef.me/2008/03/28/sliderocket-is-awesome/</link>
		<pubDate>Fri, 28 Mar 2008 06:55:03 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2008/03/28/sliderocket-is-awesome/</guid>
		<description></description>
		<content:encoded><![CDATA[
<p>I had a little time to test out <a href="http://www.sliderocket.com" target="_blank">SlideRocket</a> yesterday, not having high expectations already having tried out other presentation web apps such as Google’s one. However Sliderocket is really cool. It’s implemented with Adobe’s Flex (which I think is flash on the client side and some server-side components). It eats up quite some CPU cycles, but it looks very nice. Very much like Apple’s Keynote, the presentations look stylish too. Here are two sample slides:<br><br><br><br>SlideRocket is still in private beta right now and very much under construction, but it looks extremely promising. Who would’ve thought that the way to make the most beautiful presentations under Linux would be a web app?</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1355</wp:post_id>
		<wp:post_date>2008-03-28 07:55:03</wp:post_date>
		<wp:post_date_gmt>2008-03-28 06:55:03</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>sliderocket-is-awesome</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Quote of the Day</title>
		<link>http://zef.me/2008/04/10/quote-of-the-day/</link>
		<pubDate>Thu, 10 Apr 2008 07:01:02 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2008/04/10/quote-of-the-day/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>From the <a href="http://groups.google.com/group/google-appengine/browse_thread/thread/caa713957b9d6058?hl=en" target="_blank">Google AppEngine mailing list</a>:</p>
<blockquote>A good way structure db’s for big table is to pick the ugliest solution and that’s the one that will work the best.</blockquote>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1472</wp:post_id>
		<wp:post_date>2008-04-10 09:01:02</wp:post_date>
		<wp:post_date_gmt>2008-04-10 07:01:02</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>quote-of-the-day</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="because-i-care"><![CDATA[Because I Care]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>The trouble with Steve Jobs</title>
		<link>http://zef.me/2008/03/05/the-trouble-with-steve-jobs/</link>
		<pubDate>Wed, 05 Mar 2008 11:09:22 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2008/03/05/the-trouble-with-steve-jobs/</guid>
		<description></description>
		<content:encoded><![CDATA[
<p>It’s always nice to <a href="http://money.cnn.com/2008/03/02/news/companies/elkind_jobs.fortune/index.htm" target="_blank">read about Steve Jobs</a>, although the last 2 pages on the share back-dating or whatever are kind of yawn.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1564</wp:post_id>
		<wp:post_date>2008-03-05 12:09:22</wp:post_date>
		<wp:post_date_gmt>2008-03-05 11:09:22</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-trouble-with-steve-jobs</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Links for 2008–03–06</title>
		<link>http://zef.me/2008/03/07/links-for-2008-03-06/</link>
		<pubDate>Thu, 06 Mar 2008 23:00:07 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2008/03/07/links-for-2008-03-06/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Today’s interesting links:</p>
<ul>
<li>
<a href="http://feeds.feedburner.com/~r/Techcrunch/~3/246864122/" target="_blank">Live Blogging (via iPhone) of Apple iPhone SDK Event</a> [<a href="http://www.techcrunch.com" target="_blank">TechCrunch</a>]</li>
<li>
<a href="http://blog.jungledisk.com/2008/03/06/microsoft-gets-serious-about-cloud-computing-and-competing-with-amazon/" target="_blank">Microsoft gets serious about cloud computing (and competing with Amazon)</a> [<a href="http://blog.jungledisk.com" target="_blank">Jungle Disk</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/readwriteweb/~3/246702567/google_releases_contacts_api.php" target="_blank">Google Releases Contacts API</a> [<a href="http://www.readwriteweb.com/" target="_blank">ReadWriteWeb</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/blogspot/MKuf/~3/246437495/google-calendar-sync.html" target="_blank">Google Calendar Sync</a> [<a href="http://googleblog.blogspot.com/" target="_blank">Official Google Blog</a>]</li>
<li>
<a href="http://googlesystem.blogspot.com/2008/03/google-releases-api-for-contacts.html" target="_blank">Google Releases an API for Contacts</a> [<a href="http://googlesystem.blogspot.com/" target="_blank">Google Operating System</a>]</li>
<li>
<a href="http://www.phdcomics.com/comics.php?f=986" target="_blank">03/5/08 PHD comic: ‘The grandeur of his vision’</a> [<a href="http://www.phdcomics.com" target="_blank">PHD Comics</a>]</li>
</ul>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1713</wp:post_id>
		<wp:post_date>2008-03-07 00:00:07</wp:post_date>
		<wp:post_date_gmt>2008-03-06 23:00:07</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>links-for-2008-03-06</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Google AppEngine launched</title>
		<link>http://zef.me/2008/04/08/google-appengine-launched/</link>
		<pubDate>Tue, 08 Apr 2008 06:57:04 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2008/04/08/google-appengine-launched/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Google is going to allow anyone to run applications in their infrastructure, meaning using their super scalable database system and other server infrastructure. I just signed up to try it out, but was too late (they allow in 10,000 people only, apparently that many signed up already). You can find <a href="http://appengine.google.com" target="_blank">more information here</a>. The cool thing is that the only way to build applications on it for now is by using Python, which will give Python a huge boost in popularity for web development I think.</p>
<p><strong>Update</strong>: Just got an email from Google saying my account was enabled, guess I wasn’t too late then :)</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1735</wp:post_id>
		<wp:post_date>2008-04-08 08:57:04</wp:post_date>
		<wp:post_date_gmt>2008-04-08 06:57:04</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>google-appengine-launched</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>More CouchDB Updates</title>
		<link>http://zef.me/2008/04/24/more-couchdb-updates/</link>
		<pubDate>Thu, 24 Apr 2008 06:59:03 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2008/04/24/more-couchdb-updates/</guid>
		<description></description>
		<content:encoded><![CDATA[
<p>Jan Lehnardt <a href="http://jan.prima.de/%7Ejan/plok/archives/129-Another-week-or-two-in-CouchDB.html" target="_blank">posted some more CouchDB updates</a>.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>380</wp:post_id>
		<wp:post_date>2008-04-24 08:59:03</wp:post_date>
		<wp:post_date_gmt>2008-04-24 06:59:03</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>more-couchdb-updates</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Links for 2008–06–15</title>
		<link>http://zef.me/2008/06/16/links-for-2008-06-15/</link>
		<pubDate>Sun, 15 Jun 2008 23:00:12 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2008/06/16/links-for-2008-06-15/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Today’s interesting links:</p>
<ul>
<li>
<a href="http://xkcd.com/436/" target="_blank">How it Happened</a> [<a href="http://xkcd.com/" target="_blank">xkcd.com</a>]</li>
<li>
<a href="http://xkcd.com/435/" target="_blank">Purity</a> [<a href="http://xkcd.com/" target="_blank">xkcd.com</a>]</li>
<li>
<a href="http://feeds.gawker.com/~r/valleywag/full/~3/309114531/iphone-3gs-true-cost-is-1237" target="_blank">iPhone 3G’s true cost is $1,237 [Apple]</a> [<a href="http://valleywag.com" target="_blank">Valleywag</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/boingboing/iBag/~3/309006740/geoducks-the-worlds.html" target="_blank">Geoducks: the world’s weirdest clams</a> [<a href="http://www.boingboing.net/" target="_blank">Boing Boing</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/ProgrammableWeb/~3/308581004/" target="_blank">The New York Times API: All the News That’s Fit to Mix</a> [<a href="http://blog.programmableweb.com" target="_blank">ProgrammableWeb</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/Techcrunch/~3/308577072/" target="_blank">Game Over. Hulu Wins. They Have The Daily Show. And Colbert.</a> [<a href="http://www.techcrunch.com" target="_blank">TechCrunch</a>]</li>
<li>
<a href="http://blog.twitter.com/2008/06/we-made-it.html" target="_blank">We Made It!</a> [<a href="http://blog.twitter.com/" target="_blank">Twitter Blog</a>]</li>
</ul>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>401</wp:post_id>
		<wp:post_date>2008-06-16 01:00:12</wp:post_date>
		<wp:post_date_gmt>2008-06-15 23:00:12</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>links-for-2008-06-15</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Links for 2008–04–22</title>
		<link>http://zef.me/2008/04/23/links-for-2008-04-22/</link>
		<pubDate>Tue, 22 Apr 2008 23:00:10 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2008/04/23/links-for-2008-04-22/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Today’s interesting links:</p>
<ul>
<li>
<a href="http://feeds.feedburner.com/~r/readwriteweb/~3/274943688/start_pages_the_next_social_networks.php" target="_blank">Start Pages: The Next Social Networks</a> [<a href="http://www.readwriteweb.com/" target="_blank">ReadWriteWeb</a>]</li>
<li>
<a href="http://osx.tribe.net/thread/ea74316d-e1f6-4de7-a518-0836864bc7fb" target="_blank">More on Localized Folder Names</a> [<a href="http://daringfireball.net/" target="_blank">Daring Fireball</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/blogspot/Dcni/~3/273104011/code-review-start-your-app-engine-and.html" target="_blank">Code Review: Start your App Engine and run the cloud offline with your docs</a> [<a href="http://google-code-updates.blogspot.com/" target="_blank">Google Code Blog</a>]</li>
<li>
<a href="http://xkcd.com/411/" target="_blank">Techno</a> [<a href="http://xkcd.com/" target="_blank">xkcd.com</a>]</li>
</ul>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>515</wp:post_id>
		<wp:post_date>2008-04-23 01:00:10</wp:post_date>
		<wp:post_date_gmt>2008-04-22 23:00:10</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>links-for-2008-04-22</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Links for 2008–06–22</title>
		<link>http://zef.me/2008/06/23/links-for-2008-06-22/</link>
		<pubDate>Sun, 22 Jun 2008 23:00:09 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2008/06/23/links-for-2008-06-22/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Today’s interesting links:</p>
<ul>
<li>
<a href="http://feeds.feedburner.com/~r/OfficialGmailBlog/~3/316518527/evolution-of-gmail-chat.html" target="_blank">Evolution of Gmail chat</a> [<a href="http://gmailblog.blogspot.com/" target="_blank">Official Gmail Blog</a>]</li>
<li>
<a href="http://feeds.gawker.com/~r/valleywag/full/~3/315721560/our-favorite-homeschooled-facebook-user" target="_blank">Our favorite homeschooled Facebook user [Clips]</a> [<a href="http://valleywag.com" target="_blank">Valleywag</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/Techcrunch/~3/315107130/" target="_blank">Introducing TechNews, Based On Reddit’s Open Source Project</a> [<a href="http://www.techcrunch.com" target="_blank">TechCrunch</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/readwriteweb/~3/314651888/reddit_open_source.php" target="_blank">Build Your Own Reddit With Reddit</a> [<a href="http://www.readwriteweb.com/" target="_blank">ReadWriteWeb</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/JeffreyGelens/~3/314641385/" target="_blank">Announcing MonitManager</a> [<a href="http://www.gelens.org/" target="_blank">Jeffrey Gelens’ blog feed</a>]</li>
<li>
<a href="http://feeds.arstechnica.com/~r/arstechnica/BAaf/~3/314608089/20080618-reddit-social-news-site-goes-transparent-open-source.html" target="_blank">Reddit social news site goes transparent, open source</a> [<a href="http://arstechnica.com/index.ars" target="_blank">Ars Technica</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/Techcrunch/~3/314058574/" target="_blank">Google App Engine Goes Down and Stays Down</a> [<a href="http://www.techcrunch.com" target="_blank">TechCrunch</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/GoogleAppEngineBlog/~3/312691578/google-io-session-videos-posted-with.html" target="_blank">Google I/O session videos posted with slides</a> [<a href="http://googleappengine.blogspot.com/" target="_blank">Google App Engine Blog</a>]</li>
</ul>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>553</wp:post_id>
		<wp:post_date>2008-06-23 01:00:09</wp:post_date>
		<wp:post_date_gmt>2008-06-22 23:00:09</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>links-for-2008-06-22</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Links for 2008–06–29</title>
		<link>http://zef.me/2008/06/30/links-for-2008-06-29/</link>
		<pubDate>Sun, 29 Jun 2008 23:00:15 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2008/06/30/links-for-2008-06-29/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Today’s interesting links:</p>
<ul>
<li>
<a href="http://feeds.feedburner.com/~r/Techcrunch/~3/322169743/" target="_blank">Sales Guy vs. Web Dude</a> [<a href="http://www.techcrunch.com" target="_blank">TechCrunch</a>]</li>
<li>
<a href="http://www.scripting.com/stories/2008/06/27/classicGeekVideo.html" target="_blank">Classic geek video</a> [<a href="http://www.scripting.com/" target="_blank">Scripting News</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/1938Media/~3/320470746/" target="_blank">Shel Israel Gets Schooled</a> [<a href="http://www.1938media.com" target="_blank">1938 Media</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/1938Media/~3/317248780/" target="_blank">What’s 6 Million Between Friends</a> [<a href="http://www.1938media.com" target="_blank">1938 Media</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/GoogleAppEngineBlog/~3/319983890/app-engine-community-update.html" target="_blank">App Engine Community Update</a> [<a href="http://googleappengine.blogspot.com/" target="_blank">Google App Engine Blog</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/boingboing/iBag/~3/318266952/simpsons-map-for-qua.html" target="_blank">Simpsons map for Quake III Arena</a> [<a href="http://www.boingboing.net/" target="_blank">Boing Boing</a>]</li>
</ul>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>639</wp:post_id>
		<wp:post_date>2008-06-30 01:00:15</wp:post_date>
		<wp:post_date_gmt>2008-06-29 23:00:15</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>links-for-2008-06-29</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Links for 2008–07–22</title>
		<link>http://zef.me/2008/07/23/links-for-2008-07-22/</link>
		<pubDate>Tue, 22 Jul 2008 23:00:14 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2008/07/23/links-for-2008-07-22/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Today’s interesting links:</p>
<ul>
<li>
<a href="http://diveintomark.org/archives/2008/07/12/protobuf" target="_blank">Protocol buffers: the early reviews are in</a> [<a href="http://diveintomark.org/" target="_blank">dive into mark</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/Techcrunch/~3/339194274/" target="_blank">Twitter Plays Nice: XMPP Firehose Data Feed To Gnip</a> [<a href="http://www.techcrunch.com" target="_blank">TechCrunch</a>]</li>
<li>
<a href="http://gigaom.com/2008/07/20/9-cloud-computingsectors-to-watch/" target="_blank">Inside the Cloud: 9 Sectors to Watch</a> [<a href="http://gigaom.com" target="_blank">GigaOM</a>]</li>
<li>
<a href="http://xkcd.com/451/" target="_blank">Impostor</a> [<a href="http://xkcd.com/" target="_blank">xkcd.com</a>]</li>
</ul>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>691</wp:post_id>
		<wp:post_date>2008-07-23 01:00:14</wp:post_date>
		<wp:post_date_gmt>2008-07-22 23:00:14</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>links-for-2008-07-22</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Harddrive crash</title>
		<link>http://zef.me/2008/05/22/harddrive-crash/</link>
		<pubDate>Thu, 22 May 2008 06:58:57 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2008/05/22/harddrive-crash/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>The past few weeks have been extremely busy at work. Deadlines. Deadlines. Deadlines. And this Friday there’s another one. Nice twist: my hard drive crashed yesterday morning, one day of work lost. Right now I’m using a temporary laptop (a Dell, very ugly looking with Ubuntu on it). These Apple guys are on to something with their Time Machine software. I backup about every week, most of my work is on either a git or subversion repository. That reduced the damages, but apparently you have to end every day with backing everything up.</p>
<p>Sigh.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>770</wp:post_id>
		<wp:post_date>2008-05-22 08:58:57</wp:post_date>
		<wp:post_date_gmt>2008-05-22 06:58:57</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>harddrive-crash</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Links for 2008–07–15</title>
		<link>http://zef.me/2008/07/16/links-for-2008-07-15/</link>
		<pubDate>Tue, 15 Jul 2008 23:00:13 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2008/07/16/links-for-2008-07-15/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Today’s interesting links:</p>
<ul>
<li>
<a href="http://feeds.feedburner.com/~r/readwriteweb/~3/329284245/summize_likely_acquired_by_twi.php" target="_blank">Summize Likely Acquired by Twitter</a> [<a href="http://www.readwriteweb.com/" target="_blank">ReadWriteWeb</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/readwriteweb/~3/330067861/bitly_alternative_to_tinyurl.php" target="_blank">Bit.ly: Please Use This TinyURL of the Future</a> [<a href="http://www.readwriteweb.com/" target="_blank">ReadWriteWeb</a>]</li>
<li>
<a href="http://www.scripting.com/stories/2008/07/08/bitlyLaunchesToday.html" target="_blank">Bit.ly launches today</a> [<a href="http://www.scripting.com/" target="_blank">Scripting News</a>]</li>
</ul>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>849</wp:post_id>
		<wp:post_date>2008-07-16 01:00:13</wp:post_date>
		<wp:post_date_gmt>2008-07-15 23:00:13</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>links-for-2008-07-15</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Links for 2008–07–01</title>
		<link>http://zef.me/2008/07/02/links-for-2008-07-01/</link>
		<pubDate>Tue, 01 Jul 2008 23:00:15 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2008/07/02/links-for-2008-07-01/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Today’s interesting links:</p>
<ul>
<li>
<a href="http://feeds.feedburner.com/~r/OmMalik/~3/323469214/" target="_blank">10 of the Biggest Platform Development Mistakes</a> [<a href="http://gigaom.com" target="_blank">GigaOM</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/Techcrunch/~3/324149901/" target="_blank">Gnip Launches To Ease The Strain On Web Services</a> [<a href="http://www.techcrunch.com" target="_blank">TechCrunch</a>]</li>
<li>
<a href="http://jan.prima.de/~jan/plok/archives/142-CouchDBX-Revival.html" target="_blank">CouchDBX Revival</a> [<a href="http://jan.prima.de/~jan/plok/" target="_blank">plok</a>]</li>
<li>
<a href="http://blogs.msdn.com/livesearch/archive/2008/07/01/powerset-joins-live-search.aspx" target="_blank">Powerset joins Live Search</a> [<a href="http://blogs.msdn.com/livesearch/default.aspx" target="_blank">Live Search</a>]</li>
</ul>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>858</wp:post_id>
		<wp:post_date>2008-07-02 01:00:15</wp:post_date>
		<wp:post_date_gmt>2008-07-01 23:00:15</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>links-for-2008-07-01</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Links for 2008–04–29</title>
		<link>http://zef.me/2008/04/30/links-for-2008-04-29/</link>
		<pubDate>Tue, 29 Apr 2008 23:00:10 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2008/04/30/links-for-2008-04-29/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Today’s interesting links:</p>
<ul>
<li>
<a href="http://feeds.feedburner.com/~r/GoogleAppEngineBlog/~3/279871946/posted-by-ken-ashcraft-software.html" target="_blank">Tips on Writing Scalable Apps</a> [<a href="http://googleappengine.blogspot.com/" target="_blank">Google App Engine Blog</a>]</li>
<li>
<a href="http://steve-yegge.blogspot.com/2008/04/xemacs-is-dead-long-live-xemacs.html" target="_blank">XEmacs is Dead. Long Live XEmacs!</a> [<a href="http://steve-yegge.blogspot.com/" target="_blank">Stevey’s Blog Rants</a>]</li>
<li>
<a href="http://xkcd.com/416/" target="_blank">Zealous Autoconfig</a> [<a href="http://xkcd.com/" target="_blank">xkcd.com</a>]</li>
<li>
<a href="http://jan.prima.de/~jan/plok/archives/129-Another-week-or-two-in-CouchDB.html" target="_blank">Another week (or two) in CouchDB</a> [<a href="http://jan.prima.de/~jan/plok/" target="_blank">plok</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/GoogleAppEngineBlog/~3/276512697/google-app-engine-google-data-apis.html" target="_blank">Google App Engine + Google Data APIs: A Match Made on the Web</a> [<a href="http://googleappengine.blogspot.com/" target="_blank">Google App Engine Blog</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/Techcrunch/~3/275385524/" target="_blank">Oosah: A Hub for Your Personal Online Media</a> [<a href="http://www.techcrunch.com" target="_blank">TechCrunch</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/boingboing/iBag/~3/275790893/funy-backwards-bus-a.html" target="_blank">Funny backwards bus ad</a> [<a href="http://www.boingboing.net/" target="_blank">Boing Boing</a>]</li>
<li>
<a href="http://googlesystem.blogspot.com/2008/04/google-search-rest-api.html" target="_blank">Google Search REST API</a> [<a href="http://googlesystem.blogspot.com/" target="_blank">Google Operating System</a>]</li>
</ul>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>922</wp:post_id>
		<wp:post_date>2008-04-30 01:00:10</wp:post_date>
		<wp:post_date_gmt>2008-04-29 23:00:10</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>links-for-2008-04-29</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Links for 2008–05–08</title>
		<link>http://zef.me/2008/05/09/links-for-2008-05-08/</link>
		<pubDate>Thu, 08 May 2008 23:00:11 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2008/05/09/links-for-2008-05-08/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Today’s interesting links:</p>
<ul>
<li>
<a href="http://feeds.feedburner.com/~r/ProgrammableWeb/~3/279163953/" target="_blank">OAuth Coming to All Google Data APIs</a> [<a href="http://blog.programmableweb.com" target="_blank">ProgrammableWeb</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/readwriteweb/~3/280956129/mixx_launches_innovative_api_c.php" target="_blank">Mixx Launches Innovative API — Continues to Challenge the Digg Experience</a> [<a href="http://www.readwriteweb.com/" target="_blank">ReadWriteWeb</a>]</li>
<li>
<a href="http://www.apple.com/support/downloads/javaformacosx105update1.html" target="_blank">Java 6 for Mac OS X 10.5 Update 1</a> [<a href="http://www.apple.com/" target="_blank">www.apple.com</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/OmMalik/~3/284725728/" target="_blank">New App Fixes Nokia Select A Network Nag</a> [<a href="http://gigaom.com" target="_blank">GigaOM</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/boingboing/iBag/~3/284793837/passenger-moons-spee.html" target="_blank">Passenger moons speed camera</a> [<a href="http://www.boingboing.net/" target="_blank">Boing Boing</a>]</li>
<li>
<a href="http://blog.jungledisk.com/2008/05/06/another-cloud-storage-provider-enters-the-fray/" target="_blank">Another cloud storage provider enters the fray</a> [<a href="http://blog.jungledisk.com" target="_blank">Jungle Disk</a>]</li>
<li>
<a href="http://gpl.internetconnection.net/vi/" target="_blank">null</a> [<a href="http://gpl.internetconnection.net/" target="_blank">gpl.internetconnection.net</a>]</li>
<li>
<a href="http://www.charlierose.com/guests/michael-arrington" target="_blank">Michael Arrington — Charlie Rose</a> [<a href="http://www.charlierose.com/" target="_blank">www.charlierose.com</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/Techcrunch/~3/284543127/" target="_blank">Scoble Sellout Part Three? — Twitter Adverts</a> [<a href="http://www.techcrunch.com" target="_blank">TechCrunch</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/Techcrunch/~3/284500456/" target="_blank">Here’s A Hosting Provider You’ll Probably Want To Avoid</a> [<a href="http://www.techcrunch.com" target="_blank">TechCrunch</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/readwriteweb/~3/283843142/omnidrive_ceo_nik_cubrilovic_responds.php" target="_blank">Omnidrive CEO Nik Cubrilovic: We’re Not Dead. Again.</a> [<a href="http://www.readwriteweb.com/" target="_blank">ReadWriteWeb</a>]</li>
<li>
<a href="http://wateree.net/syncman/" target="_blank">Syncman</a> [<a href="http://daringfireball.net/" target="_blank">Daring Fireball</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/OmMalik/~3/282640393/" target="_blank">The F|R Interview: Y Combinator’s Paul Graham</a> [<a href="http://gigaom.com" target="_blank">GigaOM</a>]</li>
<li>
<a href="http://blog.jungledisk.com/2008/05/02/jungle-disk-20-beta-released/" target="_blank">Jungle Disk 2.0 Beta Released!</a> [<a href="http://blog.jungledisk.com" target="_blank">Jungle Disk</a>]</li>
</ul>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>986</wp:post_id>
		<wp:post_date>2008-05-09 01:00:11</wp:post_date>
		<wp:post_date_gmt>2008-05-08 23:00:11</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>links-for-2008-05-08</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Links for 2008–05–29</title>
		<link>http://zef.me/2008/05/30/links-for-2008-05-29/</link>
		<pubDate>Thu, 29 May 2008 23:00:14 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2008/05/30/links-for-2008-05-29/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Today’s interesting links:</p>
<ul>
<li>
<a href="http://feeds.feedburner.com/~r/GoogleAppEngineBlog/~3/300096874/announcing-open-signups-expected.html" target="_blank">Announcing Open Signups, Expected Pricing, and two new APIs</a> [<a href="http://googleappengine.blogspot.com/" target="_blank">Google App Engine Blog</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/Techcrunch/~3/299399342/" target="_blank">3,000 Developers To Converge On Google I/O Tomorrow. Here’s What To Expect.</a> [<a href="http://www.techcrunch.com" target="_blank">TechCrunch</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/readwriteweb/~3/299399362/google_app_engine_announcements.php" target="_blank">Google App Engine Announces Pricing Plan, APIs, Open Access</a> [<a href="http://www.readwriteweb.com/" target="_blank">ReadWriteWeb</a>]</li>
<li>
<a href="http://feeds.gawker.com/~r/valleywag/full/~3/296174759/nik-cubrilovic-resurfaces-at-techcrunch" target="_blank">Nik Cubrilovic resurfaces at TechCrunch [Nik Cubrilovic]</a> [<a href="http://valleywag.com" target="_blank">Valleywag</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/Techcrunch/~3/295262467/" target="_blank">SmallWorlds Brings a Third Dimension to Web 2.0</a> [<a href="http://www.techcrunch.com" target="_blank">TechCrunch</a>]</li>
<li>
<a href="http://blog.w-nz.com/archives/2008/05/26/cyv-syncing-git-and-svn/" target="_blank">cyv: syncing git and svn</a> [<a href="http://blog.w-nz.com" target="_blank">Intrepid Blog</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/ajaxian/~3/296513285/javascript-super-mario-kart" target="_blank">JavaScript Super Mario Kart</a> [<a href="http://ajaxian.com" target="_blank">Ajaxian</a>]</li>
</ul>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>987</wp:post_id>
		<wp:post_date>2008-05-30 01:00:14</wp:post_date>
		<wp:post_date_gmt>2008-05-29 23:00:14</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>links-for-2008-05-29</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Links for 2008–07–08</title>
		<link>http://zef.me/2008/07/09/links-for-2008-07-08/</link>
		<pubDate>Tue, 08 Jul 2008 23:00:10 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2008/07/09/links-for-2008-07-08/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Today’s interesting links:</p>
<ul>
<li>
<a href="http://feeds.feedburner.com/~r/Techcrunch/~3/329305297/" target="_blank">Google Lets You Monitor Access To Your Gmail Account</a> [<a href="http://www.techcrunch.com" target="_blank">TechCrunch</a>]</li>
<li>
<a href="http://blog.paulbonser.com/2008/07/04/storing-hierarchical-data-in-couchdb/" target="_blank">PIBlog » Blog Archive » Storing Hierarchical Data in CouchDB</a> [<a href="http://blog.paulbonser.com/" target="_blank">blog.paulbonser.com</a>]</li>
<li>
<a href="http://jan.prima.de/~jan/plok/archives/141-News-at-Couch.html" target="_blank">News at Couch</a> [<a href="http://jan.prima.de/~jan/plok/" target="_blank">plok</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/blogspot/oyNL/~3/325309402/chat-on-your-iphone.html" target="_blank">Chat on your iPhone</a> [<a href="http://googletalk.blogspot.com/" target="_blank">Google Talkabout</a>]</li>
</ul>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1392</wp:post_id>
		<wp:post_date>2008-07-09 01:00:10</wp:post_date>
		<wp:post_date_gmt>2008-07-08 23:00:10</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>links-for-2008-07-08</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Links for 2008–05–22</title>
		<link>http://zef.me/2008/05/23/links-for-2008-05-22/</link>
		<pubDate>Thu, 22 May 2008 23:00:10 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2008/05/23/links-for-2008-05-22/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Today’s interesting links:</p>
<ul>
<li>
<a href="http://feeds.feedburner.com/~r/1938Media/~3/295623648/" target="_blank">Shel Israel Interviews Kevin Rose</a> [<a href="http://www.1938media.com" target="_blank">1938 Media</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/GoogleOpenSourceBlog/~3/294361898/develop-with-git-on-google-code-project.html" target="_blank">Develop with Git on a Google Code Project</a> [<a href="http://google-opensource.blogspot.com/" target="_blank">Google Open Source Blog</a>]</li>
<li>
<a href="http://www.phdcomics.com/comics.php?f=1017" target="_blank">05/16/08 PHD comic: ‘Where do you sit?’</a> [<a href="http://www.phdcomics.com" target="_blank">PHD Comics</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/ajaxian/~3/286190830/growls-for-windows-and-a-web-notification-api" target="_blank">Growl for Windows and a Web Notification API</a> [<a href="http://ajaxian.com" target="_blank">Ajaxian</a>]</li>
<li>
<a href="http://rashkovskii.com/articles/2008/4/26/top-10-reasons-to-avoid-document-databases-fud" target="_blank">Yurii Rashkovskii’s Blog: Top 10 Reasons to Avoid Document Databases FUD</a> [<a href="http://rashkovskii.com/" target="_blank">rashkovskii.com</a>]</li>
<li>
<a href="http://www.ryanpark.org/2008/04/top-10-avoid-the-simpledb-hype.html" target="_blank">Top 10 Reasons to Avoid the SimpleDB Hype — ryanpark.org</a> [<a href="http://www.ryanpark.org/" target="_blank">www.ryanpark.org</a>]</li>
<li>
<a href="http://www.tbray.org/ongoing/When/200x/2008/04/24/Inflection" target="_blank">ongoing · Multi-Inflection-Point Alert</a> [<a href="http://www.tbray.org/" target="_blank">www.tbray.org</a>]</li>
<li>
<a href="http://lateralprogramming.wordpress.com/2008/04/27/designing-databases-for-flexibility/" target="_blank">Designing databases for flexibility « Lateral Programming</a> [<a href="http://lateralprogramming.wordpress.com/" target="_blank">lateralprogramming.wordpress.com</a>]</li>
<li>
<a href="http://jan.prima.de/~jan/plok/archives/140-More-Tales-From-the-Strange-World-of-Non-Relational-Data-Storage.html" target="_blank">More Tales From the Strange World of Non-Relational Data Storage</a> [<a href="http://jan.prima.de/~jan/plok/" target="_blank">plok</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/blogspot/MKuf/~3/291201409/google-translate-adds-10-new-languages.html" target="_blank">Google Translate adds 10 new languages…</a> [<a href="http://googleblog.blogspot.com/" target="_blank">Official Google Blog</a>]</li>
<li>
<a href="http://git.or.cz/gitwiki/EclipsePlugin" target="_blank">EclipsePlugin — GitWiki</a> [<a href="http://git.or.cz/" target="_blank">git.or.cz</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/1938Media/~3/291244326/" target="_blank">The Mike Arrington Show</a> [<a href="http://www.1938media.com" target="_blank">1938 Media</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/OfficialGoogleMacBlog/~3/291275454/app-engine-launcher-for-mac-os-x.html" target="_blank">App Engine Launcher for Mac OS X</a> [<a href="http://googlemac.blogspot.com/" target="_blank">Official Google Mac Blog</a>]</li>
</ul>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1421</wp:post_id>
		<wp:post_date>2008-05-23 01:00:10</wp:post_date>
		<wp:post_date_gmt>2008-05-22 23:00:10</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>links-for-2008-05-22</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Links for 2008–04–15</title>
		<link>http://zef.me/2008/04/16/links-for-2008-04-15/</link>
		<pubDate>Tue, 15 Apr 2008 23:00:09 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2008/04/16/links-for-2008-04-15/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Today’s interesting links:</p>
<ul>
<li>
<a href="http://blog.w-nz.com/archives/2008/04/15/on-the-app-engine-lock-in/" target="_blank">On the App Engine lock-in</a> [<a href="http://blog.w-nz.com" target="_blank">Intrepid Blog</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/PaulGrahamUnofficialRssFeed/~3/270707125/googles.html" target="_blank">Why There Aren’t More Googles</a> [<a href="http://www.paulgraham.com" target="_blank">Paul Graham: Unofficial RSS Feed</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/readwriteweb/~3/270349877/is_the_mobile_web_dead.php" target="_blank">Is the Mobile Web Dead? Some Mobile Entrepreneurs Say Yes</a> [<a href="http://www.readwriteweb.com/" target="_blank">ReadWriteWeb</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/oreilly/radar/atom/~3/270113453/is-google-app-engine-a-lockin.html" target="_blank">Is Google App Engine a Lock-in Play?</a> [<a href="http://radar.oreilly.com/" target="_blank">O’Reilly Radar — Insight, analysis, and research about emerging technologies</a>]</li>
<li>
<a href="http://xkcd.com/410/" target="_blank">Math Paper</a> [<a href="http://xkcd.com/" target="_blank">xkcd.com</a>]</li>
<li>
<a href="http://www.allthingsdistributed.com/2008/04/persistent_storage_for_amazon.html" target="_blank">Persistent Storage for Amazon EC2</a> [<a href="http://www.allthingsdistributed.com/" target="_blank">All Things Distributed</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/GoogleAppEngineBlog/~3/268521279/were-up-and-running.html" target="_blank">We’re up and running!</a> [<a href="http://googleappengine.blogspot.com/" target="_blank">Google App Engine Blog</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/readwriteweb/~3/266629044/why_we_need_web_apps_on_the_desktop.php" target="_blank">Why We Need Web Apps on the Desktop</a> [<a href="http://www.readwriteweb.com/" target="_blank">ReadWriteWeb</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/oreilly/radar/atom/~3/266756414/app-engine-facebook-platform-o.html" target="_blank">App Engine, Facebook Platform, OpenSocial, and the Future of the Web</a> [<a href="http://radar.oreilly.com/" target="_blank">O’Reilly Radar — Insight, analysis, and research about emerging technologies</a>]</li>
</ul>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1503</wp:post_id>
		<wp:post_date>2008-04-16 01:00:09</wp:post_date>
		<wp:post_date_gmt>2008-04-15 23:00:09</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>links-for-2008-04-15</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Links for 2008–06–08</title>
		<link>http://zef.me/2008/06/09/links-for-2008-06-08/</link>
		<pubDate>Sun, 08 Jun 2008 23:00:11 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2008/06/09/links-for-2008-06-08/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Today’s interesting links:</p>
<ul>
<li>
<a href="http://feeds.feedburner.com/~r/ajaxian/~3/306350463/an-interview-with-280-north-on-objective-j-and-cappuccino" target="_blank">An interview with 280 North on Objective-J and Cappuccino</a> [<a href="http://ajaxian.com" target="_blank">Ajaxian</a>]</li>
<li>
<a href="http://stage.vambenepe.com/archives/209" target="_blank">William Vambenepe’s blog » Blog Archive » Emulating a long-running process (and a scheduler) in Google App Engine</a> [<a href="http://stage.vambenepe.com/" target="_blank">stage.vambenepe.com</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/Techcrunch/~3/306291571/" target="_blank">The Evolution of Pre-Launch Gmail In Screenshots</a> [<a href="http://www.techcrunch.com" target="_blank">TechCrunch</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/OfficialGmailBlog/~3/305856080/introducing-gmail-labs.html" target="_blank">Introducing Gmail Labs</a> [<a href="http://gmailblog.blogspot.com/" target="_blank">Official Gmail Blog</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/Techcrunch/~3/305612814/" target="_blank">Gmail Labs: A Public Stage for Googlers’ 20% Time</a> [<a href="http://www.techcrunch.com" target="_blank">TechCrunch</a>]</li>
<li>
<a href="http://cookiesareforclosers.com/blog/2008/06/linkedin-architecture" target="_blank">Cookies are for Closers » LinkedIn Architecture</a> [<a href="http://cookiesareforclosers.com/" target="_blank">cookiesareforclosers.com</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/Techcrunch/~3/305417365/" target="_blank">280 Slides: Like Apple Keynote, But Online</a> [<a href="http://www.techcrunch.com" target="_blank">TechCrunch</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/blogspot/oyNL/~3/304747924/more-translation-bots.html" target="_blank">More Translation Bots!</a> [<a href="http://googletalk.blogspot.com/" target="_blank">Google Talkabout</a>]</li>
<li>
<a href="http://googlesystem.blogspot.com/2008/06/youtube-annotations.html" target="_blank">YouTube Annotations</a> [<a href="http://googlesystem.blogspot.com/" target="_blank">Google Operating System</a>]</li>
<li>
<a href="http://wiki.reia-lang.org/wiki/Main_Page" target="_blank">Reia Programming Language</a> [<a href="http://wiki.reia-lang.org/" target="_blank">wiki.reia-lang.org</a>]</li>
<li>
<a href="http://www.webware.com/8301-1_109-9958036-2.html" target="_blank">Wikia Search launches the hackable search engine | Webware : Cool Web apps for everyone</a> [<a href="http://www.webware.com/" target="_blank">www.webware.com</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/Techcrunch/~3/303701046/" target="_blank">Jimmy Wales: Wikia Search Finally Doesn’t Suck</a> [<a href="http://www.techcrunch.com" target="_blank">TechCrunch</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/Techcrunch/~3/303701046/" target="_blank">Jimmy Wales: Wikia Search Finally Doesn’t Suck</a> [<a href="http://www.techcrunch.com" target="_blank">TechCrunch</a>]</li>
<li>
<a href="http://webkit.org/blog/189/announcing-squirrelfish/" target="_blank">Announcing SquirrelFish</a> [<a href="http://webkit.org/blog" target="_blank">Surfin’ Safari</a>]</li>
<li>
<a href="http://mbravenboer.blogspot.com/2008/06/dubious-conferences-how-do-they-threat.html" target="_blank">Dubious Conferences: How do they threat people?</a> [<a href="http://mbravenboer.blogspot.com/" target="_blank">Subject to Meta Programming</a>]</li>
<li>
<a href="http://kupuguy.blogspot.com/2008/05/migrating-models.html" target="_blank">Duncan’s Thoughts: Migrating models</a> [<a href="http://kupuguy.blogspot.com/" target="_blank">kupuguy.blogspot.com</a>]</li>
</ul>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1569</wp:post_id>
		<wp:post_date>2008-06-09 01:00:11</wp:post_date>
		<wp:post_date_gmt>2008-06-08 23:00:11</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>links-for-2008-06-08</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Links for 2008–06–01</title>
		<link>http://zef.me/2008/06/02/links-for-2008-06-01/</link>
		<pubDate>Sun, 01 Jun 2008 23:00:11 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2008/06/02/links-for-2008-06-01/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Today’s interesting links:</p>
<ul>
<li>
<a href="http://feeds.feedburner.com/~r/Techcrunch/~3/302080252/" target="_blank">Hey Twitter I Have A Few Questions Too</a> [<a href="http://www.techcrunch.com" target="_blank">TechCrunch</a>]</li>
<li>
<a href="http://www.calacanis.com/2008/05/31/wikipedia-3-0-you-can-now-edit-any-page-on-mahalo/" target="_blank">Wikipedia 3.0: You can now edit any page on Mahalo</a> [<a href="http://www.calacanis.com" target="_blank">The Jason Calacanis Weblog</a>]</li>
<li>
<a href="http://stuffwhitepeoplelike.com/2008/05/06/98-the-ivy-league/" target="_blank">#98 The Ivy League</a> [<a href="http://stuffwhitepeoplelike.com" target="_blank">Stuff White People Like</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/Techcrunch/~3/301485750/" target="_blank">FeedBurner Finally Rolls Out AdSense</a> [<a href="http://www.techcrunch.com" target="_blank">TechCrunch</a>]</li>
<li>
<a href="http://daringfireball.net/2008/05/spaces" target="_blank">★ Spaces in 10.5.3</a> [<a href="http://daringfireball.net/" target="_blank">Daring Fireball</a>]</li>
</ul>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1723</wp:post_id>
		<wp:post_date>2008-06-02 01:00:11</wp:post_date>
		<wp:post_date_gmt>2008-06-01 23:00:11</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>links-for-2008-06-01</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Playing with Gmail Labs</title>
		<link>http://zef.me/2008/06/06/playing-with-gmail-labs/</link>
		<pubDate>Fri, 06 Jun 2008 07:00:31 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2008/06/06/playing-with-gmail-labs/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>I’m playing with <a href="http://www.techcrunch.com/2008/06/05/gmail-labs-a-public-stage-for-googlers-20-time/" target="_blank">Gmail Labs</a>, a new playground for Google employees to build and test new Gmail features. It’s being rolled out to all users who either use the US or UK english version of Gmail (contrary to what TechCrunch reports, that means also Dutch, German, Polish and Ukranians can get this feature).</p>
<p>Right now I have only one new feature enabled: superstars</p>
<p>I find it very useful, because it makes it a lot easier to instantly see not only that an email discussion needs attention, but also the kind of attention that it needs. To enable it, make sure your language is set to US or UK english, log out, log back in to Gmail and go check the Settings, there should be a “Labs” tab there now.</p>
<p><strong>Update:</strong> OMG, I just discovered the snake game, awesome!</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1732</wp:post_id>
		<wp:post_date>2008-06-06 09:00:31</wp:post_date>
		<wp:post_date_gmt>2008-06-06 07:00:31</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>playing-with-gmail-labs</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Driving Drunk</title>
		<link>http://zef.me/2008/06/11/driving-drunk/</link>
		<pubDate>Wed, 11 Jun 2008 05:27:08 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2008/06/11/driving-drunk/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p><a href="http://damienkatz.net/2008/06/epiphany.html" target="_blank">Damien Katz</a> (of CouchDB fame):</p>
<blockquote>Static typing is like giving a drunk a bunch of breath mints and saying “Don’t drive drunk. But if you must, use these breath mints in case you get pulled over.”</blockquote>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1751</wp:post_id>
		<wp:post_date>2008-06-11 07:27:08</wp:post_date>
		<wp:post_date_gmt>2008-06-11 05:27:08</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>driving-drunk</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Links for 2008–05–15</title>
		<link>http://zef.me/2008/05/16/links-for-2008-05-15/</link>
		<pubDate>Thu, 15 May 2008 23:00:12 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2008/05/16/links-for-2008-05-15/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Today’s interesting links:</p>
<ul>
<li>
<a href="http://code.google.com/doctype/" target="_blank">Google Doctype</a> [<a href="http://daringfireball.net/" target="_blank">Daring Fireball</a>]</li>
<li>
<a href="http://feeds.engadget.com/~r/weblogsinc/engadget/~3/287608261/" target="_blank">Moshi’s Zefyr MacBook cooler is way hot</a> [<a href="http://www.engadget.com" target="_blank">Engadget</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/readwriteweb/~3/287694927/why_filtering_is_the_next_step.php" target="_blank">Why Filtering is the Next Step for Social Media</a> [<a href="http://www.readwriteweb.com/" target="_blank">ReadWriteWeb</a>]</li>
<li>
<a href="http://tinydb.org/" target="_blank">tinydb.org</a> [<a href="http://tinydb.org/" target="_blank">tinydb.org</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/Techcrunch/~3/288692604/" target="_blank">Google Confirms Friend Connect</a> [<a href="http://www.techcrunch.com" target="_blank">TechCrunch</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/ProgrammableWeb/~3/289935083/" target="_blank">Yahoo Releases Internet Location Platform</a> [<a href="http://blog.programmableweb.com" target="_blank">ProgrammableWeb</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/TheSecretDiaryOfSteveJobs/~3/289649182/bill-oreilly-needs-mac.html" target="_blank">Bill O’Reilly needs a Mac</a> [<a href="http://fakesteve.blogspot.com/" target="_blank">The Secret Diary of Steve Jobs</a>]</li>
<li>
<a href="http://tirania.org/blog/archive/2008/May-13.html" target="_blank">Mono’s Winforms 2.0 is now API Complete</a> [<a href="http://tirania.org/blog/index.html" target="_blank">Miguel de Icaza</a>]</li>
<li>
<a href="http://damienkatz.net/2008/03/couchdb-progres.html" target="_blank">CouchDB Progress</a> [<a href="http://damienkatz.net/" target="_blank">Damien Katz</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/OfficialGoogleMacBlog/~3/287194295/vidnik.html" target="_blank">Vidnik</a> [<a href="http://googlemac.blogspot.com/" target="_blank">Official Google Mac Blog</a>]</li>
<li>
<a href="http://feeds.feedburner.com/~r/blogspot/MKuf/~3/289221578/friend-connected-web.html" target="_blank">A friend connected web</a> [<a href="http://googleblog.blogspot.com/" target="_blank">Official Google Blog</a>]</li>
<li>
<a href="http://steve-yegge.blogspot.com/2008/05/dynamic-languages-strike-back.html" target="_blank">Dynamic Languages Strike Back</a> [<a href="http://steve-yegge.blogspot.com/" target="_blank">Stevey’s Blog Rants</a>]</li>
</ul>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1764</wp:post_id>
		<wp:post_date>2008-05-16 01:00:12</wp:post_date>
		<wp:post_date_gmt>2008-05-15 23:00:12</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>links-for-2008-05-15</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Seinfeld &#038; Bill Gates Commercial</title>
		<link>http://zef.me/2008/09/05/seinfeld-bill-gates-commercial/</link>
		<pubDate>Fri, 05 Sep 2008 08:28:52 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2008/09/05/seinfeld-bill-gates-commercial/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>The first of awaited series of Microsoft commercials featuring Bill Gates and Jerry Seinfeld is out.</p>
<p>Enjoy.</p>
<a href="https://www.youtube.com/v/afR5J7eskno&amp;hl=en&amp;fs=1"></a><p>To be honest it’s not as horrible as I imagined it to be.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>289</wp:post_id>
		<wp:post_date>2008-09-05 10:28:52</wp:post_date>
		<wp:post_date_gmt>2008-09-05 08:28:52</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>seinfeld-bill-gates-commercial</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Google Chrome on Mac/Linux</title>
		<link>http://zef.me/2008/09/16/google-chrome-on-mac-linux/</link>
		<pubDate>Tue, 16 Sep 2008 19:17:46 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2008/09/16/google-chrome-on-mac-linux/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Can’t wait until a Mac version of Google’s Chrome is out? There is now an alternative to running it inside a virtual machine: <a href="http://www.codeweavers.com/services/ports/chromium" target="_blank">CrossOver Chromium</a>. It runs on Mac and Linux, and is essentially the open source version of Chrome (chromium) wrapped in Wine (Wine is No Emulator) that mimics Windows as much as possible.</p>
<p><a href="http://www.codeweavers.com/services/ports/chromium" target="_blank">CrossOver Chromium</a></p>
<p><strong>Update:</strong> I installed it, ran it, threw it out. It interesting to see that it runs on a Mac, but it’s dog slow doesn’t blend in well with the rest of the desktop and crashed as soon as I went to Amazon.com.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>483</wp:post_id>
		<wp:post_date>2008-09-16 21:17:46</wp:post_date>
		<wp:post_date_gmt>2008-09-16 19:17:46</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>google-chrome-on-mac-linux</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Palm’s new Pre phone and WebOS</title>
		<link>http://zef.me/2009/01/09/palms-new-pre-phone-and-webos/</link>
		<pubDate>Fri, 09 Jan 2009 12:18:08 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2009/01/09/palms-new-pre-phone-and-webos/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>To be honest I thought was so 90’s, but I think that after what they showed at CES, we can agree that Palm is back. My dad (who owns a Palm and loves it a lot) will be pleased. Palm presented a new new phone, called the Pre, which runs a new operating system: WebOS. The phone looks beautiful, it has al the usual smartphone features (Wifi, GPS, bluetooth etc.) and a slide out physical keyboard.</p>
<figure><img src="https://cdn-images-1.medium.com/max/800/0*UGrOiWhnzwS3nZBs.jpg"></figure><p>What makes it really interesting is its new operating system, however. WebOS, on which applications are built using… HTML, CSS and Javascript. That’s right folks. Access to device specific features is obtained through a “JSON service bus”. The OS looks very pretty and telling from this video:</p>
<a href="https://www.youtube.com/v/JRnlzbuLRwM&amp;hl=en&amp;fs=1"></a><p>I would almost admit it looks prettier and seems better throught out than the iPhone. Yes people, it is possible.</p>
<p>Some related links:</p>
<ul>
<li><a href="http://i.gizmodo.com/5126702/palm-pre-preview-simply-amazing?skyline=true&amp;s=i" target="_blank">Gizmodo review</a></li>
<li>
<a href="http://arstechnica.com/news.ars/post/20090108-palm-launches-new-handset-pre-operating-system-at-ces.html" target="_blank">Art Technica article</a>, they really love it, which says a lot</li>
<li><a href="http://blog.wired.com/gadgets/2009/01/palms-new-phone.html" target="_blank">Wired article</a></li>
<li>
<a href="http://scobleizer.com/2009/01/08/palm-did-what-nokia-rim-and-microsoft-couldnt-build-a-better-experience-than-apple/" target="_blank">Robert Scoble</a> (+ <a href="http://www.kyte.tv/ch/6118/308790#uri=channels/6118/308791" target="_blank">video 1</a> and <a href="http://www.kyte.tv/ch/147499-fast-company-live/308668-mobile-show-267" target="_blank">video 2</a>)</li>
</ul>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>519</wp:post_id>
		<wp:post_date>2009-01-09 13:18:08</wp:post_date>
		<wp:post_date_gmt>2009-01-09 12:18:08</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>palms-new-pre-phone-and-webos</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Third Microsoft Ad</title>
		<link>http://zef.me/2008/09/19/third-microsoft-ad/</link>
		<pubDate>Fri, 19 Sep 2008 06:49:36 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2008/09/19/third-microsoft-ad/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Yeah, they killed the Seinfeld and Bill Gates ads. Which, according to Microsoft, was the plan all along. Right. I read somewhere that a third commercial with Seinfeld was already produced and ready to air, but was pulled. Apparently because the responses were not very positive to the other ones. Personally I enjoyed them a lot.</p>
<p>Anyway, this is the ad that they aired instead:</p>
<a href="https://www.youtube.com/v/HrmF-mPLybw&amp;color1=0xb1b1b1&amp;color2=0xcfcfcf&amp;hl=en&amp;fs=1"></a><p>It’s not bad, actually. It’s just… not that funny.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>552</wp:post_id>
		<wp:post_date>2008-09-19 08:49:36</wp:post_date>
		<wp:post_date_gmt>2008-09-19 06:49:36</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>third-microsoft-ad</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Computers in 2004</title>
		<link>http://zef.me/2008/08/13/computers-in-2004/</link>
		<pubDate>Wed, 13 Aug 2008 11:34:35 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2008/08/13/computers-in-2004/</guid>
		<description></description>
		<content:encoded><![CDATA[

<figure><img src="https://cdn-images-1.medium.com/max/800/0*pYJ5423EaJpOOc7L.gif"></figure><p>(Click to enlarge)</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>563</wp:post_id>
		<wp:post_date>2008-08-13 13:34:35</wp:post_date>
		<wp:post_date_gmt>2008-08-13 11:34:35</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>computers-in-2004</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Java Summer Camp Talk</title>
		<link>http://zef.me/2008/09/02/java-summer-camp-talk/</link>
		<pubDate>Tue, 02 Sep 2008 08:02:15 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2008/09/02/java-summer-camp-talk/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Last friday I was at <a href="http://javasummercamp.nl" target="_blank">ProfICT’s Java summer camp</a> giving a talk about WebDSL. The audience was mostly from industry, which was nice. The talk went well and I received a lot of positive response and questions about what we’re doing.</p>
<p>For those who are interested, <a href="http://www.zefhemel.com/upload/WebDSL-JavaSummerCamp.pdf" target="_blank">you can find the slides of the talk here</a>.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>586</wp:post_id>
		<wp:post_date>2008-09-02 10:02:15</wp:post_date>
		<wp:post_date_gmt>2008-09-02 08:02:15</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>java-summer-camp-talk</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Second paper published!</title>
		<link>http://zef.me/2008/07/25/second-paper-published/</link>
		<pubDate>Fri, 25 Jul 2008 13:05:09 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2008/07/25/second-paper-published/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Our second paper has been accepted to the <a href="http://www.modelsconference.org/" target="_blank">MODELS conference</a>, which is <em>the</em> conference on software models. It’s about WebWorkFlow, a workflow extension of <a href="http://www.webdsl.org" target="_blank">WebDSL</a>. At the end of September I will go to Toulouse, France to present it.</p>
<p>The full title of the paper is: <a href="http://swerl.tudelft.nl/twiki/pub/Main/TechnicalReports/TUD-SERG-2008-029.pdf" target="_blank">WebWorkFlow: An Object-Oriented Workﬂow Modeling Language for Web Applications</a> (click to download the PDF).</p>
<p>Currently I’m working on a Google AppEngine backend for WebDSL so that you can run WebDSL programs on Google AppEngine (WebDSL is translated to Python). More on that later.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>597</wp:post_id>
		<wp:post_date>2008-07-25 15:05:09</wp:post_date>
		<wp:post_date_gmt>2008-07-25 13:05:09</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>second-paper-published</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>iPod Touch</title>
		<link>http://zef.me/2008/08/28/ipod-touch/</link>
		<pubDate>Thu, 28 Aug 2008 08:38:55 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2008/08/28/ipod-touch/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>A week or two ago my old third genenration iPod broke down after 5 years of service. It was a sad moment, but a happy one as well because it allowed me to finally buy an iPod touch. I must say that I love it, a phone or PDA with a touch screen definitely is the way of the future. The iPod Touch, or rather iTouch, is often overlooked with all the iPhone hype. It’s the less expensive non-phone iPhone that can run practically all the same software from the AppStore.</p>
<p>In the past week or two I’ve been trying lots and lots of software, some free some paid and after lots of installation and removing here are my favorites:</p>
<ul>
<li>Byline, this is an RSS reader that syncs with Google Reader (my RSS reader of choice) but it also works offline, it syncs articles to the iPhone/iPod touch to read on the road. This application costs $9.99 I think (7.99 euro)</li>
<li>DataCase, this is a program that allows you to use your device as a wireless hard drive. If you have a mac, it will show up as a bonjour drive, but it is also accessible through ftp and http. You can also view the files on the device. Also not a free application.</li>
<li>iSSH, not the only ssh client for the iPhone/iTouch, but the only one that seems to be available in the Netherlands. Works great, you can have multiple connections open, the characters are small but readable. Great. Also not free.</li>
<li>Outliner, if you like using outliners, this basically your only choice right now and it works quite well. Not free.</li>
<li>WeDict, a free English-English and English-Chinese (don’t care about that) dictionary</li>
<li>Stanza, a free eBook reader, makes reading on the iTouch a pleasure, and can download lots of free books (many classics and creative commons books).</li>
<li>MiGhtyDocs, if you use Google Docs you will like this, it’s an offline viewer of Google docs (currently text documents only).</li>
</ul>
<p>And of course… games:</p>
<ul>
<li>DizzyBee, a great game in which you are a bee that has to save his fruit friens. Sounds childish, but is awesome, great use of the accelerometer too. There’s a free lite version and a paid version with more levels.</li>
<li>Crash Bandicoot, cool kart game. Not free.</li>
<li>Toy Bot Diaries, I just bought this today but I love it already, really good use of accelerometer and touching</li>
<li>Tap Tap Revenge, it’s guitar hero for the iPod/iPhone. Cool! And free.</li>
<li>Sol Free Solitaire, name says it all, free solitair. Good when compiling.</li>
<li>Trism, very cool puzzle game. Not free.</li>
</ul>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>637</wp:post_id>
		<wp:post_date>2008-08-28 10:38:55</wp:post_date>
		<wp:post_date_gmt>2008-08-28 08:38:55</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ipod-touch</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>World Names Profiler</title>
		<link>http://zef.me/2008/09/22/world-names-profiler/</link>
		<pubDate>Mon, 22 Sep 2008 09:08:11 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2008/09/22/world-names-profiler/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Wonder where people with your last name live? Turns out most people with my last name (Hemel) live in Drenthe, a province of the Netherlands. Which, of course, I already knew but it’s fun to see where more people with my last name live. The World Names Profiler has first and last names indexed from 300 million people around the globe.</p>
<figure><img src="https://cdn-images-1.medium.com/max/800/0*buPqdPDDDUopshOp.png"></figure><p><a href="http://www.publicprofiler.org/worldnames/Default.aspx" target="_blank">World Names Profiler</a>.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>650</wp:post_id>
		<wp:post_date>2008-09-22 11:08:11</wp:post_date>
		<wp:post_date_gmt>2008-09-22 09:08:11</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>world-names-profiler</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="because-i-care"><![CDATA[Because I Care]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Poor Taste</title>
		<link>http://zef.me/2009/01/12/poor-taste/</link>
		<pubDate>Mon, 12 Jan 2009 20:27:14 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2009/01/12/poor-taste/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>As much as I love <a href="http://uncov.com/" target="_blank">Ted Dziuba</a> and his straight-up style of writing, <a href="http://www.theregister.co.uk/2009/01/12/dziuba_twitter_hack/page2.html" target="_blank">something like this</a>:</p>
<h4>Apology</h4>
<blockquote>When originally published, this column contained two references to Down’s Syndrome that were in poor taste. We have removed them. And we apologize for any offense this may have caused.</blockquote>
<p>Cracks me. What!? References made by Ted Dziuba… poor taste? Shocker.</p>
<p>(In case you don’t get this, read some <a href="http://uncov.com/" target="_blank">uncov stories</a> to see what I’m talking about.)</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>705</wp:post_id>
		<wp:post_date>2009-01-12 21:27:14</wp:post_date>
		<wp:post_date_gmt>2009-01-12 20:27:14</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>poor-taste</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="apology"><![CDATA[Apology]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="uncov"><![CDATA[Uncov]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Pico Blogging</title>
		<link>http://zef.me/2009/01/13/pico-blogging/</link>
		<pubDate>Tue, 13 Jan 2009 06:38:58 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2009/01/13/pico-blogging/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>I’m on <a href="http://twitter.com/zef" target="_blank">twitter</a>. Twitter is cool, but it still leaves too much room for junk. Some people just shouldn’t get any space, or as little space as possible. Clearly this does not apply to me and you, we can handle it. I have a blog on which I can write page-long thoughtful articles. If I wanted to. But I don’t. So I won’t. But people like <a href="http://steve-yegge.blogspot.com/" target="_blank">Steve Yegge</a>, who suffer from verbal diarrhea, could use some lessons in conciseness.</p>
<p>For those people there’s pico blogging. They get 16 characters per day. Here’s what Steve Yegge’s last few picoblogs would look like:</p>
<p><a href="http://steve-yegge.blogspot.com/2008/12/fable-ii-arguably-better-than-getting.html" target="_blank">Fable II=awesome</a><br><a href="http://steve-yegge.blogspot.com/2008/12/programmers-view-of-universe-part-2.html" target="_blank">Mario kart=cool</a></p>
<p>Much better right? Not sure if it covers the content, but come on, I’m not going to actually read these book-length posts to find out.</p>
<p>People tell me they love twitter because if its restrictiveness. You only get 140 characters so it’s a challenge to fit your thoughts in. For this type of people pico blogging is great too. It’s like twitter++ (or twitter — depending on your point of view): even more restrictive than the original. And because you can only post once a day, you better think twice before posting “taking a crap” as your message of the day.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>870</wp:post_id>
		<wp:post_date>2009-01-13 07:38:58</wp:post_date>
		<wp:post_date_gmt>2009-01-13 06:38:58</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>pico-blogging</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="pico"><![CDATA[Pico]]></category>
		<category domain="post_tag" nicename="picoblogging"><![CDATA[Picoblogging]]></category>
		<category domain="post_tag" nicename="twitter"><![CDATA[Twitter]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Eelco Visser on Parsing</title>
		<link>http://zef.me/2008/11/28/eelco-visser-on-parsing/</link>
		<pubDate>Fri, 28 Nov 2008 07:53:38 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2008/11/28/eelco-visser-on-parsing/</guid>
		<description></description>
		<content:encoded><![CDATA[
<p>To my surprise, when I checked the feeds of one of the podcasts I listen to (Software Engineering Radio), I noticed that they posted an interview with my Ph.D. supervisor yesterday, Eelco Visser. Eelco did his Ph.D. on scannerless parsing. If you care to find out something about what parsing is, how it works and so on, <a href="http://www.se-radio.net/podcast/2008-11/episode-118-eelco-visser-parsers" target="_blank">you can have a listen</a>.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>933</wp:post_id>
		<wp:post_date>2008-11-28 08:53:38</wp:post_date>
		<wp:post_date_gmt>2008-11-28 07:53:38</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>eelco-visser-on-parsing</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Use Google Calendar, own an iPhone or iPod Touch?</title>
		<link>http://zef.me/2008/12/03/use-google-calendar-own-an-iphone-or-ipod-touch/</link>
		<pubDate>Wed, 03 Dec 2008 09:18:59 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2008/12/03/use-google-calendar-own-an-iphone-or-ipod-touch/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Just a little thing I just found and I’m sure many others are looking for, especially those who use Google Calendar: an over-the-air synchronization service.</p>
<p><a href="https://www.nuevasync.com" target="_blank">Nuavasync</a> is a free service that acts like a Microsoft Exchange server but talks with Google Calendar and Google Contacts on the backend. iPhones and iPod touches can sync over the air with microsoft exchange, so this a great solution.</p>
<p><a href="http://www.ianfernando.com/2008/sync-google-calendar-with-iphone-3g/" target="_blank">Simply follow the steps</a> to set it up.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1062</wp:post_id>
		<wp:post_date>2008-12-03 10:18:59</wp:post_date>
		<wp:post_date_gmt>2008-12-03 09:18:59</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>use-google-calendar-own-an-iphone-or-ipod-touch</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Compiling</title>
		<link>http://zef.me/2009/01/13/compiling-2/</link>
		<pubDate>Tue, 13 Jan 2009 10:06:54 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2009/01/13/compiling-2/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>For all those compiler constructionists out there: focus on performance. Take any measure to make it happen: separate compilation, parallelization, anything. Right now I’m waiting for an 8 minute compilation the <a href="http://www.strategoxt.org" target="_blank">Stratego compiler</a> and it is annoying. Stratego is compiled by the Stratego compiler to C and the C is then compiled by GCC. Did I mention it takes 8 minutes even if I change only 1 line of code? It’s annoying.</p>
<p>And Stratego is actually developed by “us” (i.e. people in our department) so I shouldn’t complain, because hey, if I don’t like it, why don’t I fix it? Probably because I’m too busy complaining about it.</p>
<p>Ok, the compilation just finished. I’m out.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1147</wp:post_id>
		<wp:post_date>2009-01-13 11:06:54</wp:post_date>
		<wp:post_date_gmt>2009-01-13 10:06:54</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>compiling-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="compiler"><![CDATA[Compiler]]></category>
		<category domain="post_tag" nicename="complain"><![CDATA[Complain]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="performance"><![CDATA[Performance]]></category>
		<category domain="post_tag" nicename="stratego"><![CDATA[Stratego]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Second Gates/Seinfeld Microsoft Ad</title>
		<link>http://zef.me/2008/09/12/second-gates-seinfeld-microsoft-ad/</link>
		<pubDate>Fri, 12 Sep 2008 06:59:52 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2008/09/12/second-gates-seinfeld-microsoft-ad/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>The second advertisement with Bill Gates and Seinfeld just came out. Here ya go.</p>
<a href="https://www.youtube.com/v/gBWPf1BWtkw&amp;hl=en&amp;fs=1"></a><p>I must admit I really enjoyed it. It’s quite funny and Bill isn’t doing bad at all. It’s a nice commercial with not too obvious a message, it’s just nice to look at. And it still relates to Microsoft, it’s about connecting people, which is what their operating system apparently does. Looking forward to the next one.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1211</wp:post_id>
		<wp:post_date>2008-09-12 08:59:52</wp:post_date>
		<wp:post_date_gmt>2008-09-12 06:59:52</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>second-gates-seinfeld-microsoft-ad</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Google Chrome</title>
		<link>http://zef.me/2008/09/03/google-chrome/</link>
		<pubDate>Wed, 03 Sep 2008 06:43:52 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2008/09/03/google-chrome/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Google yesterday <a href="http://googleblog.blogspot.com/2008/09/fresh-take-on-browser.html" target="_blank">Google Chrome</a>, Google’s own browser based on Webkit. <a href="http://www.google.com/googlebooks/chrome/index.html" target="_blank">Read the comic</a> to fully appreciate what it’s about. To me it seems that Google is promoting the browser to an operating system with Chrome. For instance because it has its own task manager:</p>
<figure><img src="https://cdn-images-1.medium.com/max/800/0*p42MGDLDZWZvxWSG.png"></figure><p>and that each tab lives in its own process. This is not only safer, but also means you can see which tab (=application) is using up all the resources and simply kill it by closing that tab. I often have the problem with Firefox where one tab uses a lot of resources and I can’t figure out which so I have to kill the whole browser. With chrome you don’t have that problem.</p>
<p>Sadly <a href="http://www.google.com/chrome" target="_blank">Chrome</a> is only available for Windows right now. I’m currently testing it on a virtual machine on my mac:</p>
<figure><img src="https://cdn-images-1.medium.com/max/800/0*ijkdU0S55-NUEhVI.png"></figure><p>and I must say that even like that it’s quite snappy and it looks nice.</p>
<p>Can’t wait for a Mac version though.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1380</wp:post_id>
		<wp:post_date>2008-09-03 08:43:52</wp:post_date>
		<wp:post_date_gmt>2008-09-03 06:43:52</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>google-chrome</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="because-i-care"><![CDATA[Because I Care]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Linus no likie C++</title>
		<link>http://zef.me/2008/12/17/linus-no-likie-c/</link>
		<pubDate>Wed, 17 Dec 2008 20:42:37 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2008/12/17/linus-no-likie-c/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p><a href="http://lwn.net/Articles/249460/" target="_blank">Linus Torvalds on a mailing list</a>:</p>
<blockquote>C++ is a horrible language. It’s made more horrible by the fact that a lot of substandard programmers use it, to the point where it’s much much easier to generate total and utter crap with it. Quite frankly, even if the choice of C were to do *nothing* but keep the C++ programmers out, that in itself would be a huge reason to use C.</blockquote>
<blockquote>In other words: the choice of C is the only sane choice. I know Miles Bader jokingly said “to piss you off”, but it’s actually true. I’ve come to the conclusion that any programmer that would prefer the project to be in C++ over C is likely a programmer that I really *would* prefer to piss off, so that he doesn’t come and screw up any project I’m involved with.</blockquote>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1450</wp:post_id>
		<wp:post_date>2008-12-17 21:42:37</wp:post_date>
		<wp:post_date_gmt>2008-12-17 20:42:37</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>linus-no-likie-c</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Free Software Fundamentalists challenge the iPhone</title>
		<link>http://zef.me/2008/07/29/free-software-fundamentalists-challenge-the-iphone/</link>
		<pubDate>Tue, 29 Jul 2008 06:55:43 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2008/07/29/free-software-fundamentalists-challenge-the-iphone/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>The people from the <a href="http://www.fsf.org" target="_blank">Free Software Foundation</a> on their <a href="http://www.defectivebydesign.org" target="_blank">Defective by Design</a> propaganda site did it again. They once again proved to be whiny sad little people, trying to achieve their goals by <em>bullying</em>, just like <em>they</em> were bullied in primary school.</p>
<p>These geniuses came up with a “challenge” for people working in Apple Stores. Some “challenging” questions that are sure to make their head spin, and make them see how they have been wrong all along, quit their Apple jobs, move back to their parents’ place and contribute free source code to <a href="http://www.catb.org/~esr/fetchmail/" target="_blank">fetchmail</a>.</p>
<p>Up to the challenge? Here are <a href="http://www.defectivebydesign.org/apple-challenge" target="_blank">the questions</a>:</p>
<ol>
<li>Why do all developers have to submit their applications to Apple before they can be loaded onto an iPhone?</li>
<li>Why does iTunes still contain so much DRM-laden music?</li>
<li>The iPhone 3G has GPS support. How can users be sure that the GPS cannot be used to track their position, without their permission?</li>
<li>Last question. Why can the iPhone 3G only be activated by Apple and AT&amp;T?</li>
</ol>
<p>I won’t bother answering them (I’m not an Apple genius), but <a href="http://fishbowl.pastiche.org/2008/07/28/a_public_service_for_the_fsf" target="_blank">other people gave some pretty good answers</a>. I do want to note though that I find question 3 very typical of the FSF.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1480</wp:post_id>
		<wp:post_date>2008-07-29 08:55:43</wp:post_date>
		<wp:post_date_gmt>2008-07-29 06:55:43</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>free-software-fundamentalists-challenge-the-iphone</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="conservative"><![CDATA[Conservative]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Steve Jobs about his health</title>
		<link>http://zef.me/2009/01/05/steve-jobs-about-his-health/</link>
		<pubDate>Mon, 05 Jan 2009 17:15:40 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2009/01/05/steve-jobs-about-his-health/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p><a href="http://www.apple.com/pr/library/2009/01/05sjletter.html" target="_blank">Steve Jobs</a>:</p>
<blockquote>As many of you know, I have been losing weight throughout 2008. The reason has been a mystery to me and my doctors. A few weeks ago, I decided that getting to the root cause of this and reversing it needed to become my #1 priority.</blockquote>
<blockquote>Fortunately, after further testing, my doctors think they have found the cause — a hormone imbalance that has been “robbing” me of the proteins my body needs to be healthy. Sophisticated blood tests have confirmed this diagnosis.</blockquote>
<blockquote>The remedy for this nutritional problem is relatively simple and straightforward, and I’ve already begun treatment. But, just like I didn’t lose this much weight and body mass in a week or a month, my doctors expect it will take me until late this Spring to regain it. I will continue as Apple’s CEO during my recovery.</blockquote>
<blockquote>I have given more than my all to Apple for the past 11 years now. I will be the first one to step up and tell our Board of Directors if I can no longer continue to fulfill my duties as Apple’s CEO. I hope the Apple community will support me in my recovery and know that I will always put what is best for Apple first.</blockquote>
<p>Sounds reasonable enough.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1593</wp:post_id>
		<wp:post_date>2009-01-05 18:15:40</wp:post_date>
		<wp:post_date_gmt>2009-01-05 17:15:40</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>steve-jobs-about-his-health</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Palm Pre: Awesome</title>
		<link>http://zef.me/2009/01/12/palm-pre-awesome/</link>
		<pubDate>Mon, 12 Jan 2009 20:40:50 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2009/01/12/palm-pre-awesome/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Have a look at this:</p>
<p>Yes, you have just looked at the phone of the future. The <a href="http://www.palm.com/us/products/phones/pre/index.html" target="_blank">Palm Pre</a> is awesome and I intend to buy it once it comes out. Forget about the iPhone — it’s a piece of crap. Palm is back, and Palm is back to stay. Still not convinced? <a href="http://www.palm.com/us/products/phones/pre/palm-pre-ces.html" target="_blank">Watch its CES presentation with elaborate demo</a>.</p>
<p>Awesome.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1669</wp:post_id>
		<wp:post_date>2009-01-12 21:40:50</wp:post_date>
		<wp:post_date_gmt>2009-01-12 20:40:50</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>palm-pre-awesome</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="awesome"><![CDATA[Awesome]]></category>
		<category domain="post_tag" nicename="future"><![CDATA[Future]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="palm"><![CDATA[Palm]]></category>
		<category domain="post_tag" nicename="phone"><![CDATA[Phone]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>The hashtable is the database</title>
		<link>http://zef.me/2009/01/23/the-hashtable-is-the-database/</link>
		<pubDate>Fri, 23 Jan 2009 17:42:06 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2009/01/23/the-hashtable-is-the-database/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>If you pretend to be at least a little bit hip, you dumped your SQL database server and moved back to the core. To the essence. The format that fits any problem. No, it’s not the string of bits, lets not go that far (yet). It’s the hashtable. The hashtable is <a href="http://www.metabrew.com/article/anti-rdbms-a-list-of-distributed-key-value-stores/" target="_blank">the anti-relational database</a>. You might think it’s highly impractical or limited, but that’s where you’re wrong. What matters is not practicality, what matters is scalability. It turns out that hashtables scale like butter. A few days ago I talked about <a href="http://zef.me/2009/01/the-project-that-shall-not-be-named/" target="_blank">project Voldemort</a>, used by LinkedIn. Similarly, Amazon has <a href="http://portal.acm.org/citation.cfm?id=1294261.1294281" target="_blank">Dynamo</a>. <a href="http://couchdb.apache.org/" target="_blank">CouchDB</a> is not that much more than a hashtable either.</p>
<p>“But what if I want to do X, Y and Z? I can’t do that with a hashtable!”</p>
<p>If you can’t do X, Y and Z with a hashtable, there must be a good reason for it. As you develop X, Y and Z you are likely to find they were bad ideas anyway. If features don’t fit the hashtable model, more often than not they turn out to be pretty crappy features.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>62</wp:post_id>
		<wp:post_date>2009-01-23 18:42:06</wp:post_date>
		<wp:post_date_gmt>2009-01-23 17:42:06</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-hashtable-is-the-database</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="amazon"><![CDATA[Amazon]]></category>
		<category domain="post_tag" nicename="couchdb"><![CDATA[Couchdb]]></category>
		<category domain="post_tag" nicename="dynamo"><![CDATA[Dynamo]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="hashtable"><![CDATA[Hashtable]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Dave Winer’s awesome, sometimes</title>
		<link>http://zef.me/2009/01/22/dave-winers-awesome-sometimes/</link>
		<pubDate>Thu, 22 Jan 2009 11:37:23 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2009/01/22/dave-winers-awesome-sometimes/</guid>
		<description></description>
		<content:encoded><![CDATA[
<p><a href="http://en.wikipedia.org/wiki/Dave_Winer" target="_blank">Dave Winer</a>, inventor of RSS among other things, is someone I follow on twitter but once a week consider unfollowing because he mostly talks about politics. I don’t care about what Dave Winer thinks about politics. But <a href="http://twitter.com/davewiner/status/1137151674" target="_blank">sometimes</a>, like you can see above, there’s a twitter gem that makes it all worth it. Any phrase ending with “is for sissies” scores you points with The Zef.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>406</wp:post_id>
		<wp:post_date>2009-01-22 12:37:23</wp:post_date>
		<wp:post_date_gmt>2009-01-22 11:37:23</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>dave-winers-awesome-sometimes</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="dave-winer"><![CDATA[Dave Winer]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="sissies"><![CDATA[Sissies]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Aretha’s Hat</title>
		<link>http://zef.me/2009/01/22/arethas-hat/</link>
		<pubDate>Thu, 22 Jan 2009 07:37:25 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2009/01/22/arethas-hat/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>I only subscribed to the <a href="http://www.gizmodo.com" target="_blank">Gizmodo</a> feed a few days ago (I had been reading only <a href="http://www.engadget.com/2009/01/06/live-from-the-macworld-2009-keynote/" target="_blank">Engadget</a> before). So far I like it. They seem to be sarcastic than Engadget. Example is <a href="http://i.gizmodo.com/5135394/why-we-have-cameras" target="_blank">Tuesday’s post</a>: “Why we have cameras”:</p>
<blockquote>Because sometimes Aretha Franklin wears a hat to the inauguration that words simply cannot describe.</blockquote>
<p>All I can say is: hell yeah!</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>414</wp:post_id>
		<wp:post_date>2009-01-22 08:37:25</wp:post_date>
		<wp:post_date_gmt>2009-01-22 07:37:25</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>arethas-hat</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="aretha-franklin"><![CDATA[Aretha Franklin]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="gizmodo"><![CDATA[Gizmodo]]></category>
		<category domain="post_tag" nicename="sarcasm"><![CDATA[Sarcasm]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Good luck fella</title>
		<link>http://zef.me/2009/01/21/good-luck-fella/</link>
		<pubDate>Wed, 21 Jan 2009 07:55:16 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2009/01/21/good-luck-fella/</guid>
		<description></description>
		<content:encoded><![CDATA[
<p>Good luck the next four to eight years. We believe in you.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>454</wp:post_id>
		<wp:post_date>2009-01-21 08:55:16</wp:post_date>
		<wp:post_date_gmt>2009-01-21 07:55:16</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>good-luck-fella</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="obama"><![CDATA[Obama]]></category>
		<category domain="post_tag" nicename="president"><![CDATA[President]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Vim for the win</title>
		<link>http://zef.me/2009/01/19/vim-for-the-win/</link>
		<pubDate>Mon, 19 Jan 2009 19:15:10 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2009/01/19/vim-for-the-win/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>People say the days of <a href="http://en.wikipedia.org/wiki/Vi" target="_blank">vi</a> are over. They say you should use a cool IDE like Visual Studio, or Eclipse. You know, the kind that up half of your memory before you even opened a file and where whenever you type a ‘.’ your memory will start to swap because it is calculating possible completions as if you were mentally challenged.</p>
<p>Nah we don’t need all that crap. We are all proper vi users. You can see smug grins on our faces when we reindent code, copy stuff, or pass parts of text through a shell command to make it even more awesome. So be a man, use vi, <a href="http://www.vim.org" target="_blank">vim</a> or to be totally tha man, use <a href="http://code.google.com/p/macvim/" target="_blank">MacVim</a>. Like me. Because I’m tha man, in case that wasn’t obvious.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>680</wp:post_id>
		<wp:post_date>2009-01-19 20:15:10</wp:post_date>
		<wp:post_date_gmt>2009-01-19 19:15:10</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>vim-for-the-win</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="vi"><![CDATA[Vi]]></category>
		<category domain="post_tag" nicename="vim"><![CDATA[Vim]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Recognition</title>
		<link>http://zef.me/2009/01/21/recognition/</link>
		<pubDate>Wed, 21 Jan 2009 10:48:40 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2009/01/21/recognition/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>A comment on <a href="http://www.reddit.com/r/programming/comments/7r2qg/vim_for_the_win/" target="_blank">reddit</a> about <a href="http://zef.me/2009/01/vim-for-the-win/" target="_blank">vim for the win</a>:</p>
<blockquote>I can only assume the four people who’ve upvoted this so far didn’t bother to click the link — that was the most useless blog post I’ve ever seen</blockquote>
<p>Right on! Incidentally, my piece of major insight got 7 up votes on reddit. I guess some redditers truly appreciate my brilliance.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>800</wp:post_id>
		<wp:post_date>2009-01-21 11:48:40</wp:post_date>
		<wp:post_date_gmt>2009-01-21 10:48:40</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>recognition</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="reddit"><![CDATA[Reddit]]></category>
		<category domain="post_tag" nicename="vim"><![CDATA[Vim]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Waking up next to a billion dollars</title>
		<link>http://zef.me/2009/01/24/waking-up-next-to-a-billion-dollars/</link>
		<pubDate>Sat, 24 Jan 2009 15:51:16 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2009/01/24/waking-up-next-to-a-billion-dollars/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p><a href="http://www.imobapp.com/" target="_blank">iMob</a> keeps surprising me. Yesterday a colleague and I concluded that <a href="http://zef.me/2009/01/imo/" target="_blank">the game</a> is in fact pretty stupid. At a certain point the game comes down to patience and pushing a button once in a while. Other than that it keeps crashing. Sometimes I had to start it up like 10 times before it would actually connect. This morning I woke up to this:</p>
<p>I won’t complain, but… really? Is that a bug? I do hope you can exchange iMob dollars for real dollars some day. Until then I’m keeping hold of it.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>804</wp:post_id>
		<wp:post_date>2009-01-24 16:51:16</wp:post_date>
		<wp:post_date_gmt>2009-01-24 15:51:16</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>waking-up-next-to-a-billion-dollars</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="imob"><![CDATA[Imob]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>History of Python Blog</title>
		<link>http://zef.me/2009/01/13/history-of-python-blog/</link>
		<pubDate>Tue, 13 Jan 2009 17:46:28 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2009/01/13/history-of-python-blog/</guid>
		<description></description>
		<content:encoded><![CDATA[
<p>Guido van Rossum, author of Python just launched his <a href="http://python-history.blogspot.com/" target="_blank">History of Python blog</a>. Subscribed. In case you don’t know Python yet, learn it. It’s Dutch, so it’s cool.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>816</wp:post_id>
		<wp:post_date>2009-01-13 18:46:28</wp:post_date>
		<wp:post_date_gmt>2009-01-13 17:46:28</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>history-of-python-blog</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="python"><![CDATA[Python]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Today in Sarcasm</title>
		<link>http://zef.me/2009/01/22/today-in-sarcasm/</link>
		<pubDate>Thu, 22 Jan 2009 13:59:29 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2009/01/22/today-in-sarcasm/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p><a href="http://www.theregister.co.uk/2009/01/21/git_gaining_ground/" target="_blank">Ted Dziuba on the history of Git</a>:</p>
<blockquote>There was a time when the Linux community used BitKeeper as its source code control system, after switching from the open-source CVS. But then Samba developer Andrew Tridgell <a href="http://www.theregister.co.uk/2005/04/14/torvalds_attacks_tridgell/" target="_blank">figured out</a> you could telnet to a BitKeeper server, type “HELP,” and get a list of commands. Upon hearing of Tridgell’s daring hack, BitMover — the company that maintains BitKeeper — got all license-revokey on the community, changing the terms of the agreement and demanding that Linux developers start paying for its software.</blockquote>
<blockquote>There were other free source control systems available, and the popular one was Subversion, which was billed by its creators as “CVS done right.” If you’ve never used CVS, the dark humor in that statement is that it doesn’t make sense. Labeling something “CVS done right” is about the same as labeling something “a urinary tract infection done right.” Many developers, Linus included, find CVS and the like completely unacceptable.</blockquote>
<blockquote>Now, the Legend of Linus is part truth and part mythology. Nobody really knows where the facts end and the tall stories begin. But one common theme in all of them is that Linus has the power of many men. While that multiple is up for debate, the editorial staff here at <em>The Reg</em> has decreed that Linus has the power of ten. It’s a conservative estimate, but it keeps our fact checkers happy.</blockquote>
<blockquote>With the power of ten men, Linus reacted swiftly. Rather than cry about it like a little bitch, he created his own source control system called git. In a self-deprecating style that only a developer on Linus’s level could pull off, Linus said, “I’m an egotistical bastard, and I name all my projects after myself. First Linux, now git.”</blockquote>
<blockquote>(We Americans don’t really get the joke, because while “git” is British slang for a worthless person, we have come to acknowledge the fundamental law of British insults: don’t be insulting).</blockquote>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>856</wp:post_id>
		<wp:post_date>2009-01-22 14:59:29</wp:post_date>
		<wp:post_date_gmt>2009-01-22 13:59:29</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>today-in-sarcasm</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="sarcasm"><![CDATA[Sarcasm]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Sometimes Facebook is not that bad</title>
		<link>http://zef.me/2009/01/22/sometimes-facebook-is-not-that-bad/</link>
		<pubDate>Thu, 22 Jan 2009 14:51:08 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2009/01/22/sometimes-facebook-is-not-that-bad/</guid>
		<description></description>
		<content:encoded><![CDATA[
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>988</wp:post_id>
		<wp:post_date>2009-01-22 15:51:08</wp:post_date>
		<wp:post_date_gmt>2009-01-22 14:51:08</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>sometimes-facebook-is-not-that-bad</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="facebook"><![CDATA[Facebook]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>A Beautiful Mind</title>
		<link>http://zef.me/2009/01/18/a-beautiful-mind/</link>
		<pubDate>Sun, 18 Jan 2009 16:59:15 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2009/01/18/a-beautiful-mind/</guid>
		<description></description>
		<content:encoded><![CDATA[
<p>(from <a href="http://xkcd.com/530/" target="_blank">xkcd</a> of course)</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1018</wp:post_id>
		<wp:post_date>2009-01-18 17:59:15</wp:post_date>
		<wp:post_date_gmt>2009-01-18 16:59:15</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>a-beautiful-mind</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="xkcd"><![CDATA[Xkcd]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Real-Time Web</title>
		<link>http://zef.me/2009/01/23/real-time-web/</link>
		<pubDate>Fri, 23 Jan 2009 13:50:40 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2009/01/23/real-time-web/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>How did you find this article? Did you find out about through RSS? Yeah? Loser! RSS is so 2008. It’s so slow. It’s so pull. It’s so I-don’t-have-anything-better-to-do-let’s-see-if-there’s-anything-newsy. Push is the new pull. XMMP is the new RSS, Twitter is the new Google Reader. The world is moving fast and you’re not catching up! Ask <a href="http://scobleizer.com/2008/12/21/rss-shows-its-age-in-real-time-web-sup-and-xmpp-to-the-rescue/" target="_blank">Robert Scoble</a>, your friendly neighbor internet know-it-all. He says RSS shows its age. <a href="http://en.wikipedia.org/wiki/Q.E.D." target="_blank">Q.E.D.</a></p>
<blockquote>But there’s a new expectation that we’re having thanks to Twitter. We want everything now in real time. I want to see everything that was published now and respond to it now and I want to have conversations about all that in real time.</blockquote>
<blockquote>This works on Twitter and friendfeed, which were built on real-time principles (er, messaging principles) rather than Web principles.</blockquote>
<blockquote>But when you try to hook the real-time web up to the old creaky RSS web, well, you see that the two aren’t very compatible.</blockquote>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1038</wp:post_id>
		<wp:post_date>2009-01-23 14:50:40</wp:post_date>
		<wp:post_date_gmt>2009-01-23 13:50:40</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>real-time-web</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="real-time-web"><![CDATA[Real Time Web]]></category>
		<category domain="post_tag" nicename="robert-scoble"><![CDATA[Robert Scoble]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Songsmith Ad</title>
		<link>http://zef.me/2009/01/16/songsmith-ad/</link>
		<pubDate>Fri, 16 Jan 2009 06:58:46 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2009/01/16/songsmith-ad/</guid>
		<description></description>
		<content:encoded><![CDATA[
<p>Microsoft Labs has launched <a href="http://research.microsoft.com/en-us/um/redmond/projects/songsmith/" target="_blank">Songsmith</a>, a Windows-only program that can generate support music to whatever you are singing. But don’t let me convince you this is the best thing ever, let’s have a look at a true video story. All I will say is that it features a laptop of a particular brand with stickers to mask what brand it is. Are you excited? Let’s watch!</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1063</wp:post_id>
		<wp:post_date>2009-01-16 07:58:46</wp:post_date>
		<wp:post_date_gmt>2009-01-16 06:58:46</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>songsmith-ad</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="microsoft"><![CDATA[Microsoft]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>New Twhirl: now with 400% more spam reach</title>
		<link>http://zef.me/2009/01/24/new-twhirl-now-with-400-more-spam-reach/</link>
		<pubDate>Sat, 24 Jan 2009 21:27:55 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2009/01/24/new-twhirl-now-with-400-more-spam-reach/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p><a href="http://www.loiclemeur.com/english/2009/01/the-new-twhirl-is-here-preview-release-for-team-seesmic-twhirl.html" target="_blank">Loic Le Meur on the upcoming new release</a> of <a href="http://www.twhirl.org" target="_blank">Twhirl</a> (a populair Twiter client):</p>
<blockquote><strong>Post your messages from Twhirl to Facebook, MySpace, LinkedIn, Wordpress and a gazillion services with Ping.fm integration.</strong></blockquote>
<blockquote>Why keep your updates only for one social software while you could reach all your friends on all of them?</blockquote>
<p>i.e. why only bother the people on <a href="http://www.twitter.com" target="_blank">twitter</a> with the fact that you’re taking a dump, when you can share it with everybody you know on <a href="http://www.facebook.com" target="_blank">facebook</a>, <a href="http://www.myspace.com" target="_blank">myspace</a> and especially <a href="http://www.linkedin.com" target="_blank">LinkedIn</a> too!</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1064</wp:post_id>
		<wp:post_date>2009-01-24 22:27:55</wp:post_date>
		<wp:post_date_gmt>2009-01-24 21:27:55</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>new-twhirl-now-with-400-more-spam-reach</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="twhirl"><![CDATA[Twhirl]]></category>
		<category domain="post_tag" nicename="twitter"><![CDATA[Twitter]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Steve Jobs out? I’m selling my stock</title>
		<link>http://zef.me/2009/01/18/steve-jobs-out-im-selling-my-stock/</link>
		<pubDate>Sun, 18 Jan 2009 16:26:51 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2009/01/18/steve-jobs-out-im-selling-my-stock/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Of course I don’t own real Apple stock. I own <a href="http://vse.marketwatch.com" target="_blank">virtual Apple stock</a>, or at least, I used to. Because Steve’s ill, <a href="http://www.techcrunch.com/2009/01/14/steve-jobs-takes-six-month-leave-of-absence-from-apple/" target="_blank">more ill than he expected</a> so he’s taking leave, at least until the summer. And because Steve is Apple, and Apple is Steve, a downfall of Apple may be near. Luckily <a href="http://zef.me/2009/01/palm-pre-awesome/" target="_blank">there’s Palm</a>.</p>
<p>I sold my stock. Just in case.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1092</wp:post_id>
		<wp:post_date>2009-01-18 17:26:51</wp:post_date>
		<wp:post_date_gmt>2009-01-18 16:26:51</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>steve-jobs-out-im-selling-my-stock</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="apple"><![CDATA[Apple]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="steve"><![CDATA[Steve]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>The project that shall not be named</title>
		<link>http://zef.me/2009/01/14/the-project-that-shall-not-be-named/</link>
		<pubDate>Wed, 14 Jan 2009 11:50:36 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2009/01/14/the-project-that-shall-not-be-named/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p><a href="http://project-voldemort.com/" target="_blank">Project Voldemort</a> is an open source implementation of parts of <a href="http://portal.acm.org/citation.cfm?id=1294261.1294281" target="_blank">Amazon’s Dynamo</a> (on top of which Amazon built various of its AWS web services, such as S3). It’s a database in its most basic form: (key, value) pairs. Which reminds me of a visitor we once had in our group. He visited because he developed software that generated code (which is what we do research on). It turned out that he used PHP to generate HTML code, which is hardly ground breaking. Nevertheless, he had an interesting view on database design: “all this normalization and column type stuff in database seems pointless to me,” he said. “In the end, all you need is strings. That’s why all columns in my tables are of type string with a fixed column width.” Looking at current developements, this statement could almost be seen as prophetic. The database 2.0 that starts to emerge indeed seems to move back to denormalized tables and String column types. Look at <a href="http://aws.amazon.com/simpledb/" target="_blank">Amazon SimpleDB</a> and CouchDB and you’ll see what I mean.</p>
<p>But I digress. The key, value pairs in Voldemort are automatically distributed over multiple server to make the system scale. Voldemort is used by a little site called <a href="http://www.linkedin.com" target="_blank">LinkedIn</a> that you may know. Why I care? Because Harry Potter is cool and Voldemort is a kick-ass name for a software project.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1189</wp:post_id>
		<wp:post_date>2009-01-14 12:50:36</wp:post_date>
		<wp:post_date_gmt>2009-01-14 11:50:36</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-project-that-shall-not-be-named</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="amazon"><![CDATA[Amazon]]></category>
		<category domain="post_tag" nicename="database"><![CDATA[Database]]></category>
		<category domain="post_tag" nicename="distributed"><![CDATA[Distributed]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="linkedin"><![CDATA[LinkedIn]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Jaiku’s dead</title>
		<link>http://zef.me/2009/01/15/jaikus-dead/</link>
		<pubDate>Thu, 15 Jan 2009 10:21:31 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2009/01/15/jaikus-dead/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>The microblogging system Jaiku <a href="http://www.jaiku.com/blog/2009/01/15/were-going-open-source/" target="_blank">just announced</a> “it is going open source”, which I guess is Google speak for “is dead”. The <a href="http://www.jaiku.com" target="_blank">Jaiku</a> team has been working on porting their software to Google AppEngine and now that they’re almost done, they decided not to invest any more of Google’s money into it and open source it, you know, for the greater good of the world.</p>
<p>So the microblogging universe moved from three major players (Twitter, Jaiku, Pownce) down to one: <a href="http://twitter.com" target="_blank">twitter</a>.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1243</wp:post_id>
		<wp:post_date>2009-01-15 11:21:31</wp:post_date>
		<wp:post_date_gmt>2009-01-15 10:21:31</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>jaikus-dead</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="jaiku"><![CDATA[Jaiku]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Everything’s moving to the web</title>
		<link>http://zef.me/2009/01/24/everythings-moving-to-the-web/</link>
		<pubDate>Sat, 24 Jan 2009 17:02:34 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2009/01/24/everythings-moving-to-the-web/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p><a href="http://draw.labs.autodesk.com/ADDraw/draw.html" target="_blank">Project Draw</a>: a Vision-like tool in the browser (uses Google Gears, so probably also works off-line)</p>
<p><a href="http://ondras.zarovi.cz/sql/demo/?keyword=default" target="_blank">WWW SQL Designer</a>: an in-browser visual relational database designer.</p>
<p>Who would’ve expected that in <a href="http://en.wikipedia.org/wiki/World_Wide_Web" target="_blank">1992</a>?</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1246</wp:post_id>
		<wp:post_date>2009-01-24 18:02:34</wp:post_date>
		<wp:post_date_gmt>2009-01-24 17:02:34</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>everythings-moving-to-the-web</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="browser"><![CDATA[Browser]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="web"><![CDATA[Web]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>First appearance on Techmeme</title>
		<link>http://zef.me/2009/01/25/first-appearance-on-techmeme/</link>
		<pubDate>Sun, 25 Jan 2009 12:14:13 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2009/01/25/first-appearance-on-techmeme/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Finally, after 24 posts here I’ve been linked from <a href="http://www.techmeme.com/090124/p9#a090124p9" target="_blank">Techmeme</a>, just <em>before</em> Robert Scoble mind you.</p>
<p>That means that from henceforth I am part of the elite and will therefore become more snotty and arrogant. Just so you know.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1538</wp:post_id>
		<wp:post_date>2009-01-25 13:14:13</wp:post_date>
		<wp:post_date_gmt>2009-01-25 12:14:13</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>first-appearance-on-techmeme</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="techmeme"><![CDATA[Techmeme]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>iMob</title>
		<link>http://zef.me/2009/01/18/imob/</link>
		<pubDate>Sun, 18 Jan 2009 16:38:34 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2009/01/18/imob/</guid>
		<description></description>
		<content:encoded><![CDATA[
<p>Since the day before yesterday I’m addicted to <a href="http://itunes.apple.com/WebObjects/MZStore.woa/wa/viewSoftware?id=299968099&amp;mt=8" target="_blank">iMob online</a>. A free game for the iPhone and iPod touch. You play a gangster, who’s job it is to make money and gain experience by robbing places, snatching old ladies’ purses and so on. This way you work your way up to higher levels and can buy weaponry and property to earn even more money. The game is a carbon copy of <a href="http://apps.facebook.com/mobwars/" target="_blank">Mob Wars on facebook</a>. But I had never heard of Mob Wars before so iMob was my introduction to the dark world of granny robbery. I’m lovin’ it.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1766</wp:post_id>
		<wp:post_date>2009-01-18 17:38:34</wp:post_date>
		<wp:post_date_gmt>2009-01-18 16:38:34</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>imob</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="game"><![CDATA[Game]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="imob"><![CDATA[Imob]]></category>
		<category domain="post_tag" nicename="iphone"><![CDATA[iPhone]]></category>
		<category domain="post_tag" nicename="ipod"><![CDATA[iPod]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>pipl.com is a bit scary</title>
		<link>http://zef.me/2009/02/02/pipl-com-is-a-bit-scary/</link>
		<pubDate>Mon, 02 Feb 2009 15:54:40 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2009/02/02/pipl-com-is-a-bit-scary/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p><a href="http://pipl.com/" target="_blank">pipl.com</a> is a search engine for people and it’s a bit scary. <a href="http://pipl.com/search/?FirstName=Zef&amp;LastName=Hemel&amp;City=&amp;State=&amp;Country=NL&amp;CategoryID=2&amp;Interface=1" target="_blank">This is me</a> for instance. It found website with me on it that I did not even know existed.</p>
<p>What have you found out about yourself you didn’t know?</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>173</wp:post_id>
		<wp:post_date>2009-02-02 16:54:40</wp:post_date>
		<wp:post_date_gmt>2009-02-02 15:54:40</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>pipl-com-is-a-bit-scary</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="pipl"><![CDATA[Pipl]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Apple’s iPhone patents and Palm’s Pre</title>
		<link>http://zef.me/2009/01/28/apples-iphone-patents-and-palms-pre/</link>
		<pubDate>Wed, 28 Jan 2009 17:54:04 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2009/01/28/apples-iphone-patents-and-palms-pre/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p><a href="http://www.engadget.com/2009/01/28/apple-vs-palm-the-in-depth-analysis/" target="_blank">Engadget has a very good in-depth analysis</a> of the patent Apple recently received, which supposedly patents multi-touch (which Palm also implemented on its Pre phone). As it turns out, it’s all not as bad as it seemed initially.</p>
<blockquote>So where’s the “multitouch patent” everyone keeps going on about? Well, we certainly couldn’t find the sort of broad patent that would qualify, and we didn’t find much of anything that would keep anyone from using multitouch gestures like pinch-to-zoom — in fact, Apple has a better patent position with regard to pinching gestures to cut, copy and paste than it does on pinching to zoom.</blockquote>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>254</wp:post_id>
		<wp:post_date>2009-01-28 18:54:04</wp:post_date>
		<wp:post_date_gmt>2009-01-28 17:54:04</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>apples-iphone-patents-and-palms-pre</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="apple"><![CDATA[Apple]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="iphone"><![CDATA[iPhone]]></category>
		<category domain="post_tag" nicename="palm"><![CDATA[Palm]]></category>
		<category domain="post_tag" nicename="pre"><![CDATA[Pre]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Speech Writing</title>
		<link>http://zef.me/2009/01/25/speech-writing/</link>
		<pubDate>Sun, 25 Jan 2009 15:52:35 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2009/01/25/speech-writing/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Ever since watching <a href="http://en.wikipedia.org/wiki/The_West_Wing" target="_blank">The West Wing</a> I’ve been fascinated with speech writers and the process of speech writing. I know, The West Wing is a drama series, it doesn’t show how it actually happens. But fact is that for politicians so much depends on their speeches, but their writing and delivery. When we watched the inauguration of Obama last Tuesday I was ver impressed with his speech. Who wrote it? I wondered, did he write it himself?</p>
<p>After some Googling I found out that part of the credit goes to the <a href="http://www.guardian.co.uk/world/2009/jan/20/barack-obama-inauguration-us-speech" target="_blank">27 year-old Jon Favreau</a>, who’s currently <a href="http://en.wikipedia.org/wiki/Jon_Favreau_%28speechwriter%29" target="_blank">chief speechwriter</a> to the president of the united states:</p>
<blockquote>In composing the high notes of the speech, Obama has leant on Favreau, whom he discovered almost by chance four years ago when the younger man was working on John Kerry’s failed presidential bid. “Favs” has since studied Obama’s speech patterns and cadences with the intensity of a stalker. He memorised the 2004 speech to the Democratic national convention which first brought Obama into the limelight. He is said to carry Obama’s autobiography, Dreams From My Father, wherever he goes. As a result, last November when Favreau sat down to write the first draft of the inaugural address, he could conjure up his master’s voice as if an accomplished impersonator.</blockquote>
<blockquote>That skill had been put to almost daily use in the 18 months of brutal campaigning on the presidential trail. Favreau would be up most nights until 3am, honing the next day’s stump speeches in a caffeine haze of espressos and Red Bull energy drinks, taking breaks to play the video game Rock Band. He coined a phrase for this late-night deadline surfing: “crashing”.</blockquote>
<blockquote>He crashed his way through all Obama’s most memorable speeches. He wrote the draft of one that helped to turn Iowa for Obama while closeted in a coffee shop in Des Moines. For the presidential election, he wrote two speeches: one for a victory, one for defeat. When the result came through, he emailed his best friend: “Dude, we won. Oh my God.”</blockquote>
<p>That must be the best job ever.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>280</wp:post_id>
		<wp:post_date>2009-01-25 16:52:35</wp:post_date>
		<wp:post_date_gmt>2009-01-25 15:52:35</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>speech-writing</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="obama"><![CDATA[Obama]]></category>
		<category domain="post_tag" nicename="speech"><![CDATA[Speech]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Background processing coming to Google AppEngine</title>
		<link>http://zef.me/2009/01/29/background-processing-coming-to-google-appengine/</link>
		<pubDate>Thu, 29 Jan 2009 08:16:49 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2009/01/29/background-processing-coming-to-google-appengine/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>It looks like Google is already some code with the <a href="http://appengine.google.com" target="_blank">Google AppEngine</a> SDK that <a href="http://code.google.com/p/googleappengine/issues/detail?id=6" target="_blank">expose its future background processing support</a>:</p>
<pre>I just spotted this in the latest SDK release<br>so it looks like cron (among other things) is<br>just around the corner:</pre>
<pre>$ ls -la google/appengine/cron/<br>total 272<br>drwxr-xr-x  12 samj  admin    408 17 Jan 12:18 .<br>drwxr-xr-x  11 samj  admin    374 17 Jan 12:18 ..<br>-r--r--r--   1 samj  admin  27359 15 Jan 03:16 GrocLexer.py<br>-rw-r--r--   1 samj  admin  25813 17 Jan 12:18 GrocLexer.pyc<br>-r--r--r--   1 samj  admin  21071 15 Jan 03:16 GrocParser.py<br>-rw-r--r--   1 samj  admin  18377 17 Jan 12:18 GrocParser.pyc<br>-r-xr-xr-x   1 samj  admin    646 15 Jan 03:16 __init__.py<br>-rw-r--r--   1 samj  admin    313 17 Jan 12:18 __init__.pyc<br>-r-xr-xr-x   1 samj  admin   1909 15 Jan 03:16 groc.py<br>-rw-r--r--   1 samj  admin   3050 17 Jan 12:18 groc.pyc<br>-r-xr-xr-x   1 samj  admin   7848 15 Jan 03:16<br>     groctimespecification.py<br>-rw-r--r--   1 samj  admin  10029 17 Jan 12:18<br>     groctimespecification.pyc</pre>
<pre>From the comments in the code, here's what you can expect:</pre>
<pre>A Groc schedule looks like '1st,2nd monday 9:00', or<br>'every 20 mins'. This module takes a parsed schedule<br>(produced by Antlr) and creates objects that<br>can produce times that match this schedule.</pre>
<pre>A parsed schedule is one of two types - an Interval,<br>and a Specific Time. See the class docstrings for more.</pre>
<p>I think a lot of people have been waiting for this for a long time.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>344</wp:post_id>
		<wp:post_date>2009-01-29 09:16:49</wp:post_date>
		<wp:post_date_gmt>2009-01-29 08:16:49</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>background-processing-coming-to-google-appengine</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="appengine"><![CDATA[Appengine]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="google"><![CDATA[Google]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Mac Chrome renders first page</title>
		<link>http://zef.me/2009/02/13/mac-chrome-renders-first-page/</link>
		<pubDate>Fri, 13 Feb 2009 08:28:19 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2009/02/13/mac-chrome-renders-first-page/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>The Chromium team got<a href="http://weblogs.mozillazine.org/pinkerton/archives/019848.html" target="_blank"> a first page rendering</a> on the Mac version of Google Chrome. Finally.</p>
<blockquote>Over the last couple of months, the group working on Mac Chrome (myself included) has shifted gears from layout tests and WebKit compatibility to getting the application user interface up and limping. That also means getting the separate WebCore renderer processes to communicate over IPC to the browser.</blockquote>
<blockquote>Last week, while I was in Cali, the entire team made a tremendous amount of progress getting the cross-platform model and controller classes scaffolded, topped off with a Cocoa UI (with similar strides on Linux using Gtk). We were at the point where you could create new windows and tabs (and close them too) using the shared code, which would spawn/quit associated renderer processes. It was pretty exciting to watch them come and go in Activity Monitor, knowing how close we were to getting bits on the screen.</blockquote>
<blockquote>This week, everything came together and we can now load web pages in the renderer processes and display them in tabs.</blockquote>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>365</wp:post_id>
		<wp:post_date>2009-02-13 09:28:19</wp:post_date>
		<wp:post_date_gmt>2009-02-13 08:28:19</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>mac-chrome-renders-first-page</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="browser"><![CDATA[Browser]]></category>
		<category domain="post_tag" nicename="chrome"><![CDATA[Chrome]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="mac"><![CDATA[Mac]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Some more evidence that the hashtable is the database</title>
		<link>http://zef.me/2009/03/01/some-more-evidence-that-the-hashtable-is-the-database/</link>
		<pubDate>Sun, 01 Mar 2009 19:20:58 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2009/03/01/some-more-evidence-that-the-hashtable-is-the-database/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Pro:</p>
<ul>
<li>
<a href="http://bret.appspot.com/entry/how-friendfeed-uses-mysql" target="_blank">How FriendFeed uses MySQL</a> (hint: as a hashtable with indexes)</li>
<li>
<a href="http://opensource.plurk.com/LightCloud/" target="_blank">The database behind Plurk (twitter clone)</a>, also a hashtable</li>
</ul>
<p>Con:</p>
<ul><li>
<a href="http://blog.webmynd.com/2009/02/28/databases-as-a-service-fathomdb/" target="_blank">Databases as a service</a>, they no likie hashtables</li></ul>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>433</wp:post_id>
		<wp:post_date>2009-03-01 20:20:58</wp:post_date>
		<wp:post_date_gmt>2009-03-01 19:20:58</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>some-more-evidence-that-the-hashtable-is-the-database</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="database"><![CDATA[Database]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="hashtable"><![CDATA[Hashtable]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>PHP6</title>
		<link>http://zef.me/2009/03/01/php6/</link>
		<pubDate>Sun, 01 Mar 2009 19:30:13 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2009/03/01/php6/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Some <a href="http://blog.tuvinh.com/one-minute-with-php6/" target="_blank">good changes are coming to PHP6</a>, it seems (for those who still care about PHP). A selection:</p>
<ul>
<li>register_globals will be gone.</li>
<li>magic_quotes will also disappear.</li>
<li>$HTTP_*_VARS has been removed, in favour for $_GET, $_POST, etc.</li>
<li>E_STRICT error messages are included in E_ALL errors.</li>
<li>Better Unicode Support.</li>
<li>safe_mode is being removed.</li>
</ul>
<p>Thank you PHP people.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>571</wp:post_id>
		<wp:post_date>2009-03-01 20:30:13</wp:post_date>
		<wp:post_date_gmt>2009-03-01 19:30:13</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>php6</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Ruby 1.9.1 out</title>
		<link>http://zef.me/2009/02/01/ruby-1-9-1-out/</link>
		<pubDate>Sun, 01 Feb 2009 16:52:28 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2009/02/01/ruby-1-9-1-out/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p><a href="http://www.rubyinside.com/ruby-191-released-first-production-release-of-the-fastest-ruby-ever-1480.html" target="_blank">Ruby 1.9.1 is out</a>:</p>
<blockquote>Just a month ago, Antonio Cangiano <a href="http://antoniocangiano.com/2008/12/09/the-great-ruby-shootout-december-2008/" target="_blank">ran some benchmarks</a> against a Ruby 1.9.1 preview versus several other Ruby interpreters. Ruby 1.9.1 clocked in at at least twice as fast as Ruby 1.8.7. This is great progress and will tone down some of the “but Ruby is slow” type arguments that have gone around, even though in the grand scheme of things it barely makes a dent.</blockquote>
<p>I don’t care much, but doesn’t it bother people that it was so simple to make Ruby twice as fast? It must have been terribly inefficient before. All the wasted CPU cycles with all those sites running Ruby on Rails applications. Energy wasters.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>647</wp:post_id>
		<wp:post_date>2009-02-01 17:52:28</wp:post_date>
		<wp:post_date_gmt>2009-02-01 16:52:28</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ruby-1-9-1-out</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="performance"><![CDATA[Performance]]></category>
		<category domain="post_tag" nicename="ruby"><![CDATA[Ruby]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Winning the smartphone war with Britney</title>
		<link>http://zef.me/2009/02/01/winning-the-smartphone-war-with-britney/</link>
		<pubDate>Sun, 01 Feb 2009 16:34:25 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2009/02/01/winning-the-smartphone-war-with-britney/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Apple, HTC, BlackBerry, Palm. They’re all trying and trying. Trying to be the #1 smart phone retailer, but I have bad news. Virgin Mobile<a href="http://i.gizmodo.com/5142518/virgin-mobiles-helio-ocean-2-is-official-being-launched-by-britney-spears" target="_blank">is going to win with its Helio Ocean 2 phone</a>.</p>
<p>No, it’s not because it is such an awesome phone. As a matter in fact it looks kinda dinky. But it’s because promoted by…</p>
<p>Take that Apple!</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>737</wp:post_id>
		<wp:post_date>2009-02-01 17:34:25</wp:post_date>
		<wp:post_date_gmt>2009-02-01 16:34:25</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>winning-the-smartphone-war-with-britney</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="britney"><![CDATA[Britney]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="phone"><![CDATA[Phone]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Fail fabrication fail</title>
		<link>http://zef.me/2009/01/27/fail-fabrication-fail/</link>
		<pubDate>Tue, 27 Jan 2009 14:09:03 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2009/01/27/fail-fabrication-fail/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>On one of my favorite blogs, <a href="http://failblog.org/2009/01/27/denial-fail/" target="_blank">FAIL Blog</a> failed miserably:</p>
<p>The red lines are from the FAIL blog, the blue one is mine. Either the submitter of this fail post really got the real-time web working, or he posted it himself 1 second earlier. FAIL!</p>
<p>(Credit for noticing this goes to <a href="http://www.lclnet.nl/" target="_blank">my colleague</a>.)</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>788</wp:post_id>
		<wp:post_date>2009-01-27 15:09:03</wp:post_date>
		<wp:post_date_gmt>2009-01-27 14:09:03</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>fail-fabrication-fail</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="fail"><![CDATA[Fail]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Breaking News: iPhoto ’09 does cat facial recognition</title>
		<link>http://zef.me/2009/01/28/breaking-news-iphoto-09-does-cat-facial-recognition/</link>
		<pubDate>Wed, 28 Jan 2009 10:46:20 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2009/01/28/breaking-news-iphoto-09-does-cat-facial-recognition/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Yes people, that’s right. The facial recognition feature in <a href="http://www.apple.com/ilife/iphoto/" target="_blank">iPhoto </a>’09, <a href="http://www.maclife.com/article/news/iphotos_faces_recognizes_cats" target="_blank">recognizes cats</a>.</p>
<p>Why I care, as somebody who’s allergic to cats? Because it’s good news, and that’s the type of news we get too little of these days.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>863</wp:post_id>
		<wp:post_date>2009-01-28 11:46:20</wp:post_date>
		<wp:post_date_gmt>2009-01-28 10:46:20</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>breaking-news-iphoto-09-does-cat-facial-recognition</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="apple"><![CDATA[Apple]]></category>
		<category domain="post_tag" nicename="cats"><![CDATA[Cats]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="iphoto"><![CDATA[Iphoto]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Gmail to get offline support</title>
		<link>http://zef.me/2009/01/28/gmail-to-get-offline-support/</link>
		<pubDate>Wed, 28 Jan 2009 08:19:46 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2009/01/28/gmail-to-get-offline-support/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Over the next few days Google will <a href="http://gmailblog.blogspot.com/2009/01/new-in-labs-offline-gmail.html" target="_blank">roll out the Gmail offline feature</a>. Using <a href="http://gears.google.com/" target="_blank">Google Gears</a>, Gmail will continuously keep a cache of e-mail messages stored locally on your computer so that when you go offline, you still get access to it. The video below shows how it works.</p>
<p>As is suggested all of the features in Gmail will continue working while you’re offline, including search. I wonder, does it cache all of your e-mail locally? That seems like an awful lot of information.</p>
<p>The feature will be available as part of Google Labs (go to Settings &gt; Labs) for users using US or UK English as their language on Gmail. In addition, of course, you need to have <a href="http://gears.google.com/" target="_blank">Google Gears</a> installed. Google Gears is available as a Firefox, IE and Safari extension and is part of Google Chrome by default.</p>
<p><strong>Update:</strong> on the storage issue, <a href="http://venturebeat.com/2009/01/27/google-finally-brings-gmail-and-calendar-offline/" target="_blank">on Venture Beat</a>:</p>
<blockquote>Of course, you have to wonder how Google balances Gmail’s promise that you’ll never need to delete an email again with the requirements of offline support, which involves downloading emails to your desktop. In my case, that could take up to 3 gigabytes of my hard drive. But Google says Gmail Offline only downloads some of your emails: “A good chunk of the inbox, all starred messages, ones you’re drafting, recent sent mail, etc.”</blockquote>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1017</wp:post_id>
		<wp:post_date>2009-01-28 09:19:46</wp:post_date>
		<wp:post_date_gmt>2009-01-28 08:19:46</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>gmail-to-get-offline-support</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="gmail"><![CDATA[Gmail]]></category>
		<category domain="post_tag" nicename="google"><![CDATA[Google]]></category>
		<category domain="post_tag" nicename="google-gears"><![CDATA[Google Gears]]></category>
		<category domain="post_tag" nicename="offline"><![CDATA[Offline]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Imagine… reading your newspaper on your home computer!</title>
		<link>http://zef.me/2009/01/29/imagine-reading-your-newspaper-on-your-home-computer/</link>
		<pubDate>Thu, 29 Jan 2009 14:05:26 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2009/01/29/imagine-reading-your-newspaper-on-your-home-computer/</guid>
		<description></description>
		<content:encoded><![CDATA[
<a href="https://www.youtube.com/v/5WCTn4FljUQ&amp;hl=nl&amp;fs=1"></a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1093</wp:post_id>
		<wp:post_date>2009-01-29 15:05:26</wp:post_date>
		<wp:post_date_gmt>2009-01-29 14:05:26</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>imagine-reading-your-newspaper-on-your-home-computer</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="1981"><![CDATA[1981]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="newspaper"><![CDATA[Newspaper]]></category>
		<category domain="post_tag" nicename="video"><![CDATA[Video]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>MWC: No Android news yet</title>
		<link>http://zef.me/2009/02/17/mwc-no-android-news-yet/</link>
		<pubDate>Tue, 17 Feb 2009 09:06:51 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2009/02/17/mwc-no-android-news-yet/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p><a href="http://www.informationweek.com/blog/main/archives/2009/02/mwc_2009_androi.html" target="_blank">InformationWeek reports</a> that half a day into the Mobile World Coference in Barcelona many phones have been announced, however, none running <a href="http://code.google.com/android/" target="_blank">Google’s Android</a>. 2009 was supposed to be the year of Android, is it actually going to happen?</p>
<blockquote>We’re only halfway through the first day at Mobile World Congress and already things are looking bleak for Android. Many of the major manufacturers already have announced their new products at the show, and not one Android handset has been seen.</blockquote>
<blockquote>Wow.</blockquote>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1155</wp:post_id>
		<wp:post_date>2009-02-17 10:06:51</wp:post_date>
		<wp:post_date_gmt>2009-02-17 09:06:51</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>mwc-no-android-news-yet</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="android"><![CDATA[Android]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="google"><![CDATA[Google]]></category>
		<category domain="post_tag" nicename="mwc"><![CDATA[MWC]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Google Flags Internet as Malware</title>
		<link>http://zef.me/2009/02/01/google-flags-internet-as-malware/</link>
		<pubDate>Sun, 01 Feb 2009 16:38:58 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2009/02/01/google-flags-internet-as-malware/</guid>
		<description></description>
		<content:encoded><![CDATA[
<p>Somebody <a href="http://www.techcrunch.com/2009/01/31/google-flags-whole-internet-as-malware/" target="_blank">at Googlie made littlie mistakie</a>! <a href="http://googleblog.blogspot.com/2009/01/this-site-may-harm-your-computer-on.html" target="_blank">Woopsie</a>!</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1228</wp:post_id>
		<wp:post_date>2009-02-01 17:38:58</wp:post_date>
		<wp:post_date_gmt>2009-02-01 16:38:58</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>google-flags-internet-as-malware</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="fail"><![CDATA[Fail]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="google"><![CDATA[Google]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Anatomy of a Twitter message</title>
		<link>http://zef.me/2009/01/29/anatomy-of-a-twitter-message/</link>
		<pubDate>Thu, 29 Jan 2009 14:44:50 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2009/01/29/anatomy-of-a-twitter-message/</guid>
		<description></description>
		<content:encoded><![CDATA[

<blockquote>RT <a href="http://twitter.com/scobleizer" target="_blank">@scobleizer</a>: having lunch with <a href="http://twitter.com/jasoncalacanis" target="_blank">@jasoncalacanis</a> <a href="http://twitter.com/techcrunch" target="_blank">@TechCrunch</a> and <a href="http://twitter.com/ev" target="_blank">@ev</a> at <a href="http://tinyurl.com/2fqbe" target="_blank">http://tinyurl.com/2fqbe</a> <a href="http://twitpic.com/18ne5" target="_blank">http://twitpic.com/18ne5</a> <a href="http://hashtags.org/tag/lunch" target="_blank">#lunch</a> <a href="http://hashtags.org/tag/lifestream" target="_blank">#lifestream</a>
</blockquote>
<p>— dramatization of an actual twitter message</p>
<p><a href="http://www.3pointd.com/20070306/the-beautiful-simplicity-of-twitter-and-bloghud/" target="_blank">The</a> <a href="http://theflack.blogspot.com/2008/11/sublime-simplicity-of-twitter.html" target="_blank">simplicity</a> <a href="http://bill.cava.us/index.php/2008/12/19/simplicity-kills-twitter/" target="_blank">of</a> <a href="http://thenextweb.com/2009/01/19/4-things-twitter-could-learn-from-jaiku/" target="_blank">twitter</a> is often mentioned as the key factor of its success.</p>
<p><a href="http://www.slate.com/id/2163861/" target="_blank">Slate magazine (April 2007)</a>:</p>
<blockquote>Twitter is the newest assault on your attention span. Once you’ve signed in, the Twitter site immediately prompts you with a question in bold type: “What are you doing?” Below, there’s a blinking cursor and a blank white space where you have 140 characters with which to answer. That’s basically it.</blockquote>
<p>But 2.5 years after its inception, is that still “basically it”? We now have @replies, <a href="http://hashtags.org/" target="_blank">#hashtags</a>, <a href="http://tinyurl.com" target="_blank">tinyurls</a>, <a href="http://www.twitpic.com" target="_blank">twitpics</a>, RT <a href="http://www.retweetrank.com/" target="_blank">retweeting</a> and other protocols that we fit into those 140 characters that pollute messages.</p>
<p><a href="http://blog.wired.com/monkeybites/2007/10/twitters-evan-w.html" target="_blank">Creating something new by taking things away</a> is an interesting idea, but if its users start to re-add all the features that were <em>intentionally</em> left out by <em>encoding it into</em> the messages, does it really work?</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1335</wp:post_id>
		<wp:post_date>2009-01-29 15:44:50</wp:post_date>
		<wp:post_date_gmt>2009-01-29 14:44:50</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>anatomy-of-a-twitter-message</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="twitter"><![CDATA[Twitter]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Give Up and Use Tables</title>
		<link>http://zef.me/2009/02/12/give-up-and-use-tables/</link>
		<pubDate>Thu, 12 Feb 2009 09:00:13 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2009/02/12/give-up-and-use-tables/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Whenever I ask what’s wrong with using tables to build a layout I got an answer involving “semantics”, likely from a <a href="http://www.w3.org/2001/sw/" target="_blank">semantic web hippie</a>. Don’t get me started on the semantic web, they have been trying to that get off the ground for the past 10 years. Not gonna happen. Luckily there are people that <a href="http://giveupandusetables.com" target="_blank">are taking it real</a>:</p>
<blockquote>You know, we’ve all been there. We want to make it work with CSS. But sometimes it’s just not worth the effort. The hacks and conditional comments ruin our clean markup. And we spend hours trying to make a simple layout work. Occasionally, we have to remind ourselves that we’ve done enough and it’s time to move on.</blockquote>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1457</wp:post_id>
		<wp:post_date>2009-02-12 10:00:13</wp:post_date>
		<wp:post_date_gmt>2009-02-12 09:00:13</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>give-up-and-use-tables</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="css"><![CDATA[CSS]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="layout"><![CDATA[Layout]]></category>
		<category domain="post_tag" nicename="tables"><![CDATA[Tables]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Mr. Digg on how to be #2 like him</title>
		<link>http://zef.me/2009/01/26/mr-digg-on-how-to-be-2-like-him/</link>
		<pubDate>Mon, 26 Jan 2009 10:18:31 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2009/01/26/mr-digg-on-how-to-be-2-like-him/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Micheal Arringtong was nice enough to give some room to <a href="http://www.kevinrose.com" target="_blank">Kevin Rose</a> (of <a href="http://www.digg.com" target="_blank">Digg</a> fame) to <a href="http://www.techcrunch.com/2009/01/25/kevin-rose-10-ways-to-increase-your-twitter-followers/" target="_blank">share his insights</a> into how to become popular on Twitter (Kevin is currently the #2 most followed person). The highlights:</p>
<ol>
<li>
<em>Let your followers retweet you.</em> Retweeting is copying somebody else’s twitter message on your own twitter stream. Personally I think retweeting is fairly annoying the way it’s done right now. Often you have to pay attention to notice if somebody’s retweeting or has these brilliant thoughts him or herself. Also, as somebody who has been retweeted a few time, retweeters are really good at <a href="http://twitter.com/loic/statuses/1145399621" target="_blank">slightly altering the retweeted message</a> (notice the difference?).</li>
<li>
<em>Fill out your bio</em>. Makes sense. Updated mine.</li>
<li>
<em>Link it up.</em> i.e. spam your twitter username wherever you can. Mine is <a href="http://twitter.com/zef" target="_blank">zef</a> by the way.</li>
<li>
<em>Look at the </em><a href="http://twitterholic.com" target="_blank"><em>top twitter users</em></a><em> and watch how they tweet.</em> For instance, talk like the <a href="http://twitter.com/BarackObama" target="_blank">#1 on twitter</a>.</li>
</ol>
<p>And there’s <a href="http://www.techcrunch.com/2009/01/25/kevin-rose-10-ways-to-increase-your-twitter-followers/" target="_blank">6 more gems</a>. Thank you Kevin.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1509</wp:post_id>
		<wp:post_date>2009-01-26 11:18:31</wp:post_date>
		<wp:post_date_gmt>2009-01-26 10:18:31</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>mr-digg-on-how-to-be-2-like-him</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="twitter"><![CDATA[Twitter]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Sync your iPhone or iPod with Google Calendar and Contacts</title>
		<link>http://zef.me/2009/02/09/sync-your-iphone-or-ipod-with-google-calendar-and-contacts/</link>
		<pubDate>Mon, 09 Feb 2009 20:08:25 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2009/02/09/sync-your-iphone-or-ipod-with-google-calendar-and-contacts/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Google finally <a href="http://googleblog.blogspot.com/2009/02/calendar-and-contact-syncing-for-iphone.html" target="_blank">launches push synchronization for the iPhone and iPod touch</a>:</p>
<blockquote>For iPhone and Windows Mobile devices, Google Sync allows you to get your Gmail contacts and Google Calendar events onto your phone. Sync uses push technology, which means that any changes you make to your calendar or contacts from the browser or phone will be reflected on your device within minutes. For phones that support SyncML, the tool will allow you to get your Gmail contacts onto your phone. For all of these devices, synchronization happens automatically over the air, without having to manually sync your phone. The connection is always on, which means your information is always up-to-date, no matter where you are or what you’re doing.</blockquote>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1580</wp:post_id>
		<wp:post_date>2009-02-09 21:08:25</wp:post_date>
		<wp:post_date_gmt>2009-02-09 20:08:25</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>sync-your-iphone-or-ipod-with-google-calendar-and-contacts</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="google"><![CDATA[Google]]></category>
		<category domain="post_tag" nicename="iphone"><![CDATA[iPhone]]></category>
		<category domain="post_tag" nicename="ipod"><![CDATA[iPod]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Scaling Digg</title>
		<link>http://zef.me/2009/02/12/scaling-digg/</link>
		<pubDate>Thu, 12 Feb 2009 08:54:13 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2009/02/12/scaling-digg/</guid>
		<description></description>
		<content:encoded><![CDATA[
<p>I love stories with impressive stats and techniques about how to scale web applications. Here’s a good one about <a href="http://highscalability.com/scaling-digg-and-other-web-applications" target="_blank">how Digg scales</a>. Interesting is that they use <a href="http://memcachedb.org/" target="_blank">MemcacheDB</a> (note their flashy website) for storing much of their data. MemcacheDB is a key-value store, <a href="http://zef.me/2009/01/the-hashtable-is-the-database/" target="_blank">notice the trend</a>?</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1744</wp:post_id>
		<wp:post_date>2009-02-12 09:54:13</wp:post_date>
		<wp:post_date_gmt>2009-02-12 08:54:13</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>scaling-digg</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="digg"><![CDATA[Digg]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="scaling"><![CDATA[Scaling]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>They met on a YaBB board</title>
		<link>http://zef.me/2009/08/18/they-met-on-a-yabb-board/</link>
		<pubDate>Tue, 18 Aug 2009 08:00:55 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2009/08/18/they-met-on-a-yabb-board/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Last week, I received the following e-mail:</p>
<blockquote>Hello Zef,</blockquote>
<blockquote>I am officiating a wedding this coming weekend and I’ll be thanking<br>you in my speech. :)</blockquote>
<blockquote>My two friends first met on a YaBB message board in 2001 and I’m<br>giving the audience a brief history of how they met (going all the way<br>back to 1958 when DARPA was created). It’s really not as nerdy as it<br>sounds, or maybe it is, but it’s not a room full of computer-y people.</blockquote>
<blockquote>Anyway, I know you’ve long moved past the YaBB days, but I thought I’d<br>let you know.</blockquote>
<blockquote><a href="http://www.urbanhonking.com/amodernwedding/" target="_blank">http://www.urbanhonking.com/amodernwedding/</a></blockquote>
<blockquote>-Mikey</blockquote>
<p>Yesterday, I received the follow-up:</p>
<blockquote>Hey Zef,</blockquote>
<blockquote>Here is a video of my speech (it’s long!):</blockquote>
<blockquote><a href="http://www.urbanhonking.com/kmikeym/2009/08/question-27-complete.html" target="_blank">http://www.urbanhonking.com/kmikeym/2009/08/question-27-complete.html</a></blockquote>
<blockquote>I mention you at 4:39 and again at the end.</blockquote>
<blockquote>And then I used your email as a toast later. :)</blockquote>
<blockquote>Photos are just starting to pop up on Flickr with the tag<br>“amodernwedding”. Feel free to use whatever you want!</blockquote>
<blockquote>-Mikey</blockquote>
<p>My first reaction was: why am I being contacted about this? I started <a href="http://www.yabbforum.com" target="_blank">YaBB</a> 9 years ago and left a year later. I have not been involved at all for 8 years. Plus, these people, who I never knew existed, met on a site I never even heard of: <a href="http://krec.com" target="_blank">krec.com</a>. But I guess this is the power of releasing some software for free to the world to use: you don’t know what’s going to happen to it, you don’t know who’s going to use it and you don’t know who’s going to meet through the use of it.</p>
<p>In his speech, Mikey lists a number of events that lead to Andrew and Ritchey meeting. They met on a forum that was, then, powered by YaBB, which in turn was a project started by me. Would they not have met if I hadn’t started YaBB? Probably they would, <a href="http://en.wikipedia.org/wiki/Butterfly_effect" target="_blank">but you can never be sure</a>.</p>
<p>Congratulations Andrew and Ritchey!</p>
<p>Exactly a month from today I am going to get married myself. Although we were not originally introduced through it, initially much of our relationship developed through the use of <a href="http://www.skype.com" target="_blank">Skype</a>. Maybe I should send the original founders an e-mail.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>87</wp:post_id>
		<wp:post_date>2009-08-18 10:00:55</wp:post_date>
		<wp:post_date_gmt>2009-08-18 08:00:55</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>they-met-on-a-yabb-board</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="important"><![CDATA[Important]]></category>
		<category domain="post_tag" nicename="yabb"><![CDATA[Yabb]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>The truth about Amsterdam</title>
		<link>http://zef.me/2009/08/19/the-truth-about-amsterdam/</link>
		<pubDate>Wed, 19 Aug 2009 14:38:40 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2009/08/19/the-truth-about-amsterdam/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>One of my fond memories of my visit to the US was watching an evening of <a href="http://www.foxnews.com/oreilly/" target="_blank">The O’Reilly Factor</a> on Fox News, in which Bill O’Reilly gets to the bottom of things, by interviewing angry blonde women with PhDs.</p>
<p>Here’s a nice fragment about the anarchy and out-of-control city named Amsterdam, you may have heard of it. Followed by a debunk of that same fragment.</p>
<p>Plus a response to this response from Bill himself, especially the last few seconds are fantastic (“Statistics work differently in The Netherlands”):</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>293</wp:post_id>
		<wp:post_date>2009-08-19 16:38:40</wp:post_date>
		<wp:post_date_gmt>2009-08-19 14:38:40</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-truth-about-amsterdam</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="tv"><![CDATA[TV]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>The opposite of abs()</title>
		<link>http://zef.me/2009/08/27/the-opposite-of-abs/</link>
		<pubDate>Thu, 27 Aug 2009 13:04:49 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2009/08/27/the-opposite-of-abs/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>A <a href="http://us.php.net/manual/en/function.abs.php#58508" target="_blank">gem from the comments on the (otherwise pretty good) PHP manual</a> on the abs() function:</p>
<blockquote>Sometimes you may want to do the opposite of abs(): turn a positive number into a negative.</blockquote>
<blockquote>&lt;?php</blockquote>
<blockquote>function turn_neg ($num) {<br>return $num — $num * 2;<br>}</blockquote>
<blockquote>?&gt;<br><br>But this can create errors when you put a negative number inside…</blockquote>
<blockquote>turn_neg (-2) returns 6.</blockquote>
<blockquote>&lt;?php</blockquote>
<blockquote>turn_neg (-2); // 6.</blockquote>
<blockquote>?&gt;<br><br>The solution is to make another function to determine if the number is negative or not.</blockquote>
<blockquote>&lt;?php</blockquote>
<blockquote>function is_neg ($num) {<br>return $num &lt; 0;<br>}</blockquote>
<blockquote>function turn_neg ($num) {<br>if (is_neg ($num)) {<br>return $num — $num * 2;<br>} else {<br>return abs ($num);<br>}<br>}</blockquote>
<blockquote>turn_neg (2); // -2<br>turn_neg (-2); // 2</blockquote>
<blockquote>?&gt;<br><br>Or, if the number is not negative, you could also return false.</blockquote>
<p>Although this is a clear demonstration of little reflection on what is really the simplest way of achieving this, I can somehow appreciate the enthusiasm with which the author describes his “inventive” solution. It works, but a simple -1*abs($num) would have worked just as well.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>305</wp:post_id>
		<wp:post_date>2009-08-27 15:04:49</wp:post_date>
		<wp:post_date_gmt>2009-08-27 13:04:49</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-opposite-of-abs</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="fail"><![CDATA[Fail]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>NoSQL DB Comparison</title>
		<link>http://zef.me/2009/08/10/nosql-db-comparison/</link>
		<pubDate>Mon, 10 Aug 2009 15:27:06 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2009/08/10/nosql-db-comparison/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Just found this great <a href="http://bjclark.me/2009/08/04/nosql-if-only-it-was-that-easy/" target="_blank">NoSQL db comparison</a> with an, I think, dead-on conclusion:</p>
<blockquote>So, does RDBMS scale? I would say the answer is: not any worse than lots of other things. Most of what doesn’t scale in a RDBMS is stuff people don’t use that often anyway. And does NoSQL scale: a couple solutions do, most don’t. You might even argue that it’s just as easy to scale mysql (with sharding via mysql proxy) as it is to shard some of these NoSQL dbs. And I think it’s a pretty far leap to declare the RDBMS dead.</blockquote>
<blockquote>The real thing to point out is that if you are being held back from making something super awesome because you can’t choose a database, you are doing it wrong. If you know mysql, just used it. Optimize when you actually need to. Use it like a k/v store, use it like a rdbms, but for god sake, build your killer app! None of this will matter to most apps. Facebook still uses MySQL, a lot. Wikipedia uses MySQL, a lot. FriendFeed uses MySQL, a lot. NoSQL is a great tool, but it’s certainly not going to be your competitive edge, it’s not going to make your app hot, and most of all, your users won’t give a shit about any of this.</blockquote>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>313</wp:post_id>
		<wp:post_date>2009-08-10 17:27:06</wp:post_date>
		<wp:post_date_gmt>2009-08-10 15:27:06</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>nosql-db-comparison</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="important"><![CDATA[Important]]></category>
		<category domain="post_tag" nicename="nosql"><![CDATA[NoSQL]]></category>
		<category domain="post_tag" nicename="scaling"><![CDATA[Scaling]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Tr.im-ming your way to sainthood</title>
		<link>http://zef.me/2009/08/17/tr-im-ming-your-way-to-sainthood/</link>
		<pubDate>Mon, 17 Aug 2009 19:47:25 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2009/08/17/tr-im-ming-your-way-to-sainthood/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>When I was 16 I ran a simple website listing free stuff available on the internet. Free stickers, free webspace, free e-mail. My site wasn’t the only one doing it, there were many others. Of course, I borrowed stuff listen on other sites, which was not always appreciated. One of my competitors felt threatened, and started a crusade against me. Wherever he could he badmouthed my websites and removed links.</p>
<p>This made quite an impression on me. I was about 16 years old. Somebody actually cared what I did. I felt important. I needed to act!</p>
<p>But eventually I folded my website, because I realized that neither I, nor my simple website wasn’t all that important.</p>
<p>I was 16.</p>
<p>I was reminded of this when I read the latest installment of the <a href="http://blog.tr.im" target="_blank">tr.im</a> soap oprah, going on their blog and around it. In case you were on holidays, don’t care about twitter, or, frankly, have a life: tr.im is a URL shortening service. Long URL in, short URL out. Why is that interesting? Good question.</p>
<p>A week or so ago, tr.im decided it would <a href="http://blog.tr.im/post/159369789/tr-im-r-i-p" target="_blank">fold, because the big bad twitter and tr.im’s competitor bit.ly were out to get it</a>. Twitter decided bit.ly was the chosen URL shortener and pushed tr.im into a corner. Tr.im, would fold, all existing tr.im shortened URLs would continue to work until the end of the year. The <a href="http://www.techmeme.com/090809/p20#a090809p20" target="_blank">blogosphere went wild</a>. Why? Because everybody realized that URL shorteners were in fact a single point of failure. If a URL shortener goes down, all of a sudden thousands of links, in particular on Twitter break.</p>
<p>All the attention clearly gave the tr.im people a warm feeling inside. People cared about them, they concluded. They must act! And they did, they brought <a href="http://blog.tr.im/post/160697842/tr-im-resurrected" target="_blank">tr.im back</a>. But it didn’t make that much of an impact, so today they took it a step further.</p>
<p><a href="http://blog.tr.im/post/165049236/tr-im-to-be-community-owned" target="_blank">“tr.im to be community owned”</a>:</p>
<blockquote>Therefore, starting today, tr.im will begin its migration into the public domain, becoming 100% community-owned, operated, and developed.</blockquote>
<p>This whole announcement is full of pledges, and stories about how bit.ly tried to buy them for only $10,000 and that this was clearly a PR stunt, and even if bit.ly would eventually get to them the shortened URLs would be freed. Because tr.im is going to save the Internets, by giving its most valuable asset to you: itself. Its data and its source code, ensuring that you can enjoy the tr.im, forever. Guaranteed.</p>
<p>Tr.im, seriously, you are just an URL shortening service. There are dozens more like you. You are not special. Do not think what you do has that much of an impact on the world, even if you get a little bit of attention. Just run your little service, or shut it down, but don’t keep making such a big deal out of yourself.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>354</wp:post_id>
		<wp:post_date>2009-08-17 21:47:25</wp:post_date>
		<wp:post_date_gmt>2009-08-17 19:47:25</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>tr-im-ming-your-way-to-sainthood</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="important"><![CDATA[Important]]></category>
		<category domain="post_tag" nicename="twitter"><![CDATA[Twitter]]></category>
		<category domain="post_tag" nicename="url-shortening"><![CDATA[Url Shortening]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>The 10th dimension</title>
		<link>http://zef.me/2009/08/19/the-10th-dimension/</link>
		<pubDate>Wed, 19 Aug 2009 07:19:15 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2009/08/19/the-10th-dimension/</guid>
		<description></description>
		<content:encoded><![CDATA[
<p>(via <a href="http://www.boingboing.net/2009/08/18/visualizing-up-to-te.html" target="_blank">BoingBoing</a>)</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>467</wp:post_id>
		<wp:post_date>2009-08-19 09:19:15</wp:post_date>
		<wp:post_date_gmt>2009-08-19 07:19:15</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-10th-dimension</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="important"><![CDATA[Important]]></category>
		<category domain="post_tag" nicename="video"><![CDATA[Video]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>How to defeat the KKK</title>
		<link>http://zef.me/2009/08/31/how-to-defeat-the-kkk/</link>
		<pubDate>Mon, 31 Aug 2009 07:39:42 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2009/08/31/how-to-defeat-the-kkk/</guid>
		<description></description>
		<content:encoded><![CDATA[

<a href="https://www.youtube.com/v/TBwIRq_hmjg&amp;color1=0xb1b1b1&amp;color2=0xcfcfcf&amp;hl=en&amp;feature=player_embedded&amp;fs=1"></a><p>(Via <a href="http://feedproxy.google.com/~r/boingboing/iBag/~3/D-VQD1Ycymw/howto-defeat-the-kla.html" target="_blank">BoingBoing</a>)</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>471</wp:post_id>
		<wp:post_date>2009-08-31 09:39:42</wp:post_date>
		<wp:post_date_gmt>2009-08-31 07:39:42</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>how-to-defeat-the-kkk</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="video"><![CDATA[Video]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>The perfect X</title>
		<link>http://zef.me/2009/08/20/the-perfect-x/</link>
		<pubDate>Thu, 20 Aug 2009 07:38:20 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2009/08/20/the-perfect-x/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>One of my weaknesses is to always wanting to find the perfect X. Preferably X can be used solve every X related problem and situation.</p>
<p>Recurring X’s for me are operating systems, mobile phones and programming languages.</p>
<p>I find it terribly hard to be pragmatic and admit that, yes, PHP is far from perfect, but often times it’s probably the best choice. I’ve been using <a href="http://www.wordpress.org" target="_blank">WordPress</a> for years and although the bits of code that I have looked at (mostly in themes) want me to scratch my eyes out, it works; it operates thousands of websites perfectly.</p>
<p>Yes, Linux is a great operating system for servers, but given the choice between Mac and Linux for the desktop, the choice is harder to make. I like consistency, I like to use the same commands on my desktop and server, not having to know about all the odd different ways to configure Apache on Linux vs. the Mac. But with a couple of attempts to switch to Linux behind me, pragmatically I know the Mac just works. It does not require tweaking, reloading of drivers after hibernation and running odd scripts to get a bluetooth mouse running.</p>
<p>Yes, the iPhone is a slick looking phone, but to develop for it you need an arcane language such as Objective-C or plain C. Some people love it, but after having a good look at the environment I find it rather insulting. So much has happened in the world <a href="http://en.wikipedia.org/wiki/Objective-C" target="_blank">since 1986</a>, and all Objective-C has to show for it is property support and garbage collection, which were finally added to version 2.0 of the language recently. Except, garbage collection is disabled on the iPhone. We have come too far to go back to manual memory management again. Although, if you’re developing games, this is probably still the world you live in. On Android, although the phones are not very compelling at this point, you can develop using Java, or even more modern languages such as <a href="http://www.scala-lang.org/" target="_blank">Scala</a>. But, pragmatically I chose to buy an iPhone, because, frankly, I’m not so sure I’m going to develop mobile applications anyway. And if I will, they may just be web applications.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>697</wp:post_id>
		<wp:post_date>2009-08-20 09:38:20</wp:post_date>
		<wp:post_date_gmt>2009-08-20 07:38:20</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-perfect-x</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Exit iPhone Mail: GPush is here</title>
		<link>http://zef.me/2009/08/18/exit-iphone-mail-gpush-is-here/</link>
		<pubDate>Tue, 18 Aug 2009 08:42:57 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2009/08/18/exit-iphone-mail-gpush-is-here/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>I have owned an iPhone for about a month now and I’m very happy with it. Its mail application is acceptable, but it’s not very Gmail-esque. It does not have the conversation view, archiving e-mail means having to move it to “All mail”, which is a bit annoying. Ergo, it works, but it’s not perfect. The Gmail web application on the iPhone is very good, it works just like the desktop Gmail web client and it’s fairly responsive for a web app, it’s only missing one thing: the ability to check for new mails every x minutes. The iPhone mail app can do that, but of course, a web application cannot.</p>
<p><a href="http://www.readwriteweb.com/archives/gpush_iphone_push_notifications_for_your_gmail.php" target="_blank">Enter GPush</a> (<a href="http://itunes.apple.com/WebObjects/MZStore.woa/wa/viewSoftware?id=321483013&amp;mt=8" target="_blank">iTunes link</a>). This $0.99 application enables push e-mail on your iPhone. You enter your Gmail credentials and whenever you receive a new e-mail, within seconds you will receive a push notification on your phone. You can then open a mail application (be it the native Mail client, or the Gmail web app) to actually read the e-mail. This may even save battery life, because your phone no longer has to poll for new e-mail every half hour, hour or whatever it’s set to.</p>
<p>To test if the Gmail web app makes a good mail application replacement, I got rid of the native Mail application from my iPhone dock, and replaced it with a bookmark link to Gmail.</p>
<p>I’m not a privacy or security nut, but one concern is that you do have to give your Gmail credentials to the GPush service, which is maintaining an persistent connection to Gmail IMAP server through it. You hack the GPush service, you hack helluva lot of Gmail accounts.</p>
<p><strong>Update:</strong> After a few hours of usage, GPush seems to have stopped pushing e-mail to my iPhone. Until that’s fixed I found an alternative: <a href="http://dopushmail.com/" target="_blank">PushMail</a>. It works a bit differently and is not specific to Gmail. The idea is to automatically forward e-mail you want pushed to your phone to a special @dopushmail.com address. The nice thing about this is that you can create filters in Gmail to only push particular e-mails to your phone. I have been using it for a few minutes, and so far it’s working. Let’s keep our fingers crossed.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>784</wp:post_id>
		<wp:post_date>2009-08-18 10:42:57</wp:post_date>
		<wp:post_date_gmt>2009-08-18 08:42:57</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>exit-iphone-mail-gpush-is-here</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="gmail"><![CDATA[Gmail]]></category>
		<category domain="post_tag" nicename="important"><![CDATA[Important]]></category>
		<category domain="post_tag" nicename="iphone"><![CDATA[iPhone]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>New Google Reader features</title>
		<link>http://zef.me/2009/08/13/new-google-reader-features/</link>
		<pubDate>Thu, 13 Aug 2009 07:24:36 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2009/08/13/new-google-reader-features/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p><a href="http://www.google.com/reader" target="_blank">Google Reader</a> <a href="http://googlereader.blogspot.com/2009/08/flurry-of-features-for-feed-readers.html" target="_blank">added some nifty features</a> just now, which are very welcome to those who still read RSS feeds, as I do, occasionally. It’s a bit 2007, I know. First, each item now has a “Send to” option, to easily link to a post on various social networks, e.g. facebook and twitter. I tested the feature with twitter in the latest Chromium alpha and Safari 4, but it does not seem to work. On Chromium (a very alpha product) nothing appears to happen, in Safari it complains about a popup being blocked.</p>
<p>Another nice feature is the ability to automatically mark all items older than a certain amount of time as read. If you’re still reading RSS (or Atom for that matter) feeds, give it a whirl.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>805</wp:post_id>
		<wp:post_date>2009-08-13 09:24:36</wp:post_date>
		<wp:post_date_gmt>2009-08-13 07:24:36</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>new-google-reader-features</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="google"><![CDATA[Google]]></category>
		<category domain="post_tag" nicename="important"><![CDATA[Important]]></category>
		<category domain="post_tag" nicename="rss"><![CDATA[RSS]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Chromium on Mac becomes usable</title>
		<link>http://zef.me/2009/08/10/chromium-on-mac-becomes-usable/</link>
		<pubDate>Mon, 10 Aug 2009 07:58:40 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2009/08/10/chromium-on-mac-becomes-usable/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>I’m writing this using the latest <a href="http://build.chromium.org/buildbot/snapshots/chromium-rel-mac/" target="_blank">Mac build from Google Chrome</a>.</p>
<p>A lot has happened since <a href="http://zef.me/archives/2009/02/13/mac-chrome-renders-first-page/" target="_blank">my last post</a>. It is much more stable, flash works, although not always, passwords are saved correctly. Clearly, the Mac version of Chrome is getting ready for prime time. One thing that does not seem to work yet, ironically, is Google Gears support. I cannot use offline Gmail yet, it seems. <strong>Update:</strong> Gears seems to work fine using Google Reader.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>854</wp:post_id>
		<wp:post_date>2009-08-10 09:58:40</wp:post_date>
		<wp:post_date_gmt>2009-08-10 07:58:40</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>chromium-on-mac-becomes-usable</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="chrome"><![CDATA[Chrome]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="google"><![CDATA[Google]]></category>
		<category domain="post_tag" nicename="important"><![CDATA[Important]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Jumping Clouds</title>
		<link>http://zef.me/2009/09/03/jumping-clouds/</link>
		<pubDate>Thu, 03 Sep 2009 11:28:10 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2009/09/03/jumping-clouds/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>I have been a <a href="http://www.dreamhost.com" target="_blank">Dreamhost</a> customer for a number of years now, but because I’d like a bit more control over the versions of software (PHP, MySQL, memcache etc.) I use I decided to move to a VPS again. There are many good ones out there, but I decided to go with the <a href="http://www.rackspacecloud.com" target="_blank">Rackspace Cloud</a>. Attempting to compete with Amazon AWS, Rackspace is rolling out a competing cloud platform. Currently it consists of <a href="http://www.rackspacecloud.com/cloud_hosting_products/servers" target="_blank">Cloud Servers</a>, <a href="http://www.rackspacecloud.com/cloud_hosting_products/sites" target="_blank">Cloud Sites</a> and <a href="http://www.rackspacecloud.com/cloud_hosting_products/files" target="_blank">Cloud Files</a>, but given the fact that they hired the developer of <a href="http://incubator.apache.org/cassandra/" target="_blank">Cassandra</a>, a Cloud Database might be forthcoming.</p>
<p><strong>Cloud Servers</strong> is what I’m using now, it basically allows you to cheaply spin up servers (virtual private servers, to be precise). You get a choice of a number of Linux distributions that you have to manage yourself. Similar to Amazon, you pay per hour for these servers. One big difference is that the lowest end <a href="http://aws.amazon.com/ec2/" target="_blank">Amazon EC2</a> server costs roughly $70/month and includes 1.7 GB of memory and 160 GB of hard drive space. <a href="http://www.rackspacecloud.com/cloud_hosting_products/files/pricing" target="_blank">Cloud Server configurations</a> start at 256 MB of RAM (with 10 GB of hard drive space) which cost roughly $10/month, and configurations upwards to 15 GB of RAM (with 620GB of hard drive space) that costs $700/month. The nice thing is that you can easily up and downgrade your servers without the needs to reinstall. You can make back-ups which (soon) will be stored on Cloud Files (see below), when you instantiate a new machine, you can start it up from one of your back-upped images. Of course a $10/month VPS is <em>very</em> competitive with regular hosting, especially considering the fact that you get root access and thus can install whatever you want. And, because you only pay per hour, you can even just try it for a little while to see if you like it.</p>
<p><strong>Cloud Sites</strong> is a more managed solution than Cloud Servers which starts at $100/month. It is mainly aimed at high-traffic sites, such as <a href="http://www.gdgt.com" target="_blank">gdgt.com</a> (which is hosted by them). Sites hosted on Cloud Sites are in fact hosted on a large number of machines, a number that is dynamically expanded as traffic increases. The nice thing about this solution is that you don’t have to worry about scaling your website yourself. The disadvantage is that the cost is higher and you do not get root access to the servers.</p>
<p><strong>Cloud Files</strong> is a direct competitor of <a href="http://aws.amazon.com/s3/" target="_blank">Amazon S3 </a>(Simple Storage Service). You upload your files there, store them for $0.15/month and they are distributed over Limelight’s content-delivery network. Outgoing bandwidth through this CDN costs $0.22/GB.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>857</wp:post_id>
		<wp:post_date>2009-09-03 13:28:10</wp:post_date>
		<wp:post_date_gmt>2009-09-03 11:28:10</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>jumping-clouds</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="amazon"><![CDATA[Amazon]]></category>
		<category domain="post_tag" nicename="cloud"><![CDATA[Cloud]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="rackspace"><![CDATA[Rackspace]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Damn Squirrels!</title>
		<link>http://zef.me/2009/08/14/damn-squirrels/</link>
		<pubDate>Fri, 14 Aug 2009 08:30:18 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2009/08/14/damn-squirrels/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>They always crash photos when you pose in front of marvelous scenery.</p>
<p>(from <a href="http://photography.nationalgeographic.com/photography/enlarge/squirrel-portrait-banff.html" target="_blank">National Geographic</a>.)</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>994</wp:post_id>
		<wp:post_date>2009-08-14 10:30:18</wp:post_date>
		<wp:post_date_gmt>2009-08-14 08:30:18</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>damn-squirrels</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="important"><![CDATA[Important]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Revival</title>
		<link>http://zef.me/2009/07/29/revival/</link>
		<pubDate>Wed, 29 Jul 2009 10:05:05 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2009/07/29/revival/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Yes, after a few months I decided it was a good idea to revive my website. And to do it properly I moved all of the content that I posted on ZefHemel.com and Zef.me before over into one website. Also, all links pointing to ZefHemel.com now redirect to the correct post on Zef.me. I also added a <a href="/publications" target="_blank">Publications</a> page, which my boss told me to do.</p>
<p>Who knows, I might in fact post some fresh content soon! But let’s not get too crazy just yet. Let’s first have lunch.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1009</wp:post_id>
		<wp:post_date>2009-07-29 12:05:05</wp:post_date>
		<wp:post_date_gmt>2009-07-29 10:05:05</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>revival</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="important"><![CDATA[Important]]></category>
		<category domain="post_tag" nicename="meta"><![CDATA[Meta]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Slumber party</title>
		<link>http://zef.me/2009/04/20/slumber-party/</link>
		<pubDate>Mon, 20 Apr 2009 07:18:55 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2009/04/20/slumber-party/</guid>
		<description></description>
		<content:encoded><![CDATA[
<p>It’s been quiet <a href="http://zef.me" target="_blank">here</a>. That’s because the overhead of <a href="http://twitter.com/zef" target="_blank">this place</a> is just so much lower. And less is more, people talk too much anyway. And it’s even accessible <a href="https://twitter.com/signup" target="_blank">if you’re not on it</a>, by <a href="http://twitter.com/statuses/user_timeline/1444261.rss" target="_blank">subcribing to this</a>.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1191</wp:post_id>
		<wp:post_date>2009-04-20 09:18:55</wp:post_date>
		<wp:post_date_gmt>2009-04-20 07:18:55</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>slumber-party</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="twitter"><![CDATA[Twitter]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>push-notify: Playing with iPhone push notifications</title>
		<link>http://zef.me/2009/08/19/push-notify-playing-with-iphone-push-notifications/</link>
		<pubDate>Wed, 19 Aug 2009 11:06:17 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2009/08/19/push-notify-playing-with-iphone-push-notifications/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p><a href="http://dopushmail.com/" target="_blank">PushMail</a> is a nice, reasonably priced (2.49 euro, so I guess that’s about $2.99) iPhone application that is intended to realize push mail notifications (see <a href="http://zef.me/2037/exit-iphone-mail-gpush-is-here" target="_blank">update of my GPush post</a>). It does so by giving you an @dopushmail.com e-mail address. Any e-mail sent or forwarded to that address will not be stored, but rather pushed to your iPhone.</p>
<p>Any mail you send to it.</p>
<p>So I wrote this little bash script, called push-notify:</p>
<blockquote>#!/bin/bash</blockquote>
<blockquote>echo | mail -s “$*” myid@dopushmail.com</blockquote>
<p>chmod’ed it +x so I could execute it. Now, I can run it like this:</p>
<blockquote>push-notify This is a test</blockquote>
<p>And “This is a test” will appear on your iPhone. Of course, this has many applications. If you have a long batch job or compilation running and want to know when it has finished executing, you just run the command like this:</p>
<blockquote>make; push-notify Done with compilation</blockquote>
<p>and you’ll get a notification when it’s done. With some notification you could probably also receive a notification when something went wrong, when a server reported some exception. As long as you can invoke the push-notify script when it happens, you’ll be notified within seconds.</p>
<p>Powerful stuff.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1236</wp:post_id>
		<wp:post_date>2009-08-19 13:06:17</wp:post_date>
		<wp:post_date_gmt>2009-08-19 11:06:17</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>push-notify-playing-with-iphone-push-notifications</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="important"><![CDATA[Important]]></category>
		<category domain="post_tag" nicename="iphone"><![CDATA[iPhone]]></category>
		<category domain="post_tag" nicename="push"><![CDATA[Push]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Blast from the past: Adlez</title>
		<link>http://zef.me/2009/08/17/blast-from-the-past-adlez/</link>
		<pubDate>Mon, 17 Aug 2009 11:24:23 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2009/08/17/blast-from-the-past-adlez/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>While talking to a colleague today about programming we did when we were younger, I all of a sudden remembered about a game that I developed with a friend when we were about 10–12 14–16 years old: Adlez. A puzzler written in Turbo Pascal, with pretty much everything developed from scratch: the VGA graphics library was written by us (I wrote the PutPixel implementation in assembly even), the fonts were “designed” by us. The graphics were made using a program called PowerPaint, which was a DOS Paint program, also developed by us (using the same graphics library). The cool thing is that it still runs, using <a href="http://www.dosbox.com/" target="_blank">DOSBox</a>. So, if you feel like giving it a go: <a href="http://zef.me/wp-content/uploads/2009/08/adlez.zip" target="_blank">adlez.zip</a>. There’s quite a few levels in there. For those, who’re not convinced to download and play it yet: here are some screenshots:</p>
<p>(in the picture below, you are the little guy standing next to the rock (with the red hat).</p>
<p>Those were the days…</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1362</wp:post_id>
		<wp:post_date>2009-08-17 13:24:23</wp:post_date>
		<wp:post_date_gmt>2009-08-17 11:24:23</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>blast-from-the-past-adlez</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="important"><![CDATA[Important]]></category>
		<category domain="post_tag" nicename="nostalgia"><![CDATA[Nostalgia]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>The beauty of ugliness</title>
		<link>http://zef.me/2009/08/25/the-beauty-of-ugliness/</link>
		<pubDate>Tue, 25 Aug 2009 19:54:21 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2009/08/25/the-beauty-of-ugliness/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Since I and my colleagues are basically full-time <a href="http://www.webdsl.org" target="_blank">programming language designer/implementers</a>, we have a lot of discussion related to language design and aesthetics. I have always cared about the look and feel of a language and framework: does the code look pretty, is its syntax concise, clear and consistent, does it allow to nicely separate concerns. This is not the case for all of my colleagues, some are more interested in putting the functionality into the language than whether it’s pretty or “proper” or not.</p>
<p>Example. As part of WebDSL, we have a data-modeling language, i.e. a way to define your application’s entities and their relationships which are persisted to a database. We also have a query language (a subset of <a href="http://docs.jboss.org/hibernate/stable/core/reference/en/html/queryhql.html" target="_blank">HQL</a>), which works fine, but is sometimes a bit verbose. For instance, to retrieve a user with a certain e-mail address, you would have to write a query like select u from User as u where u.email = ~email. A query like this always returns a list of results, of which you then have to check if the list has 1 element in it, and if so, pull that out as your User of choice. These things are so common that we wanted a quick way to to retrieve a single entity with a certain property. My colleague therefore extended the WebDSL compiler to automatically generate global (we don’t have namespaces) functions with the following naming scheme: find<em>X</em>by<em>Y</em>, where <em>X</em> is an entity and <em>Y</em> is a string (or compatible) property. So, in this case a findUserByEmail function would be generated, reducing the need for this code:</p>
<p>var results : List&lt;User&gt; := select u from User as where u.email = ~email;<br>var u : User := null;<br>if(results.length == 1) {<br>u := results.get(0);<br>}</p>
<p>to</p>
<p>var u : User := findUserByEmail(email);</p>
<p>Clearly, this is an improvement in terms of reduction in code, however it also very much clutters our global namespace with functions that are “magically” created when you define new entities and properties. Although I have no alternative solution that’s much better, other than maybe using the User namespace to define the function on, e.g. User.findByEmail(email), my initial reaction was: yuck. It made an ugly, hacky impression on me.</p>
<p>But it works. People use and are happy with it. Ugly or not, it gets the job done. Maybe that’s really just enough. Maybe we (or rather: I) should not care about aesthetics so much.</p>
<p>Today I listened to a part of the <a href="http://techportal.ibuildings.com/2009/08/17/php-people-code-ideas/" target="_blank">keynote of a Dutch PHP conference</a> (don’t worry, the keynote is in English) and I realized there are basically two choices here: attempt to design everything “correctly” without mistake, or try out new ideas and evolve them over time. I always assumed and hoped I could do the former, but of course, you can’t. In contrast, PHP is a rather extreme example of the latter. As a language it’s not pretty, but it’s practical. It works. And it’s being used. A lot. Don’t people care it’s ugly? It turns out they don’t. The people that work on PHP basically evolved with their language. They made some pretty simplistic assumptions in the beginning, which did not always turn out to be the best, but they worked and they got used. Up to a point, these old way of doing things, which most PHP available to users today (with some particularly horrible ideas removed), which makes PHP such an attractive language to beginning (web) programmers.</p>
<p>For instance, PHP was never an object-oriented language. OOP was added later. The result of this is that many features can be used in to different ways: either through an object interface, or through a function interface (example: <a href="http://nl.php.net/manual/en/mysqli.query.php" target="_blank">mysqli_query</a>). In practice, beginning programmers will likely first use the function call, and, once they start to appreciate object-oriented programming, can switch to object calls. Similarly, PHP never had exceptions, they were added only in PHP5. The result is that most built-in functions do not throw exceptions when things go wrong, they return -1, for instance. More modern functions allow you to choose the kind of error reporting that you like. <a href="http://nl.php.net/manual/en/pdo.error-handling.php" target="_blank">PDO, for instance</a>.</p>
<p>If you’re thinking: that’s awful, what a mess. You’re right. PHP is a mess. But a pretty powerful and accessible mess. There’s a lot of legacy there. A lot of bad decisions made, a lot of good. There’s something in it for everyone, from beginner to expert (<a href="http://nl3.php.net/manual/en/functions.anonymous.php" target="_blank">PHP 5.3 has closures!)</a>.</p>
<p>It turns out what matters in the end is the ability to get things done in a language, not if you look pretty doing it. Programming language designers maybe should not be so afraid to design ugly, functional features.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1401</wp:post_id>
		<wp:post_date>2009-08-25 21:54:21</wp:post_date>
		<wp:post_date_gmt>2009-08-25 19:54:21</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-beauty-of-ugliness</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="programming-languages"><![CDATA[Programming Languages]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Find the differences</title>
		<link>http://zef.me/2009/08/27/find-the-differences/</link>
		<pubDate>Thu, 27 Aug 2009 06:24:09 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2009/08/27/find-the-differences/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>and</p>
<p>Hint: it’s not just that <a href="http://news.cnet.com/8301-13860_3-10317763-56.html" target="_blank">English has been replaced by Polish</a>!</p>
<p>That was a silly thing to do of Microsoft, but after discussing it with my (Polish) fiancee, I understand their decision a little better. Why? Because black people are very rare in Poland. In the US this picture is perfectly politically correct. But when a Polish person looks at this picture he or she will not feel this is a group of Poles in the meeting, it clearly does not relate to <em>them</em>. Why let the somewhat Asian-looking guy up there? Meh, people wouldn’t really notice him, just like the black hand that remained.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1466</wp:post_id>
		<wp:post_date>2009-08-27 08:24:09</wp:post_date>
		<wp:post_date_gmt>2009-08-27 06:24:09</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>find-the-differences</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="microsoft"><![CDATA[Microsoft]]></category>
		<category domain="post_tag" nicename="poland"><![CDATA[Poland]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Analyzing the crap out of nothing</title>
		<link>http://zef.me/2009/08/18/analyzing-the-crap-out-of-nothing/</link>
		<pubDate>Tue, 18 Aug 2009 05:55:58 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2009/08/18/analyzing-the-crap-out-of-nothing/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p><a href="http://www.wolfgnards.com/index.php/2009/06/16/how-long-does-billy-murray-spend-in-grou" target="_blank">Wolf Gnards</a>:</p>
<blockquote>It seems like almost every day someone approaches me and asks, “How long did Bill Murray spend trapped in the film <em>Groundhog Day</em>?” And I always say, “Hmmm, that’s not the most timely of questions, but I’ll do my best to answer it.”</blockquote>
<p>An important concern in journalism is that when newspapers such as the New York Times fold, because it is too expensive to maintain a large staff of journalists like that, who will do investigative journalism? Who will not just copy whatever somebody else has been saying, add a few ROFLs and past in a funny cat picture, but <em>actually</em> do the hard work?</p>
<p>As of today, I’m no longer concerned about that. Because, if there are people who can spend, I’m sure hours on figuring out something silly like how long Bill Murray spent stuck in the film <a href="http://www.imdb.com/title/tt0107048/" target="_blank">Groundhog Day</a> (an estimated 8 years, 8 months, and 16 days, by the way), I am sure that every other tiny little detail in the world will be figured out as well.</p>
<p>Albeit 16 years after the fact.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1530</wp:post_id>
		<wp:post_date>2009-08-18 07:55:58</wp:post_date>
		<wp:post_date_gmt>2009-08-18 05:55:58</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>analyzing-the-crap-out-of-nothing</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="important"><![CDATA[Important]]></category>
		<category domain="post_tag" nicename="journalism"><![CDATA[Journalism]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Funny Cat Pictures Suck</title>
		<link>http://zef.me/2009/09/11/funny-cat-pictures-suck/</link>
		<pubDate>Fri, 11 Sep 2009 11:32:55 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2009/09/11/funny-cat-pictures-suck/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>If you want to be successful, you have to listen to your audience. On radio shows people call in. With news papers, people write letters. On blogs, people find you on Google. I always figured that if I would be an authority on anything, it would be something computer related. Programming, perhaps. But as it turns out, I’m not. Or maybe a bit. According to Google I’m an authority on…</p>
<p>Yes. Funny cats. And suckage. So my dear visitor. I am giving you want you want. Here are some funny cat pictures, that suck, like Java does.</p>
<p>Funny cat with orange on its head.</p>
<p>Funny cat with bunny ears.</p>
<p>I think my Google PageRank just went through the roof.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>124</wp:post_id>
		<wp:post_date>2009-09-11 13:32:55</wp:post_date>
		<wp:post_date_gmt>2009-09-11 11:32:55</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>funny-cat-pictures-suck</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="cats"><![CDATA[Cats]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="important"><![CDATA[Important]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Funny Dogs</title>
		<link>http://zef.me/2009/10/26/funny-dogs/</link>
		<pubDate>Mon, 26 Oct 2009 08:13:48 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2009/10/26/funny-dogs/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>After my instant hit <a href="http://zef.me/2117/funny-cat-pictures-suck" target="_blank">“Funny cat pictures suck”</a>, here’s some funny dog pictures. Take that, Google!</p>
<p><a href="http://www.flickr.com/photos/alicejamieson/" target="_blank">http://www.flickr.com/photos/alicejamieson/</a> / <a href="http://creativecommons.org/licenses/by/2.0/" target="_blank">CC BY 2.0</a></p>
<p><a href="http://www.flickr.com/photos/randysonofrobert/" target="_blank">http://www.flickr.com/photos/randysonofrobert/</a> / <a href="http://creativecommons.org/licenses/by/2.0/" target="_blank">CC BY 2.0</a></p>
<p><a href="http://www.flickr.com/photos/walkadog/" target="_blank">http://www.flickr.com/photos/walkadog/</a> / <a href="http://creativecommons.org/licenses/by/2.0/" target="_blank">CC BY 2.0</a></p>
<p><a href="http://www.flickr.com/photos/brainware3000/" target="_blank">http://www.flickr.com/photos/brainware3000/</a> / <a href="http://creativecommons.org/licenses/by/2.0/" target="_blank">CC BY 2.0</a></p>
<p><a href="http://www.flickr.com/photos/29216747@N05/" target="_blank">http://www.flickr.com/photos/29216747@N05/</a> / <a href="http://creativecommons.org/licenses/by/2.0/" target="_blank">CC BY 2.0</a></p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>160</wp:post_id>
		<wp:post_date>2009-10-26 09:13:48</wp:post_date>
		<wp:post_date_gmt>2009-10-26 08:13:48</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>funny-dogs</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="dog"><![CDATA[Dog]]></category>
		<category domain="post_tag" nicename="funny"><![CDATA[Funny]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Interesting Clojure Projects</title>
		<link>http://zef.me/2009/11/11/interesting-clojure-projects/</link>
		<pubDate>Wed, 11 Nov 2009 10:30:50 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2009/11/11/interesting-clojure-projects/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Some pointers for new explorers of <a href="http://www.clojure.org" target="_blank">Clojure</a>.</p>
<p>IDE-related:</p>
<ul>
<li><a href="http://kotka.de/projects/clojure/vimclojure.html" target="_blank">VimClojure</a></li>
<li><a href="http://lifeofaprogrammergeek.blogspot.com/2009/03/learning-clojure-and-emacs.html" target="_blank">SLIME for Clojure on Emacs</a></li>
<li><a href="http://www.enclojure.org" target="_blank">Enclojure, a NetBeans plugin</a></li>
</ul>
<p>DSLs/libraries built for Clojure:</p>
<ul>
<li><a href="http://www.gitorious.org/clojureql/" target="_blank">ClojureQL (Clojure Query Language)</a></li>
<li>
<a href="http://en.wikibooks.org/wiki/Compojure" target="_blank">Compojure</a>, a Clojure web framework</li>
<li>
<a href="http://github.com/somnium/congomongo" target="_blank">CongoMongo</a>, a <a href="http://www.mongodb.org" target="_blank">MongoDB</a> library</li>
<li>
<a href="http://github.com/briancarper/cow-blog" target="_blank">Cow-blog,</a> simple blogging software written using Compojure</li>
</ul>
<p>Other:</p>
<ul><li><a href="http://www.reddit.com/r/clojure/" target="_blank">Clojure reddit</a></li></ul>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>194</wp:post_id>
		<wp:post_date>2009-11-11 11:30:50</wp:post_date>
		<wp:post_date_gmt>2009-11-11 10:30:50</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>interesting-clojure-projects</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="clojure"><![CDATA[Clojure]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>On the PIL</title>
		<link>http://zef.me/2009/10/27/on-the-pil/</link>
		<pubDate>Tue, 27 Oct 2009 09:52:42 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2009/10/27/on-the-pil/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>For the past few years I’ve wanted to do what most programmers dream of doing: design my own programming language. Do everything right what others have done wrong, find the perfect mix of Java, Python and Ruby. It was going to have dynamic with optional static typing, a super flexible syntax and meta programming facilities that would make Ruby look like a toy. However, the first decision you have to make when undertaking such a project was already problematic: what language am I going to implement this in, C? I don’t C that well, and frankly, I don’t really want to spend my time managing memory and chasing down pointers. So my best bets are the JVM (Java Virtual Machine) and the CLR (.NET). I have to choose. It’s really a decision I don’t want to make. But how can I make two implementations? I don’t have the resources to do that.</p>
<p>Another area I’m interested is databases, specifically non-relational databases (or <a href="http://tweetview.net/ev/nosql" target="_blank">NoSQL</a> databases). Many such systems start to appear: <a href="http://couchdb.apache.org" target="_blank">CouchDB</a>, <a href="http://aws.amazon.com/simpledb" target="_blank">SimpleDB</a>, <a href="http://labs.google.com/papers/bigtable.html" target="_blank">Google’s BigTable</a>. A few months ago, <a href="http://bret.appspot.com/entry/how-friendfeed-uses-mysql" target="_blank">the people from FriendFeed described how they built such a system on top of MySQL</a>. A fascinating idea, I thought. I decided to experiment with this idea and implement such a library in Python. After a while, when I got more into Java I ported it to Java. But I was not happy with it, I wanted to write a library that was language agnostic, that could be used from Java, Python, but also from PHP and Ruby.</p>
<p>For the past two years, me and my colleagues have been working on <a href="http://www.webdsl.org" target="_blank">WebDSL</a>, a domain-specific language for rapidly building web applications. The application written in WebDSL is compiled to Java code and can then be deployed on any Java application server. It’s a cool project, but rather uninteresting for people who do not have access to Java hosting, as is the case for many amateur programmers, a group that I care about, because I was one of them for so long. So, during the summer of last year I started to work on a Python <a href="http://appengine.google.com" target="_blank">Google AppEngine</a> back-end for WebDSL, which generated Python code that worked with AppEngine, rather than Java code. It tooks some effort, but I got it to work. Cool! WebDSL was now much more accessible to people, because you can use a free AppEngine account to host your applications!</p>
<p>Sadly, maintaining a separate Python back-end for WebDSL turned out to be a tedious job. At the moment there are two people who spend much of their time making changes to the Java back-end of WebDSL, while I work on different things. This means that in addition to my usual work, I also have to replicate all changes they make to the Java back-end to the Python back-end. In practice this didn’t happen, which rapidly led the Python back-end to be out of date. Similarly, the language that we use to implement WebDSL, <a href="http://www.strategoxt.org" target="_blank">Stratego/XT</a>, can now also generate two languages: C and Java. However, these back-ends also have to be maintained. The parser that we use, SGLR, also has two implementations: C and Java, that also have to be maintained.</p>
<p>See the pattern?</p>
<p><strong>Certain types of applications, libraries and code generators are conceptually platform-independent, but since we typically choose one platform to implement them for/on, we exclude all potential users that use different platforms.</strong></p>
<p>Ideally, we would abstract from software platforms such as Java, .NET, PHP, Ruby, Javascript or Objective-C. Ideally, we’d write code in only one language, and magically translate programs written in this language to any other software platform out there.</p>
<p>This is exactly what <a href="http://pil-lang.org" target="_blank">PIL</a> attempts to do. PIL stands for <a href="http://pil-lang.org" target="_blank">Platform Independent Language</a>. It’s a language mainly intended to be used by DSL compilers to more easily maintain multiple platform back-ends, but can also be used as an implementation language for building portable libraries and (parts of) applications. To kick this off, let’s have a look at “Hello world!” in PIL:</p>
<p><strong>void</strong> main(<em>Array&lt;String&gt;</em> args) {<br><br> println(“Hello world!”);<br><br>}</p>
<p>As you can see, PIL is a Java-style language and that’s on purpose. Java is a well-known language and PIL’s syntax and semantics are based on Java. We<a href="http://pil-lang.org/page/vsJava" target="_blank"> made some changes</a>, however, to simplify and improve it here and there.</p>
<p>The <a href="http://pil-lang.org/page/download" target="_blank">PIL compiler</a> can currently generate programs for three platforms: Java, Python and PHP 5. Soon, more languages will be added. We plan to add at least C# and Objective-C, but also others such as Javascript. But already you can write a library in PIL and generate a Java, Python and PHP implementation from it, which is pretty cool. So let’s assume you installed the PIL compiler and you use it on the “Hello world!” program I just showed:</p>
<p>$ pilc -i hello.pil -d php-out — php<br><br>[ pilc | info ] Now compiling: hello.pil<br><br>[ pilc | info ] Done with hello.pil</p>
<p>If we look in the php-out directory now, we will see one file: main.php:</p>
<p>&lt;?php<br><br>require_once “pil/builtin.php” ;<br><br><strong>function</strong> main ( <em>$args</em> )<br><br>{<br><br> pil_println ( “Hello world!” ) ;<br><br>}<br><br>?&gt;</p>
<p>Now let’s invoke it with the Java back-end:</p>
<p>$ pilc -i hello.pil -d java-out — java<br><br>[ pilc | info ] Now compiling: hello.pil<br><br>[ pilc | info ] Done with hello.pil</p>
<p>Now we end up with a java-out/application/Main.java file:</p>
<p><strong>package</strong> application;<br><br><strong><br><br>public final class</strong> Main <br><br>{ <br><br> <strong>public final static</strong> <strong>void</strong> main(<em>String[]</em> args)<br><br> { <br><br> System.out.println(“Hello world!”);<br><br> }<br><br>}</p>
<p>And last but not least for Python:</p>
<p>$ pilc -i hello.pil -d python-out — python<br><br>[ pilc | info ] Now compiling: hello.pil<br><br>[ pilc | info ] Done with hello.pil</p>
<p>and the result: python-out/main.py</p>
<p><strong>import</strong> sys<br><br><strong>import</strong> pil.builtin<br><br><strong>import</strong> sets<br><br><strong>import</strong> datetime<br><br><strong>import</strong> time</p>
<p><strong>def</strong> main(args):<br><br> <strong>print</strong> str( “Hello world!” )</p>
<p>Of course, this is just a trivial example, but it works on real-life applications as well. I implemented a simple parser and interpreter for <a href="http://github.com/zefhemel/diesler" target="_blank">my dynamic programming language</a> in PIL and both the Java and Python versions worked (the compiler could not generate PHP code then). Similarly I ported my FriendFeed-inspired layer on top of MySQL to PIL and got it to work with Java and Python as well. For WebDSL there is an experimental PIL back-end that can generate code for any PIL-supported platform.</p>
<p>In practice, porting an code written in PIL to a new platform is a bit more work than simply changing the — java switch to — php. Typically you also need a certain amount of platform APIs that are not built into the PIL base library of types. You need IO functionality, or database access for instance. To accomplish this you can use external classes. Here is a sample Database, external class (in the pil::db namespace/package):</p>
<p><strong>external class</strong> pil::db::Database {<br><br> <strong>new</strong>(<em>String</em> hostName, <em>String</em> username, <em>String</em> password, <em>String</em> database);<br><br> pil::db::Connection getConnection();<br><br>}</p>
<p>For each platform, e.g. PHP, Java, Python you now need to make an implementation of this class, typically wrapping an existing API on that platform. I won’t go into the details here, but you can find <a href="http://pil-lang.org/page/platformInteraction" target="_blank">more information and examples on the PIL website</a>.</p>
<p>I’m sure you’re all excited right now and want to start playing with this immediately. There is a <a href="http://hydra.nixos.org/job/pil/pil-trunk/pilcJava/latest/download/1/pilc-java.tar.gz" target="_blank">simple tarball</a> available that includes the PIL compiler running on Java (5+). It also includes a number of wrapper scripts that enable you to use the PIL compiler as if it were an interpreter. The pil-java script, for instance, generates Java code for a given .pil file, compiles and then executes it. Similar scripts are included for Python and PHP. Don’t get confused here. The compiler needs Java to run, but can generate code in 3 different languages. There is also a native C version of the PIL compiler, which is faster, but also a little bit more complicated to install. The PIL compiler will also run on windows, but the wrapper scripts that are included will not (unless you run them in cygwin), but the scripts are simple so this should not be an issue.</p>
<p>The <a href="http://pil-lang.org/page/manual" target="_blank">PIL manual</a> is under construction. It is not nearly complete, but already contains a lot of useful information about the language. For support you can join our IRC channel at irc.freenode.net channel #pil, or e-mail me. Of course, PIL also has a <a href="http://twitter.com/pillang" target="_blank">twitter account</a>.</p>
<p>After refactoring our build system a little bit and improving the PHP back-end to use the <a href="http://nl.php.net/__autoload" target="_blank">__autoload</a> feature, I am going to work on an Objective-C back-end. Yes, we want to start generating iPhone applications. Objective-C is a bit of a challenge because on the iPhone it does not support garbage collection, which PIL assumes as a feature of its target platforms. But if I get it done, PIL and the DSLs we’re going to build on top of it may be a viable alternative to the ugly Objective-C language you have to use now. I’ll keep you posted on that.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>212</wp:post_id>
		<wp:post_date>2009-10-27 10:52:42</wp:post_date>
		<wp:post_date_gmt>2009-10-27 09:52:42</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>on-the-pil</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="pil"><![CDATA[Pil]]></category>
		<category domain="post_tag" nicename="python"><![CDATA[Python]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Switching Stories</title>
		<link>http://zef.me/2009/09/05/switching-stories/</link>
		<pubDate>Sat, 05 Sep 2009 15:54:04 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2009/09/05/switching-stories/</guid>
		<description></description>
		<content:encoded><![CDATA[
<ul>
<li><a href="http://www.joestump.net/2009/09/why-i-switched-from-php-to-python.html" target="_blank">Why I switched from PHP to Python</a></li>
<li><a href="http://smarterware.org/184/why-i-switched-to-android-from-the-iphone" target="_blank">Why I switched from the iPhone to Android</a></li>
<li><a href="http://www.oreillynet.com/ruby/blog/2007/09/7_reasons_i_switched_back_to_p_1.html" target="_blank">Why I switched from Rails to PHP</a></li>
<li><a href="http://www.fsdaily.com/Community/Why_I_switched_back_from_Ubuntu_to_Fedora" target="_blank">Why I switched from Ubuntu to Fedora</a></li>
<li><a href="http://faler.wordpress.com/2009/05/29/why-i-switched-from-eclipse-to-netbeans/" target="_blank">Why I switched from Eclipse to Netbeans</a></li>
<li><a href="http://windowslive.com/Connect/Post/c6bfb6b5-b64a-4b98-8327-de672519b804" target="_blank">Why I switched from Thunderbird to Windows Live Mail</a></li>
<li><a href="http://www.scottberkun.com/blog/2005/why-i-switched-to-firefox/" target="_blank">Why I switched from IE to Firefox</a></li>
<li><a href="http://www.zdnet.com.au/insight/software/soa/Why-I-switched-from-Firefox-to-Chrome/0,139023769,339293493,00.htm" target="_blank">Why I switched from Firefox to Chrome</a></li>
<li><a href="http://www.gabejacobsblog.com/5-reasons-why-i-switched-to-firefox-3-from-safari" target="_blank">Why I switched from Safari to Firefox</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>221</wp:post_id>
		<wp:post_date>2009-09-05 17:54:04</wp:post_date>
		<wp:post_date_gmt>2009-09-05 15:54:04</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>switching-stories</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="switch"><![CDATA[Switch]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Turns out the Accordion is pretty awesome</title>
		<link>http://zef.me/2009/10/31/turns-out-the-accordion-is-pretty-awesome/</link>
		<pubDate>Sat, 31 Oct 2009 11:11:01 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2009/10/31/turns-out-the-accordion-is-pretty-awesome/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Amazing video of Russian guy playing the accordion. Sounds like a full orchestra.</p>
<a href="https://www.youtube.com/v/o0Bn4m6dQbI&amp;color1=0x5d1719&amp;color2=0xcd311b&amp;hl=en&amp;feature=player_embedded&amp;fs=1"></a>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>258</wp:post_id>
		<wp:post_date>2009-10-31 12:11:01</wp:post_date>
		<wp:post_date_gmt>2009-10-31 11:11:01</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>turns-out-the-accordion-is-pretty-awesome</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Apple Support Experience</title>
		<link>http://zef.me/2009/11/02/apple-support-experience/</link>
		<pubDate>Mon, 02 Nov 2009 15:54:17 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2009/11/02/apple-support-experience/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>A couple of months ago I bought an iPhone. One of the features that I enjoyed most compared to my 1st gen iPod Touch (other than that I can actually call people) was the little remote/mic that’s in the ear phone wire. It’s great, I use it to stop my music, forward, increase and decrease volume and to activate voice control so I can call my wife while cycling home.</p>
<p>However, a few days ago the buttons started to act up, they would activate automatically or not respond at all. So I contacted Apple through their website and within a few hours I got a response saying they’ll send me new ear phones for free and an envelope to send me the old one back. Two days later a UPS guy delivers me the new ear phones and takes the old ones with him. Everything works great now.</p>
<p>Thanks Apple!</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>476</wp:post_id>
		<wp:post_date>2009-11-02 16:54:17</wp:post_date>
		<wp:post_date_gmt>2009-11-02 15:54:17</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>apple-support-experience</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="apple"><![CDATA[Apple]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="iphone"><![CDATA[iPhone]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Communicating our Work</title>
		<link>http://zef.me/2009/11/06/communicating-our-work/</link>
		<pubDate>Fri, 06 Nov 2009 12:12:56 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2009/11/06/communicating-our-work/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Yesterday we <a href="http://zef.me/2253/vote-for-webdsl" target="_blank">participated</a> in the <a href="http://www.tudelft.nl/live/pagina.jsp?id=4bd8ed50-15a7-46be-8fa5-a5071c1d9f78&amp;lang=en" target="_blank">Delft Design &amp; Engineering Award</a> event. We were among the <a href="http://www.tudelft.nl/live/pagina.jsp?id=8ceaa9e0-49d5-4346-a23d-01a83966d062&amp;lang=en" target="_blank">20 semi-finalists</a> with our <a href="http://webdsl.org" target="_blank">WebDSL</a> project. This award is a university-wide event of <a href="http://www.tudelft.nl" target="_blank">our university</a>. A notable few co-semi-finalists were:</p>
<ul>
<li>The adaptive robot hand, a robot hand that can pick up any smallish object without breaking it, especially useful for picking up fruits en vegetables</li>
<li>Delfi-n3xt, a mini satellite that they are going to launch a couple hundred of next year</li>
<li>Bio-concrete, self-healing concrete (for streets and stuff)</li>
<li>VertiGO, an electronic motorcycle that’s fast and good-looking</li>
<li>DelFly Micro, a tiny electronic “insect”-like device, that can fly into dangerous areas and deliver streaming video</li>
<li>DAISY, a technique to more effectively solve strabismus (cross-eyedness) in children</li>
</ul>
<p>See what I did there? I explained in one sentence what these projects were in language that your mother would understand. Everybody will immediately see the opportunity and social impact of these inventions. Cure poor cross-eyed children, streets that <strong>frickin’ repair themselves</strong>, <em>satellites, </em>world peace!</p>
<p>Oh yeah, another project:</p>
<ul><li>WebDSL, a domain-specific language to reduce the amount of code you have to write for web applications, thereby reducing costs dramatically</li></ul>
<p>Sure. That’s ok. But does it cure babies? Can you send it to space? Does it solve the climate problem?</p>
<p>Nah. It’s computer stuff, it’s supposed to be used by nerds that build web applications.</p>
<p>No, we didn’t win the award.</p>
<p>A week ago we were at my parents’, a friend of theirs that I hadn’t seen for a few years was there to visit.</p>
<p>“So Zef, I hear you’re doing a Ph.D., what is it about?”</p>
<p>Now, in situations like this I no longer panic. Early on I came up with an analogy that seems to work:</p>
<blockquote>You know how before before constructing a building, an architect makes an architecture of the building, right? So he draws pictures of what the building should look like and how it is structured. When this is done, the construction company takes those drawings and builders build the actual building.</blockquote>
<blockquote>Building software is much the same: people first draw pictures of how the software should work and then programmers actually implement this architecture. This programming takes up a lot of time and money, similar to the construction of buildings. So what we try to do is skip the programming/construction parts and let the computer do that for us. So we take the pictures that lay out what the software should do and <em>generate</em> all the programming code to make it work. It’s like letting a big machine automatically build the building for you, without human intervention.</blockquote>
<p>People typically appreciate this explanation, as generic and oversimplified as it is.</p>
<p>“So you actually draw pictures of software?”</p>
<p>“Well, we represent those pictures as text in practice, that’s what many software programmers prefer.”</p>
<p>And confused faces return.</p>
<p><strong>People do not understand software, or the effort it takes to produce it.</strong></p>
<p>It doesn’t speak to people, it’s too abstract. It’s not something they have been confronted with or are likely to be confronted with in the future. Unless your research focusses on preventing their Windows to crash or killing computer viruses. And even if it doesn’t, they’ll conclude: “Right… so you know about computers, right? Because I have this problem with Word…”</p>
<p>A project like ours is never going to win a design &amp; engineering award because it’s too abstract, people simply do not care.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>591</wp:post_id>
		<wp:post_date>2009-11-06 13:12:56</wp:post_date>
		<wp:post_date_gmt>2009-11-06 12:12:56</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>communicating-our-work</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="because-i-care"><![CDATA[Because I Care]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="webdsl"><![CDATA[Webdsl]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Amazon launches MySQL in the cloud</title>
		<link>http://zef.me/2009/10/27/amazon-launches-mysql-in-the-cloud/</link>
		<pubDate>Tue, 27 Oct 2009 08:36:13 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2009/10/27/amazon-launches-mysql-in-the-cloud/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Amazon has launched <a href="http://aws.amazon.com/rds/" target="_blank">Amazon RDS (Relational Database Service)</a>, as part of its <a href="http://aws.amazon.com" target="_blank">AWS</a> offering.</p>
<p>Amazon Relational Database Service (Amazon RDS) is a web service that makes it easy to set up, operate, and scale a relational database in the cloud. It provides cost-efficient and resizable capacity while managing time-consuming database administration tasks, freeing you up to focus on your applications and business.<br><br><br><br>Amazon RDS gives you access to the full capabilities of a familiar MySQL database. This means the code, applications, and tools you already use today with your existing MySQL databases work seamlessly with Amazon RDS. Amazon RDS automatically patches the database software and backs up your database, storing the backups for a user-defined retention period. You also benefit from the flexibility of being able to scale the compute resources or storage capacity associated with your relational database instance via a single API call. As with all Amazon Web Services, there are no up-front investments required, and you pay only for the resources you use.</p>
<p>Similar to its EC2 service, you have to launch an RDS instance, which costs between $0.11-$3.10 an hour (depending on the number of dedicated cores and memory you need — from 1 core with 1.7GB of memory up to 8 cores with 68GB of memory).</p>
<p>It would have been nicer if Amazon would have launched this as pay-for-what-you-use service, similar to its other <a href="http://aws.amazon.com/simpledb" target="_blank">SimpleDB</a> and <a href="http://aws.amazon.com/s3" target="_blank">S3</a> offerings.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>782</wp:post_id>
		<wp:post_date>2009-10-27 09:36:13</wp:post_date>
		<wp:post_date_gmt>2009-10-27 08:36:13</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>amazon-launches-mysql-in-the-cloud</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="amazon"><![CDATA[Amazon]]></category>
		<category domain="post_tag" nicename="cloud"><![CDATA[Cloud]]></category>
		<category domain="post_tag" nicename="database"><![CDATA[Database]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="mysql"><![CDATA[MySQL]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>When Google gets needy</title>
		<link>http://zef.me/2009/09/15/when-google-gets-needy/</link>
		<pubDate>Tue, 15 Sep 2009 09:07:08 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2009/09/15/when-google-gets-needy/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Just before <a href="http://zef.me/2110/jumping-clouds" target="_blank">switching hosts</a>, I noticed that I could get a free $75 Google Adwords voucher from my old webhost. My mother taught me never to be wasteful, so I decided to redeem the voucher by signing up for Google Adwords, even though I do not really have any site to advertise.</p>
<p>Big mistake.</p>
<p>Or… well, not that big, but we need some drama, okay?</p>
<p>It turns out that Google is a very nice and quiet company when you use their products as a consumer; paying nothing for anything. However, when you sign up for their ad network, Google’s source of income, it’s like accidentally stepping into an empty clothing story with 10 sales people swarming around you.</p>
<p>“Can I help you, sir?”</p>
<p>“What are you looking for, sir, can I be of any assistance?”</p>
<p>Or, in Google’s case: “I notice you’ve come into our store, sir, but you do not appear to be buying anything, is something wrong? Is there anything I can do to change, to make you spend some money here? I would love to do it. Because we would really like your business, sir. Please give us some business. Here is my home number, so that if you change your mind, or you have any doubts whatsoever you can call me. Even if it’s the middle of the night, sir, call me. Please call me?”</p>
<blockquote>Hello,</blockquote>
<blockquote>We’ve noticed that your ads still aren’t running on Google. We sent you an email last week with instructions for activating your AdWords account (we’ve included them below), but we wanted to reach out again and see if you needed any extra help.</blockquote>
<blockquote>If you’re having trouble activating your account, or if you’re not sure whether AdWords is right for your business, please let us know! We’re here to help you get started and answer any nagging questions you have about AdWords. If you’d like help, simply reply to this email with your questions or concerns.</blockquote>
<blockquote>If you want to get started right now, you can activate your AdWords account and start showing your ads by following these instructions:</blockquote>
<blockquote>1. Sign in to your account at <a href="http://services.google.com/marketing/links/us-awalogin" target="_blank">http://services.google.com/marketing/links/us-awalogin</a>.<br>2. Click the “Create your first campaign” button.<br>3. Create your ad campaign. We’ll walk you through the whole process, step by step.</blockquote>
<blockquote>To learn more about AdWords, please visit the AdWords Help Center at <a href="http://services.google.com/marketing/links/us-awasupport" target="_blank">http://services.google.com/marketing/links/us-awasupport</a>. We look forward to providing you with the most effective advertising available.</blockquote>
<blockquote>Sincerely,</blockquote>
<blockquote>The Google AdWords Team</blockquote>
<blockquote>Google Inc.<br>1600 Amphitheatre Parkway<br>Mountain View, CA USA 94043</blockquote>
<p>Be careful what store you step into.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>894</wp:post_id>
		<wp:post_date>2009-09-15 11:07:08</wp:post_date>
		<wp:post_date_gmt>2009-09-15 09:07:08</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>when-google-gets-needy</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="adwords"><![CDATA[Adwords]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="google"><![CDATA[Google]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Tomorrow’s the big day</title>
		<link>http://zef.me/2009/09/17/tomorrows-the-big-day/</link>
		<pubDate>Thu, 17 Sep 2009 09:05:47 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2009/09/17/tomorrows-the-big-day/</guid>
		<description></description>
		<content:encoded><![CDATA[
<p>Tomorrow I’m getting married. Followed by a honeymoon to Italy. I’m really looking forward to it. :)</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>979</wp:post_id>
		<wp:post_date>2009-09-17 11:05:47</wp:post_date>
		<wp:post_date_gmt>2009-09-17 09:05:47</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>tomorrows-the-big-day</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="wedding"><![CDATA[Wedding]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Vote for WebDSL!</title>
		<link>http://zef.me/2009/10/27/vote-for-webdsl/</link>
		<pubDate>Tue, 27 Oct 2009 12:21:07 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2009/10/27/vote-for-webdsl/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>We are a semi-finalist in the for the Delft Design Award. <a href="http://www.ddea.nl/Voteforadesign/tabid/587/ContestantID/19/Title/WebDSL/Default.aspx" target="_blank">Please vote for us</a>! It only takes a few seconds.</p>
<a href="https://www.youtube.com/v/6XkqbL80BTI&amp;rel=0&amp;color1=0xb1b1b1&amp;color2=0xcfcfcf&amp;hl=nl&amp;feature=player_embedded&amp;fs=1"></a>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1212</wp:post_id>
		<wp:post_date>2009-10-27 13:21:07</wp:post_date>
		<wp:post_date_gmt>2009-10-27 12:21:07</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>vote-for-webdsl</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="webdsl"><![CDATA[Webdsl]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Accidental Billionaires</title>
		<link>http://zef.me/2009/09/30/accidental-billionaires/</link>
		<pubDate>Wed, 30 Sep 2009 09:58:06 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2009/09/30/accidental-billionaires/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>I just finished reading/listening to <a href="http://www.audible.com/adbl/site/products/ProductDetail.jsp?productID=BK_RAND_001858&amp;BV_UseBVCookie=Yes" target="_blank">Accidental Billionaires: The Founding of Facebook A Tale of Sex, Money, Genius and Betrayal</a> (<a href="http://www.amazon.com/Accidental-Billionaires-Founding-Facebook-Betrayal/dp/0385529376" target="_blank">Amazon</a>). Wooooh! Catchy right?</p>
<p>I think this is about the worst book I have ever read. And they are going to <a href="http://www.imdb.com/title/tt1285016/" target="_blank">turn it into a movie</a>, I hope not too closely based on the writing of the book.</p>
<p>Why did I hate it so much? For one it was the narrator of the audio version. His nasal, semi-cool, I-don’t-give-a-crap kind of reading was kind of annoying. But the main reason was the fact that about every other paragraph starts with something like “we can imagine how Mark Zuckerberg…” Why? Because the author hasn’t talked to Mark, the main character of this book. He hasn’t talked to many of the people he writes about, so half of the story is dramatization of how the author imaged things to have gone.</p>
<p>“And there he sat behind his computer, the reflection of code in his eyes and monitor light on his pale skin. Behind the computer is where he felt at home, that’s the only place he truly felt home.”</p>
<p>Puke.</p>
<p>If you’re interested in Facebook’s history, there’s some information in this book that might be true, but it could be summarized in a few pages, and likely you can find all of it at <a href="http://en.wikipedia.org/wiki/Facebook" target="_blank">wikipedia</a>.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1230</wp:post_id>
		<wp:post_date>2009-09-30 11:58:06</wp:post_date>
		<wp:post_date_gmt>2009-09-30 09:58:06</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>accidental-billionaires</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>MonoTouch: Built on Free for just $399!</title>
		<link>http://zef.me/2009/09/14/monotouch-built-on-free-for-just-399/</link>
		<pubDate>Mon, 14 Sep 2009 15:00:08 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2009/09/14/monotouch-built-on-free-for-just-399/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>When I heard Novell was building <a href="http://monotouch.net/" target="_blank">MonoTouch</a>, I was excited. I like my iPhone, I liked my iPod, and I like the ability to build my own software that can run on it. What I don’t like is that Objective-C was basically the only way to do it. Luckily, Novell came to the rescue.</p>
<p>Novell would enable you to build iPhone software using .NET languages, like C# and compile it down to native iPhone ARM binaries! The project is called MonoTouch, because it’s built on <a href="http://mono-project.com/Main_Page" target="_blank">Mono</a>, the open source implementation of much of the .NET framework. The guy who drives the project is <a href="http://tirania.org/blog/archive/2009/Sep-14.html" target="_blank">Miguel de Icaza</a>, the guy the GNOME Linux desktop and the Mono project itself. A true open source guy.</p>
<p>So I wasn’t worried. But then…</p>
<p><a href="http://tirania.org/blog/archive/2009/Sep-14.html" target="_blank">“MonoTouch 1.0 goes live!”:</a></p>
<blockquote>
<a href="http://monotouch.net" target="_blank">MonoTouch</a> is a commercial product based on Mono and is made up of the following components</blockquote>
<p>Commercial… ok, well, I guess that’s required to being able to distribute it as commercial software. Commercial software is fine by me, as long as there’s a technically sound reason to go with it…</p>
<p>Then I went to the <a href="http://monotouch.net/" target="_blank">website</a>.</p>
<p>Nicely designed, although the logo seemed a bit suspicious. What finger is it sticking up there?</p>
<p>Then I hovered of the “Get monoTouch” button and noticed it’s sending me to <a href="http://monotouch.net/Buy" target="_blank">http://monotouch.net/Buy</a>... Oh oh…</p>
<p>Yep. If you don’t want to use a sucky language like Objective-C to develop for the iPhone, but instead would like to build on open source… be prepared to pay through the nose.</p>
<p>Personal license: <strong>$399/year<br>Enterprise edition: $999/year<br>5 developer license: $3,999/year</strong></p>
<p>Oh, open source, thou aren’t what thy used to be…</p>
<p>Is it me, or does that logo look more and more like a big fuck you to the open source community?</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1274</wp:post_id>
		<wp:post_date>2009-09-14 17:00:08</wp:post_date>
		<wp:post_date_gmt>2009-09-14 15:00:08</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>monotouch-built-on-free-for-just-399</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="free"><![CDATA[Free]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="iphone"><![CDATA[iPhone]]></category>
		<category domain="post_tag" nicename="mono"><![CDATA[Mono]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Google Reader Pulls a Harry</title>
		<link>http://zef.me/2009/10/26/google-reader-pulls-a-harry/</link>
		<pubDate>Mon, 26 Oct 2009 15:46:01 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2009/10/26/google-reader-pulls-a-harry/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Harry’s got a new job. He works at Google now.</p>
<p>He’s got a job as RSS post ranker. Google gives Harry’s services away for free under then name “Sort by magic”.</p>
<p>Yep, although RSS readers are practically web 1.7, people at Google are still working to improve <a href="http://www.google.com/reader" target="_blank">Google Reader</a>, making it more web 2.0. For a while already you’ve been able to “like” stuff, “star” and “share” it. “star”-ing and “share”-ing’s purposes have always been clear cut — starring is for bookmarking and share-ing is for sharing with your Google Reader buddies (what app does not have a social network these days). But “like”-ing has been pretty much pointless until a few days ago.</p>
<p>Because Harry cares about what you like and will rank it accordingly.</p>
<p>And through the “Popular Items” features he will tell you what the world likes. People really like this <a href="http://friendlyatheist.com/2009/10/21/which-religion-should-i-follow/" target="_blank">religion picker</a> now, it seems.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1440</wp:post_id>
		<wp:post_date>2009-10-26 16:46:01</wp:post_date>
		<wp:post_date_gmt>2009-10-26 15:46:01</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>google-reader-pulls-a-harry</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Flash mobs Oprah-style</title>
		<link>http://zef.me/2009/10/26/flash-mobs-oprah-style/</link>
		<pubDate>Mon, 26 Oct 2009 17:14:23 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2009/10/26/flash-mobs-oprah-style/</guid>
		<description></description>
		<content:encoded><![CDATA[
<p>When Oprah discovers something, she has the ability to take it to the next level. This time: flash mobs.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1441</wp:post_id>
		<wp:post_date>2009-10-26 18:14:23</wp:post_date>
		<wp:post_date_gmt>2009-10-26 17:14:23</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>flash-mobs-oprah-style</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="video"><![CDATA[Video]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>This Decade in Arrogance: Linus Torvalds</title>
		<link>http://zef.me/2009/09/15/this-decade-in-arrogance-linus-torvalds/</link>
		<pubDate>Tue, 15 Sep 2009 13:05:29 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2009/09/15/this-decade-in-arrogance-linus-torvalds/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Found this on <a href="http://programming.reddit.com" target="_blank">reddit</a>, but it’s like 9 years old. Whatever. It is my theory that more often than not, with great success comes great arrogance. Examples include <a href="http://en.wikipedia.org/wiki/House_%28TV_series%29" target="_blank">dr. House</a>, Steve Jobs, <a href="http://en.wikipedia.org/wiki/Eric_S._Raymond" target="_blank">Eric Raymond</a>, <a href="http://www.paulgraham.com" target="_blank">Paul Graham</a> and Linus Torvalds. And that’s fine. Better yet, it’s amusing. So, let’s have a look at a nice <a href="http://lwn.net/2000/0914/a/lt-debugger.php3" target="_blank">Linus gem</a>.</p>
<p><a href="http://lwn.net/2000/0914/a/lt-debugger.php3" target="_blank">In this episode</a>, be sure to also read the whole thing, Linus is complaining about people wanting kernel debuggers. A few highlights:</p>
<blockquote>Apparently, if you follow the arguments, not having a kernel debugger leads to various maladies:</blockquote>
<ul>
<li>you crash when something goes wrong, and you fsck and it takes forever and you get frustrated.</li>
<li>people have given up on Linux kernel programming because it’s too hard and too time-consuming</li>
<li>it takes longer to create new features.</li>
</ul>
<blockquote>And nobody has explained to me why these are _bad_ things.</blockquote>
<blockquote>To me, it’s not a bug, it’s a feature. Not only is it documented, but it’s _good_, so it obviously cannot be a bug.</blockquote>
<blockquote>“Takes longer to create new features” — this one in particular is not a very strong argument for having a debugger. It’s not as if lack of features or new code would be a problem for Linux, or, in fact, for the software industry as a whole. Quite the reverse. My biggest job is to say “no” to new features, not trying to find them.</blockquote>
<blockquote>Oh. And sure, when things crash and you fsck and you didn’t even get a clue about what went wrong, you get frustrated. Tough. There are two kinds of reactions to that: you start being careful, or you start whining about a kernel debugger.</blockquote>
<p>and</p>
<blockquote>I’m a bastard. I have absolutely no clue why people can ever think otherwise. Yet they do. People think I’m a nice guy, and the fact is that I’m a scheming, conniving bastard who doesn’t care for any hurt feelings or lost hours of work if it just results in what I consider to be a better system.</blockquote>
<blockquote>And I’m not just saying that. I’m really not a very nice person. I can say “I don’t care” with a straight face, and really mean it.</blockquote>
<blockquote>I happen to believe that not having a kernel debugger forces people to think about their problem on a different level than with a debugger. I think that without a debugger, you don’t get into that mindset where you know how it behaves, and then you fix it from there. Without a debugger, you tend to think about problems another way. You want to understand things on a different _level_.</blockquote>
<p>Ergo, debuggers are for sissies. Thank you, Linus, for clearing that one up.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1449</wp:post_id>
		<wp:post_date>2009-09-15 15:05:29</wp:post_date>
		<wp:post_date_gmt>2009-09-15 13:05:29</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>this-decade-in-arrogance-linus-torvalds</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="linus-torvalds"><![CDATA[Linus Torvalds]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Strategic Programming in Stratego/XT</title>
		<link>http://zef.me/2009/11/03/strategic-programming-in-stratego-xt/</link>
		<pubDate>Tue, 03 Nov 2009 15:04:55 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2009/11/03/strategic-programming-in-stratego-xt/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>For the past years I have been working on <a href="http://webdsl.org/" target="_blank">WebDSL</a>, a domain-specific language for building web applications. We build the compiler for this language using the <a href="http://www.strategoxt.org" target="_blank">Stratego/XT</a> toolset. Stratego is a <em>program transformation</em> language, i.e. it is a language that is used to transform one program into another, e.g. a WebDSL program into a Java program. So, how does that work?</p>
<p>The first step in program transformation is parsing. A textual representation of the program (the source file) is parsed into a tree representation (called the AST — Abstract Syntax Tree). We write a syntax definition of our language in a language, in our case <a href="http://www.program-transformation.org/Sdf/WebHome" target="_blank">SDF</a>, from which a parser is generated that can parse our language and turn it into an AST. For instance, the AST representation of the following simple program:</p>
<p>n = 3 * 4</p>
<p>could be</p>
<p>Assign(Var(“n”), Multiply(Num(“3”), Num(“4”)))</p>
<p>Stratego can perform transformations on this type of AST. Let us consider a simple optimization transformation where the multiplication of two constant values (in this case numbers) are precomputed so that they do not have to be computed everytime this statement is evaluated. So this transformation would transform:</p>
<p>Assign(Var(“n”), Multiply(Num(“3”), Num(“4”)))</p>
<p>Into</p>
<p>Assign(Var(“n”), Num(“12”))</p>
<p>In Stratego a transformation rule to accomplish this would look something like this:</p>
<p>simplify :</p>
<p>Multiply(Num(<em>x</em>), Num(<em>y</em>)) -&gt; Num(<em>z</em>)</p>
<p><strong>where</strong> z := &lt;mulS&gt; (x, y)</p>
<p>What this defines is a rule called simplify that matches an AST node of the form Multiply(Num(&lt;insert something here and bind it to x&gt;), Num(&lt;insert something here and bind it to y&gt;)) and rewrites that to Num(&lt;insert z here&gt;). In the where clause of the rule, the actual value of this computation is computed and assigned to z, which is then inserted into the Num AST node (mulS is a utility rule that can compute the multiplication of two integers represented as strings, but don’t worry too much about that).</p>
<p>Ok, now let’s consider the following program:</p>
<p>n = 3 * 5 * 2</p>
<p>When this is parsed, we might end up with the following AST:</p>
<p>Assign(Var(“n”), Multiply(Multiply(Num(“3”), Num(“5”),<br><br>Num(“2”))</p>
<p>Of course, this could be simplified to simply Assign(Var(“n”), Num(“30”)), right? But we somehow have to tell Stratego to apply this simplify rule a number of times. One way would be to traversing the tree and try to apply the rule somewhere in the tree until it can no longer be applied anywhere. Let’s see how that would look.</p>
<p>We start with our initial AST:</p>
<p>Assign(Var(“n”), Multiply(Multiply(Num(“3”),<br><br>Num(“5”)), Num(“2”))</p>
<p>We then start to look for a place to apply the simplify rule. We decide to start looking in the leaf nodes, these are all string nodes (“n”, “3”, “5” and “2”), our simplify rule does not apply there so we move upwards. Then we get to the Var(“n”), Num(“3”), Num(“5”) and Num(“2”) nodes, still no match. Then we find something more interesting: Multiply(Num(“3”), Num(“5”)), which matches our simplify rule, so it is rewritten to simply Num(“15”). Our AST now looks like this:</p>
<p>Assign(Var(“n”), Multiply(<strong>Num(“15”)</strong>, Num(“2”))</p>
<p>When we move up more we find the new Multiply(Num(“15”), Num(“2”)) node which, again, matches with the simplify rule, rewriting it to Num(“20”). So our resulting AST is now:</p>
<p>Assign(Var(“n”), <strong>Num(“30”)</strong>)</p>
<p>And we’re done because the simplify rule no longer matches anywhere. The final step after program transformation is called “pretty-printing”, sometimes referred to as “unparsing”, i.e. doing the opposite of parsing where an AST is converted back to normal source code, resulting in:</p>
<p>n = 30</p>
<p>We have now optimized a simple program.</p>
<p>In Stratego rules are never applied automatically, you always have to tell it exactly what to do and in what order. This is done using Strategies (hence the name Stratego). A general strategy for a program transformation could look as follows (note, this is simplified):</p>
<p>main =<br><br> parse-file;<br><br> transform;<br><br> pretty-print</p>
<p>What this will do is apply these sub-strategies in order. First parse-file, if that succeeds, transform and then pretty-print. We won’t talk about the parsing and pretty-printing, let’s focus on the transform strategy. The transform strategy has to apply the simplify rule we defined before to our AST for as long as it can be applied, for this Stratego offers a higher-order strategy called innermost. Higher-order strategies take one or more strategies as arguments, in this case we pass the simplify strategy as an argument to the innermost strategy:</p>
<p>transform =<br><br> innermost(simplify)</p>
<p>What it will do is traverse the tree, try to apply the simplify rule wherever it can, when the rule no longer applies anywhere, then it terminates and returns the result of the transformation. Programming with strategies is what we call <em>strategic programming</em>.</p>
<p>Now you may think, doesn’t writing ASTs all the time get really annoying? And indeed, it does. That’s why, with a little bit of work, you can mix in the syntax of programs you are transforming with the Stratego syntax. Typically these pieces of program syntax are enclosed in |[ and ]| quotations. The simplify rule could then be rewritten to the more natural:</p>
<p>simplify :</p>
<p>|[ <em>n1</em> * <em>n2</em> ]| -&gt; |[ <em>n3</em> ]|</p>
<p><strong>where</strong> n3 := &lt;mulS&gt; (n1, n2)</p>
<p>Where somewhere is defined that the n<em>x</em> notation will only match numbers.</p>
<p>Stratego is a very nice language for building compilers, if you want to learn more, you can visit the <a href="http://strategoxt.org" target="_blank">strategoxt.org</a> website.</p>
<p>Sometime during the next few days I will talk about an experiment I conducted last weekend where I attempted to do Strategic programming in <a href="http://www.clojure.org" target="_blank">Clojure</a>.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1540</wp:post_id>
		<wp:post_date>2009-11-03 16:04:55</wp:post_date>
		<wp:post_date_gmt>2009-11-03 15:04:55</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>strategic-programming-in-stratego-xt</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="program-transformation"><![CDATA[Program Transformation]]></category>
		<category domain="post_tag" nicename="stratego"><![CDATA[Stratego]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Brief Introduction to Clojure</title>
		<link>http://zef.me/2009/11/06/brief-introduction-to-clojure/</link>
		<pubDate>Fri, 06 Nov 2009 10:45:57 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2009/11/06/brief-introduction-to-clojure/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p><a href="http://www.clojure.org" target="_blank">Clojure</a> (pronounced “Closure”) is a relatively new programming language which runs on the Java Virtual Machine. This is roughly what it looks like:</p>
<p><strong>defn</strong> say-hello-to [name]<br><br> <strong>println</strong> “Hello,” name</p>
<p>Neat, huh? Well, ok, I was lying a little bit in order not to scare you, because… pss, Clojure is a <a href="http://en.wikipedia.org/wiki/Lisp_programming_language" target="_blank">Lisp</a>!</p>
<p>You’re still here? Alright. I suppose I can show you the <em>real</em> program, which is what I just showed with a few parenthesis added, in fact not that many:</p>
<p>(<strong>defn</strong> say-hello-to [name]<br><br> (<strong>println</strong> “Hello,” name))</p>
<p>Being a LISP has its advantages and disadvantages. A disadvantage is that people get confused by the parentheses, or at least by their placement, because, let’s face it, in a C-style language, this definition would look as follows:</p>
<p>int main(char* name) {<br><br> printf(“Hello, %s”, name);<br><br>}</p>
<p>Now, if you’re willing to extend your definition of parenthesis to include other types of brackets and braces, you will see that the number is actually the same. But the truth is, parentheses in usual places scare people, it turns out.</p>
<p>A nice, but potentially confusing feature of LISPy languages is that they are homomoronic… I mean, <a href="http://en.wikipedia.org/wiki/Homoiconicity" target="_blank"><em>homoiconic</em></a><em>,</em> which Wikipedia says, means that the primary representation of program code is the same type of list structure that is also used for the main data structures. Great. What does that really mean?</p>
<p>Let’s see what happens when you type in a Clojure expression, for instance the following expression to add two numbers:</p>
<p>(+ 2 1)</p>
<p>The first thing that is invoked is the reader, which parses the expression and turns it into, in this case, a list containing 3 items: +, 2 and 1. Because we asked Clojure to evaluate the expression for us, this list is going to be evaluated by first evaluating all of its elements. It turns out that ‘+’ in in fact a defined function, so we get back a function object, 2 evaluates to itself as does 1. The evaluation of a list in a Lisp means to call its first element as a function with the rest of the elements as arguments. So in this case the + function will be invoked with 2 and 1 as arguments, resulting, not surprisingly, in 3. So lists are Clojure’s representation of function calls, except that the function name is put inside the parenthesis rather than before it.</p>
<p>Note that this makes Clojure, and Lisps in general, a language with an extremely simple and concise syntax. All there are are literals (such as characters, strings, symbols and numbers) and lists (although Clojure also adds special syntax for sets, maps and vectors to that). There are no special operators or keywords.</p>
<p>Fantastic. So, in a LISP all function calls (including operator calls) are written in prefix notation, i.e. instead of writing 2 + 1 you write (+ 2 1). You can also compose them, e.g. (+ 1 (* 2 3)) results in 7. Although this may seem a little confusing to read, its “regular” infix counterpart is 1 + 2 * 3, where you always have to take the language’s precedence rules into account, is it (1 + 2) * 3, or 1 + (2 * 3)? Using the Lisp notation it’s always clear. Now let’s look at the following expression:</p>
<p>‘(+ 2 1)</p>
<p>Note the quote there. What does that do? Well it quotes the expression, telling the interpreter: “do not interpret this, but return it literally”. So this expression results not in the value 3, but with a list containing three items: the + symbol, 2 and 1. We can now manipulate this list as we wish:</p>
<p>(second ‘(+ 2 1))</p>
<p>results in the value 2, because the second function returns the <em>second</em> item of the list that is passed to it. What we can also do is eval it:</p>
<p>(eval ‘(+ 2 1))</p>
<p>What eval does is *drumroll* <em>evaluate</em> the data structure that is passed to it as if it were an expression, resulting in… 3!</p>
<p>We can also manipulate lists a bit, so let’s say, get rid of the + and replace it by -:</p>
<p>(cons ‘- (rest ‘(+ 2 1)))</p>
<p>The cons function builds a new list with its first arguments as the head and the second argument as its tail — the rest of the list. The quote before — means “don’t resolve it, just give me the literal symbol -”, the rest function returns the tail of the list that is passed to it (so all items except the first one). The result of this expression therefore is:</p>
<p>‘(- 2 1)</p>
<p>We can then eval this expression, resulting in 1:</p>
<p>(eval (cons ‘- (rest ‘(+ 2 1))))</p>
<p>Now what you will have noticed, as mentioned, lists and programs are represented using the same syntax in Lisp languages: lists. Therefore, <a href="http://en.wikipedia.org/wiki/Metaprogramming" target="_blank"><em>meta-programming</em></a> is very natural and easy. Meta-programs are programs that manipulate (other) programs. And who doesn’t want to write meta programs?</p>
<p>I do. It’s my job. Plus, it’s awesome.</p>
<p>Lisp originally came out of the <em>artificial intelligence</em> world, where they had the belief that a homoiconic language at some point could transform and improve itself. Programs that rewrite themselves and at some point could make themselves smarter. Although it’s a cool idea, it never really happened. Shocker.</p>
<p>However, a great feature of Lisps resulting from their homoiconic nature are its language extension features. Have you ever wished that your favorite programming language had feature X? That you could use LINQ-style queries in Java, or PHP, for instance? The way to “extend” your language with features like this is to develop APIs that somewhat look like queries, but this will only get you so far. For instance, here’s an example of <a href="http://code.google.com/p/liquidform/" target="_blank">LIQUidFORM</a> in Java:</p>
<p>Person p = LiquidForm.use(Person.class, “p”);<br><br>List people = em.createQuery(<br><br> select(p).from(Person.class).as(p).where(eq(p.getSurname(), “Smith”)).toString())<br><br> .getResultList();</p>
<p>It’s nicer than simply typing in “SELECT p.* FROM Person AS p WHERE p.surname = “Smith” as a string, I guess, but it’s kind of a hack. Here’s the same query written using <a href="http://www.gitorious.org/clojureql/" target="_blank">ClojureQL</a>, a similar framework for Clojure:</p>
<p>(def people-query (query * employees (= surname “Smith”)))</p>
<p>Now although you may argue it’s not pretty (because you find Lisp syntax ugly), but it clearly fits in well with the rest of the language and it’s way less verbose.</p>
<p>Similarly, when playing with program transformation in Clojure, I needed a pattern matching feature, which is only offered in a very limited form in Clojure (data deconstruction). So I built pattern-rewrite macro that enables me to define pattern matching as follows, quite similar to <a href="http://zef.me/2265/strategic-programming-in-strategoxt" target="_blank">Stratego</a>. I gave identifiers starting with “?” a special meaning, those are the variables that are matched in the pattern. The syntax of the patter-rewrite macro:</p>
<p>(pattern-rewrite expr<br><br> (lhs-pattern rhs-pattern)+<br><br> no-match-result?)</p>
<p>So, let’s rewrite our replace-addition with substraction example using this macro:</p>
<p>(pattern-rewrite ‘(+ 2 3)<br><br> (+ ?x ?y) (- ?x ?y))</p>
<p>Resulting in:</p>
<p>‘(- 2 3)</p>
<p>Of course it also works with more complex patterns.</p>
<p>The idea of being able to add features like this to a language really appeals to me. You can do stuff like this in other modernlanguages, like <a href="http://www.scala-lang.org" target="_blank">Scala</a> and Ruby, in a nice way as well, but Lisps still offer more power due to their simple syntax.</p>
<p>You can learn more about <a href="http://clojure.org" target="_blank">Clojure</a> on their website. Pragmatic Programmers have a nice Clojure book: <a href="http://www.pragprog.com/titles/shcloj/programming-clojure" target="_blank">“Programming Clojure”</a>.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1637</wp:post_id>
		<wp:post_date>2009-11-06 11:45:57</wp:post_date>
		<wp:post_date_gmt>2009-11-06 10:45:57</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>brief-introduction-to-clojure</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="clojure"><![CDATA[Clojure]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="lisp"><![CDATA[Lisp]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Google Wave First Impressions</title>
		<link>http://zef.me/2009/10/12/google-wave-first-impressions/</link>
		<pubDate>Mon, 12 Oct 2009 13:57:53 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2009/10/12/google-wave-first-impressions/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Before I start: no, I do not have Google Wave invites to give out. I was invited myself, and those who were invitees cannot invite people themselves, as of yet.</p>
<p>Alright.</p>
<p>Last week I finally got access to <a href="http://wave.google.com" target="_blank">Google Wave</a>. Google’s reinvention of e-mail, chat and document collaboration all in one tool. Although the application is still fairly buggy (although also very usable!), I must say I like it. And I think I will like it even more as more and more people get accounts. It’s like with any messenger-type of applications, they’re only useful if other people are on it as well.</p>
<p>There are plenty of reviews around (<a href="http://www.techcrunch.com/2009/05/28/google-wave-drips-with-ambition-can-it-fulfill-googles-grand-web-vision/" target="_blank">TechCruch</a>, <a href="http://mashable.com/2009/05/28/google-wave-guide/" target="_blank">Mashable</a>, <a href="http://news.cnet.com/8301-17939_109-10255402-2.html" target="_blank">CNet</a>) so I won’t talk about the basics extensively. Just briefly.</p>
<p>Instead of e-mail conversations, in Google Wave you have waves. A wave can have one or more participants, not all of which have to be human, they can also be bots. A bot can add additional functionality to a wave. The “emoticony” bot (emoticonbot@appspot.com), for instance, automatically turns textual smilies, e.g. :) into pictures. More useful are Watexy (watexy@appspot.com) and Syntaxy (kasyntaxy@appspot.com) that add Latex-style formulas and programming language syntax high-lighting. Bots are simply contacts, that you add on a e-mail/wave address basis.</p>
<p>(Syntaxy and Watexy in action)</p>
<p>A wave consists of “blips”, equivalent to an e-mail message. Blips can be edited by all participants (even simultaneously). Each blip shows who has been editing that blip, and as people are editing all other participants see the changes happening in real-time.</p>
<p>If you add a special participant to a wave: public@a.gwave.com, the wave becomes public, i.e. everybody can get access to it. Public waves can be found by searching for “with:public”. However, as more and more people discover this feature, this search query (which is updated live), is a real-time web nightmare. So it’s probably better to add a few keywords to the query to further restrict the search.</p>
<p><strong>Update</strong>: “with:public” does not work as it used to anymore, as a replacement use “group:public@a.gwave.com”.</p>
<p>The numbers in green next to the wave indicate the number of changes since you last visited the wave (if ever). If you select a public wave, you are added to the list of participants and the wave is put in your inbox so that you receive further updates to it.</p>
<p>In addition to bots, you can also add widgets to a wave that enable additional functionality such as polls, maps and so on, but to be frank, I haven’t used widgets a lot yet.</p>
<p><strong>So, how to use it.</strong></p>
<p>Every time a new communication tool is invented we have to figure out how to use it effectively. Now that many of us have finally figured out Twitter, the next big thing is Wave.</p>
<p>Browsing around the public waves, I see a lot of waves with titles like “The Scala Wave”, “The Dutch wave”, “The Python wave”, i.e. people use it as a tiny real-time message board. It doubt these waves really scale, though. Sure, they’re fun for the first few minutes, having a real-time discussion with people around the world. But as a wave goes beyond a couple dozen blips, it becomes kind of a mess. The question is what the granularity of wave should really be. A wave per country, city, household, project, sub-project, task, conversation, person, thought? It’s still to be figured out.</p>
<p>One wave for a single conversation seems to work well. Similar to an e-mail or chat conversation. I also imagine aggregating information about a topic works well. After covering a conference I just went to, <a href="http://tweetview.net/ev/sle09" target="_blank">together with a number of other people on twitter</a>, I can imagine that Google Wave may be an excellent tool for that. But if there should be a wave per conference or per session, remains to be found out. I for one, can’t wait to experiment with this during the next conference I go to, provided that more people will have Wave accounts by then.</p>
<p>We also still have to figure out if Wave is really good for public conversations. The public@a.gwave.com is implemented as a hack, albeit a cool one. Whether this will work and scale as more distributed wave servers come into existence remains to be seen.</p>
<p>Either way, Google Wave is cool and I hope it will one day replace my e-mail.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1685</wp:post_id>
		<wp:post_date>2009-10-12 15:57:53</wp:post_date>
		<wp:post_date_gmt>2009-10-12 13:57:53</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>google-wave-first-impressions</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="google"><![CDATA[Google]]></category>
		<category domain="post_tag" nicename="google-wave"><![CDATA[Google Wave]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>On Language Design: My Problem With ClojureQL</title>
		<link>http://zef.me/2010/01/04/on-language-design-my-problem-with-clojureql/</link>
		<pubDate>Mon, 04 Jan 2010 10:10:36 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2010/01/04/on-language-design-my-problem-with-clojureql/</guid>
		<description></description>
		<content:encoded><![CDATA[
<p><strong>Update:</strong> Since this post, ClojureQL has been completely redesigned, my criticism in this post no longer applies. You can find more information about the new ClojureQL <a href="http://clojureql.org/" target="_blank">on its new website</a>.</p><hr>

<p>Every programming language comes with a certain syntax, a certain <em>feel</em> for what feels like native use of that syntax, and the semantics of the syntax. Escapes and mixing with a completely different feeling language are generally not a good idea. My favorite example of this is Objective-C, which is a really strange mixture of C and Smalltalk. C as you will know is a curly brace language, it has a way of doing things. It’s a low-level system programming language. Smalltalk is a high-level programming language that feels very different and looks very different.</p>
<p>Objective-C is C with some Smalltalk bolted on to it, which gives it a strange feel:</p>
<p>MyObject* o = [[MyObject alloc] initWithNum: 20 andString: @”Hello world!”];</p>
<p>In C, a function call has the syntax function_name(arg1, arg2). However, when moving into Objective-C object land, a method call looks like: [object aMethodCall: arg1 andArg: arg2]. Alien, if you ask me.</p>
<p>In Lisp land, an example of this is the common-lisp loop macro:</p>
<p>(loop for x in ‘(a b c d e)<br><br> for y from 1<br><br> if (&gt; y 1) do<br><br> (format t “, ~A” x)<br><br> else do<br><br> (format t “~A” x))</p>
<p>If you’ve ever written any Lisp code, you’ll see that although this is very readable and concise, like Objective-C, by the way, it feels completely weird in a Lisp-style language.</p>
<p>I have a similar problem with <a href="http://www.bestinclass.dk/index.php/2009/12/clojureql-where-are-we-going/" target="_blank">ClojureQL</a>, a query language for <a href="http://www.clojure.org" target="_blank">Clojure</a>. Queries expressed in ClojureQL change the meaning of Clojure in a way that I feel is bad language design because it it breaks assumptions that hold true for the rest of Clojure.</p>
<p>Consider the following snippet of code:</p>
<p>(let [first-name “zef”]<br><br> …<br><br> (= first-name “zef”) …)</p>
<p>This piece of code binds the value “zef” to the symbol first-name. The programmer’s expectation is that when the first-name symbol is used anywhere within the let, its value will be “zef”, unless it is rebound to something else with another let. However, this assumption breaks when using ClojureQL:</p>
<p>(let [first-name “zef”]<br><br> (query users * (= fname first-name)))</p>
<p>This is legal in ClojureQL, although it is a bit unclear where fname would come from, it comes from the * there, we can make this more explicit:</p>
<p>(let [first-name “zef”]<br><br> (query users [fname lname] (= fname first-name)))</p>
<p>This is perfectly valid ClojureQL code, except it doesn’t do what you would expect it to do. It does not find all users with first name “zef”, no, it will throw an SQL exception saying that the table users does not have a field “first-name”. Huh?</p>
<p>It turns that when we use the query macro, we step into a different world, a world where we have to let our previous assumptions go. When first-name is used, it no longer refers to the value bound to it before, instead it’s simply a name referring to a column in a table. It is still possible to escape to “normal” Clojure semantics by escaping back into the Clojure world with a ~ prefix:</p>
<p>(let [first-name “zef”]<br><br> (query users [fname lname] (= fname ~first-name)))</p>
<p>I’m not very fond of this type of language design. It would probably be better if a ~ would not be necessary, in that case you could read the query as a kind for loop where each result row is destructured and bound to [fname lname], which are then used in the body expression. However, still, intuitively in this interpretation the names of fname and lname should not refer to column names in the users table, but instead are only to be used for binding in the code, referring to the first and second column in the result set. Still confusing.</p>
<p>A syntax that is more Clojuresque, if you will, albeit more verbose would be:</p>
<p>(let [first-name “zef”]<br><br> (query [u users] (= (:fname u) first-name)))</p>
<p>Intuitively, the query iterates over all users binding each user to u and filtering on the value of the :fname key of each user entry. I’m still not confortable with the use of users there, which seems some type of magic symbol, but I suppose that could be fixed too. Maybe of having a (deftable users) statement somewhere else in the code, or replacing with with (table :users), which, again, would make it slightly more verbose:</p>
<p>(let [first-name “zef”]<br><br> (query [u (table :users)] (= (:fname u) first-name)))</p>
<p>The point is that <strong>with great power comes great responsibility</strong>. The macro facilities of Lisps give you enormous power to create your own language extensions, which is great. It makes experimenting with languages very easy. However, it turns out that language design is very difficult. The language syntax is the user interface of your language. Whereas typical languages like Java and C# evolve very slowly and are designed by experienced language designers, in a Lisp anybody can do it, which can result in very confusing abstractions.</p>
<p>Abstractions like these have to be designed very, very carefully.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>61</wp:post_id>
		<wp:post_date>2010-01-04 11:10:36</wp:post_date>
		<wp:post_date_gmt>2010-01-04 10:10:36</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>on-language-design-my-problem-with-clojureql</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="clojure"><![CDATA[Clojure]]></category>
		<category domain="post_tag" nicename="dsl"><![CDATA[Dsl]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="language-design"><![CDATA[Language Design]]></category>
		<category domain="post_tag" nicename="objective-c"><![CDATA[Objective C]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Adia: A Week With Clojure And MongoDB</title>
		<link>http://zef.me/2009/12/30/adia-a-week-with-clojure-and-mongodb/</link>
		<pubDate>Wed, 30 Dec 2009 16:43:05 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2009/12/30/adia-a-week-with-clojure-and-mongodb/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>I spent last week with my wife and her family in Poland (my wife is Polish). Her parents do not speak English, or any other language than Polish so communication is problematic beyond the <em>thank you, you’re welcome, yes and no thank you</em>s. My wife also spends a lot of time meeting with her friends, so I typically spend quite some time staring at the wall among people who are speaking a language I do not know well enough yet.</p>
<p>So, recently I’ve been coming up with little one-week programming projects for the weeks we spend there. These projects do not have to lead to anything in particular, but give me a good amount of time to take a deep dive into something I do not ordinarily have time for.</p>
<p>Last week my project was building a web application and framework with <a href="http://www.clojure.org" target="_blank">Clojure</a> and <a href="http://www.mongodb.org/" target="_blank">MongoDB</a>. I already had a plan for a web application in mind before, and already read up on Clojure (through the excellent <a href="http://www.pragprog.com/titles/shcloj/programming-clojure" target="_blank">Programming Clojure</a> book) and <a href="http://zef.me/tag/clojure" target="_blank">played with it a little bit</a>. I have also been interested in non-relational databases for quite some time and before have played with <a href="http://code.google.com/appengine/docs/python/datastore/" target="_blank">Google AppEngine’s DataStore</a> and <a href="http://zef.me/category/couchdb" target="_blank">CouchDB</a>. Similar to CouchDB, MongoDB is a document-oriented database, but it has more “conventional” querying methods than CouchDB, still not SQL though.</p>
<p>For a week on-and-off I went to work.</p>
<p>There were basically two components to this project, first getting to know MongoDB and second learning to build a nice internal DSL in a functional language, specifically, a lisp (I never seriously learned a Lisp before, only supervised practical sessions for a class using Scheme). As a case study I came up with a nice not-too-complicated web application to build. I won’t go into that application in this post, it’s still secret (wooh!).</p>
<p>Alright. MongoDB is written in C++ and has readily compiled binaries for most platforms available and very easy to install (simply extract and run). It is known for its good performance and used by many companies, including <a href="http://www.sourceforge.net" target="_blank">Sourceforge</a> and <a href="http://www.disqus.com" target="_blank">Disqus</a> (the comment system I use on this website). After starting the server, the easiest way to start interacting with the system is the mongo javascript console.</p>
<p>Let me demonstrate it by simply showing you a sequence of commands (prefixed with &gt;) and outputs:</p>
<p>&gt; use people<br><br>switched to db people<br><br>&gt; db.Person.save({name: “Zef Hemel”, age: 26})<br><br>&gt; db.Person.save({name: “Justyna Hemel”, age: 26})<br><br>&gt; db.Person.find()<br><br>{“_id” : ObjectId( “4b3b51c24905573d69b9bd67”) , “name” : “Zef Hemel” , “age” : 26}<br><br>{“_id” : ObjectId( “4b3b51d64905573d69b9bd68”) , “name” : “Justyna Hemel” , “age” : 26}</p>
<p>Note that the people <em>database</em> did not exist yet, and was in fact created when it was first used, similarly, the Person <em>collection</em> (“mongoose” ;-) for table) was automatically created when I saved a first record to it. Like other document databases, collections are schema-less. Now that we have some data, we can start querying:</p>
<p>&gt; db.Person.find({name: “Zef Hemel”})<br><br>{“_id” : ObjectId( “4b3b51c24905573d69b9bd67”) , “name” : “Zef Hemel” , “age” : 26}</p>
<p>So querying happens by passing the find function a map of keys and values that must match in a document. This notation gets slightly weird when looking for age ranges, for instance between 20 and 30:</p>
<p>&gt; db.Person.find({age: {$gt: 20, $lt: 30}})<br><br>{“_id” : ObjectId( “4b3b51c24905573d69b9bd67”) , “name” : “Zef Hemel” , “age” : 26}<br><br>{“_id” : ObjectId( “4b3b51d64905573d69b9bd68”) , “name” : “Justyna Hemel” , “age” : 26}</p>
<p>So there, as value of the property age, we give it another map with special operators $gt and $lt, which stand for… greater than and less than! It’s a bit odd, but it’s easy to get used to (and screaming to be wrapped in some nicer syntax on a language level).</p>
<p>Because no indexes have been defined on the collection yet, this lookup is still rather slow. However, indexes can easily be defined:</p>
<p>&gt; db.Person.ensureIndex({name: 1})<br><br>true</p>
<p>This defines an index on the name property in ascending order (-1 would be descending). The index order only matters when putting indexes on multiple columns and sorting on some of them, or so the manual tells me.</p>
<p>So, MongoDB is fairly straight forward to play with, easily create new collections, add properties and so on. Intuitively it feels like a good match to a dynamic language, such as Clojure.</p>
<p><a href="http://www.clojure.org" target="_blank">Clojure</a> is dynamic functional language for the JVM. As mentioned, it is a Lisp. It comes with a nice interactive REPL to experiment with. The most interesting thing about Clojure from my point of view, as somebody doing research into domain-specific languages, is the ability to create domain-specific languages with it. As you will know, the syntax of Lisp is extremely simple and mostly defined by its functions and macros.</p>
<p>There is already a simple Clojure web framework called <a href="http://compojure.org/" target="_blank">Compojure</a>, which is basic but quite powerful. For my application I decided to build some layers on top of Compojure. First of all, compojure only deals with the web side of things and not with database stuff. For MongoDB there is <a href="http://github.com/somnium/congomongo" target="_blank">CongoMongo</a>, a simple Clojure interface to MongoDB. This turned out the be far from complete, however, so <a href="http://github.com/zefhemel/congomongo" target="_blank">I branched it</a> and added a bunch of functions to it.</p>
<p>I decided to call my little framework <a href="http://github.com/zefhemel/adia" target="_blank">Adia</a>, it’s available for download from <a href="http://github.com/zefhemel/adia" target="_blank">github</a>, see the Readme there for installation instructions, there’s no documentation yet, there is however a simple <a href="http://github.com/zefhemel/adia/tree/master/examples/wiki/" target="_blank">wiki application</a> in the examples directory.</p>
<p>Although MongoDB does not enforce any schema, it seemed like a useful thing to define a simple entity language anyway, if not for the database itself, for me, as documentation and possibly for automatic form generation and data validation, later. This is what it looks like:</p>
<p>(<strong>defent</strong> Page<br><br> [:title :string {:unique true}]<br><br> [:author :string]<br><br> [:text :text])</p>
<p>As can be guessed, this defines a Page entity with three properties: title, author and text.</p>
<p>As you will be aware, I’m a developer of <a href="http://www.webdsl.org" target="_blank">WebDSL</a>, a DSL for building web applications, and came to appreciate its simple page and template abstractions. Although implementing actions in a WebDSL fashion would be against the functional character of the language, I did add a page abstraction, except I call them webfns, defined with defwebfn (similar to defn, to define a Clojure function):</p>
<p>(<strong>defwebfn</strong> say-hello [nam str]<br><br> (<strong>str</strong> “Hello, “ nam))</p>
<p>This defines a web function with one parameter: nam, which is coerced to a string value through the str function. Similarly, every entity definition also defines a function with the same name that can coerce the URL representation (identifier) and retrieve its value from the database, e.g.:</p>
<p>(Page “31108a33ee093a4bdd7b5900”)</p>
<p>Retrieves the page object with ID “31108a33ee093a4bdd7b5900”. This can be taken advantage of in web functions as follows:</p>
<p>(<strong>defwebfn</strong> show-title [p Page]<br><br> (<strong>str</strong> “Title: “ (:title p)))</p>
<p>These webfns are available through a URI based on their name and the last part of the namespace they were defined in. For instance, when a webfn show is defined in namespace myapp.user, it will be available through “/user/show”. Any namespace ending with .index, or webfn named index, are bound to the root, e.g. webfn index in myapp.user results in “/user” and webfn index in myapp.index is bound to “/”.</p>
<p>Templates are, of course, simply functions with parameters. Compojure comes with a rather nice alternative HTML representation using Clojure vectors:</p>
<p>[:a {:href “/”} “Link text”]</p>
<p>Which can be used to define a main template:</p>
<p>(<strong>defn</strong> main-layout [title &amp; body]<br><br> (<strong>html</strong><br><br> (<strong>doctype</strong> :html4)<br><br> [:html<br><br> [:head<br><br> [:title title]]<br><br> [:body<br><br> [:h1 “Header”]<br><br> [:hr]<br><br> body<br><br> [:hr]<br><br> “&amp;copy; Zef Hemel”]]))</p>
<p>Of course, vectors like these can easily be combined with regular function calls, to build pages. Here is an example of an index page with title “Wiki home”, displaying a list of current pages and a form to add a new one:</p>
<p>(<strong>defwebfn</strong> index []<br><br> (main-layout<br><br> “Wiki home”<br><br> [:h1 “All wiki pages”]<br><br> [:ul<br><br> (<strong>for</strong> [p (query model/Page)]<br><br> [:li (navigate [show p] (:title p))])]<br><br> (<strong>form</strong> [handle-add]<br><br> [:h1 “Add a page”]<br><br> [:div “Title: “ (input-string :title)]<br><br> [:div (input-text :text)]<br><br> (<strong>submit-button</strong> “Add page”))))</p>
<p>This will be rendered roughly as follows:</p>
<p>The actual adding happens in the handle-add function:</p>
<p>(<strong>defwebfn</strong> handle-add []<br><br> (<strong>let</strong> [p (<strong>databind<br><br></strong> (model/Page<br><br> :author (<strong>get-session</strong> :username)) <br><br> *form* [:title :text])]<br><br> (<strong>redirect</strong> [show (<strong>persist!</strong> p)])))</p>
<p>Additionally, I can define an access control rule for handle-add:</p>
<p>(<strong>defac</strong> handle-add (<strong>get-session</strong> :username))</p>
<p>Which says that only if the session key :username has a value, i.e. the user is logged in, a page can be added, resulting in the handle-add only to be available to logged in users. In addition, the form on the index page will be hidden when the user is not logged in. Similar to WebDSL’s navigates.</p>
<p><strong>Lessons learned</strong></p>
<p>MongoDB is a nice and simple NoSQL database system and when you’re in the right document-vs-row no-join-required mindset, it’s easy to work with. I found that it also works well with Clojure, initially I played with Clojure and MySQL a bit, which also works fine. Still, I found it a bit slower to iterate because you keep creating and dropping tables and adding, modifying and removing columns in your table as you’re developing the application. Database migration is a pain. In MongoDB this is less of a problem I have found.</p>
<p>Clojure is quite a nice, elegant, simple language and macros are a very powerful way of defining new “syntax” for your own little domain-specific languages. The syntax of the language is the user interface to the developer and is therefore important. Not everybody is a fan of the Lisp syntax and it definitely takes some getting used to. Lisp programmers say you should see through the parentheses and instead look at indentation to extract meaning from programs. That works, but bites you in the ass when you do some s-expression manipulation and misplace some parenthesis and do not let your editor (I used vim with <a href="http://kotka.de/projects/clojure/vimclojure.html" target="_blank">vimclojure</a>) re-indent your code. This happened to me a few times and on occasion took me quite some time to debug.</p>
<p>The Clojure syntax is concise, maybe <em>too</em> concise. Sometimes I find it hard to e.g. see what piece of code is part of the true and which is of the false branch of an if-statement, an <em>else</em> keyword can be useful to make code easier to read.</p>
<p><a href="http://en.wikipedia.org/wiki/Homoiconicity" target="_blank">Homoiconicity</a> is cool. The defwebfn macro, in addition to defining a function and doing some other stuff, also keeps the original list structure that defines the web function in memory (the source code, as it were). The access control module takes advantage of this by taking this code, wrapping an if statement around it and recompiling it at runtime. Model transformations at runtime! Potentially more advanced program transformations can happen in this way.</p>
<p>Are Clojure DSLs as <a href="http://zef.me/2409/static-verification-an-external-dsl-advantage" target="_blank">flexible as external DSLs</a>? Not really. First off, you’re locked into the Lisp syntax. Second, checking is rather limited and error messages not always extremely helpful, similar to DSLs in other languages, such as Ruby. Clojure does do compile-time symbol lookups which is helpful, but beyond that a lot of errors are detected at runtime. Macros are evaluated at compile time and can therefore check a few things then, but this checking is limited to the “AST” representation of its arguments. Clojure is a dynamically typed language, so checking in general is problematic. And third, you’re bound to the JVM (or with more effort <a href="http://github.com/richhickey/clojure-clr" target="_blank">CLR</a>), you can’t <a href="http://zef.me/2218/on-the-pil" target="_blank">target multiple platforms</a>.</p>
<p>Meta-programming in Clojure is cleaner than in many other languages such as Ruby and Python. Most of it happens using macros which are fairly clean, if used well.</p>
<p>As <a href="http://zef.me/2503/models-are-programs" target="_blank">I suggested before</a>, libraries and internal DSLs like these are great ways of prototyping abstractions. They’re easy and quick to implement. Access control was added in about 20–30 lines of extra code, OpenID authentication took about 30 (through use of <a href="http://code.google.com/p/jopenid/" target="_blank">JOpenID</a>). This makes Clojure a great language to try out and play with abstractions. I find that in <a href="http://www.strategoxt.org" target="_blank">Stratego</a>, which we use to implement WebDSL, this is still problematic due to the fact that (1) it is a separate language, so you have to make mental jumps between Stratego and the target language, e.g. Java, and (2) long compilation times of the ever growing WebDSL compiler.</p>
<p>As mentioned, if you’re interested in Adia, <a href="http://github.com/zefhemel/adia" target="_blank">you can download it and play with it yourself</a>. Documentation is essentially non-existent as of yet, but the <a href="http://github.com/zefhemel/adia/tree/master/examples/wiki/" target="_blank">wiki example</a> demonstrates its basic features.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>63</wp:post_id>
		<wp:post_date>2009-12-30 17:43:05</wp:post_date>
		<wp:post_date_gmt>2009-12-30 16:43:05</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>adia-a-week-with-clojure-and-mongodb</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="clojure"><![CDATA[Clojure]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="mongodb"><![CDATA[Mongodb]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>On Language Design: Magic Variables in Compojure</title>
		<link>http://zef.me/2010/01/05/on-language-design-magic-variables-in-compojure/</link>
		<pubDate>Tue, 05 Jan 2010 16:02:18 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2010/01/05/on-language-design-magic-variables-in-compojure/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>The Perl language is riddled with special variables. Consider the following example:</p>
<p>open(FILE, “bla.txt”);<br><br>while(&lt;FILE&gt;) { print; }</p>
<p>In case you don’t speak Perl, this is equivalent to:</p>
<p>open(FILE, “bla.txt”);<br><br>while(&lt;FILE&gt;) { print $_; }</p>
<p>Still unclear? Alright, once more:</p>
<p>open(FILE, “bla.txt”);<br><br>while($line = &lt;FILE&gt;) { print $line; }</p>
<p>Perl is developed by linguist Larry Wall, who likes to put all kinds of natural language things into Perl. $_ refers to the subject of the sentence, it’s “it” as it were. print $_, or simply print means “print it”. How do we know this variable exists? We don’t. Unless we read the manual. Although they might be useful, magic variables like these are generally bad practice, it’s one of many reasons that Perl code is often called write only code.</p>
<p>PHP also has some magic variables whose behavior do not adhere to any usual rules, they are called super globals. In particular there are $_POST and $_GET. They do not adhere to the scoping rules defined in PHP.</p>
<p>I don’t know about you, but I like to see my variables declared. I like to see where they come from, are they local variables, parameters, or imported from a module that I can lookup? Magic variables are confusing, because they have different behavior than other variables in a language, they do not adhere to the usual rules.</p>
<p>As part of <a href="http://zef.me/2600/adia-a-week-with-clojure-and-mongodb" target="_blank">Adia</a>, I played around with Compojure, a Clojure web framework. Generally, <a href="http://www.compojure.org" target="_blank">Compojure</a> is a well-designed framework, but I came across one instance where it uses magic variables: in the defroutes macro. An example:</p>
<p>(defroutes webservice<br><br> (GET “/”<br><br> (str “Hello, “<br><br> (:name (:query-params request)))))</p>
<p>This defines a mapping from the “/” URI, to code to be executed when that URI is requested. As you can see, I use the variable request in this example. Upon inspection, it not clear where it comes from. At first, you may assume it’s a global that is dynamically bound (Clojure has dynamically scoped variables). But some refactoring of the code shows that this is not the case:</p>
<blockquote>(defn say-hello []<br><br> (str “Hello, “ (:name (:query-params request))))<br><br><br><br>(defroutes webservice<br><br> (GET “/”<br><br> (say-hello)))</blockquote>
<p>This results in a “symbol cannot be resolved” error for the request variable. So clearly, request is not a dynamically bound variable either. So what is it, and where does it come from? I had to dig into the Compojure source code to find it, it is defined in the with-request-bindings macro, which defines some magic symbols: params, cookies, session and flash that are only accessible from inside the macro’s body:</p>
<p>(defmacro with-request-bindings<br><br> “Add shortcut bindings for the keys in a request map.”<br><br> [request &amp; body]<br><br> `(let [~’request ~request<br><br> ~’params (:params ~’request)<br><br> ~’cookies (:cookies ~’request)<br><br> ~’session (:session ~’request)<br><br> ~’flash (:flash ~’request)]<br><br> ~@body))</p>
<p>I find this confusing and therefore bad practice. So, what is the alternative? It turns out there’s no perfect solution here, it’s all about trade-offs.</p>
<p>The problem magic variables try to solve is enabling quick access to data that is otherwise not accessible in a concise manner. In this case it could have been solved by declaring the request and other variables somewhere, for instance as parameters to defroutes:</p>
<p>(defroutes webservice [request params cookies session flash]<br><br> …)</p>
<p>A reason not to go with this solution is likely to be its verbosity, nobody likes to write functions with a large number of arguments. A second alternative is only passing the request parameter and letting the user pull out the other from that map every time they need it. A reason not to go with that solution is user inconvenience, users likely want quick access to all five of these values and don’t want to look them up in the request map every time. A third alternative is using dynamically bound global variables. In Clojure these can be bound to a new value only for a certain thread within a certain code execution path:</p>
<blockquote>(def request nil) ; root binding is nil<br><br><br><br>(defn print-request []<br><br> (println request))<br><br><br><br>…<br><br>(binding [request (build-request …)] ; rebind<br><br> (print-request) ; prints request<br><br> …))</blockquote>
<p>I use them in <a href="http://github.com/zefhemel/adia" target="_blank">Adia</a> for access to the request, post and get parameters. For this I declare 3 variables in the adia.web module:</p>
<p>(def *request* nil)<br><br>(def *form* nil)<br><br>(def *query* nil)</p>
<p>Values have been dynamically bound to their respective values by the time they are used within a webfn:</p>
<p>(defwebfn say-hello []<br><br> (str “Hello, “ (:name *query*)))</p>
<p>My thinking is that by using the *name* convention, it is at least clear these are not normal locally defined variables, they are different. Secondly, they are only available if you import the adia.web module and are part of that module’s interface, i.e. you can look up their declaration. What is still not clear is where their value comes from, but I suppose the user will have to abstract from that. The alternative to this approach would be to pass these variables as parameters to every webfn, but I decided against this because it would make writing webfn defintions too verbose. It was also not very clear what the syntax should have been: (defwebfn fn-name request form query [arg1 type arg2 type] …)? (defwebfn fn-name [request form query] [arg1 type arg2] …)? Neither of these options seemed very elegant to me, which is why I decided to be pragmatic and go with dynamically scoped globals.</p>
<p>I think this is an acceptable compromise. While the five globals are essentially still input parameters, they do not have to be passed around all the time. However, if you invoke a webfn outside a path where values are bound to the *request*, *form* and *query* variables, you are likely to receive NullPointerExceptions.</p>
<p><em>As a general rule:</em> to keep programs readable and comprehensible, it should be easy to see where your variables and symbols come from. Are they local variables, parameters, globals? Magic variables should be avoided if possible.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>139</wp:post_id>
		<wp:post_date>2010-01-05 17:02:18</wp:post_date>
		<wp:post_date_gmt>2010-01-05 16:02:18</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>on-language-design-magic-variables-in-compojure</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="clojure"><![CDATA[Clojure]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="language-design"><![CDATA[Language Design]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>A ‘When Rails Fails’ Follow-up</title>
		<link>http://zef.me/2009/11/12/a-when-rails-fails-follow-up/</link>
		<pubDate>Thu, 12 Nov 2009 09:17:57 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2009/11/12/a-when-rails-fails-follow-up/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>About 18 hours ago I posted <a href="http://zef.me/2308/when-rails-fails" target="_blank">When Rails Fails</a>, in which I showed what happens if you make simple mistakes in your Ruby on Rails code. The response was pretty massive. 30 comments were left on the post itself, and more discussion takes place on <a href="http://www.reddit.com/r/programming/comments/a3945/when_rails_fails/" target="_blank">reddit</a> and <a href="http://news.ycombinator.com/item?id=936657" target="_blank">hacker news</a>, plus I received some messages on twitter. Most memorable is <a href="http://twitter.com/mrkris/status/5637650910" target="_blank">this one</a>.</p>
<p>Criticism of the article falls into a number of categories.</p>
<p><strong>Category #1: Denial</strong></p>
<blockquote>You are talking crap, those error messages are pretty good!</blockquote>
<p>It saddens me that these error messages are perceived as “pretty good”. It tells you something about the state of tools today. If we go back to more basic programming, for instance in Java. You write code which contains errors. You compile the code, the compiler tells you “this objects has no such method at …”. “That class does not exist at…”, “variable not declared at …” You may hate Java and everything it stands for, but admit it, having this type of error messages is pretty convenient, isn’t it? Wouldn’t you prefer clear to-the-point domain-specific error messages over a stack trace with an obscure error message? If you say that the error message makes perfect sense, that’s only because you’ve encountered it before and remember how to resolve it, not that the error message is in fact clear.</p>
<p>When I mistype the name of a controller in routes.rb and the error I get is “uninitialized constant HommeController”, that is a bad error message. Better would be “At line … you refer to controller ‘homme’, but no such controller exists.” Are you honestly going to argue with that? You may say, “sure that would be great, but this is enough for me, I can handle these types of error messages.” And sure, you may find these errors acceptable and trade off well with the advantages of Rails as a whole, but do not tell me these error messages are perfectly fine.</p>
<p><strong>Category #2: You think this is bad, try a Java framework!</strong></p>
<p>Tell me about it. I have no intention of singling out Ruby on Rails here. I’m in no way a Rails hater. Rails was simply my first example to uncover there is a problem here. Later today I’ll publish a similar post about the Java Seam framework. <strong>Update</strong>: Here it is: <a href="http://zef.me/2333/when-jboss-seam-fails" target="_blank">When JBoss Seam Fails</a>.</p>
<p><strong>Category #3: You are simply a bad programmer!</strong></p>
<blockquote>I can’t help but immediately judge the author to be one of those <a href="http://en.wikipedia.org/wiki/NNPP" target="_blank">NNPP</a>’s who spends days tripping over ridiculously simple issues because they never really grokked how to debug in the general sense. I’m not claiming the author is an NNPP, I’m just saying when you get hung up on the basics like this that’s the impression that is conveyed.</blockquote>
<p>Another:</p>
<blockquote>I hate rails for several reasons but either you just started programming, or you are trolling.</blockquote>
<p>I like these, especially since I clearly pointed out:</p>
<blockquote>To test this out, I followed Rails’ “Getting Started” guide and made “accidental” mistakes along the way, to see how the system would react.</blockquote>
<p>I made these mistakes “accidentally” (note the quotes). Quotes imply sarcasm here. And I’m not even going to defend my programming abilities.</p>
<p><strong>Category #4: Poor attention to detail is going to bite you in the ass as a programmer no matter what technology you’re using</strong></p>
<p>True, but it is the tool’s job to help you as much as possible when you do screw up, which you inevitably will. Rails (as shown) does a fairly bad job at that. However, not everybody seems to agree, from the comments:</p>
<blockquote>Wrong. It’s not the framework’s job to do anything. Rails isn’t for lazy people.</blockquote>
<p>It’s not the framework’s job to do anything? Are you serious? Why do you use it? Isn’t the point of Rails to do less work, to make web development fun, to make work more productive? Isn’t making mistakes part of that?</p>
<p><strong>Category #5: Where are your tests?</strong></p>
<p>Would my error messages be less obscure if I uncovered them by writing unit tests? At most it would make localizing errors easier.</p>
<p><strong>Category #6: If you don’t like it, go use Java! Screw you!</strong></p>
<p>Very mature. When I post my article about Java Seam today I expect far less response, or at least far less radical responses like these. People tend to get religious about their programming language. Today Ruby on Rails is their God, so whomever says a bad thing about it, shall be damned. And screw you too, for that matter.</p>
<p><strong>Category #7: Let me help you</strong></p>
<p>There were a number of people that offered me help, teaching me how to debug these issues even offering to contact me and help me out. I appreciate that a lot. It’s sweet. And it’s great that there are such friendly Rails people. I am not a struggling Rails developer however. I am interested in Rails, because we’re developing <a href="http://www.webdsl.org" target="_blank">WebDSL</a>, a Rails competitor. I’m looking at various web frameworks and observed that simple programming mistakes are often fairly difficult to track down. In WebDSL we attempt to solve this problem. I appreciate the intent, though.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>196</wp:post_id>
		<wp:post_date>2009-11-12 10:17:57</wp:post_date>
		<wp:post_date_gmt>2009-11-12 09:17:57</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>a-when-rails-fails-follow-up</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="rails"><![CDATA[Rails]]></category>
		<category domain="post_tag" nicename="webdsl"><![CDATA[Webdsl]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>I am…</title>
		<link>http://zef.me/2009/11/13/i-am/</link>
		<pubDate>Fri, 13 Nov 2009 08:43:41 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2009/11/13/i-am/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>I love the Internet: social rules do not apply, you can call people whatever you like in their virtual face. My favorites:</p>
<blockquote>“you are a pathetic loser to even waste your time to write such a post.”</blockquote>
<blockquote>“are you actually retarded or is this just a publicity stunt?”</blockquote>
<blockquote>“Yap, you made it. you actually succeeded in posting something a *little* more idiotic than your first post. i under estimated you, i admit.”</blockquote>
<blockquote>“either you just started programming, or you are trolling”</blockquote>
<blockquote>“I can’t help but immediately judge the author to be one of those <a href="http://en.wikipedia.org/wiki/NNPP" target="_blank">NNPP</a>’s who spends days tripping over ridiculously simple issues because they never really grokked how to debug in the general sense. “</blockquote>
<p>Just so you know.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>201</wp:post_id>
		<wp:post_date>2009-11-13 09:43:41</wp:post_date>
		<wp:post_date_gmt>2009-11-13 08:43:41</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>i-am</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="because-i-care"><![CDATA[Because I Care]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>How About A Nice Cup Of…</title>
		<link>http://zef.me/2009/11/17/how-about-a-nice-cup-of/</link>
		<pubDate>Tue, 17 Nov 2009 20:07:40 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2009/11/17/how-about-a-nice-cup-of/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>The amount of shit I got the past week is quite unbelievable. I actually had to block a particular commenter from my website, because he wouldn’t stop calling me, well, let’s say his vocabulary was extensive. I thought, maybe it’s Rails people, that must be it. But, no, I don’t think so. Because <a href="http://zef.me/2409/static-verification-an-external-dsl-advantage" target="_blank">after yesterday’s post</a>, which is not really attacking Rails in particular, this happened:</p>
<p>Now I don’t want to act all sensitive, but… come on!</p>
<p>Or am I just whining here?</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>204</wp:post_id>
		<wp:post_date>2009-11-17 21:07:40</wp:post_date>
		<wp:post_date_gmt>2009-11-17 20:07:40</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>how-about-a-nice-cup-of</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="cranky"><![CDATA[Cranky]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="meta"><![CDATA[Meta]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>When JBoss Seam Fails</title>
		<link>http://zef.me/2009/11/12/when-jboss-seam-fails/</link>
		<pubDate>Thu, 12 Nov 2009 10:51:37 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2009/11/12/when-jboss-seam-fails/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Yesterday <a href="http://zef.me/2308/when-rails-fails" target="_blank">I wrote about Ruby on Rails</a> and what happens when programmers make common (typing) mistakes in their programs. It seems to have hit a nerve.</p>
<p>A number of Java and C# programmers sat back and enjoyed the show. “See what happens when you don’t have static typing in your language? In your face, smug Ruby on Rails sons of guns!”</p>
<p>Indeed, statically typed language fans often argue that many such common mistakes, such as misspelled variable, method, type and field names are found much faster: at compile time — hell, with Eclipse almost as you type! And this is definitely true. However, errors are only found within Java code. Modern web applications are built using a number of domain-specific languages that interact with Java in various ways — JSF, regular expressions, SQL or HQL and various sorts of XML configuration files. Once Java start interacting with other languages, things start going wrong and static typing is no longer helpful.</p>
<p>In this article I demonstrate this problem by showing examples of code built using <a href="http://www.seamframework.org" target="_blank">JBoss Seam</a>, a modern Java framework for developing web applications. Seam is essentially glue to put a number of popular Java frameworks together in a developer-friendly manner. It relies on frameworks and technologies such as Hibernate, JSF and EJBs. Interaction between the languages are very error prone, it turns out. Other Java frameworks, such as the Spring framework have similar issues. People say the <a href="http://playframework.org/" target="_blank">Play Framework</a> does a better job. So play framework people, if you’re listening (and I know you are), if you’re still so confident about yourself after reading this article, let me know, I’ll have a good look at Play. But for now, let’s focus on JBoss Seam.</p>
<p><a href="http://zef.me/2308/when-rails-fails" target="_blank">Like with Ruby on Rails</a>, I will consider a number of easy to make mistakes, and see how the framework responds to it. These mistakes are exemplary of <em>problems that Java frameworks like Seam have, even though they are based on a statically typed language</em>. They cannot be used as a fair comparison to e.g. Ruby on Rails.</p>
<p><strong>Mistake #1: Use non-existent property of a variable in a JSF page</strong></p>
<p>Welcome #{user.nam}</p>
<p>The user object does not have a nam property, only a name property. As we compile our code, the compiler reports no errors. However, when we deploy and load the page we see:</p>
<p>Although the error is clear, it is left for us to figure out where this nam property is actually used. Apparently there is no compile-time checking of JSF pages against the backing Java beans they communicate with.</p>
<p><strong>Mistake #2: Non-existent references to pages</strong></p>
<p>Seam has a pages.xml file to control flow between pages under certain conditions. The page contains references to Java code (in #{…} expressions) and to views (.xhtml pages). However, neither of these are checked at compile time, so if we mistype a page name:</p>
<p>&lt;page view-id=”/home.xhtml” action=<br><br>“#{identity.isLoggedIn}”&gt;<br><br> &lt;navigation&gt;<br><br> &lt;rule if=”#{identity.loggedIn}”&gt;<br><br> &lt;redirect view-id=”/man.xhtml”/&gt;<br><br> &lt;/rule&gt;<br><br> &lt;/navigation&gt;<br><br>&lt;/page&gt;</p>
<p>We are get a 404 Not found error.</p>
<p><strong>Mistake #3: Faulty validation regular expression</strong></p>
<p>Validation of data model properties based on regular expression can be defined using the @Pattern annotation. But what happens when the programmer puts in a syntactically invalid regular expression?</p>
<p>@Pattern(regex=”^[\w*$”, message=”not a valid username”)<br><br>public String getUsername() {<br><br> return username;<br><br>}</p>
<p>There is a ‘[‘ too many there. When the code is compiled, no error is found. However, when it is deployed to the application server, an exception with an enormous stack trace appears:</p>
<p>It’s clear there is a regex mistake here. Somewhere. But where exactly is very hard to pinpoint drowning in the trace.</p>
<p><strong>Mistake #4: Making a mistake in a HQL query</strong></p>
<p>The Java Hibernate framework uses its own variant of SQL, that is slightly higher-level than SQL. Queries are represented as strings, and only checked at runtime.</p>
<p>List existing = em.createQuery(“select u.username from User like u where u.username=#{user.username}”)<br><br> .getResultList();</p>
<p>There is a mistake here because there should not have been a “like” there in that query. When the action is invoked, an exception is thrown with an even longer stack trace than before:</p>
<p>A similar exception occurs 7 times in the stack trace, only on a few location there is actually a reference to the location in the code where the problem occurred:</p>
<p>at org.jboss.seam.example.booking.RegisterAction.register(RegisterAction.java:40)</p>
<p>Bad.</p>
<p><strong>Conclusion</strong></p>
<p>Compared to Ruby on Rails, the ability to type check Java code is a nice feature and lets you find a certain kind of mistake very quickly — in an IDE such as Eclipse even as you type. This support rapidly degrades when moving outside the statically typed world of Java. As soon as the programmer has to jump to using strings, as is the case when using e.g. regular expression, SQL and HQL, the safe, checked world of Java comes to an end.</p>
<p>The only kind of checks that are performed in languages like Java are type checks. This also means that the only mistakes are found that are related to types and can be expressed in types. This gets you only up to a certain point in finding programming errors. In order to use regular expressions in Java, programmers have to encode them in strings; SQL queries are encoded in strings — <em>compilers do not check strings</em>. Strings are parsed and interpreted only at runtime, meaning problems only appear at runtime typically buried in an enormous stack trace. And that’s a big shame.</p>
<p><strong>Next part in this series:</strong> <a href="http://zef.me/2371/when-scala-dsls-fail" target="_blank">When Scala DSLs Fail</a>.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>210</wp:post_id>
		<wp:post_date>2009-11-12 11:51:37</wp:post_date>
		<wp:post_date_gmt>2009-11-12 10:51:37</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>when-jboss-seam-fails</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="error-detection"><![CDATA[Error Detection]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="java"><![CDATA[Java]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>When Scala DSLs Fail</title>
		<link>http://zef.me/2009/11/13/when-scala-dsls-fail/</link>
		<pubDate>Fri, 13 Nov 2009 12:23:31 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2009/11/13/when-scala-dsls-fail/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>The hot new contender in the space of interal DSLs (domain-specific languages as libraries) is <a href="http://www.scala-lang.org/" target="_blank">Scala</a>. Scala is, as is implied by its name, a language that is designed to <em>scale</em> from small one-off scripts to large enterprise applications. It is a statically typed language, and in many ways can be seen as a successor to Java. It also compiles to JVM bytecode. Similar to Ruby, Scala has a flexible syntax, which makes it an interesting choice to develop internal DSLs for (like Ruby on Rails).</p>
<p>The most popular web application framework for Scala is <a href="http://liftweb.net/" target="_blank">Lift</a>. On its website it is described as follows:</p>
<blockquote>Lift is an expressive and elegant framework for writing web applications. Lift stresses the importance of security, maintainability, scalability and performance, while allowing for high levels of developer productivity.</blockquote>
<p>In Lift, more configuration is done in Scala code rather than in <a href="http://zef.me/2333/when-jboss-seam-fails" target="_blank">XML files like in a framework like Seam</a>. Consequently, simple typing mistakes are typically caught by the compiler. One area where mistakes are still easily made are in its XML-based language for constructing user interfaces. I won’t milk this one too much, <a href="http://zef.me/2308/when-rails-fails" target="_blank">we know the trick</a> <a href="http://zef.me/2333/when-jboss-seam-fails" target="_blank">by now</a>, but let me demonstrate what happens when a programmer makes mistakes in templates.</p>
<p><strong>Mistake #1: mistyping a class name</strong></p>
<p>What happens if my satanistic fingers force me to type hellWorld, instead of helloWorld:</p>
<p>&lt;lift:surround with=”default” at=”content”&gt;<br><br> &lt;h2&gt;Welcome to your project!&lt;/h2&gt;<br><br> &lt;p&gt;&lt;lift:hellWorld.howdy /&gt;&lt;/p&gt;<br><br>&lt;/lift:surround&gt;</p>
<p>We get no error at compile time. At runtime, however something odd happens.</p>
<p>It does display the “Welcome to your project!” message, and the list item with “Home” on it is part of our global template. But where did our howdy message go?</p>
<p>In the console we see the following;</p>
<p>In a way this is an acceptable message, but shouldn’t this be an error?</p>
<p><strong>Mistake #2: mistyping an opening tag</strong></p>
<p>This is a nice one. Instead of typing “surround” in our template, we misspell it as “surrond”. A honest mistake. How does Lift deal with this?</p>
<p>&lt;lift:surrond with=”default” at=”content”&gt;<br><br> &lt;h2&gt;Welcome to your project!&lt;/h2&gt;<br><br> &lt;p&gt;&lt;lift:hellWorld.howdy /&gt;&lt;/p&gt;<br><br>&lt;/lift:surround&gt;</p>
<p>This is what we see when we load the page:</p>
<p>line 4 does not exist? I’m pretty sure that it does… Looking at the stacktrace, I see it has to do something with XML parsing, but other than that, the message is kind of unexpected.</p>
<p>Alright, one more, then it’s been enough.</p>
<p><strong>Mistake #3: mistyping a template block name</strong></p>
<p>Let’s now misspell some more, we’re getting good at it.</p>
<p>&lt;lift:surround with=”default” at=”conent”&gt;<br><br> &lt;h2&gt;Welcome to your project!&lt;/h2&gt;<br><br> &lt;p&gt;&lt;lift:hellWorld.howdy /&gt;&lt;/p&gt;<br><br>&lt;/lift:surround&gt;</p>
<p>Again, no compilation errors. When we load the page we see the following:</p>
<p>No error message on screen, or in our console. What happened here? We only see the global template and nothing from the content we just defined. This, of course, has to do with the fact that we’re defining a template that’s never actually called. It’s subtle, but can be tricky to find.</p>
<p><strong>Enough already, we get it!</strong></p>
<p>Ok, ok. I know. You get my point. Statically typed framework fail to detect errors that are encoded in strings and XML files. So what can we do to fix this (other than IDE support)? Well, the obvious thing is stop abusing strings and XML files in this way. If we find an acceptable way to encode these things in Scala we can check a lot more. Lift takes its first steps towards this by doing configuration in its Boot class. There are a few Scala DSLs that make <a href="http://szeiger.de/blog/category/scala/scala-query/" target="_blank">database queries statically verifiable</a>. Still, the user interface part breaks.</p>
<p>To fix this I attempted to build a simple version of WebDSL as an internal DSL in Scala. What follows is a piece of code that defines a user interface using this DSL:</p>
<p>This piece of code defines an entries template. The template renders a header saying “All entries”. Underneath we see a list of all Entry objects (Entry.all). For each entry there is a list item with a form. The entry’s name and text are displayed and there’s a button to delete the entry from the database. Simple and elegant (in my opinion).</p>
<p>The nice thing is that when I misspell one of the UI constructs, I get an error:</p>
<p>So the error is found at compile time, which is nice. However, are these errors very helpful?</p>
<p>value buton? Is a buton supposed to be a value? In our domain-speak we’re attempting to define a page element here, not a value. The good thing about error messages as you compile is that you see that something is wrong early, and typically can see clearly where the error is. The error messages, however, are not always very helpful, and hardly ever domain specific (“No such page element: buton” would have been a great error message).</p>
<p>But there’s another error in the code I just showed and the compiler didn’t catch it at all. The thing is that listitems cannot appear just anywhere, they have to appear within lists! The list construct was left out. That’s easily fixed:</p>
<p>What this example shows is that although we can catch many errors by creating an embedded DSL in Scala, there are definitely limits. Additionally, there is no way to give domain specific error messages at compile time (unless we extend the compiler), error messages typically expose the underlying implementation. Yes I admit it, the code to construct a button and define its logic is actually a method call.</p>
<p>So although internal DSLs in a statically typed language help you to find certain types of error faster, the error reporting is far from perfect. This is one of the strong points of <em>external DSLs</em> as we will see in a future post. <strong>Update:</strong> <a href="http://%EF%9C%82zef.me/2409/static-verification-an-external-dsl-advantage" target="_blank">This post</a>, to be exact.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>227</wp:post_id>
		<wp:post_date>2009-11-13 13:23:31</wp:post_date>
		<wp:post_date_gmt>2009-11-13 12:23:31</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>when-scala-dsls-fail</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="dsl"><![CDATA[Dsl]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="scala"><![CDATA[Scala]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>When Rails Fails</title>
		<link>http://zef.me/2009/11/11/when-rails-fails/</link>
		<pubDate>Wed, 11 Nov 2009 13:06:47 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2009/11/11/when-rails-fails/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>For the past years there has been a lot of hype around <a href="http://www.rubyonrails.org" target="_blank">Ruby on Rails</a>. It’s a modern web framework built on the dynamically typed Ruby language. It makes heavy use of Ruby’s meta-programming abilities to essentially create an internal domain-specific language for building web applications.</p>
<p>People love Rails, and rightfully so, but it’s not perfect. An often overlooked problem is debugging; what if programmers make mistakes? Sure, real programmers don’t make mistakes, especially ruby on rails programmers, but let’s say they do, for argument’s sake. What happens then? Is the bug easy to track down, or do we get buried in stack traces that only <a href="http://en.wikipedia.org/wiki/David_Heinemeier_Hansson" target="_blank">DHH</a> understands?</p>
<p>To test this out, I followed Rails’ <a href="http://guides.rubyonrails.org/getting_started.html" target="_blank">“Getting Started”</a> guide and made “accidental” mistakes along the way, to see how the system would react.</p>
<p><strong>Mistake #1: Route to a non-existing controller</strong></p>
<p>In my routes.rb I made a typing mistake, referring to a non-existing controller:</p>
<p>map.root :controller =&gt; “homme” <em># should be “home”</em></p>
<p>Ideally I would get an error message saying “no such controller named ‘homme’”. Instead, this is the result when loading the root page of the application:</p>
<p>The error here is “Unintialized constant HommeController”. There are a few problems with this error message. The first is the name mangling: I typed “homme”, which is apparently turned into “HommeController”. I have no clue where I made my mistake, there’s a stack trace, but none of these files are mine, they’re all Rails framework files. Where did I make my mistake?</p>
<p><strong>Mistake #2: mispell the symbol :controller in the mapping file</strong></p>
<p>I misspell the symbol :controller as :controler</p>
<p>map.root :controler =&gt; “home”</p>
<p>The result, when starting the server:</p>
<p>This is actually not bad, it says :controller must be specified, so apparently it is missing. It would be better if it would have noted that the :controler symbol we used makes no sense, but still. Not bad.</p>
<p><strong>Mistake #3: Linking to non-existent pages</strong></p>
<p>Let’s link to a page that does not exist, from our erb code:</p>
<p>&lt;h1&gt;Hello, Rails!&lt;/h1&gt;<br><br>&lt;%= link_to “My Blog”, post_path %&gt;</p>
<p>Where post_path, should have been posts_path, results in:</p>
<p>The full error got truncated there, this is the full message:</p>
<blockquote>post_url failed to generate from {:controller=&gt;”posts”, :action=&gt;”show”} — you may have ambiguous routes, or you may need to supply additional parameters for this route. content_url has the following required parameters: [“posts”, :id] — are they all satisfied?</blockquote>
<p>As a newbie Rails user I’m thoroughly confused by this. The code that I editted is 100% generated by scaffolding commands. Why does it talk about “posts” when I said “post”, and what is this :id thing? Looking through my controller code, it turns out that there is in fact a post controller to be invoked here, namely the show action of the posts controller. Still, to a newbie, this message is thoroughly confusing. It is nice that Rails at least attempts to give a specific error message with suggestions on how to fix it, but to be honest, I don’t get it.</p>
<p><strong>Mistake #4: misspelling :confirm</strong></p>
<p>Another piece of view code:</p>
<p>&lt;%= link_to ‘Destroy’, post, :confrm =&gt; ‘Are you sure?’, :method =&gt; :delete %&gt;</p>
<p>Note the misspelling of :confirm, there. If you spell it right, you’ll see the following window when pushing the “Destroy” link:</p>
<p>However, with :confirm misspelled as :confrm, it is <em>simply ignored</em>, resulting in immediate deletion of this record, without any confirmation. Ouch.</p>
<p><strong>Mistake #5: Mistyped property names in data model validation rules</strong></p>
<p>I accidentally misspell the name of a property :name in my data model code:</p>
<p><strong>class</strong> Post &lt; ActiveRecord::Base<br><br> validates_presence_of :nam <em># should be :name</em><br><br><strong>end</strong></p>
<p>When I now add or edit a post object through a form, I receive a validation error:</p>
<p>Nam? I don’t see a nam field.</p>
<p>Sure, the bug is tracked down fairly easily, but still it looks odd.</p>
<p><strong>Mistake #6: Misspelled formats</strong></p>
<p>In controllers you can specify different representations of your output, e.g. a HTML, JSON or XML representation. But what if you specify a format that does not exist, such as htm?</p>
<p>respond_to <strong>do</strong> |format|<br><br> format.htm # should be html<br><br> format.xml { render :xml =&gt; @posts }<br><br><strong>end</strong></p>
<p>This is what happens when this piece of code is invoked:</p>
<p>That message reads “uninitialized constant Mime::HTM”, this is slightly confusing because we’re talking about formats, not constants. Plus, apparently format is replaced with Mime:: or something and the “htm” is capitalized to “HTM”. In the long stacktrace (which I truncated for the reader’s sake) there is one mention of my code (the line that starts with /Domain) and indeed, this is the line where the mistake was made, still it’s pretty hard to find.</p>
<p><strong>Mistake #7: mistyping of a symbol in the context of data binding</strong></p>
<p>Consider this piece of code:</p>
<p><strong>def</strong> create<br><br> @post = Post.new(params[:poost])<br><br> respond_to <strong>do</strong> |format|<br><br> <strong>if</strong> @post.save<br><br> flash[:notice] = ‘Post was successfully created.’<br><br> format.html { redirect_to(@post) }<br><br> format.xml { render :xml =&gt; @post, :status =&gt; :created, :location =&gt; @post }<br><br> <strong>else</strong><br><br> format.html { render :action =&gt; “new” }<br><br> format.xml { render :xml =&gt; @post.errors, :status =&gt; :unprocessable_entity }<br><br> <strong>end</strong><br><br> <strong>end</strong><br><br> <strong>end</strong></p>
<p>Spotted the mistake? Let’s see what happens if we add a new post, which invokes this create action. First we fill in the form:</p>
<p>We then push the “Create” button:</p>
<p>Wha? Where did all my data go? Oh right, I misspelled :post as :poost in the second line of that controller code.</p>
<p><strong>Conclusion</strong></p>
<p>If I would poke around a bit more, I’m sure I would find a lot of similar examples. I’m not looking for explanations of this behavior, I get how it works. The thing I’m trying to demonstrate here is that poor error messages and <em>very</em> limited checking of your programs is a drawback of internal DSLs like Rails. It would be much nicer for the programmer if programs were analyzed statically giving domain-specific error messages, rather than obscure runtime exception stack traces that are complicated to decipher.</p>
<p><strong>Update:</strong> <a href="http://zef.me/2355/a-when-rails-fails-follow-up" target="_blank">My response to common criticisms</a>.<br><br><strong>Update 2:</strong> <a href="http://zef.me/2333/when-jboss-seam-fails" target="_blank">When JBoss Seam Fails</a>.<br><br><strong>Update 3:</strong> <a href="http://zef.me/2371/when-scala-dsls-fail" target="_blank">When Scala DSLs Fail</a>.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>229</wp:post_id>
		<wp:post_date>2009-11-11 14:06:47</wp:post_date>
		<wp:post_date_gmt>2009-11-11 13:06:47</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>when-rails-fails</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Models are Programs</title>
		<link>http://zef.me/2009/11/30/models-are-programs/</link>
		<pubDate>Mon, 30 Nov 2009 10:12:16 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2009/11/30/models-are-programs/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>I hate the term modeling, it sounds so pretentious. Yuck.</p>
<blockquote>“Before we started to use models in our company, we wrote millions of lines of code, but now we just draw a picture and write some code in a few DSLs and all that stuff gets generated automatically for us!” <em>— Model-Fanboys Inc.</em>
</blockquote>
<p>That’s great. That reminds me of some other tool that I use that does something similar. What was it… it translates my C++ code into loads of machine instructions, which I had to write myself before. That’s right, it’s a compiler.</p>
<p>So how did you say this is any different?</p>
<p>Your <a href="http://en.wikipedia.org/wiki/Model_Driven_Software_Development" target="_blank">MDSD</a> consultant will never admit it, since he gets to charge so much because he’s one of the few that knows about this “emerging technology”, so I will tell you instead: modeling is just a fancy pants word for <em>programming</em>. At least in the context of executable models. Modeling just sounds more magical than programming. “Whatcha doin’?” “Oh nuthin’, just modeling an if-statement.” Awesome, right?</p>
<p>Models (formerly known as <em>programs</em>, some like to call them <a href="http://www.amazon.com/Software-Language-Engineering-Domain-Specific-Metamodels/dp/0321553454/ref=sr_1_1?ie=UTF8&amp;s=books&amp;qid=1259230925&amp;sr=1-1" target="_blank">mograms</a>) can take roughly two forms: a visual or textual form:</p>
<p>vs.</p>
<p><strong>class</strong> Person {<br><br> String name;<br><br> int age;<br><br>}</p>
<p>So… what is the difference here? The first is often called a model, and the second a program. Do you agree this makes no sense whatsoever? Not yet? Alright, another example:</p>
<p>Is this a model or a program?</p>
<blockquote>“Well, that’s a model in a sense, but it is way too low level. It does not abstract from details.” — <em>Model-person</em>
</blockquote>
<p>Although the fact that this diagram does not abstract from details is debatable, this fictitious model-person has a point: what makes models work is their ability to abstract from reality.</p>
<p><strong>So apparently it’s about abstraction.</strong></p>
<p>Is abstraction the real invention here? I surely hope not. We’ve been doing that forever. Better yet, programming languages have enabled programmers to develop new abstractions since the dawn of time. These abstractions are expressed in frameworks, libraries, modules, packages, classes, methods, functions and macros.</p>
<p>So what’s wrong with those? If we had the tools all along, why do we still write millions of lines of code? That’s an interesting question. My feeling is that the reason is that developing new abstractions for a particular domain is still too much of an art form. People prefer to copy and paste over discovering the patterns and capturing them in a new abstraction. The reason is not laziness, it’s skill. Larry Wall says “Laziness is a programmer’s main virtue”, implying that if you can find a way to do something that saves you a lot of work, that’s a good thing. David Heinemeier Hansson, whether you like the guy or not, is one of the people that could see the patterns and was able to capture them in a little library we like to call <a href="http://www.rubyonrails.org" target="_blank">Ruby on Rails</a>, and sure, <a href="http://zef.me/2308/when-rails-fails" target="_blank">it’s not perfect</a>, but it seems to dramatically improve developers’ productivity. Is Rails a new idea, though? Not really, it’s just an abstraction, a nicely executed one.</p>
<p>Still, the truth is, there are too few programmers like David. Gosh, I had never thought I’d ever say that.</p>
<blockquote>“But there is more to models than just abstraction! Models are graphs that we can analyze!” — <em>Model-person</em>
</blockquote>
<p>When people talk about models they also envision the ability to check certain properties of a model, the ability to handle the model as data and manipulate it. Is it consistent? Are references to other parts of the model valid? Can we optimize the model? Can we weave aspects into it? These types of checks and transformations have been performed by compilers on programs for decades. Not new at all. Another hint that models are simply programs.</p>
<p>So the real issue here, I would say, is <em>how to develop abstractions</em>? How to think in abstractions? And how do we create tools around these abstractions that support programmers in their use (think compilers, optimizers, checkers, IDEs)?</p>
<p><strong>Step 1</strong> is to make developing abstractions as simple as possible. It should be easy to dabble with home brew abstractions, and to extend, build upon them or ditch them as the programmer sees fit.</p>
<p>While there is a thriving group of researchers in academia researching the construction of model-based tools and DSLs, outside academia, programmers seem to be more interested in more light-weight approaches like <a href="http://www.martinfowler.com/bliki/DomainSpecificLanguage.html" target="_blank">internal DSLs</a>, in e.g. Ruby, Scala, Groovy, Python and more recently Clojure. This makes perfect sense to me, since developing abstractions as little internal DSLs is cheap, not overly complicated, relatively low-risk and the result integrates well with the rest of the language. You don’t have to take the leap to translate all of your software to <a href="http://www.eclipse.org/modeling/emf/" target="_blank">EMF</a> models, or worse, do partial code generation where you use a code generator to generate code that you then have to <em>edit manually</em>. I know, who farted, right?</p>
<p>No, internal DSLs like Rake, Capistrano, Active Record, jQuery, scala-query and Lift mix naturally with old-school Ruby, Javascript and Scala code, without the need to take a huge leap into “model land” or full-blown DSLs.</p>
<p><strong>Step 2</strong> is to take the developed abstractions and create better tooling for them. In a sense this is what we’re doing with <a href="http://www.webdsl.org" target="_blank">WebDSL</a>, we took many abstraction ideas from JBoss Seam, Ruby on Rails and other places and polished them up to have a really clean syntax and <a href="http://zef.me/2409/static-verification-an-external-dsl-advantage" target="_blank">a damn thorough checker</a> that attempts to catch as many developer mistakes that would otherwise be much harder to fix. The next step is to also create IDE support for these abstractions, that is <a href="http://strategoxt.org/Stratego/Spoofax-IMP" target="_blank">also being worked on</a>.</p>
<p>To come back to my original point. What we need is programmers that are skilled abstraction builders and the tools to enable them. The goal? Do a heck of a lot less work in software development, i.e. in <em>programming</em>.</p>
<p>Doesn’t the word <em>modeling</em> just sound silly to you now?</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>233</wp:post_id>
		<wp:post_date>2009-11-30 11:12:16</wp:post_date>
		<wp:post_date_gmt>2009-11-30 10:12:16</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>models-are-programs</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="dsl"><![CDATA[Dsl]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="model"><![CDATA[Model]]></category>
		<category domain="post_tag" nicename="modeling"><![CDATA[Modeling]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Building Clojure Projects with Leiningen</title>
		<link>http://zef.me/2009/11/19/building-clojure-projects-with-leiningen/</link>
		<pubDate>Thu, 19 Nov 2009 07:00:35 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2009/11/19/building-clojure-projects-with-leiningen/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Everybody who once used Java, struggled with Java’s classpath at some point during their career. You have to put all the right paths in there, the right .jar files and so on, both when compiling and running your Java project. To make this somewhat simpler you typically end up doing it either in an IDE, or using a tool like <a href="http://ant.apache.org/" target="_blank">Ant</a> or <a href="http://maven.apache.org/" target="_blank">Maven</a>. These are pretty heavy weight tools, and the latter too involve writing XML, which hardly anybody does for fun anymore.</p>
<p><a href="http://github.com/technomancy/leiningen" target="_blank">Leiningen</a> is a simple build tool for <a href="http://www.clojure.org" target="_blank">Clojure</a>, based on Maven (I’m pretty sure). It offers a simple, Clojuresque way of constructing build files for your Clojure projects (which run on the JVM).</p>
<p>To install Leiningen you only have to <a href="http://github.com/technomancy/leiningen/raw/stable/bin/lein" target="_blank">download one file </a>and put it in some directory that’s on your PATH:</p>
<p>cd ~/bin<br><br>wget <a href="http://github.com/technomancy/leiningen/raw/stable/bin/lein" target="_blank">http://github.com/technomancy/leiningen/raw/stable/bin/lein</a><br><br>chmod +x lein</p>
<p>You then do a self-install:</p>
<p>lein self-install</p>
<p>This will dowload a number of jar files, including Clojure itself, so you do not even have to have Clojure installed at this point.</p>
<p>To make a new project, create a directory for it, e.g. helloworld:</p>
<p>mkdir helloworld<br><br>mkdir helloworld/src</p>
<p>In the source directory you put your source files, for instance a helloworld/src/helloworld.clj:</p>
<p>(ns helloworld<br><br> (:gen-class))<br><br> <br><br>(defn -main [&amp; args]<br><br> (println “Hello world!”))</p>
<p>Then, in the helloworld/ directory, create a project.clj file:</p>
<p>(defproject helloworld “0.1”<br><br> :dependencies [[org.clojure/clojure<br><br> “1.1.0-master-SNAPSHOT”]<br><br> [org.clojure/clojure-contrib<br><br> “1.0-SNAPSHOT”]]<br><br> :main helloworld)</p>
<p>The :main there defines namespace containing your -main function (analogous to the typical public static void main(…)), if any. Then, from the helloworld directory you run Leiningen:</p>
<p>$ lein compile</p>
<p>[copy] Copying 2 files to /…/helloworld/lib</p>
<p>Compiling helloworld</p>
<p>And subsequently we can build a .jar for it, or even an uberjar, which will create a big jar file for easy distribution, also containing all of its dependencies (including Clojure itself):</p>
<p>$ lein uberjar</p>
<p>Unpacking clojure-1.1.0-alpha-20091113.120145–2.jar</p>
<p>Unpacking clojure-contrib-1.0–20091114.050149–13.jar</p>
<p>Compiling helloworld</p>
<p>[jar] Building jar: helloworld.jar</p>
<p>$ java -jar helloworld.jar</p>
<p>Hello world!</p>
<p>Leiningen has some other tasks as well:</p>
<ul>
<li>lein deps, installs dependencies in lib/</li>
<li>lein test [PRED], runs the project’s tests, optionally filtered on PRED</li>
<li>lein compile, ahead-of-time compiles into classes/</li>
<li>lein repl, launches a REPL with the project classpath configured</li>
<li>lein clean, removes all build artifacts</li>
<li>lein jar, creates a jar of the project</li>
<li>lein uberjar, creates a standalone jar that contains all dependencies</li>
<li>lein pom, outputs a pom.xml file for interop with Maven</li>
<li>lein install, installs in local repo (currently requires mvn)</li>
<li>lein help [TASK], shows a list of tasks or help for a given TASK</li>
</ul>
<p><a href="http://github.com/technomancy/leiningen" target="_blank">Enjoy</a>!</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>238</wp:post_id>
		<wp:post_date>2009-11-19 08:00:35</wp:post_date>
		<wp:post_date_gmt>2009-11-19 07:00:35</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>building-clojure-projects-with-leiningen</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="clojure"><![CDATA[Clojure]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Event-Programming: The Highway to Concurrency?</title>
		<link>http://zef.me/2009/12/02/event-programming-the-highway-to-concurrency/</link>
		<pubDate>Wed, 02 Dec 2009 15:46:56 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2009/12/02/event-programming-the-highway-to-concurrency/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Yesterday I watched <a href="http://jsconf.eu/2009/video_nodejs_by_ryan_dahl.html" target="_blank">this talk by Ryan Dahl</a> about <a href="http://nodejs.org/" target="_blank">node.js</a>. node.js is a environment, based on Google’s v8 javascript engine, to build high-performance servers using the Javascript language. Here’s a simple hello world HTTP server:</p>
<blockquote>
<strong>var</strong> sys = require(‘sys’), <br><br> http = require(‘http’);<br><br><br><br>http.createServer(<strong>function</strong> (req, res) {<br><br> res.sendHeader(200,<br><br> {‘Content-Type’: ‘text/plain’});<br><br> res.sendBody(‘Hello World’);<br><br> res.finish();<br><br>}).listen(8000);</blockquote>
<p>You may ask yourself “why the hell would you use Javascript for server-side programming?” And that’s a valid question. However, in the case of node.js it seems like a good fit. Why? Because Javascript in the browser is very event-based: mouse over, click, drag and timeout events, for instance. Events are Javascript’s programming model in the browser. Node.js brings this idea to the server. Everything requiring I/O in node.js happens asynchronously, with everything you can provide a callback function, or set an event handler to handle events such as “data”, when a block of data has been read from a stream. This results in improved performance.</p>
<p>Some people <a href="http://simonwillison.net/2009/Nov/23/node/" target="_blank">are really excited about node.js</a>, but I’m not so sure. My feeling is that events are today’s goto statements: they lead to code for which it is is very difficult to determine what happens in which order. It’s bad enough that we have to do it this way in user interfaces and browser, do we really want this at the server as well?</p>
<p>Is performance more important than program comprehensibility?</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>240</wp:post_id>
		<wp:post_date>2009-12-02 16:46:56</wp:post_date>
		<wp:post_date_gmt>2009-12-02 15:46:56</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>event-programming-the-highway-to-concurrency</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="javascript"><![CDATA[JavaScript]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Static Verification: An External DSL Advantage</title>
		<link>http://zef.me/2009/11/16/static-verification-an-external-dsl-advantage/</link>
		<pubDate>Mon, 16 Nov 2009 11:17:21 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2009/11/16/static-verification-an-external-dsl-advantage/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Last week I wrote a number of posts about web development “languages” developed as internal DSLs. An internal DSL is a set of libraries written on top of a host language that, through the use of meta programming facilities, looks a lot like a <a href="http://en.wikipedia.org/wiki/Domain-specific_language" target="_blank">domain-specific language</a>. I <a href="http://zef.me/2308/when-rails-fails" target="_blank">looked at Ruby on Rails</a> as a prime example of an internal DSL built on a dynamic language, at <a href="http://zef.me/2333/when-jboss-seam-fails" target="_blank">JBoss Seam</a> as a framework built on Java, and then at <a href="http://zef.me/2371/when-scala-dsls-fail" target="_blank">Lift and my own little page language as examples of internal DSLs in Scala</a>.</p>
<p>This order was on purpose. I started with the most dynamic, catch-any-error-at-runtime language and ended with the most strongly typed we-try-to-find-any-mistake-at-compile-time solution. I’ve been accused of bashing these languages just for the heck of it, but there was a point to this, and it’s more than promoting <a href="http://www.webdsl.org" target="_blank">WebDSL</a>.</p>
<p>But let’s talk a little about WebDSL anyway. WebDSL is an external DSL for developing data-rich web applications. “External DSL” means that it is not built on top of an existing language like Ruby or Java, but that it has its own syntax and compiler. Developing such an external DSL is typically more work than developing an internal DSL, which is a disadvantage, but external DSLs have their advantages too.</p>
<p>Whenever we present WebDSL to people that have done some web development before, we get asked “Why is this better than Rails? Why not an internal DSL?” Although we always have problems answering this question, because none of us are very experience Rails developers, our answer comes down to a few general things that potentially apply to any external DSL:</p>
<ol>
<li>We have a nicer syntax, as an external DSL we’re not limited to encoding things in a Ruby or Scala way</li>
<li>Being platform independent, we can generate Java, PHP, Python and C# code if we want to</li>
<li>An external DSL compiler can <em>statically analyze your application to find common programmer mistakes</em>
</li>
</ol>
<p>There’s also the runtime performance issue, but I don’t want to get into that.</p>
<p>DSLs built on modern languages like Ruby and Scala look pretty natural. But from time to time you gotta wonder, why do I have to put a colon in front of this word, why do I have to use quotes here? Because you are building on top of a host language, you have to obey that language’s syntax and evaluation rules, whether you like it or not. External DSLs do not have this restriction, they define their own syntax and interpretation of that syntax.</p>
<p>The second advantage is clear, our language does not rely on any platform in particular and we could therefore <a href="http://zef.me/2218/on-the-pil" target="_blank">generate code for any web platform</a>. With Ruby on Rails you’re limited to, well, Ruby. Admittedly, there are Ruby implementations for the <a href="http://jruby.org/" target="_blank">JVM</a> and <a href="http://ironruby.net/" target="_blank">.NET</a> now, but what about my little brother who can only afford cheap PHP hosting, should he just use… PHP?</p>
<p>We felt that the current state of the art in web frameworks is not very resilient to programmer mistakes. Typos lead to enormous stack traces and are often difficult to track down, right? That’s the thing I tried to verify last week.</p>
<p>It turned out we were pretty right. Although <a href="http://zef.me/2355/a-when-rails-fails-follow-up" target="_blank">not everybody agrees</a>.</p>
<p><strong>Static verification of external DSLs</strong></p>
<p>WebDSL is a statically typed language. It consists of a number of sub-languages. Currently we have a language for defining <a href="http://webdsl.org/selectpage/Manual/Pages" target="_blank">user interfaces</a>, <a href="http://webdsl.org/selectpage/Manual/Entities" target="_blank">data models</a>, <a href="http://webdsl.org/selectpage/Manual/ActionCode" target="_blank">business logic</a>, <a href="http://webdsl.org/selectpage/Manual/AccessControl" target="_blank">access control</a>, <a href="http://webdsl.org/selectpage/Manual/Validation" target="_blank">data validation</a> and <a href="http://researchr.org/publication/HemelVV08" target="_blank">workflows</a>.</p>
<p>To get a flavor of it, here’s an example entity definition. It defines a task entity:</p>
<p><strong>entity</strong> Task {<br><br> name :: String<br><br> description :: Text<br><br> done :: Bool<br><br> archived :: Bool<br><br> user -&gt; User (<strong>inverse</strong>=User.tasks)<br><br>}</p>
<p>and a page definition:</p>
<p><strong>define page</strong> tasks(user : User) {</p>
<p>section {</p>
<p>header{“Tasks for “ output(user.username) }</p>
<p>table{</p>
<p><strong>for</strong>(task : Task <strong>in</strong> user.todo) {</p>
<p>row{</p>
<p>output(task.done)</p>
<p>output(task)</p>
<p>}</p>
<p>}</p>
<p>}</p>
<p>}</p>
<p>}</p>
<p>and an access control rule that matches any page whose name starts with edit.</p>
<p><strong>rule page</strong> edit*(*) {<br><br> loggedIn<br><br>}</p>
<p>The nice thing is that we can detect all kinds of mistakes in WebDSL code at compile time. For instance, what if the inverse property of user in the Task entity does not exist?</p>
<p>$ webdsl build<br><br>Loading application settings (application.ini)…<br><br>[ webdslc | info ] stage 1: parsing webtasks.app<br><br>[ webdslc | info ] stage 2: importing modules<br><br>[ webdslc | info ] stage 3: typechecking<br><br>* webtasks.app:21/25: error: The field User.tasks does not exist<br><br>inverse = User.tasks</p>
<p>It points to exactly the right file, line number and column number. Or let’s say we misspell a property name in a page definition:</p>
<p><strong>for</strong>(task : Task <strong>in</strong> user.todo) {</p>
<p>row{</p>
<p>output(task.don)</p>
<p>output(task)</p>
<p>}</p>
<p>}</p>
<p>Result:</p>
<p>* webtasks.app:119/15: error: No property don defined for Task<br><br>task.don</p>
<p>Or, mistype a template name:</p>
<p><strong>for</strong>(task : Task <strong>in</strong> user.todo) {</p>
<p>row{</p>
<p>outputt(task.done)</p>
<p>output(task)</p>
<p>}</p>
<p>}</p>
<p>The error we get at compile time is as follows:</p>
<p>* webtasks.app:39/14: error: Template with this signature not defined <br><br>outputt(task.done)</p>
<p>Note the use of domain-speak. This <em>template</em> is not defined, not value or method, but <em>template</em>.</p>
<p>What if we define an access control rule for a page, or set of pages that does not exist:</p>
<p>Access control warning: unused rules: <br><br> rule page edit*(*)</p>
<p>We are currently working to also add more thorough checks for page element compositions. For instance, are rows defined within tables, listitems within lists and so on. We’re also working on IDE integration, so that your WebDSL programs are checked as you type.</p>
<p>No matter if you like the WebDSL language and its syntax or not, love or hate the formatting and wording of its error messages, abstract from all of that and the opportunity is clear:</p>
<p><strong>An external DSL compiler can detect mistakes early and its error messages can be very clear and domain-specific.</strong></p>
<p>Because we’re building our own syntax, compilers and typecheckers it is <em>quite easy</em> to add checks like these. Detecting mistakes in this manner is either not feasible, or at the very least more difficult in internal DSLs. In dynamically typed languages it’s extremely hard because of the language’s dynamic nature, in statically typed languages like Scala it may require building a compiler extension, which is also a non-trivial exercise.</p>
<p>Although you may say you would never make mistakes that are caught by checks like these, they have turned out to be extremely useful to us, as WebDSL users ourselves. But then again, that may be because we’re just all a bunch of <a href="http://zef.me/2378/i-am" target="_blank">NNPP</a>s.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>294</wp:post_id>
		<wp:post_date>2009-11-16 12:17:21</wp:post_date>
		<wp:post_date_gmt>2009-11-16 11:17:21</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>static-verification-an-external-dsl-advantage</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="webdsl"><![CDATA[Webdsl]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Dilbert on Cloud Computing</title>
		<link>http://zef.me/2009/11/18/dilbert-on-cloud-computing/</link>
		<pubDate>Wed, 18 Nov 2009 08:42:48 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2009/11/18/dilbert-on-cloud-computing/</guid>
		<description></description>
		<content:encoded><![CDATA[
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>503</wp:post_id>
		<wp:post_date>2009-11-18 09:42:48</wp:post_date>
		<wp:post_date_gmt>2009-11-18 08:42:48</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>dilbert-on-cloud-computing</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="dilbert"><![CDATA[Dilbert]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Thoughts on Chrome OS</title>
		<link>http://zef.me/2009/11/23/thoughts-on-chrome-os/</link>
		<pubDate>Mon, 23 Nov 2009 09:17:25 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2009/11/23/thoughts-on-chrome-os/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>At the end of 2010 Google will release a number of netbooks that will run its new operating system: <a href="http://googleblog.blogspot.com/2009/07/introducing-google-chrome-os.html" target="_blank">Chrome OS</a>. Chrome OS is, as can be guessed from its name, an operating system built on top of, or rather, underneath <a href="http://www.google.com/chrome" target="_blank">Google Chrome</a>. Yes, a web browser. And that’s essentially what the operating does, boot up a web browser as soon as possible. Usually within 10 seconds.</p>
<p>Google’s vision is that most stuff people do on netbooks involve the internet and happen from the web browser anyway, so why not build the whole operating system around the browser. It fits perfectly with Google’s vision of running all your applications through the browser. Other than the core browser parts, all applications that run on Chrome OS are web applications. For mail you can use Gmail or hotmail, for document editing Google Docs, and so on. Google will not allow you to install native apps, because, it argues, there is really no need to.</p>
<p>Google has <a href="http://www.chromium.org/chromium-os/building-chromium-os/getting-the-chromium-os-source-code" target="_blank">open sourced the project</a>. So developers can play with it. Some sites already offer it for <a href="http://gdgt.com/google/chrome-os/download/" target="_blank">download as virtual machine images</a>.</p>
<p>But I’m not convinced that it will be a huge success, even though I do buy into the <em>everything in the browser </em>vision. It’s for the same reason that Microsoft was never able to sell a “Word Lite”, even though people don’t use 95% of its features: <strong>when given the choice between a computer that is restricted to boot a browser and one which can do whatever you want, people will choose the latter</strong>. Sure, they are likely to spend most of their time in the browser, but they like the feeling of being able to non-browser things as well, just like they like having the mail merge feature in Word, even though they are not likely to ever use it.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>606</wp:post_id>
		<wp:post_date>2009-11-23 10:17:25</wp:post_date>
		<wp:post_date_gmt>2009-11-23 09:17:25</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>thoughts-on-chrome-os</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>The New Chrome OS Explained</title>
		<link>http://zef.me/2009/11/20/the-new-chrome-os-explained/</link>
		<pubDate>Fri, 20 Nov 2009 06:34:13 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2009/11/20/the-new-chrome-os-explained/</guid>
		<description></description>
		<content:encoded><![CDATA[

<a href="https://www.youtube.com/v/0QRO3gKj3qw&amp;color1=0xb1b1b1&amp;color2=0xcfcfcf&amp;hl=en_US&amp;feature=player_embedded&amp;fs=1"></a><p>It’s the browser as the operating system, as expected.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>984</wp:post_id>
		<wp:post_date>2009-11-20 07:34:13</wp:post_date>
		<wp:post_date_gmt>2009-11-20 06:34:13</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-new-chrome-os-explained</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="chrome"><![CDATA[Chrome]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="google"><![CDATA[Google]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Yo mama is so fat…</title>
		<link>http://zef.me/2009/12/04/yo-mama-is-so-fat/</link>
		<pubDate>Fri, 04 Dec 2009 13:15:16 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2009/12/04/yo-mama-is-so-fat/</guid>
		<description></description>
		<content:encoded><![CDATA[
<p>(via <a href="http://www.reddit.com/r/programming/comments/aazjb/what_are_some_good_funny_and_nerdy_programming/" target="_blank">reddit</a>)</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1350</wp:post_id>
		<wp:post_date>2009-12-04 14:15:16</wp:post_date>
		<wp:post_date_gmt>2009-12-04 13:15:16</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>yo-mama-is-so-fat</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="funny"><![CDATA[Funny]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>My Research Is Boring Compared To…</title>
		<link>http://zef.me/2009/11/16/my-research-is-boring-compared-to/</link>
		<pubDate>Mon, 16 Nov 2009 09:18:06 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2009/11/16/my-research-is-boring-compared-to/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>This:</p>
<a href="https://www.youtube.com/v/nZ-VjUKAsao&amp;hl=en_US&amp;fs=1&amp;"></a>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1397</wp:post_id>
		<wp:post_date>2009-11-16 10:18:06</wp:post_date>
		<wp:post_date_gmt>2009-11-16 09:18:06</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>my-research-is-boring-compared-to</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="research"><![CDATA[Research]]></category>
		<category domain="post_tag" nicename="video"><![CDATA[Video]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>The cost of 64-bit</title>
		<link>http://zef.me/2009/12/28/the-cost-of-64-bit/</link>
		<pubDate>Mon, 28 Dec 2009 16:34:05 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2009/12/28/the-cost-of-64-bit/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>64 bit in computing has always seemed a simply-has-to-happen kind of thing to me. 32 bit pointer only allow up to 4 GB of memory to be addressed, so, naturally, we have to move up to 64 bit to address more memory than that. Great. What I never thought of, however, are its costs in memory consumption.</p>
<p>Now sure, memory may seem cheap, it’s not so cheap when you want to run an application on a cheap VPS (Virtual Private Server). Cheap VPS’s typically come with 256 or 512MB of memory (which is what many $20–30/month VPS’s offer). If I want to run a Java web app on that, I better look at memory consumption. So, I have a VPS at <a href="http://zef.me/2110/jumping-clouds" target="_blank">Rackspace Cloud</a>, which only offers 64-bit Linux operating systems as an option. So I run 64-bit ubuntu, now let’s look at memory consumption.</p>
<p>First, a cleanly started Java web app at which no requests have been fired:</p>
<p>So, if I read top’s output well, that uses about 89MB of memory (the RES column). That’s quite a bit, alright, now let’s stress it a little bit and fire 200 requests on it with 5 requests concurrently using apache benchmark:</p>
<p>Now the process uses 225MB (which is 39.1% of memory of my 512MB VPS).</p>
<p>What I can do is install a 32-bit JVM, which is kind of dirty, because it requires to install 32-bit version of the standard libraries.</p>
<p>$ apt-get install ia32-libs</p>
<p>Now, I download the 32 bit Linux <a href="http://java.sun.com" target="_blank">JDK from the Sun site</a> and run the application again using the 32-bit JVM.</p>
<p>Here is the memory consumption of a clean start of the same web application on a 32-bit JVM:</p>
<p>34MB of memory (versus 89MB on 64-bit). That’s quite a difference.</p>
<p>Now let’s fire the same 200 requests with 5 concurrent connections:</p>
<p>Now the application uses 164MB of memory. That’s about 61mb, or about 12% of the 512MB of RAM that I have available.</p>
<p>When you think of it, this is not all that surprising. Java application typically generate lots of small little object that contain pointers to other small objects. All those little pointers start to add up and double in size with the 64-bit JVM.</p>
<p>So, be sure to consider using a 32-bit JVM, even on a 64-bit OS, if memory matters to you.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1406</wp:post_id>
		<wp:post_date>2009-12-28 17:34:05</wp:post_date>
		<wp:post_date_gmt>2009-12-28 16:34:05</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-cost-of-64-bit</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Hello, Anybody Out There?</title>
		<link>http://zef.me/2009/11/19/hello-anybody-out-there/</link>
		<pubDate>Thu, 19 Nov 2009 13:03:39 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2009/11/19/hello-anybody-out-there/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>When I <a href="http://zef.me/2172/google-wave-first-impressions" target="_blank">finally got my Google Wave account</a> I was very excited, during the days that followed I was playing with it all the time. But now, a few weeks later, I hardly even check anymore. It used to be open in my browser all the time, but what’s the point if nobody else seems to be using it? Many of my colleagues have accounts, but they don’t seem to have any use for it. I once attempted to use it as a replacement for e-mail, but never got a response from the other person, so that didn’t work out well either.</p>
<p>Maybe it’s like the twitter thing. I’ve had an account for a long time, but never got much out of it the first few months. Then, all of a sudden people around started using it and now I’m hooked. Will Wave be similar?</p>
<p>Are you still using Google Wave? And if so, what for?</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1434</wp:post_id>
		<wp:post_date>2009-11-19 14:03:39</wp:post_date>
		<wp:post_date_gmt>2009-11-19 13:03:39</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>hello-anybody-out-there</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="google-wave"><![CDATA[Google Wave]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Javascript: The Scope Pitfall</title>
		<link>http://zef.me/2010/02/16/javascript-the-scope-pitfall/</link>
		<pubDate>Tue, 16 Feb 2010 13:13:33 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2010/02/16/javascript-the-scope-pitfall/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>For the past few weeks I’ve been programming almost exclusively in Javascript. And to be quite honest it’s not as bad as you may think. In fact, Javascript is quite a nice language, as long as you are aware of its quirks. One quirk that bit me in the ass a few times already is its lack of block scopes. To make the problem clear, let’s look at a code fragment:</p>
<p><strong>var</strong> elements = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];<br><br><strong>for</strong>(<strong>var</strong> i = 0; i &lt; elements.length; i++) {<br><br> <strong>var</strong> el = elements[i];<br><br> console.log(el);<br><br>}</p>
<p>What does this code fragment print? Of course, it prints each of the elements in the array, so first 0, 1, 2, 3 etc. Easy enough. Now let’s adapt that a little bit:</p>
<p><strong>var</strong> elements = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];<br><br><strong>var</strong> fns = [];<br><br><br><br><strong>for</strong>(<strong>var</strong> i = 0; i &lt; elements.length; i++) {<br><br> <strong>var</strong> el = elements[i];<br><br> fns.push(<strong>function</strong>() {<br><br> console.log(el);<br><br> });<br><br>}<br><br>fns[2]();</p>
<p>This code fragment uses a powerful feature of Javascript: first order functions. Functions are values that can be put in a variable, including arrays as this code demonstrates. In this fragment, the for-loop builds up an array called fns with functions that print an element of the list. Later on we can then pick one of the functions from that array and invoke it. The last line demonstrates this, it executes the 3rd function in the array. So what will that print?</p>
<p>If you’re a C/Java/C# programmer you’ll probably be guessing that it would print 2. In every iteration a variable el is declared that contains the current element from the array. The function that is generated on the fly contains a reference to el and will therefore be part of its <a href="http://en.wikipedia.org/wiki/Closure_%28computer_science%29" target="_blank">closure</a>. Logically, this means that in the first function captures the value 0 for el, the second function value 1 etc. Sadly, this is not the case. Javascript only has function scopes, not block scopes (for constructs like the for-loop). In effect, what you’re actually executing here is the following:</p>
<p><strong>var</strong> elements = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];<br><br><strong>var</strong> fns = [];<br><br><strong>var</strong> el;<br><br><strong>for</strong>(<strong>var</strong> i = 0; i &lt; elements.length; i++) {<br><br> el = elements[i];<br><br> fns.push(<strong>function</strong>() {<br><br> console.log(el);<br><br> });<br><br>}<br><br>fns[2]();</p>
<p>Alright, fine. Why is that a problem? You have to realize that the closure of the generated functions contain pointers to variables, not a snapshot of the values at the point of definition, meaning that if variables change, these changes are visible from within the function. This is a very powerful feature, but also a potentially very confusing one. Since there is only one variable el, to which a new value is assigned every iteration, and each function points to this same variable, every function in the array will produce the same value: 9 (the last value assigned to el in the for-loop).</p>
<p>If you have problems getting your head around that, don’t feel bad, it took me a while too.</p>
<p>So, how can we fix this? Well, we can artificially introduce scopes by creating new functions and immediately invoking them:</p>
<p><strong>var</strong> elements = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];<br><br><strong>var</strong> fns = [];<br><br><br><br><strong>for</strong>(<strong>var</strong> i = 0; i &lt; elements.length; i++) {<br><br> (<strong>function</strong>() {<br><br> <strong>var</strong> el = elements[i];<br><br> fns.push(<strong>function</strong>() {<br><br> console.log(el);<br><br> });<br><br> }());<br><br>}<br><br><br><br>fns[2]();</p>
<p>So what’s new here is the (<strong>function</strong>() { bit and the }()); at the end. What this simple trick does is define an anonymous function and immediately invoke it. What’s different than before is that a new scope is used for each iteration of the for loop, containing a fresh variable el. The functions that are generated now each refer to a different el. Thus, the fn[2]() call will now produce 2, as you would expect.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>79</wp:post_id>
		<wp:post_date>2010-02-16 14:13:33</wp:post_date>
		<wp:post_date_gmt>2010-02-16 13:13:33</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>javascript-the-scope-pitfall</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="javascript"><![CDATA[JavaScript]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Who needs native phone apps anyway?</title>
		<link>http://zef.me/2010/02/10/who-needs-native-phone-apps-anyway/</link>
		<pubDate>Wed, 10 Feb 2010 10:22:31 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2010/02/10/who-needs-native-phone-apps-anyway/</guid>
		<description></description>
		<content:encoded><![CDATA[
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>90</wp:post_id>
		<wp:post_date>2010-02-10 11:22:31</wp:post_date>
		<wp:post_date_gmt>2010-02-10 10:22:31</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>who-needs-native-phone-apps-anyway</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="google"><![CDATA[Google]]></category>
		<category domain="post_tag" nicename="mobile"><![CDATA[Mobile]]></category>
		<category domain="post_tag" nicename="web-apps"><![CDATA[Web Apps]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Javascript: the new VBA</title>
		<link>http://zef.me/2010/03/13/javascript-the-new-vba/</link>
		<pubDate>Sat, 13 Mar 2010 09:45:32 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2010/03/13/javascript-the-new-vba/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Somewhere at the end of the eighties, my dad started work at his [local university](http://www.rug.nl) where he became the [WordPerfect](http://en.wikipedia.org/wiki/WordPerfect) expert, which was the dominant word processor at the time. Beside acting as a helpdesk and laying out documents, he also spent a lot of time writing [WordPerfect macros](http://www.shkatz.com/macrotut/tofc.htm). WP’s macro language allowed you to add functionality and automate common tasks. All was well, until Microsoft came along with Microsoft Office.</p>
<p>It took Microsoft a long time to dominate the word processing market, but they managed to push WordPerfect practically out of the market with Word ’97. My dad’s university also switched to Word around that release. Word uses a dialect of BASIC for writing macros: [Visual Basic for Applications (VBA)](http://en.wikipedia.org/wiki/Visual_Basic_for_Applications). He still does the majority of his programming work in VBA. To give you a flavor:<br>~~~~~~~~~~~~~~~<br>Public Function BusinessDayPrior(dt As Date) As Date<br> Select Case Weekday(dt, vbMonday)<br> Case 1<br> BusinessDayPrior = dt — 3<br> Case 7<br> BusinessDayPrior = dt — 2<br> Case Else<br> BusinessDayPrior = dt — 1<br> End Select<br>End Function<br>~~~~~~~~~~~~~~~</p>
<p>It is likely that within 10 years practically all word processing will be done in some sort of web application. Albeit in Google Docs or something else, and with this platform shift will also come another shift in macro language. Although it may not be surprising, it looks like that macro language is going to be Javascript.</p>
<p>Google has started introducing [macro capabilities](http://www.google.com/google-d-s/scripts/articles.html) to its [Google Docs](http://docs.google.com) offerings, calling it [Google Apps Script](http://www.google.com/google-d-s/scripts/articles.html), but if you look closely you will see it’s simply Javascript using a Google Docs API. The first application where Google Apps Script is introduced is in its spreadsheets, this is what it looks like:<br>~~~~~~~~~~~~~~~<br>function example() {<br> var ss = SpreadsheetApp.getActiveSpreadsheet();<br> var sheet = ss.getSheets()[0];<br> var myValue = Browser.inputBox(“Enter a number”); <br> sheet.getRange(“A1”).setValue(“Number entered:”);<br> var b1Range = sheet.getRange(“B1”);<br> b1Range.setValue(myValue);<br> var valueToShow = b1Range.getValue() + 1;<br> Browser.msgBox(“Answer: “ + valueToShow);<br>}<br>~~~~~~~~~~~~~~~</p>
<p>Google’s Apps Script — I’m guessing they don’t like to abbreviate it to GAS — currently enables power users to define:</p>
<p>* Custom spreadsheet functions<br>* Custom menus in the spreadsheet application<br>* Send e-mails<br>* Read and manipulate spreadheets<br>* Communicate with web services</p>
<p>Google took another step to become a serious Microsoft Office competitor. And my expectation is that more web applications will allow users to build macros in this fashion soon.</p>
<p>Another programming domain conquered by Javascript.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>91</wp:post_id>
		<wp:post_date>2010-03-13 10:45:32</wp:post_date>
		<wp:post_date_gmt>2010-03-13 09:45:32</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>javascript-the-new-vba</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="javascript"><![CDATA[JavaScript]]></category>
		<category domain="post_tag" nicename="vba"><![CDATA[Vba]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>persistence.js: An Asynchronous Javascript ORM for HTML5/Gears</title>
		<link>http://zef.me/2010/02/05/persistence-js-an-asynchronous-javascript-orm-for-html5-gears/</link>
		<pubDate>Fri, 05 Feb 2010 14:18:38 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2010/02/05/persistence-js-an-asynchronous-javascript-orm-for-html5-gears/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>The past week or two I have been developing an asynchronous object-relational mapper in Javascript, called <a href="http://persistencejs.org" target="_blank">persistence.js</a>. Its main use-case, right now, is to simplify the database component of offline-capable web applications, like the <a href="http://zef.me/2693/lets-build-a-dsl" target="_blank">mobile web applications that I’m working on</a>. But with some tweaking it should also be usable in server-side applications, like <a href="http://nodejs.org" target="_blank">node.js</a> servers. It uses the SQLite database that is available in modern Webkit-based browsers (like Safari 4 and Google Chrome), or the <a href="http://gears.google.com" target="_blank">Google Gears</a> datastore that is available in any browser that runs the Google Gears browser extension (like Firefox). It also runs on iPhone (OS 3+) and Android browsers. In its current state it does not run on IE (although I haven’t tested it).</p>
<p>There is one other asynchronous Javascript ORM framework that I know of (<a href="http://impel.simulacre.org/" target="_blank">Impel</a>), but it has a dependency on <a href="http://mootools.net/" target="_blank">MooTools</a>, which would be yet another framework you need to pull into your web application. <a href="http://persistencejs.org" target="_blank">persistence.js</a> has no dependency on any Javascript framework (other than a tiny Google Gears initialization script in case you want to use Gears).</p>
<p><a href="http://github.com/zefhemel/persistencejs" target="_blank">persistence.js</a> is an asynchronous framework, which means that operations that can take some time, are provided with a callback function that will be invoked when the operation has completed. This asynchronous nature makes <a href="http://persistencejs.org" target="_blank">persistence.js</a> harder to use than synchronous frameworks like e.g. <a href="http://activerecordjs.org/record.html" target="_blank">ActiveRecord.js</a>, but the fact is that if you want to take advantage of the new HTML5 database capabilities, you have no other choice than to do it asynchronously. <a href="http://persistencejs.org" target="_blank">persistence.js</a> tries to make it as easy for you as possible.</p>
<p>The <a href="http://github.com/zefhemel/persistencejs" target="_blank">code is fairly well documented</a> (for my doing anyway), and the <a href="http://github.com/zefhemel/persistencejs/blob/master/README.md" target="_blank">README</a> explains how to use it and gives some code examples as well. To give you flavor, the following code opens a database connection, defines two entities (Task and Category), and synchronizes the definition with the database (creates the tables etc.):</p>
<blockquote>persistence.connect(‘testdbnm’, ‘My test db’, 5 * 1024 * 1024);<br><br><br><br><strong>var</strong> Task = persistence.define(‘Task’, {<br><br> name: “TEXT”,<br><br> description: “TEXT”,<br><br> done: “BOOL”<br><br>});<br><br><br><br><strong>var</strong> Category = persistence.define(‘Category’, {<br><br> name: “TEXT”<br><br>});<br><br><br><br>Category.hasMany(‘tasks’, Task, ‘category’);<br><br><br><br>persistence.schemaSync(<strong>null</strong>, <strong>function</strong>(tx) {<br><br> alert(‘Successfully synchronized the schema!’);<br><br>});</blockquote>
<p>Instances of the defined entities can then be created in a natural way, and subsequently marked to be persisted:</p>
<blockquote>
<strong>var</strong> task = <strong>new</strong> Task();<br><br>task.name = “My new task”;<br><br><strong>var</strong> category =<br><br><strong> new</strong> Category({name: “My category”});<br><br>persistence.add(task);<br><br>persistence.add(category);</blockquote>
<p>One-to-many and many-to-many relationships can be used as collections:</p>
<p>category.tasks.add(task);</p>
<p>When modifications to objects have been made, these have to be flushed to the database:</p>
<blockquote>persistence.flush(<strong>null</strong>, <strong>function</strong>() {<br><br> alert(‘All objects flushed!’);<br><br>});</blockquote>
<p>A nice feature of <a href="http://persistencejs.org" target="_blank">persistence.js</a> is QueryCollections, which are virtual collections that can prefetch relations, can easily be filtered and sorted (and in the future paginated):</p>
<blockquote>Task.all().filter(“done”, ‘=’, true)<br><br> .prefetch(“category”)<br><br> .order(“name”, <strong>false</strong>)<br><br> .list(<strong>null</strong>, <strong>function</strong> (results) {<br><br> results.forEach(<strong>function</strong> (t) {<br><br> console.log(‘[‘ + t.category.name + ‘] ‘<br><br> + t.name);<br><br> });<br><br>});</blockquote>
<p>In the future I intend to add synchronization support to it so that the local database can transparently be synchronized with a (view on) a remote database, which is a typical use case of applications like these.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>119</wp:post_id>
		<wp:post_date>2010-02-05 15:18:38</wp:post_date>
		<wp:post_date_gmt>2010-02-05 14:18:38</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>persistence-js-an-asynchronous-javascript-orm-for-html5-gears</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="javascript"><![CDATA[JavaScript]]></category>
		<category domain="post_tag" nicename="mobile"><![CDATA[Mobile]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Task Switching and Open Development on the Apple iPad</title>
		<link>http://zef.me/2010/01/28/task-switching-and-open-development-on-the-apple-ipad/</link>
		<pubDate>Thu, 28 Jan 2010 12:26:45 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2010/01/28/task-switching-and-open-development-on-the-apple-ipad/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>In case you missed it, Apple launched the <a href="http://www.apple.com/ipad" target="_blank">iPad</a> yesterday. Essentially it’s a beautiful looking giant iPod Touch running the iPhone/iPod OS, slightly adapted to take better advantage of the bigger 10" screen. It’s available at a remarkably (for Apply, and the hardware you get) low price starting at $499. Not only does it look like a bigger iPod and runs its software, it also comes with the usual suspects: an App Store, synchronization through iTunes etc.</p>
<p>With that come the usual restrictions: only install software through the App Store and no multi-tasking. Although I truly believe the no multi-tasking support limitation is going to be resolved in June, when Apple usually releases new iPhones and iPod touches (and an operating system to go with that), there is a way around both these problems:</p>
<p>The iPad, like the iPhone and iPod touch comes with an <strong>excellent, fast browser</strong>.</p>
<p>If you build iPad web applications, you can build whatever you like, it doesn’t have to be approved by Apple and you can roll out updates instantly. In addition, web applications, like on the iPhone/iPod touch are the only type of application that “keep running” (in the sense of not being killed) when switching applications. You can have several web apps open in safari, and they’re still there, in the same state, after you exit Mobile Safari and return to it. Although the applications do not run simultaneously, you can easily switch between them, in a kind of <em>task switcher</em> inside Safari, which is its ability to switch between “tabs”:</p>
<p>And yes, indeed. This exactly the direction in which I’m heading with my <a href="http://zef.me/2693/lets-build-a-dsl" target="_blank">DSL for mobile applications</a> (which may actually include the iPad as a target).</p>
<p>By the way, I’m trying to come up with a new name for the DSL, now that MobiDSL is apparently taken. Name suggestions? It does not have to include the word DSL at all, preferably not. I’m thinking about something with “Touch” in it, or possibly something completely different. Any ideas?</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>120</wp:post_id>
		<wp:post_date>2010-01-28 13:26:45</wp:post_date>
		<wp:post_date_gmt>2010-01-28 12:26:45</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>task-switching-and-open-development-on-the-apple-ipad</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="apple"><![CDATA[Apple]]></category>
		<category domain="post_tag" nicename="dsl"><![CDATA[Dsl]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="ipad"><![CDATA[iPad]]></category>
		<category domain="post_tag" nicename="mobile"><![CDATA[Mobile]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Javascript: A Language in Search of a Standard Library and Module System</title>
		<link>http://zef.me/2010/02/24/javascript-a-language-in-search-of-a-standard-library-and-module-system/</link>
		<pubDate>Wed, 24 Feb 2010 10:01:10 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2010/02/24/javascript-a-language-in-search-of-a-standard-library-and-module-system/</guid>
		<description></description>
		<content:encoded><![CDATA[

<ol>
<li>Array</li>
<li>Boolean</li>
<li>Date</li>
<li>Error</li>
<li>EvalError</li>
<li>Function</li>
<li>Math</li>
<li>Number</li>
<li>Object</li>
<li>RangeError</li>
<li>ReferenceError</li>
<li>RegExp</li>
<li>String</li>
<li>SyntaxError</li>
<li>TypeError</li>
<li>URIError</li>
</ol>
<p>Recognize that? Yes indeed, it’s the complete list of <a href="https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference" target="_blank">standard Javascript objects</a> of Javascript 1.5. 16 objects, of which 7 are error objects. Of course, this is just the Javascript language by itself. In practice Javascript executes inside a browser, which gives it access to additional objects like the DOM, and all kinds of fancy HTML5 and non-standard browser-specific features.</p>
<p>When Javascript was just a little language that people would use to do simple mouse-over events, this was not a problem. However, now, more and more applications are written in Javascript in the browser and Javascript is used in <a href="http://www.mongodb.org" target="_blank">more</a> and <a href="http://couchdb.apache.org/" target="_blank">more</a> <a href="http://nodejs.org/" target="_blank">places</a> other than the browser. Better yet I dare to bet you that in a few years time Javascript is going to be one of the most used programming languages in a growing number of domains. The growing body of Javascript code also means Javascript needs more than just those 16 objects. It needs a larger standard API and it needs a standardized way to modularize code.</p>
<p>At the very least it needs a de-facto standard way of doing object-oriented programming, having the choice between <a href="http://javascript.crockford.com/inheritance.html" target="_blank">classical</a>, <a href="http://javascript.crockford.com/prototypal.html" target="_blank">prototypal</a>, or, sure, why not <a href="http://ajaxpatterns.org/Lazy_Inheritance" target="_blank">lazy inheritance</a> is not doing it for me. Different libraries use different styles. Worse yet, different libraries develop their <a href="http://api.prototypejs.org/language/class.html" target="_blank">own utility objects to produce classes</a>, and if they’d at least agree on a common way of doing that, but no, there are a few dozen different way of implementing exactly the kind of inheritance you like. I’m not the biggest fan of Java, but at least they made a decision on this at the language level.</p>
<p>But I’m getting side tracked. The main two things Javascript needs to be a proper language that we can apply “grown-up” software engineering principles to:</p>
<ol>
<li>A standard library</li>
<li>A module system</li>
</ol>
<p>First, the standard library. Those 16 objects are no longer sufficient. So, what happens is that programmers step in to build a larger, more extensive library of objects. It would be great if they all teamed up to come with the one framework that everybody uses, but of course they didn’t, so we now have <a href="http://www.prototypejs.org" target="_blank">Prototype</a>, <a href="http://mootools.net/" target="_blank">MooTools</a>, <a href="http://jquery.com" target="_blank">jQuery</a>, <a href="http://mochikit.com/" target="_blank">MochiKit</a>, <a href="http://www.extjs.com/" target="_blank">ExtJS</a>, <a href="http://developer.yahoo.com/yui/index.html" target="_blank">YUI</a>, <a href="http://code.google.com/closure/library/" target="_blank">Google Closure</a>, and I’m probably forgetting about a dozen. This divides the Javascript world into different camps. Either you’re a jQuery guy or a Prototype guy, a ExtJS guy or a MochKit guy. There’s a YUI-y way of doing things and a Prototype way of doing things. There’s a <a href="http://marcgrabanski.com/pages/code/jquery-ui-datepicker" target="_blank">jQuery calendar</a>, an <a href="http://www.extjs.com/learn/Extension:Calendar" target="_blank">ExtJS calendar</a>, and a <a href="http://scal.fieldguidetoprogrammers.com/" target="_blank">Prototype calendar</a>. Of course, once you picked a framework you stick to it, because if I want to use a prototype calendar from my jQuery application, I have to pull in <em>x</em> kilobytes of additional code that essentially duplicates jQuery functionality. A lot of effort is wasted because of this.</p>
<p>What Javascript’s standard library should contain is pretty tough thing to determine. First thing that comes to mind is a set of standard data structures. Of course Javascript has arrays and objects. Objects are typically also used as maps (although the keys can only be strings, and not even all strings) and sometimes even as set (where the property names represent values).</p>
<p>A better library of data structures is required, including a proper map and set implementation. Additionally, APIs for other common tasks such as:</p>
<ul>
<li>JSON parsing and serialization</li>
<li>Testing</li>
<li>Cryptography</li>
<li>Date handling</li>
<li>DOM querying (I think most libraries agree that CSS selectors are a good way, right?)</li>
</ul>
<p>Some stuff like DOM traversals, querying and widgets will be hard to agree on probably, but would be nice to have.</p>
<p>Because Javascript is increasingly being used as a non-browser language, for instance on servers, it will also need non-browser stuff like IO, inter-process communication, sockets etc. The <a href="http://wiki.commonjs.org/wiki/CommonJS" target="_blank">CommonJS</a> initiative is working on these. CommonJS is an initiative, mostly among Javascript server vendors, to agree upon certain standard interfaces to, e.g. IO, threads, sockets etc. Its main contribution to date, however, is <a href="http://wiki.commonjs.org/wiki/Modules/1.1" target="_blank">its module system</a>.</p>
<p>Javascript does not have namespaces, but you can use objects for this purpose. That’s fine. In the past, some frameworks have built their own module system around this. Dojo and Google Closure offer a remarkably similar API to export and load modules:</p>
<p>dojo.require(‘dijit.widget.Editor’);<br><br>dojo.require(‘myproj.Something’);<br><br>dojo.provide(‘myproj.MyObj’);<br><br><br><br>myproj.MyObj = function() { };<br><br>myproj.MyObj.prototype.initialize = function() { … };</p>
<p>Replace ‘dojo’ by ‘goog’ and you basically have the Google Closure version. Quite nice and reasonably clean. However, there’s also <a href="http://openjsan.org/doc/c/cw/cwest/JSAN/0.10/lib/JSAN.html" target="_blank">JSAN’s module system</a>. CommonJS’s module system is really nice, however according to some reports <a href="http://tagneto.blogspot.com/2009/11/javascript-module-loading-browser-and.html" target="_blank">cannot be implemented in the browser properly</a>. There’s an <a href="http://github.com/jrburke/requirejs" target="_blank">asynchronous version of the CommonJS module system called RequireJS,</a> but, well, it’s not the CommonJS standard. There’s a <a href="http://wiki.commonjs.org/wiki/Modules/Transport/C" target="_blank">proposal to standardize the RequireJS system as part of CommonJS</a>, but it’s not entirely clear what the status is of that proposal.</p>
<p>I feel these issues have to be resolved and the good thing is that it does not require any changes in the Javascript language itself, nor its browser support. If the different framework vendors would just agree on a single base library that they all use, because, let’s face it, everybody needs a function to trim strings and a proper set implementation, a clean way of doing inheritance, plus a module system to go with that, be it dojo/Google’s system or a CommonJS variant, I don’t care.</p>
<p>It would be oh-so-nice to have a de-facto standard library for this stuff.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>146</wp:post_id>
		<wp:post_date>2010-02-24 11:01:10</wp:post_date>
		<wp:post_date_gmt>2010-02-24 10:01:10</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>javascript-a-language-in-search-of-a-standard-library-and-module-system</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="javascript"><![CDATA[JavaScript]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Javascript: OOP Style Performance</title>
		<link>http://zef.me/2010/03/02/javascript-oop-style-performance/</link>
		<pubDate>Tue, 02 Mar 2010 10:51:08 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2010/03/02/javascript-oop-style-performance/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>I have been watching parts of [Douglas Crockford’s talks on the history and future of Javascript](http://yuiblog.com/crockford/). In his third talk Douglas talks about functions. If you are somewhat familiar with Javascript you know that functions are, somewhat oddly, used to create new objects. The original “intended” way (which Douglas calls the _pseudo-classical_ way) of doing this is as follows:<br>~~~~~~~<br>function Person(name, age) {<br> this.name = name;<br> this.age = age;<br>}</p>
<p>Person.prototype.getNameAndAge = function() {<br> return “Name: “ + this.name + “ and age: “ + this.age;<br>};</p>
<p>var p = new Person(“Zef Hemel”, 26);<br>console.log(p.getNameAndAge());<br>~~~~~~~</p>
<p>What we do here is define a constructor function `Person`, which starts with a capital P, to indicate that it should be used in conjunction with the `new` operator, as demonstrated in the second last line. The second statement adds a method to the `Person` prototype, which in practice makes that method available to all `Person` objects (including ones already created). The last two statements instantiate a `Person` object and calls the `getNameAndAge` method.</p>
<p>Using this mechanism you can also implement inheritance. Let’s introduce a `LivingBeing` “super class”, which has an `age` property:<br>~~~~~~~<br>function LivingBeing(age) {<br> this.age = age;<br>}</p>
<p>LivingBeing.prototype.getAge = function() {<br> return this.age;<br>};<br>~~~~~~~</p>
<p>Alright, now we’ll define the `Person` contructor again, but assign a new instance of `LivingBeing` to its prototype, which will add all fields and methods available in `LivingBeing` to all `Person` objects (again, including existing ones). Then, we add an additional method to `Person` objects: `getNameAndAge`:</p>
<p>~~~~~~~<br>function Person(name, age) {<br> this.name = name;<br> this.age = age;<br>}</p>
<p>Person.prototype = new LivingBeing();</p>
<p>Person.prototype.getNameAndAge = function() {<br> return “Name: “ + this.name + “ and age: “<br> + this.getAge();<br>};</p>
<p>var p = new Person(“Zef Hemel”, 26);<br>console.log(p.getNameAndAge());<br>~~~~~~~<br>For more information on how inheritance and prototypes work, read [this excellent page in the Mozilla documentation](https://developer.mozilla.org/en/Core_JavaScript_1.5_Guide/Details_of_the_Object_Model).</p>
<p>Now, Crockford suggests that there is a nicer, cleaner and more natural way to do object-oriented programming and inheritance in Javascript, which he calls _functional inheritance_. The functional-inheritance style version of the above program looks as follows:<br>~~~~~~~~<br>function livingBeing(age) {<br> return {<br> getAge: function() {<br> return age;<br> }<br> };<br>}</p>
<p>function person(name, age) {<br> var that = livingBeing(age);<br> that.getNameAndAge = function() {<br> return “Name: “ + name + “ and age: “ + that.getAge();<br> };<br> return that;<br>}</p>
<p>var p = person(“Zef Hemel”, 26);<br>console.log(p.getNameAndAge());<br>~~~~~~~~<br>Note that the invocation style of the constructors changed here too, no `new` keyword should be used. I agree that this is a nice style, although it makes extending existing objects with additional methods/fields hard, but one could argue this is a bad idea anyway. Although clean, it also seems more expensive to execute, because you’re basically composing an object from scratch every time — you start out with an empty object and that push in all its methods and fields — while with the pseudo-classical approach you create one prototype object with all the methods, and then simply point to that object. Theoretically _calling_ a method would then be more expensive, because at invocation-time the prototype hierarchy has to be traversed. But maybe Javascript engines have a clever solution to all of this and in practice it doesn’t matter. I decided to investigate.</p>
<p>I benchmarked two things:</p>
<p>1. The performance of object creation, by creating 10x 1,000,000 objects<br>2. The performance of method calling on a single object, by invoking a method 10x 1,000,000 times</p>
<p>I did each 10 times, so that I can take an average time on each. I executed this benchmark on four browsers running on my Mac (Macbook Pro):</p>
<p>* Firefox 3.5<br>* Chrome 5 (dev)<br>* Safari 4<br>* Opera 10.50b</p>
<p>**Disclaimer 1:** The reason I executed these on these four browsers is not to compare their performance, _this is not a good way to compare browser performance_, but mainly to check that the results in different browsers do not diverge too much.</p>
<p>**Disclaimer 2:** What I’m testing is not representative for real programs. If one approach is going to be twice as fast as the other, this does not imply that your programs are going to be twice as fast, it means that _object creation_ is twice as fast, or method invocation is twice as fast. Whether that matters to you depends on the amount of objects you create or methods you call.</p>
<p>Benchmark 1: Object creation<br> — — — — — — — — — — — — — — <br>This benchmark creates 1,000,000 objects. First using the pseudo-classical style and then through the functional style. The [code to this benchmark can be found here](http://gist.github.com/318662). The times reported are in milliseconds for 1,000,000 objects being created. As mentioned, every test is performed 10 times of which I took the average:</p>
<p>**Update:** The previous version of the benchmark script contained a major flaw that increased the execution time of the functional style considerably. This has now been adjusted in the graph. Thanks Adrian for noticing this.</p>
<p>This chart clearly shows that creating objects using the pseudo-classical style is cheaper in all browsers. This varies from about 35% cheaper (Chrome) up around three times as cheap (Firefox). If you create huge amounts of objects in your code, you may want to take this into consideration.</p>
<p>Benchmark 2: Method invocation<br> — — — — — — — — — — — — — — — <br>This benchmark creates one object and then invokes the same method on it 1,000,000 times. First using the pseudo-classical style and then through the functional style. The [code to this benchmark can be found here](http://gist.github.com/318662). The results are as follows:</p>
<p>I would have expected that method invocation would have been cheaper in the functional style of object creation, but it turns out it’s not. The differences here are almost negligible, so I’d say that in practice it doesn’t really matter what style you choose if your application is heavy on method calls.</p>
<p>Still, I felt that the functional style must be cheaper especially if you use inheritance. So I [adapted my benchmark script](http://gist.github.com/319415) to introduce a level of inheritance (like the `LivingBeing` “super class”). However, method calls using the pseudo-classical style are still cheaper, although less so. Perhaps, if you use 4+ levels in your object hierarchy, the functional style method calls may start to become cheaper (although I expect _creating_ those objects will be much more expensive).</p>
<p>It seems that method invocation on objects created using the functional style are roughly as expensive as using the pseudo-classical style.</p>
<p>Conclusion<br> — — — — — <br>There are two properties to take into account when deciding what object-creation style you’re going to use in your code.</p>
<p>1. Which style produces clearer code? This depends on the taste of both on the developers of the code, but if you’re developing a library for others, possibly also on the expectations of your audience. Scanning through some Javascript libraries it seems the pseudo-classical approach is much more popular. Consequently, your audience is likely going to expect and be more comfortable with this approach. That’s something to take into account.<br>2. Is the code CPU/memory intensive, does it create lots of objects? If so, the pseudo-classical approach is superior.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>274</wp:post_id>
		<wp:post_date>2010-03-02 11:51:08</wp:post_date>
		<wp:post_date_gmt>2010-03-02 10:51:08</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>javascript-oop-style-performance</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="javascript"><![CDATA[JavaScript]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>10 Things You Hadn’t Expected HTML/Javascript Would Do</title>
		<link>http://zef.me/2010/03/04/10-things-you-hadnt-expected-html-javascript-would-do/</link>
		<pubDate>Thu, 04 Mar 2010 06:39:14 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2010/03/04/10-things-you-hadnt-expected-html-javascript-would-do/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>About 14–15 years ago my uncle took me to the university at which he was studying at the time. He had something to show me. He sat me behind a computer in the computer room and started a program called “Netscape”. He typed in an internet address ending with `.au`. I saw my first website and it came all the way from the other side of the world. It looked like crap, loaded incredibly slow, but it was _cool_.</p>
<p>I could have never have guessed that HTTP, HTML, CSS and Javascript would once not become the main way to access information, but also replace a lot of desktop applications. The abilities of the new [HTML5](http://dev.w3.org/html5/spec/Overview.html) and other web technologies like [SVG](http://www.w3.org/Graphics/SVG/) never cease to amaze me.</p>
<p>Here are 10 things I had not expected these open web technologies would be able to, but can in 2010:</p>
<p>1. [Interactively render physics of a cloth](http://www.andrew-hoyer.com/experiments/cloth)</p>
<p>2. [Live motion tracking](http://htmlfive.appspot.com/static/tracker1.html)</p>
<p>3. [Play YouTube videos without Flash](http://www.youtube.com/html5)</p>
<p>4. [Collaboratively edit source code in a browser IDE](https://bespin.mozillalabs.com/)</p>
<p>5. [Do weird interactive stuff like this](http://9elements.com/io/projects/html5/canvas/)</p>
<p>6. [Animate simple 3D landscapes](http://sebleedelisle.com/demos/html5landscape.html)</p>
<p>7. [Read books in a mobile browser](http://m.ibisreader.com/), _while disconnected from the internet_</p>
<p>8. [Play Wolfenstein 3D](http://devfiles.myopera.com/articles/650/step_4_enemies.htm)</p>
<p>9. [Play MarioKart](http://www.nihilogic.dk/labs/mariokart/)</p>
<p>10. [Render flash files using Javascript/SVG](http://paulirish.com/work/gordon/demos/)</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>297</wp:post_id>
		<wp:post_date>2010-03-04 07:39:14</wp:post_date>
		<wp:post_date_gmt>2010-03-04 06:39:14</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>10-things-you-hadnt-expected-html-javascript-would-do</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="html5"><![CDATA[Html5]]></category>
		<category domain="post_tag" nicename="javascript"><![CDATA[JavaScript]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>On Asynchronous Programming</title>
		<link>http://zef.me/2010/01/26/on-asynchronous-programming/</link>
		<pubDate>Tue, 26 Jan 2010 20:13:40 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2010/01/26/on-asynchronous-programming/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p><a href="http://msdn.microsoft.com/en-us/library/ms228969.aspx" target="_blank">MSDN</a>:</p>
<blockquote>Asynchronous operations are typically used to perform tasks that might take a long time to complete, such as opening large files, connecting to remote computers, or querying a database. An asynchronous operation executes in a thread separate from the main application thread. When an application calls methods to perform an operation asynchronously, the application can continue executing while the asynchronous method performs its task.</blockquote>
<p>Asynchronous programming clearly has performance benefits, as mentioned in the explanation I just quoted. What I have <a href="http://zef.me/2570/event-programming-the-highway-to-concurrency" target="_blank">complained about before</a> is the programming model that follows from it. In Javascript this becomes painfully clear. In Javascript you do not have threading (<a href="http://www.whatwg.org/specs/web-workers/current-work/" target="_blank">although it’s coming</a>), therefore, anything that is not going to be instantaneous, needs to be executed asynchronously or it will freeze the browser. The typical example of this is Ajax (<strong>Asynchronous</strong> Javascript and XML, a term that is way too general, when you think of it), but you get the same things when you start interacting with local databases. In a previous post I showed the following code:</p>
<p>What I do in this code is attempting to implement simple sequential execution of</p>
<ol>
<li>opening a database connection</li>
<li>starting a transaction</li>
<li>creating a table</li>
<li>inserting a task</li>
<li>inserting another task</li>
<li>selecting all tasks in the table</li>
<li>render list items for them</li>
</ol>
<p>In a synchronous programming model this would roughly be:</p>
<p><strong>var</strong> db = db.openDatabase(…);<br><br>db.startTransaction();<br><br>db.executeSql(“CREATE …”);<br><br>db.executeSql(“INSERT INTO …”);<br><br>db.executeSql(“INSERT INTO …”);<br><br><strong>var</strong> results = db.executeSql(“SELECT * FROM …”);<br><br><strong>for</strong>(<strong>var</strong> i = 0; i &lt; results.length; i++) {<br><br> …<br><br>}</p>
<p>I think you will agree that this is much more legible than the asynchronous counterpart, except that you should never run it like this in Javascript, because it will completely block the UI thread for the duration of the code (which could be several seconds).</p>
<p>I looked at the <a href="http://code.google.com/webtoolkit/" target="_blank">Google Web Toolkit</a> because I hoped they had solved this problem, but it turns out they even made it worse, because now you have to deal with the Java overhead of implementing interfaces:</p>
<p>(Nothing bad about GWT by the way, using it makes a lot of sense in many larger projects.)</p>
<p>Getting back to my point: would it be possible to automatically rewrite synchronous code to asynchronous code? I’m starting to feel that’s very possible indeed. Let’s take a simple example. Let’s say we managed to implement an <em>adder</em> function that is extremely slow (maybe by executing it on a server far, far away):</p>
<p>console.log(adder(3, 4));</p>
<p>This code would block for several seconds, possibly, while the adder function is adding the numbers 3 and 4. In an asynchronous manner this would be written as:</p>
<p>adder(3, 4, <strong>function</strong>(result) {<br><br> console.log(result);<br><br>});</p>
<p>Asynchronous functions always provide a <em>callback function</em>, that is passed the result of the computation once it completes. The result of the computation is what we call a <em>return value</em> in synchronous programming. So, what if we sequence a number of synchronous statements:</p>
<p><strong>var</strong> a = 0;<br><br>a++;<br><br><strong>var</strong> n = adder(3, a);<br><br><strong>var</strong> m = adder(n, 4);<br><br>console.log(m);</p>
<p>What would that look like in asynchronous code?</p>
<p><strong>var</strong> a = 0;<br><br>a++;<br><br>adder(3, a, <strong>function</strong>(n) {<br><br> adder(n, 4, <strong>function</strong>(m) {<br><br> console.log(m);<br><br> });<br><br>});</p>
<p>As you can see, this transformation is not complicated. It could easily be automated, so that in the DSL that we’re designing you could write synchronous code, and it would be translated to asynchronous code automatically.</p>
<p>However, there is one thing that worries me about this approach. The advantage here is that you can write simpler code, which does indeed run asynchronously. However, we miss out on the opportunity to parallelize things. For instance, the two INSERT queries in my first example can easily be executed in parallel. There is no reason why I should execute them sequentially (when we look at just the two INSERTs). This may be a lot faster even. In this particular case I did this, because I wanted to make sure that both INSERTs had taken place before I did the SELECT. If I would have parellized the two INSERTs, I would to somehow track when both INSERTs had happened so I could do the SELECT. That’s kind of cumbersome. In the general case, however, there may in fact be many things that may be easily parallelized, and although I want to provide the user with a synchronous model because it’s so much more convenient to write, I also don’t want to lose the parallelizability of asynchronous code.</p>
<p>Maybe it would be possible to analyze the code for any dependencies. In the last example, for instance, the second adder call cannot be executed in parallel to the first adder call, because it depends on the result of the first, but in other cases there may be no such dependency. But I’m afraid to open up the world of hurt that is called concurrent programming here, so maybe I should stay out of that kind of stuff.</p>
<p>Any ideas or experiences with this?</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>348</wp:post_id>
		<wp:post_date>2010-01-26 21:13:40</wp:post_date>
		<wp:post_date_gmt>2010-01-26 20:13:40</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>on-asynchronous-programming</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="dsl"><![CDATA[Dsl]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="javascript"><![CDATA[JavaScript]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Let’s build a DSL</title>
		<link>http://zef.me/2010/01/24/lets-build-a-dsl/</link>
		<pubDate>Sun, 24 Jan 2010 15:54:08 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2010/01/24/lets-build-a-dsl/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Greetings surfer of the Internets. We meet at an exciting time, you and I. We stand at the birth of a new language, a language of the domain-specific kind. What domain is that, you ask? It is the mobile domain. Applications as frequently found on devices of the iPhone and Android sort, but not graphical games. No… serious applications. Todo apps. Tip calculators. Transportation planners. Personal little database applications. Todo applications, and… tip calculators.</p>
<p>You may say: “but Zef, that is absurd. The mobile domain is huge. There are so many phone platforms out there!” But I say, no. I recently investigated the importance of the iPhone and Android platforms compared to the rest and found that people care mostly about iPhone and Android and not so much about anything else. That’s right. <em>Anything</em>. The following graph proves this:</p>
<p>So we shall not worry about this issue.</p>
<p>Now that we decided on a domain (mobile applications) and target platforms (iPhone and Android phones), the next essential step for success is choosing a good name. But, do not worry, I already decided what it is going to be. The name of our language shall be: MobiDSL, which is pronounced<em> Mobi Diesel</em>. It’s fuel for your phone, which is just what we need with the sucky battery life that the phones that matter have these days. So MobiDSL is the name, at least until I can come up with something better. And do not worry, I registered <a href="http://www.mobidsl.org" target="_blank">MobiDSL.org</a> already, which redirects to this very post. Is it coincidence? I will leave that for you to figure out.</p>
<p>But, you will ask, if we are going to target both iPhone and Android, what kind of code are we going to generate? If we generated Objective-C code, it will only run on iPhone, and Java will only run on Android. Are we going to generate both? My answer to this question isseth “no”.</p>
<p>My original thought was to use <a href="http://zef.me/2218/on-the-pil" target="_blank">PIL</a>, the universal platform-independent super language, which I would let generate the Objective-C and Java code for me. But then I came up with something much more radical, something much more forward thinking, my friends, a solution that may just hand me some other mobile platforms for free (not that they matter).</p>
<p>We are going to build applications the way Steve intended them to be built, back in 2007 at the launch of the iPhone. I was <a href="http://zef.me/1365/ajax-reality-check" target="_blank">entusiastic about this idea from the very beginning</a>:</p>
<blockquote>Thanks Steve! “Yeah, we have this new amazing modern way of developing applications for your phone, it’s called a website!” Awesome. “It integrates great with all the iPhone features. For example you can create a “call:0123223222” link to call somebody!” Great. Except you always need an internet connection to use it, it’s slow, you can’t create an icon for it in the menu. And… oh yeah… it’s a frickin’ website! Apparently this was done for “security reasons”. What about Java, Steve? Every frickin’ phone supports Java. It all runs in a sandbox, it’s all secure. It even runs without an internet connection and it’s responsive (yes, that has become a feature in the web 2.0 day and age). Why no Java on the iPhone, explain it to me.</blockquote>
<p>Yes indeed. We are going to mobile web applications. But not to worry, web applications on mobile phones have advanced far beyond the killer “click to call” feature mentioned. Heck, the <a href="http://www.google.com/phone" target="_blank">Google Nexus One</a> has the same clock speed as my wife’s iBook. <a href="http://en.wikipedia.org/wiki/HTML5" target="_blank">HTML 5</a> gives us access to this power by offering:</p>
<ul>
<li>
<a href="http://developer.apple.com/safari/library/documentation/iPhone/Conceptual/SafariJSDatabaseGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40007256-CH1-SW1" target="_blank">Local databases</a> (SQLite, in the browser)</li>
<li>
<a href="http://smithsrus.com/gps-geolocation-in-safari-on-iphone-os-3-0/" target="_blank">Location information</a> (GPS coordinates)</li>
<li>
<a href="http://dev.w3.org/html5/workers/" target="_blank">Threading</a> (WebWorkers)</li>
<li>
<a href="http://rabblerule.blogspot.com/2009/08/detecting-swipe-in-webkit.html" target="_blank">Gestures</a> (swipes, mostly)</li>
<li>
<a href="http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html" target="_blank">Canvas</a>, for some pretty drawing</li>
<li>
<a href="http://www.w3.org/TR/offline-webapps/" target="_blank">Offline support</a>, the entire application is cached on the phone and is fully functional even without internet connection</li>
<li>The application can have an icon in the phone’s menu</li>
<li>Full-screen mode, applications can run without the location and browser navigation bars (on iPhone at least)</li>
<li>One platform to rule them all: simply generate HTML, CSS and Javascript and run on both platforms</li>
</ul>
<p>In addition we work around the App Store which can be seen as both an advantage and disadvantage. Advantage is that we can build whatever application we like and Apple does not need to like or approve it. Rolling out updates is also much faster. The disadvantage is that web applications don’t appear on the App Store, which is a great promotion tool, but then, tools like <a href="http://phonegap.com/" target="_blank">PhoneGap</a> can generate wrappers around web apps that can be submitted to the Android marketplace and iTunes App Store.</p>
<p>As I said, we meet in exciting times. I spent most of last week playing around with Javascript and <a href="http://jquery.com/" target="_blank">jQuery</a> and applying them to mobile applications. I managed to build a functional todo application that stores all of its data locally on the phone and looks very much native to the iPhone (some CSS trickery can probably make it Android-like too). The application can be used without an internet connection in full-screen and has a icon on the iPhone menu. I currently work on a few jQuery extensions to make writing such applications simpler. Then, when that’s done I shall proceed to build a nice, easy to use and analyze DSL on top of it. Isn’t HTML, CSS and Javascript easy to use, you ask? Well, I don’t know about you, but Javascript’s asynchronous coding is not always ideal in my opinion:</p>
<p>Trust me. It will be great.</p>
<p>Therefore, I shall declare 2010 as the year of the mobile web application.</p>
<p>I shall keep you informed, my valued surfer of the Internets.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>349</wp:post_id>
		<wp:post_date>2010-01-24 16:54:08</wp:post_date>
		<wp:post_date_gmt>2010-01-24 15:54:08</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>lets-build-a-dsl</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="mobidsl"><![CDATA[Mobidsl]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>The Point of WebDSL</title>
		<link>http://zef.me/2010/01/13/the-point-of-webdsl/</link>
		<pubDate>Wed, 13 Jan 2010 15:49:27 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2010/01/13/the-point-of-webdsl/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Jay <a href="http://zef.me/2600/adia-a-week-with-clojure-and-mongodb#comment-28381384" target="_blank">asks in the comments</a>:</p>
<blockquote>I don’t mean to be mean, because I really like your blog and I read it all the time… but could you just explain to me the point of WebDSL? I honestly don’t mean it in any kind of negative way, I’m just wondering why you’re dedicating your valuable time to building something like that when RoR, php, et al. already exist.</blockquote>
<blockquote>Just from a cursory look, it seems like the syntax is halfway between Visual Basic (yikes!) and C. Why do you prefer that type of syntax to the Lisp-style syntax of Clojure/Compojure?</blockquote>
<p>Good questions!</p>
<p><a href="http://www.webdsl.org" target="_blank">WebDSL</a> was started about 3 years ago by <a href="http://www.eelcovisser.org" target="_blank">Eelco Visser</a> as an exercise the the design and implementation of domain-specific languages. His focus up to then had been on <a href="http://strategoxt.org/Sdf/WebHome" target="_blank">parsing</a> and <a href="http://www.strategoxt.org" target="_blank">meta-programming</a>, but it was time to focus on a new domain: the web. When he started Eelco had never built a web application. He investigated a number of Java frameworks as a basis and eventually decided to use <a href="http://www.jboss.com/products/seam/" target="_blank">JBoss Seam</a> as a target.</p>
<p>The goal of WebDSL is to get rid of the boilerplate code you would have to write when building a Java application and raise the level abstraction. The vision was to have simple, domain-specific sub-languages that allow a programmer to specify a certain aspect of the application and the WebDSL compiler would generate all the implementation code for that aspect. Initially there were three sub-languages: a data modeling language, a user interface language and a simple action language to specify logic. As others joined the project (including myself), we added more sub-languages and more features: access control, workflow, data validation, ajax support and more recently search. Work is also done in the area of data evolution (i.e. migrating databases as you change your data model).</p>
<p>Although WebDSL is mainly <a href="http://swerl.tudelft.nl/" target="_blank">a research project</a>, we are increasingly working to make it useable by anybody with some programming experience. We currently have a few websites in production built using WebDSL (<a href="http://researchr.org" target="_blank">researchr</a>, <a href="http://tweetview.net" target="_blank">tweetview</a>, <a href="http://www.webdsl.org" target="_blank">webdsl.org</a> and <a href="http://pil-lang.org/" target="_blank">pil-lang.org</a>) and the <a href="http://webdsl.org/indexpage/Manual" target="_blank">manual</a> is growing.</p>
<p>The idea of building abstractions for the web itself is hardly novel. As Jay mentions, there are many web frameworks that already do this: Rails, Django and so on. There are a few things that we do differently in WebDSL, compared to existing frameworks:</p>
<ul>
<li>We create our own <em>custom syntax</em>. Whereas Rails and Django are struggling to express everything using Ruby and Python, respectively, we designed our own clean syntax. Whether you like this syntax is a matter of taste. Personally I like it, although, indeed, it inconsistent here and there.</li>
<li>WebDSL <em>is a statically typed and checked language</em>. I <a href="http://zef.me/2308/when-rails-fails" target="_blank">wrote</a> <a href="http://zef.me/2355/a-when-rails-fails-follow-up" target="_blank">a</a> <a href="http://zef.me/2333/when-jboss-seam-fails" target="_blank">number</a> <a href="http://zef.me/2371/when-scala-dsls-fail" target="_blank">of</a> <a href="http://zef.me/2409/static-verification-an-external-dsl-advantage" target="_blank">posts</a> about this issue and its advantages.</li>
<li>WebDSL compiles to low-level Java code, which has <em>good performance characteristics</em>. The code we generate does not rely on run-time meta-programming and reflection features of the language which are typically rather slow.</li>
<li>WebDSL <em>is platform independent</em>. We generate Java code now, but it can be ported relatively easily to .NET, Python or PHP. We have prototypes of this utilizing the <a href="http://zef.me/2218/on-the-pil" target="_blank">PIL language that I developed</a>.</li>
<li>Within the next few months WebDSL will have <a href="http://blog.eelcovisser.net/uploads/webdsl-editor.png" target="_blank"><em>excellent IDE support</em></a> for Eclipse, built using <a href="http://strategoxt.org/Stratego/Spoofax-IMP" target="_blank">Spoofax/IMP</a>. My colleagues are working on this. It will feature syntax highlighting, as-you-type error reporting, code completion and eventually refactoring support.</li>
</ul>
<p>A drawback that WebDSL has today is that it’s not trivial to install, but with the IDE plug-in and Java-version that should become a lot easier soon.</p>
<p>So, why am I putting so much effort into this? As you may be aware I’m doing a Ph.D. in the area of domain-specific languages, so we investigate how to best build them. WebDSL is a case study for us. Soon I intend to work on another DSL, in the domain of mobile applications (yes, a DSL to build iPhone and Android applications, people!). It’s interesting from a research perspective to see how to best do this.</p>
<p>In addition I regularly experiment with alternative ways of creating DSLs, like <a href="http://zef.me/2600/adia-a-week-with-clojure-and-mongodb" target="_blank">in Clojure</a> and <a href="http://zef.me/2371/when-scala-dsls-fail" target="_blank">Scala</a>. I’d like to see how far you can push these languages to build the DSLs you like. Clojure allows you to define your own custom syntax, in some sense, as long as you adhere to the rule of the parenthesis. Static error checking is much more problematic. Clojure is also rather tied to one platform, sure, there’s also <a href="http://github.com/richhickey/clojure-clr" target="_blank">ClojureCLR</a>, but to write programs that work on both CLR and JVM is, well, challenging. IDE support for a Clojure DSL is also non-trivial.</p>
<p>On the other hand, the flexibility of a DSL like WebDSL also has its downsides. Basically you can design the language any way you like, both its syntax and semantics, you don’t get much for free. Whereas an internal DSL built on Clojure or Scala gets a lot for free: some error reporting, support for namespaces (something we still don’t have in WebDSL), a type system (in Scala’s case), an escape to a powerful language (Clojure or Scala) and a rich set of libraries you can use. In WebDSL we have to design all of this from scratch.</p>
<p>So in the end both approaches have their advantages and disadvantages. I intend to continue to explore them both.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>361</wp:post_id>
		<wp:post_date>2010-01-13 16:49:27</wp:post_date>
		<wp:post_date_gmt>2010-01-13 15:49:27</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-point-of-webdsl</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="clojure"><![CDATA[Clojure]]></category>
		<category domain="post_tag" nicename="dsl"><![CDATA[Dsl]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="webdsl"><![CDATA[Webdsl]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>An Intro to Distributed Version Control</title>
		<link>http://zef.me/2010/02/24/an-intro-to-distributed-version-control/</link>
		<pubDate>Wed, 24 Feb 2010 20:37:09 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2010/02/24/an-intro-to-distributed-version-control/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>There are a multitude of reasons why distributed version control systems (like <a href="http://mercurial.selenic.com/" target="_blank">Mercurial</a> and <a href="http://git-scm.com/" target="_blank">Git</a>) are potentially preferable to centralized systems such as CVS and <a href="http://subversion.tigris.org/" target="_blank">Subversion</a>. One is that branching is cheaper and merging works much better. I only have anecdotal evidence of this. Frankly, I use Git only for <a href="http://github.com/zefhemel" target="_blank">personal projects</a> (in the sense that I’m the only one working on them). For WebDSL (which I work on with a couple of other people) we use subversion and there we hardly ever branch, because “merging works so badly”. Which, I suppose is true, but I’m hardly a subversion expert.</p>
<p>Quite out of the blue, Joel Spolsky (of <a href="http://www.joelonsoftware.com" target="_blank">Joel on Software</a> and <a href="http://www.stackoverflow.com" target="_blank">StackOverflow</a> fame) has <a href="http://hginit.com" target="_blank">published a Mercurial tutorial online</a>. And even if you don’t give a rat’s ass about Mercurial, I suggest you do read at least the first “chapter”: <a href="http://hginit.com/00.html" target="_blank">Subversion re-education</a>, which points out the differences between the subversion and mercurial/git mindset:</p>
<blockquote>Want to know something funny? Almost every Subversion team I’ve spoken to has told me some variation on the very same story. This story is so common I should just name it “Subversion Story #1.” The story is this: at some point, they tried to branch their code, usually so that the shipping version which they gave their customers can be branched off separately from the version that the developers are playing with. And every team has told me that when they tried this, it worked fine, until they had to merge, and then it was a nightmare. What should have been a five minute process ended up with six programmers around a single computer working for two weeks trying to manually reapply every single bug fix from the stable build back into the development build.</blockquote>
<blockquote>And almost every Subversion team told me that they vowed “never again,” and they swore off branches. And now what they do is this: each new feature is in a big #ifdef block. So they can work in one single trunk, while customers never see the new code until it’s debugged, and frankly, that’s ridiculous.</blockquote>
<blockquote>Keeping stable and dev code separate is precisely what source code control is supposed to let you do.</blockquote>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>366</wp:post_id>
		<wp:post_date>2010-02-24 21:37:09</wp:post_date>
		<wp:post_date_gmt>2010-02-24 20:37:09</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>an-intro-to-distributed-version-control</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="git"><![CDATA[Git]]></category>
		<category domain="post_tag" nicename="mercurial"><![CDATA[Mercurial]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Waddup Buzz?</title>
		<link>http://zef.me/2010/02/26/waddup-buzz/</link>
		<pubDate>Fri, 26 Feb 2010 10:11:49 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2010/02/26/waddup-buzz/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Google seems to be working hard at <a href="http://buzz.google.com" target="_blank">Buzz</a>. Increasingly it seems to group buzz updates together, like so:</p>
<p>On twitter we long had this problem with the same links and retweets showing up in our streams every so often. It would have been nice if those had automatically been grouped together like in the Buzz timeline, but they weren’t. Twitter fixed this problem by implementing native retweet functionality, which sort of solves the issue. So, the question is: why did Buzz group these particular updates together? To Let’s step into the algorithmic brain of the Google and try to figure this out. Let’s ungroup the updates:</p>
<p>Those with eye to detail will notice the number of updates here. How many were there when they were grouped? 1, 2, 3, 4, 5. Right? And when expanded? 1, 2, 3, 4… huh?</p>
<p>Anyway.</p>
<p>Let’s see if we can discover the reason behind the grouping. Is it content-based aggregation? Probably not, unless Google aggregates programming related content here, which I doubt. Did it summarize the four updates into one? Not at all, the javascript framework update has absolutely nothing to do with the other updates. So what is it then, that made Google feel the other updates were somehow less important than the Javascript one? And why would this be useful to me? The only answer I can come up with is that they were all posted by me around the same time. Except they’re really not posted all at 10:47am, they were posted in the course of about an hour, but Google only polls twitter every few hours or so (it seems). Is time-based aggregation really a useful thing, though?</p>
<p>Google, I think, or at least hope, you can do better than this.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>575</wp:post_id>
		<wp:post_date>2010-02-26 11:11:49</wp:post_date>
		<wp:post_date_gmt>2010-02-26 10:11:49</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>waddup-buzz</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="buzz"><![CDATA[Buzz]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Pubsubhub-frickin’-bub</title>
		<link>http://zef.me/2010/03/08/pubsubhub-frickin-bub/</link>
		<pubDate>Mon, 08 Mar 2010 20:08:51 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2010/03/08/pubsubhub-frickin-bub/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>[pubsubhubbub](http://code.google.com/p/pubsubhubbub/) — I’m not kidding — is an actual existing thing. Yeah, I too would have killed to be a fly on the wall when they decided to call it that, but there you go. So let’s dissect this piece of art of a name:</p>
<p>* `pubsub`, i.e. pub/sub, i.e. [publish/subscribe](http://en.wikipedia.org/wiki/Publish/subscribe), which is a common pattern in, well, the world, where multiple parties _subscribe_ to one or more _publishers_, to receive notifications on updates.<br>* `hub`, is a center of communication, often used for efficiency purposes, like an [ethernet hub](http://en.wikipedia.org/wiki/Ethernet_hub).<br>* `bub`, you tell me. I haven’t a clue.</p>
<p>So what is it, really? It’s a _protocol_ to enable near real-time update notifications among pubsubhubbub-supporting parties. Whereas RSS and Atom feeds required polling to receive updates, pubsubhubbub pushes information to parties. Currently various Google properties are have pubsubhubbub-support, such as [Google Reader](http://www.google.com/reader) and [Google Buzz](http://buzz.google.com). So, when you install a [pubsubhubbub plug-in for a wordpress blog](http://en.blog.wordpress.com/2010/03/03/rub-a-dub-dub-in-the-pubsubhubbub/), like I have and I push the publish button on a post, it will almost instantaneously appear in all of your Google Readers and your Google Buzz, whereas before, it may have taken a few minutes or hours to appear.</p>

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>678</wp:post_id>
		<wp:post_date>2010-03-08 21:08:51</wp:post_date>
		<wp:post_date_gmt>2010-03-08 20:08:51</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>pubsubhub-frickin-bub</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="feed"><![CDATA[Feed]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="google"><![CDATA[Google]]></category>
		<category domain="post_tag" nicename="pubsubhubbub"><![CDATA[Pubsubhubbub]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Markdown in Wordpress</title>
		<link>http://zef.me/2010/02/27/markdown-in-wordpress/</link>
		<pubDate>Sat, 27 Feb 2010 12:08:42 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2010/02/27/markdown-in-wordpress/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Alright, after using various WYSIWYG editors in [WordPress](http://www.wordpress.org) (which I use to to write this blog), I got fed up and decided to switch to [Markdown](http://daringfireball.net/projects/markdown/). There are a couple of plug-ins to make this happen, in fact I’m using three, together they make using Markdown pretty nice in wordpress.</p>
<p>* “Markdown for WordPress and bbPress”, this plug-in (just search for it through the wordpress plugin manager) contains the [PHP Markdown](http://michelf.com/projects/php-markdown/) parser, which supports the whole of Markdown, plus a few [extras](http://michelf.com/projects/php-markdown/extra/) such as footnotes[¹]. It parses every post as Markdown, including the old ones, which wasn’t a problem for me because the HTML of previous posts is also Markdown and seems to look OK.<br>* “WP MarkItUp”, this plug-in contains a reasonable editor for editing Markdown, it doesn’t do much, but has some buttons for common Markdown markup (hahaha), such as headings, **bold**, _italic_ and so on. The plugin is based on [MarkItUp](http://markitup.jaysalvat.com/home/).<br>* [“highlight.js”](http://softwaremaniacs.org/soft/highlight/en/), is a pure-javascript syntax highlighter that automatically detects the language of code blocks, which is exactly what you need in Markdown, because there’s no way to mark a code block with a language name. You cannot install this plugin through the plugin manager, as far as I’m aware, so you have to download it and install it yourself (see the README of the download). Example of syntax highlighting (of Javascript):</p>
<p>~~~~~~~~~<br>for(var i = 0; i &lt; ar.length; i++) {<br> console.log(i);<br>}<br>~~~~~~~~~</p>
<p>Now let’s see how this works in practice.</p>
<p>[¹]: Which look like this, in case you were wondering.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>755</wp:post_id>
		<wp:post_date>2010-02-27 13:08:42</wp:post_date>
		<wp:post_date_gmt>2010-02-27 12:08:42</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>markdown-in-wordpress</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="markdown"><![CDATA[Markdown]]></category>
		<category domain="post_tag" nicename="meta"><![CDATA[Meta]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Let’s Build a DSL: Platform Research</title>
		<link>http://zef.me/2010/01/26/lets-build-a-dsl-platform-research/</link>
		<pubDate>Tue, 26 Jan 2010 07:39:09 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2010/01/26/lets-build-a-dsl-platform-research/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Now that we decided on <a href="http://zef.me/2693/lets-build-a-dsl" target="_blank">a domain and target platform of our DSL</a>, it is time to explore our target platform. Although I have used HTML, CSS and Javascript for many years, I never looked that seriously into the possibilities of especially CSS and Javascript. To help me with that I’ve been reading a few books:</p>
<ul>
<li>
<a href="http://oreilly.com/catalog/9780596517748" target="_blank">Javascript: The Good Parts</a>, excellent book about Javascript, helping you avoid all that bad parts</li>
<li>
<a href="http://www.manning.com/bibeault/" target="_blank">jQuery in Action</a>, good book about <a href="http://www.jquery.com" target="_blank">jQuery</a>
</li>
<li>
<a href="http://building-iphone-apps.labs.oreilly.com/index.html" target="_blank">Building iPhone Apps with HTML, CSS and Javascript</a>, free online book from O’Reilly</li>
</ul>
<p>In addition there are a number of great blog posts and libraries helping to develop native-looking web applications for the iPhone:</p>
<ul>
<li><a href="http://lipidity.com/apple/iphone-webkit-css-3" target="_blank">Make the most of the iPhone SDK</a></li>
<li>
<a href="http://code.google.com/p/iphone-universal/" target="_blank">Universal iPhone UI library</a>, many nice CSS tricks</li>
<li><a href="http://jqtouch.com/" target="_blank">QTouch, jQuery extensions for iPhone web apps</a></li>
<li><a href="http://ajaxian.com/archives/iphone-native-looking-skin" target="_blank">iPhone Native looking skin</a></li>
</ul>
<p>And a number of performance related posts from Google (from the Gmail team that developed the excellent Gmail mobile application):</p>
<ul>
<li><a href="http://googlecode.blogspot.com/2009/04/html5-and-webkit-pave-way-for-mobile.html" target="_blank">HTML5 and Webkit pave the way for mobile web applications</a></li>
<li><a href="http://googlecode.blogspot.com/2009/06/gmail-for-mobile-html5-series.html" target="_blank">Suggestions for better performance</a></li>
<li><a href="http://google-code-updates.blogspot.com/2009/04/gmail-for-mobile-html5-series-using.html" title="Using AppCache to launch offline - Part 1" target="_blank">Using AppCache to launch offline — Part 1</a></li>
<li><a href="http://google-code-updates.blogspot.com/2009/05/gmail-for-mobile-html5-series-part-2.html" title="Using AppCache to launch offline - Part 1" target="_blank">Using AppCache to launch offline — Part 2</a></li>
<li><a href="http://google-code-updates.blogspot.com/2009/05/gmail-for-mobile-html5-series-part-3.html" title="Using AppCache to launch offline - Part 1" target="_blank">Using AppCache to launch offline — Part 3</a></li>
<li><a href="http://googlecode.blogspot.com/2009/06/gmail-for-mobile-html5-series-cache.html" target="_blank">Cache patterns for offline HTML5 applications</a></li>
<li><a href="http://googlecode.blogspot.com/2009/07/gmail-for-mobile-html5-series.html" target="_blank">Auto-growing textareas</a></li>
<li><a href="http://googlecode.blogspot.com/2009/05/gmail-for-mobile-html5-series-common.html" target="_blank">A Common API for web storage</a></li>
</ul>
<p>Because eventually I want to add automatic data synchronization support to our DSL, I’m also looking into synchronization strategies. <a href="http://blog.deeje.tv/musings/2009/06/notes-on-writing-a-history-driven-client-server-synchronization-engine.html" target="_blank">I found a nice post about that</a>. Of course, <a href="http://developer.apple.com/safari/library/documentation/iPhone/Conceptual/SafariJSDatabaseGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40007256-CH1-SW1" target="_blank">Apple’s own iPhone web app documentation</a> is also very useful.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>775</wp:post_id>
		<wp:post_date>2010-01-26 08:39:09</wp:post_date>
		<wp:post_date_gmt>2010-01-26 07:39:09</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>lets-build-a-dsl-platform-research</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="dsl"><![CDATA[Dsl]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="javascript"><![CDATA[JavaScript]]></category>
		<category domain="post_tag" nicename="mobile"><![CDATA[Mobile]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>On Language Design: Making Expensive Actions Hard</title>
		<link>http://zef.me/2010/02/08/on-language-design-making-expensive-actions-hard/</link>
		<pubDate>Mon, 08 Feb 2010 09:45:31 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2010/02/08/on-language-design-making-expensive-actions-hard/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>While abstraction is a great thing, some abstractions are completely unpredictable. For instance, object-relational mappers are very convenient to get started, but if performance is important these frameworks can get very unpredictable performance characteristics. Let’s take Hibernate as an example. Java does not support properties, instead there’s a convention of using getter and setter methods for this purpose. The general assumption is that calling these methods has little overhead:</p>
<p>Person p = em.find(Person.class, “somePersonId”);<br><br>println(p.getName());<br><br>println(p.getFather().getName());</p>
<p>Easy enough. But hang on, what did that third line do? I turns out that it had to execute a SQL query to fetch p’s fatherly Person object. Not a big deal, you’d say. But what if you have code like this in a for loop iterating over 200 person objects? At the face of it, this should be cheap, you’re just doing simple property access, right? However, behind the scenes it executes another query for every iteration, making this simple loop quite expensive at 201 required queries. Sure, you can tell Hibernate to prefetch the father property, and you should, but if you forget you may not notice what’s hogging the database until you start inspecting query logs.</p>
<p><strong>In Java, it is difficult to predict which statements are going to be expensive to execute by inspecting the code.</strong></p>
<p>This is true for practically every programming language, but it’s also a shame. It may be useful to have some kind of syntactical overhead for performing expensive operations. If expensive operations are inconvenient to write, will that not encourage programmers to write more efficient code?</p>
<p>It turns out Javascript has a mechanism for this. Javascript environments are typically single threaded. If you only have a single thread available in an interactive environment like the browser you want to block it as little as possible. Therefore, in Javascript, expensive operations are performed asynchronously. I <a href="http://zef.me/2726/on-asynchronous-programming" target="_blank">complained about asynchronous programming before</a>, but it has the nice property of making explicit what operations are going to be expensive.</p>
<p>Let’s see how this affected <a href="http://zef.me/2774/persistence-js-an-asynchronous-javascript-orm-for-html5gears" target="_blank">persistence.js, my asynchronous Javascript ORM</a>:</p>
<p>persistence.transaction(<strong>function</strong>(tx) {<br><br> Person.load(tx, “somePersonId”, <strong>function</strong>(p) {<br><br> println(p.name);<br><br> p.fetch(tx, ‘father’, <strong>function</strong>(father) {<br><br> println(father.name);<br><br> });<br><br> });<br><br>});</p>
<p>That’s one piece of annoying code to write, right? Indeed it is, because it’s quite expensive to execute too. As you can see there are three callback functions, which is also the number of database operations that are required to execute this code. One to start a transaction, one to load the person object and one to load its father object.</p>
<p>So how does this work in loops? We can use the each method on query collections:</p>
<p>persistence.transaction(<strong>function</strong>(tx) {<br><br> Person.all().each(tx, <strong>function</strong>(p) {<br><br> println(p.name);<br><br> println(p.father.name);<br><br> });<br><br>});</p>
<p>Again two defined callback functions, which gives you a feeling of how expensive this code is. One callback for starting the transaction and another one that iterates over the query result. However, if we execute this code we will get exceptions:</p>
<blockquote>Property ‘father’ with id: 0BEEC2CB6AF64A72A7647DF09BCD62C3 not fetched, either prefetch it or fetch it manually.</blockquote>
<p>Rather than lazy loading the father property in each iteration, <a href="http://github.com/zefhemel/persistencejs" target="_blank">persistence.js</a> simply throws an exception, it does not support lazy loading without syntactical overhead. However, as the error explains, we can fix the problem by prefetching the father property, so we will:</p>
<p>Person.all().prefetch(“father”).each(tx, <strong>function</strong>(p) {<br><br> println(p.name);<br><br> println(p.father.name);<br><br>});</p>
<p>Which results in an efficient predictable performance in terms of number of queries executed (1 query for this piece of code).</p>
<p>Kind of nice, right?</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>781</wp:post_id>
		<wp:post_date>2010-02-08 10:45:31</wp:post_date>
		<wp:post_date_gmt>2010-02-08 09:45:31</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>on-language-design-making-expensive-actions-hard</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="javascript"><![CDATA[JavaScript]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>On Buzz</title>
		<link>http://zef.me/2010/02/15/on-buzz/</link>
		<pubDate>Mon, 15 Feb 2010 15:42:10 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2010/02/15/on-buzz/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>I’m not sure what to think about <a href="http://buzz.google.com" target="_blank">Google Buzz</a>. On one hand it’s yet another place to post stuff (links, pictures, thoughts etc.), on the other hand it is quite a bit richer than Twitter, which I currently use for this purpose. Sure, it doesn’t have what’s one of twitter’s strengths I think: the 140 character limit, but it does have other stuff like a photo upload, location, a commenting system, the ability to “like” stuff, which provides the system with valuable information that can be used to filter, or at least prioritize future buzzes (or whatever they’re called).</p>
<p>Incidentally, if you’re not already <a href="http://www.google.com/profiles/zefhemel" target="_blank">following me on Buzz, do so now</a>!</p>
<p>What Buzz is definitely not good for right now is following popular people; people that get loads of comments on every buzz, meaning these buzzes jump to the top all the time. But I’m sure that will be fixed.</p>
<p>Buzz is likely to go a bit more mainstream than Twitter, which will mean that my wife, mom and dad are likely to start using at some point. Should they really be following me though. I’m likely to push out stuff that they really do not care about (like work related things). Currently this is why I use both facebook and twitter. Facebook is for personal things. Twitter for work/hobby. What should I use Buzz for, if anything? Time will tell.</p>
<p>Anyway, my point is: <a href="http://www.google.com/profiles/zefhemel" target="_blank">follow me on buzz</a>.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1547</wp:post_id>
		<wp:post_date>2010-02-15 16:42:10</wp:post_date>
		<wp:post_date_gmt>2010-02-15 15:42:10</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>on-buzz</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="buzz"><![CDATA[Buzz]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Using Screen Estate</title>
		<link>http://zef.me/2010/02/01/using-screen-estate/</link>
		<pubDate>Mon, 01 Feb 2010 09:13:53 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2010/02/01/using-screen-estate/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>One of the more interesting UI features that the <a href="http://www.apple.com/ipad" target="_blank">iPad</a> exposes is its use of screen orientation. A good example of this is in the e-mail application. In Portrait mode your screen is long and narrow, so you see one e-mail. This is convenient for reading longer pieces of text:</p>
<p>However, when you’re more in a browsing mode “let’s see what e-mail we got today”, you flip the device around and get a view with a message list on the left and e-mail at the right:</p>
<p>If find this a rather fascinating user interface idea and wonder if we can not apply it more iPhone applications as well. There’s one iPhone application that I know of that really uses this, and that’s the Calculator application, which in portrait mode looks like this:</p>
<p>And when you flip it:</p>
<p>In the framework for the development of mobile web applications that I’m developing, I have support for orientation events. Here’s a <a href="http://zef.me/zodo/" target="_blank">simple todo application I’m working on</a> (looks best on an iPhone or desktop webkit browser) that takes advantage of this feature. I’m not entirely sure this is the best way to use the feature, but it’s cool nonetheless. In portrait mode the application looks as follows:</p>
<p>You can swipe any of the items to show a delete button:</p>
<p>However, if you’re in a destructive mode you can also flip the device around and switch to edit mode, in which all items become immediately deletable:</p>
<p>(You can emulate this behavior in a desktop browser by resizing the window, making it wider than it is long or vice versa).</p>
<p>A user interface design concept to think about.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1610</wp:post_id>
		<wp:post_date>2010-02-01 10:13:53</wp:post_date>
		<wp:post_date_gmt>2010-02-01 09:13:53</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>using-screen-estate</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="dsl"><![CDATA[Dsl]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="ipad"><![CDATA[iPad]]></category>
		<category domain="post_tag" nicename="iphone"><![CDATA[iPhone]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Spoofax Talk</title>
		<link>http://zef.me/2010/03/15/spoofax-talk/</link>
		<pubDate>Mon, 15 Mar 2010 20:15:15 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2010/03/15/spoofax-talk/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>For the past month or two I’ve been working on [mobl](http://github.com/zefhemel/mobl), a [DSL for the mobile domain](http://zef.me/2693/lets-build-a-dsl). It is the first larger DSL to be developed completely using [Spoofax/IMP](http://strategoxt.org/Spoofax/) (site is down at the moment, due to a power outage at the TU Delft). Spoofax is our new tool for developing domain-specific languages complete with Eclipse plug-ins. It’s based on [SDF](http://meta.cwi-incubator.nl/Meta-Environment/SDF) and [Stratego](http://strategoxt.org) and the Eclipse and Java integration makes it a much more user-friendly and nicer experience, both for the language’s users and their developers.</p>
<p>Recently, [Eelco Visser](http://blog.eelcovisser.net/) (my “boss”) gave a talk at the IFIP WG 2.11 meeting in St Andrews about Spoofax. He just [posted a video of his talk](http://blog.eelcovisser.net/index.php?/archives/128-Spoofax-The-Language-Workbench.html) in which he demonstrates a simplified version of WebDSL (called NWL) and its implementation. May be interesting to those who prefer watching a video over reading a manual or paper.</p>
<p>It’s still too early to discuss `mobl` in detail, but here’s a teaser screenshot showing a snippet of the language (at the left), and the Javascript that it is compiled to at the right (which updates whenever the source file is saved, similar to Eclipse’s Java compilation behavior):</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1741</wp:post_id>
		<wp:post_date>2010-03-15 21:15:15</wp:post_date>
		<wp:post_date_gmt>2010-03-15 20:15:15</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>spoofax-talk</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="dsl"><![CDATA[Dsl]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="ide"><![CDATA[Ide]]></category>
		<category domain="post_tag" nicename="mobl"><![CDATA[Mobl]]></category>
		<category domain="post_tag" nicename="spoofax"><![CDATA[Spoofax]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Convert cheap O’Reilly iPhone App Books to .epub</title>
		<link>http://zef.me/2010/05/11/convert-cheap-oreilly-iphone-app-books-to-epub/</link>
		<pubDate>Tue, 11 May 2010 08:49:28 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2010/05/11/convert-cheap-oreilly-iphone-app-books-to-epub/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>If you own an iPhone or iPod touch, you may have noticed that O’Reilly publishes a lot of its books as cheap iPhone applications:</p>
<p>These book applications go for a couple of bucks, which is very cheap compared to buying them through O’Reilly itself in their digital editions (often $30 or more). The drawback, naturally, is that they are just iPhone applications and you have to read them on the tiny iPhone or iPod screen. You can read them on the iPad, but they look very poor because of the pixel doubling. If you want to read these books on other devices, like a Kindle or iRex Digital Reader you’re out of luck.</p>
<p>Or so I thought.</p>
<p>Just by accident I came across the O’Reilly [eBook “tips and tricks” page](http://oreilly.com/ebooks/oreilly_iphone_tips.csp), which essentially tells you how to extract an HTML version of the book out of the iPhone application. Then you can also read the HTML version on your desktop. That’s nice, but not ideal. What I want is to extract an [epub](http://en.wikipedia.org/wiki/EPUB) version of the book, so I can read it on the iPad using iBooks, or on any other eBook reader. Luckily, it turns out you can, and it’s not even that hard.</p>
<p>So, even if you do not own an iPhone or iPod touch, there is a cheap way to get digital versions of O’Reilly books this way. Just follow my lead.</p>
<p>**Step 1: Buy an O’Reilly iPhone App Book** <br>Simply search for the title in iTunes or search for “O’Reilly” to get the complete list.</p>
<p>**Step 2: Find the application on your hard drive** <br>Simply right-click on the app in your application list in iTunes, and choose “Show in Finder” (or whatever the Windows equivalent is):</p>
<p>**Step 3: Make a copy of the file (ending with .ipa) to some temporary directory**</p>
<p>**Step 4: Rename the file to a .zip file and unzip it** <br>Rename your file from `something.ipa` to `something.zip` and then double-click it to extract it in-place.</p>
<p>This will result in a directory being created next to it:</p>
<p>**Step 5: Find the book application inside** <br>Navigate into the resulting directory. Inside it you will find a `Payload` directory, containing the application. If you’re on windows you can probably simply double-click it to go in, on Mac you have to right-click it and choose “Show package contents”:</p>
<p>**Step 6: Zip the contents of the `book` directory** <br>Inside the `.app` you will find a `book` directory, go in there. Then, select all files and compress them into a zip file:</p>
<p>**Step 7: Rename the resulting zip file to `.epub`** <br>The compressing will result in a `.zip` file, rename it to `.epub`.</p>
<p>**Step 8: Done!** <br>You can now import (simply drag and drop) this `.epub` file into iTunes, for instance, to synchronize it with your iPad.</p>
<p>And off you go!</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>84</wp:post_id>
		<wp:post_date>2010-05-11 10:49:28</wp:post_date>
		<wp:post_date_gmt>2010-05-11 08:49:28</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>convert-cheap-oreilly-iphone-app-books-to-epub</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="books"><![CDATA[Books]]></category>
		<category domain="post_tag" nicename="ebook"><![CDATA[eBook]]></category>
		<category domain="post_tag" nicename="epub"><![CDATA[Epub]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="ipad"><![CDATA[iPad]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Async Foreach in Javascript</title>
		<link>http://zef.me/2010/10/15/async-foreach-in-javascript/</link>
		<pubDate>Fri, 15 Oct 2010 09:06:33 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2010/10/15/async-foreach-in-javascript/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Javascript comes with a nice method on `Array` objects called `forEach`, it takes a function as an argument and applies that function to eacy item in the array sequentially. It’s Javascript’s version of a for-each loop, allowing you to write code like this:</p>
<p>for(var i = 0; i &lt; ar.length; i++) {<br> alert(ar[i]);<br> }</p>
<p>or, for the performance-obsessed:</p>
<p>var len = ar.length; <br> for(var i = 0; i &lt; len; i++) {<br> alert(ar[i]);<br> }</p>
<p>to:</p>
<p>ar.forEach(function(el) {<br> alert(el);<br> });</p>
<p>Which is quite clean, in my opinion. Sadly, `forEach` assumes that the function that is passed to it is [synchronous](http://zef.me/2726/on-asynchronous-programming). It does something and returns immediately. What if you need to pass an asynchronous function to it, and need to ensure that items are still processed sequentially? If I would write this:</p>
<p>ar.forEach(function(el) {<br> callAsyncFunction(el, function() { // my callback<br> alert(“Processed: “ + el);<br> });<br> });<br> alert(“Done!”);</p>
<p>I will, not unlikely, get the alerts in a hard to predict order. So, we need a asynchronous version of `forEach`. The solution I came up with to do this is as follows:</p>
<p>function asyncForEach(array, fn, callback) {<br> array = array.slice(0);<br> function processOne() {<br> var item = array.pop();<br> fn(item, function(result) {<br> if(array.length &gt; 0) {<br> processOne();<br> } else {<br> callback(); // Done!<br> }<br> });<br> }<br> if(array.length &gt; 0) {<br> processOne();<br> } else {<br> callback(); // Done!<br> }<br> };</p>
<p>This works great, but is very heavy on the call stack. If you have an array of 1000 elements, this will likely cause a stack overflow, because `processOne` calls itself recursively. I have not yet found an ideal solution to this problem. One trick is to not call `processOne` immediately, but _schedule_ it for invocation. Browser Javascript has `setTimeout` for this that you can use. The code then becomes:</p>
<p>function asyncForEach(array, fn, callback) {<br> array = array.slice(0);<br> function processOne() {<br> var item = array.pop();<br> fn(item, function(result) {<br> if(array.length &gt; 0) {<br> setTimeout(processOne, 0); // schedule immediately<br> } else {<br> callback(); // Done!<br> }<br> });<br> }<br> if(array.length &gt; 0) {<br> setTimeout(processOne, 0); // schedule immediately<br> } else {<br> callback(); // Done!<br> }<br> };</p>
<p>Which you can use like this:</p>
<p>asyncForEach(ar, function(el, callback) {<br> callAsyncFunction(el, function() { // my callback<br> alert(“Processed: “ + el);<br> callback();<br> });<br> }, function() {<br> alert(“Done!”);<br> });</p>
<p>Although this works in most occasions (except when you do in-browser database stuff, as I found out), it is kind of heavy on the browser’s scheduler. I have not done benchmarks, but intuitively this seems quite expensive. [node.js](http://nodejs.org) has `process.nextTick` for this, which you can just pass a function as argument and doesn’t use a timer infrastructure and is therefore more efficient.</p>
<p>If you care less about order of execution of individual items, but only about a callback when _all_ of them are processed (in any order), you can use a more efficient solution. It is efficient in not relying on `setTimeout`, not being heavy on the call stack and processing the entire array in parallel, which may also speed it up quite a bit. For this I define `asyncParForEach`:</p>
<p>function asyncParForEach(array, fn, callback) {<br> var completed = 0;<br> if(array.length === 0) {<br> callback(); // done immediately<br> }<br> var len = array.length;<br> for(var i = 0; i &lt; len; i++) {<br> fn(array[i], function() {<br> completed++;<br> if(completed === array.length) {<br> callback();<br> }<br> });<br> }<br> };</p>
<p>If you use the [persistence.js](http://persistencejs.org) library, these functions are included (`persistence.asyncForeach` and `persistence.asyncParForEach`). If you don’t, well, you should, or just use the implementations that I provided here.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>106</wp:post_id>
		<wp:post_date>2010-10-15 11:06:33</wp:post_date>
		<wp:post_date_gmt>2010-10-15 09:06:33</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>async-foreach-in-javascript</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="async"><![CDATA[Async]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="javascript"><![CDATA[JavaScript]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Moving the Server to the Browser</title>
		<link>http://zef.me/2010/08/30/moving-the-server-to-the-browser/</link>
		<pubDate>Mon, 30 Aug 2010 13:30:46 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2010/08/30/moving-the-server-to-the-browser/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>I think that it’s well-established by now that the majority of desktop software will move to the browser at some point. It happened to e-mail, calendar, word processing and many more applications already. But here’s a crazy idea: what if we move the server to the browser as well?</p>
<p>The past week I’ve been playing with [socket.io](http://socket.io) in [mobl](http://www.mobl-lang.org), my language for developing mobile web apps. Socket.io is a library that greatly simplifies building real-time web applications — applications that keep a connection (a socket) open to the server, allowing the server to push content to the client and vice versa. It was pretty straight-forward to build a library enabling use of socket.io from mobl.</p>
<p>The first thing I built was [mobl draw](http://zef.me:8888/draw.html) (only works in modern versions of Chrome, Safari or Firefox). The [client code](http://github.com/zefhemel/mobl/blob/master/samples/draw/draw.mobl), written in mobl, is pretty straight-forward. It uses the HTML5 canvas and responds to touch/mouse events. When you click/tap and drag, it will draw a line at that position and buffers your movements locally. A couple of times per second it pushes the buffer of movements to the server. The server broadcasts the update to all other connected clients. The result: everybody connected at the same time, can draw together in real-time. A pretty cool demo. In addition, the server keeps track of the entire drawing history, resulting in a quick replay of all the drawing that happened when you [first open the page](http://zef.me:8888/draw.html). The client part of mobl draw is written in mobl, of course, but the [server component (albeit small) is written in server-side Javascript](http://github.com/zefhemel/mobl/blob/master/samples/draw/server.js), using [node.js](http://nodejs.org).</p>
<p>Then, a colleague suggested building a game using mobl. I decided to build a multi-player [snake](http://en.wikipedia.org/wiki/Snake_(video_game)) variant. The [client code](http://github.com/zefhemel/mobl/blob/master/samples/znake/znake.mobl) was quick enough to build. The server-component, however, contained all the “interesting” stuff. The game logic was all written as part of the server, written using Javascript. Wasn’t this supposed to be a mobl exercise? Mobl currently focusses purely on the client-side of things, it does not (yet) have a server-side component. If I wanted to build the server in mobl as well, I had two options: (1) add a server-component to mobl, or (2) build a generic light-weight peer-to-peer message relay server in node.js once, enabling servers to also run in the browser.</p>
<p>I decided to do the latter. This brings back memories from networked games I used to play, where you could either join or host a server that would run on your computer.</p>
<p>So, in mobl there’s now a library called `mobl::peersocket` that has two types:</p>
<p>* `ServerSocket`, to instantiate a server<br>* `Socket`, to connect to a server</p>
<p>To start a server, you use `ServerSocket.create`:</p>
<p>var ss = ServerSocket.create(“my-server”,<br> onconnect=handleConnect,<br> ondisconnect=handleDisconnect,<br> onmessage=receiveMessage);<br> ss.broadcast(“Waddup!?”);</p>
<p>Then, you can connect to it:</p>
<p>var cs = Socket.join(“my-server”,<br> onmessage=clientReceiveMessage);<br> cs.send(“Hello”);</p>
<p>What this will do is establish a connection with the node.js relay server and register this mobl application as a server with the name “my-server”. Whenever a client connects to this server (using `Socket.join(“my-server”)`), the server app will be notified (`onconnect` will be triggered), and any messages sent to `my-server`, will be relayed to the mobl server app. All the [node.js relay server](http://github.com/zefhemel/mobl/blob/master/peerserver.js) does is handle the creation of servers, handle connection to servers and pass messages around between clients and servers. It does not contain any game logic whatsoever, all of that is in the [mobl server code](http://github.com/zefhemel/mobl/blob/master/samples/znake/server.mobl).</p>
<p>The result is [running here](http://zef.me:8889/znake.html). To start, it presents you with a list of currently running servers (if any), and a link to the page to host your own server. After picking a server you pick a player name and start playing. Multiple servers can be run at the same time and each has its own playing field. An issue seems to be latency. If the server does not have a low-latency internet connection, it can take a while for it to register left/right movements, which is sort of annoying. Of course, the latency is higher that typical, because every message between client and server is relayed through the node.js server. It’s a quite fun game though, one of my colleagues even built a simple bot using [Greasemonkey](http://en.wikipedia.org/wiki/Greasemonkey).</p>
<p>Although it’s a thought-provoking experiment, what’s the point of running a server in your browser? In my case the reason was to be able to write the server in mobl as well, but how does that help anybody else? To be honest I’m not entirely sure yet.</p>
<p>It could be a secure way to let third parties host their own code on your servers. A third party would upload their code to your servers and they would run the uploaded server software in their own browser, which is completely secure — the server code can only communicate with its clients through your relay server and use resources available in the browser (e.g. a local database and CPU cycles). But who knows, there may be other reasons to do this as well. Any thoughts?</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>172</wp:post_id>
		<wp:post_date>2010-08-30 15:30:46</wp:post_date>
		<wp:post_date_gmt>2010-08-30 13:30:46</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>moving-the-server-to-the-browser</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="browser"><![CDATA[Browser]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="javascript"><![CDATA[JavaScript]]></category>
		<category domain="post_tag" nicename="mobl"><![CDATA[Mobl]]></category>
		<category domain="post_tag" nicename="server"><![CDATA[Server]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Javascript: the Scope Pitfall II</title>
		<link>http://zef.me/2010/03/19/javascript-the-scope-pitfall-ii/</link>
		<pubDate>Fri, 19 Mar 2010 15:30:42 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2010/03/19/javascript-the-scope-pitfall-ii/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Hello, and welcome to the second part of [“Javascript: The Scope Pitfall”](http://zef.me/2843/javascript-the-scope-pitfall). Let’s get started, shall we?</p>
<p>What does the following code print?</p>
<p>~~~~~~~~~<br>var n = 0;<br>function add() {<br> var m = n + 1;<br> print(m);<br>}<br>add();<br>~~~~~~~~~</p>
<p>That was easy, right? The answer, of course is `1`, because `0 + 1 == 1`. Alright, a slight variation on the same example:</p>
<p>~~~~~~~~~<br>var n = 0;<br>function add2() {<br> var n = n + 1;<br> print(n);<br>}<br>add2();<br>~~~~~~~~~</p>
<p>What does this print? If your answer is `NaN` (not a number), you can stop reading. If you think the answer is `1` (as I did), read on. What is happening here? In my previous post I explained that [Javascript lifts variable declarations to the top of the function](http://zef.me/2843/javascript-the-scope-pitfall). So, this code is equivalent to:</p>
<p>~~~~~~~~~<br>var n = 0;<br>function add2() {<br> var n;<br> n = n + 1;<br> print(n);<br>}<br>add2();<br>~~~~~~~~~</p>
<p>It also turns out that when a previously undeclared variable (in this scope) is declared it is initialized to `undefined`. So we get:</p>
<p>~~~~~~~~~<br>var n = 0;<br>function add2() {<br> var n = undefined;<br> n = n + 1;<br> print(n);<br>}<br>add2();<br>~~~~~~~~~</p>
<p>Any calculation involving `undefined` will return `NaN`, so naturally it will indeed print `NaN`. You can rewrite the code a little bit to make it print `1` again:</p>
<p>~~~~~~~~~<br>var n = 0;<br>var oldN = n;<br>function add3() {<br> var n = oldN + 1;<br> print(n);<br>}<br>add3();<br>~~~~~~~~~</p>
<p>It took me a while to figure this one out, though, when I ran into it. Just thought I would share.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>174</wp:post_id>
		<wp:post_date>2010-03-19 16:30:42</wp:post_date>
		<wp:post_date_gmt>2010-03-19 15:30:42</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>javascript-the-scope-pitfall-ii</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="javascript"><![CDATA[JavaScript]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Is the Mobile Pendulum Swinging From Apps to the Web?</title>
		<link>http://zef.me/2010/05/16/is-the-mobile-pendulum-swinging-from-apps-to-the-web/</link>
		<pubDate>Sun, 16 May 2010 19:05:08 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2010/05/16/is-the-mobile-pendulum-swinging-from-apps-to-the-web/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>[GigaOM](http://gigaom.com/2010/05/12/is-the-mobile-pendulum-swinging-from-apps-to-the-web/):</p>
<p>&gt; The number of mobile-friendly websites is increasing faster than expected, according to the latest data from Taptu, a touch-focused mobile search company. Not only is the touch web growing, it’s growing at a faster rate than Apple’s iTunes App Store, which currently has an annualized revenue rate of nearly a billion dollars.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>203</wp:post_id>
		<wp:post_date>2010-05-16 21:05:08</wp:post_date>
		<wp:post_date_gmt>2010-05-16 19:05:08</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>is-the-mobile-pendulum-swinging-from-apps-to-the-web</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="mobile"><![CDATA[Mobile]]></category>
		<category domain="post_tag" nicename="mobl"><![CDATA[Mobl]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Code Generation and Vendor Lock-In</title>
		<link>http://zef.me/2010/03/16/code-generation-and-vendor-lock-in/</link>
		<pubDate>Tue, 16 Mar 2010 11:49:44 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2010/03/16/code-generation-and-vendor-lock-in/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>When you build a code generator you have two basic options:</p>
<p>1. Generate code to be read, complemented and possibly modified by humans<br>2. Generate code purely as a convenient intermediate step toward bytecode/machine code compilation</p>
<p>The first approach seems to be the most common. It is the most pragmatic option. “Hey, I keep writing the same code over and over, can’t I simply generate part of it and make minor adjustments by hand?” Yes you can. But then you end up with a maintenance issue: it turns out that the code you generated initially was not quite right, and now what do you do, regenerate the code and lose all the modifications you made? As the kids say these days: FAIL!</p>
<p>An improved version of this naive approach is using the [generation gap pattern](http://www.research.ibm.com/designpatterns/pubs/gg.html). The idea here is to generate abstract classes, which you extend from custom code and override the parts that you need to override. The result is that you keep generated and manually written code separate, which is a good thing, because you can make changes to the code generator and simply regenerate code without your changes being lost. Usually. Not always, because if you make invasive changes to you code generator, you may generate completely different code altogether; different classes, different methods and so on. Although you do not lose your manually written code, this manually written code now no longer has any apparent relationship to the code that is generated and it needs to be rewritten to fit the new style of generated code. Again: FAIL.</p>
<p>These problems led us, in the [MoDSE research project](http://swerl.tudelft.nl/bin/view/MoDSE) (pronounced “modes”), to choose approach 2: generate code _only_ as an intermediate step. This also means we have to do 100% code generation, we hardly mix custom and generated code. And in rare edge cases that we _have_ to, we do only through well-defined fixed interfaces. One code generator we built using this approach is [WebDSL](http://www.webdsl.org). After you invoke the compiler on your WebDSL program _you do not look at the generated code_.</p>
<p>Now, let’s say you started your own software company and you got your first big customer. Congratulations. You’re going to build the website of a large international corporation. And because you want to be productive and cool ‘n stuff you’re using code generation techniques. Since you were so impressed with the arguments you just read against mixing custom and generated code, you decide to generate 100% of your code, and therefore no longer have to focus on extension and modification techniques. Thou shalt not read generated code. Good for you! You may even choose using WebDSL. Even better.</p>
<p>But what about your customer? What if you deliver your product? Either you deliver a perfect product that is done and will never have to be changed again — good luck with that. Or, as part of your delivery, you deliver the source code. What source code? Well, not the generated code, because it’s essentially worthless as it’s not intended for human consumption (and in the case of WebDSL, believe me, it’s not). So you deliver the model that was the input of your code generator (e.g. the WebDSL source code). Fantastic. However, your customer is worried. In the future they may need developers familiar with the input language of your code generator to continue work on the product. Where are they going to find such developers? Well, in your company. That’s great for _you_, but not great for your customer, because you essentially locked them in.</p>
<p>This is a problem that is not specific to programs written in domain-specific languages like WebDSL, it’s true for other languages and even frameworks too. [Yahoo rewrote its web store application](http://discuss.fogcreek.com/joelonsoftware/default.asp?cmd=show&amp;ixPost=31402), after buying it, from Lisp to C++ and Perl, because Yahoo engineers were not familiar enough with Lisp. Java web applications written using obscure Java frameworks have a similar problems, as did Ruby on Rails when it just got started.</p>
<p>**If you produce software for a customer using languages and frameworks that very few other developers “speak”, you’re locking your customer in.**</p>
<p>So what’s the solution?</p>
<p>Last year, Jos Warmer of [mod4j](http://mod4j.org) gave a talk as part of our model-driven software development course. Mod4J is a set of DSLs for developing administrative enterprise applications in Java. Interesting twist is that they aim to generate code in _the same style that it would have been written by hand by a developer_. Consequently, when you deliver to your customer they do not _need_ mod4j developers to continue development. They may not even care that you used mod4j to develop the product and simply continue maintaining the generated code. Of course this is not the ideal case, but it’s a fallback option that make customers feel safer. I have no experience with Mod4J and do not know if it really works that way, but I like idea. But is it always feasible to do this?</p>
<p>I wanted to try to take this approach for [mobl](http://github.com/zefhemel/mobl), my DSL for mobile web applications, but it did not work out well. It turns out I missed an essential requirement for this approach to work.</p>
<p>My plan was to first develop a set of frameworks that the generated code would use. As this is a fairly new domain, hardly any of these frameworks exist. The first library I developed was [persistence.js](http://github.com/zefhemel/persistencejs), which is an ORM library for client-side SQLite databases in Javascript. A second framework, which I named [mobiworks](http://github.com/zefhemel/mobiworks), provides a set of jQuery plug-ins that provide HTML-encodings of mobl concepts, such as _screens_ and _templates_.</p>
<p>But then I took a step back. To make this approach successful, what’s the plan of action?</p>
<p>1. Develop a framework that developers would find useful and usable even without mobl.<br>2. Promote that framework by itself, building a community around it, making sure that this was _the_ way to build mobile web applications. Solving the “nobody knows this framework” problem.<br>3. Build a nice DSL wrapper around the framework.<br>4. Promote the DSL, build a community around it.</p>
<p>Yeah, you’ll agree that this was a rather pointless mission to begin with. Why not simply build a community around _mobl_ immediately, making that the best way to build mobile web applications? Then I could drop the whole framework idea altogether.</p>
<p>What I did not realize earlier is that to make the Mod4J “generate human code” approach work there already has to be an established style that developers write their code in. There needs to be an established framework you can target. If there isn’t one, the approach is pointless.</p>
<p>So, I shifted gears again, rewriting stuff to generate efficient computer-readable Javascript code — Javascript as the assembly code of the mobile web. And it’s much simpler that way. The lock-in problem remains though, we’ll see if that is actually going to be a problem. Incidentally, if you’re a [persistence.js](http://github.com/zefhemel/persistencejs) user or consider using it: don’t worry, I do still use it for mobl and will keep working on it.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>307</wp:post_id>
		<wp:post_date>2010-03-16 12:49:44</wp:post_date>
		<wp:post_date_gmt>2010-03-16 11:49:44</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>code-generation-and-vendor-lock-in</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="code-generation"><![CDATA[Code Generation]]></category>
		<category domain="post_tag" nicename="dsl"><![CDATA[Dsl]]></category>
		<category domain="post_tag" nicename="framework"><![CDATA[Framework]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="javascript"><![CDATA[JavaScript]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Whitepaper — how to spot the ignorant whitepaper author</title>
		<link>http://zef.me/2010/11/25/whitepaper-how-to-spot-the-ignorant-whitepaper-author/</link>
		<pubDate>Thu, 25 Nov 2010 13:27:00 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2010/11/25/whitepaper-how-to-spot-the-ignorant-whitepaper-author/</guid>
		<description></description>
		<content:encoded><![CDATA[I just read <a href="http://developerlife.com/theblog/?p=1482">this wonderful gem of a “whitepaper”</a>. Please go read this piece of masterful writing. It’s about how stupid mobile web applications are, just your thing. I’ll wait here until you return.

Go ahead.

Done? Good, because I got the adrenaline rushing through my body. In this white paper, I will take the annoying approach of quoting snippets of text out of context and responding in various semi-clever to clever ways, as bloggers tend to do.
<blockquote>The term “mobile web” is used interchangeably with the word “mobile app”, but in reality they are not at all the same and these terms cannot be used interchangeably. “Mobile web apps” aren’t “apps” at all, they are just tiny webpages you view in your smartphone’s web browser</blockquote>
Sssh! Here’s a secret… native apps aren’t “apps” at all, they are in fact just a series of bits that magically show pixels on your screen!
<blockquote>Mobile websites are a cheap and easy way to let people view some parts of your website on their smartphone, and they are inexpensive to build.</blockquote>
So, cheap, easy to build and inexpensive (yes, those are three things), sounds like a winner to me. No?
<blockquote>However, these mobile websites cannot do very much, and usually only allow people to read static content and do not integrate with a smartphone’s native applications or functionality. They are VERY basic and very “one way” as in the content flows from the owner of the website, to the reader. There is hardly any engagement that is possible with this content viewing scenario. Very little interaction is possible. And hardly any capabilities of the smartphone are leveraged.</blockquote>
Yes, <a href="http://en.wikipedia.org/wiki/Wireless_Application_Protocol">WAP</a>, those were the days… that have long since passed.

The example of the modern web app, which I use to describe my vision of the future of mobile apps, is the Gmail web application. If you haven’t used it and you own an Android, iPhone or WebOS phone, be sure to go to gmail.com and have a look at it. Quickly you will realize that:
<ol>
 	<li>This is a pretty advanced application, pretty close to the desktop browser version of Gmail in functionality;</li>
 	<li>It is very much a very two-way application, you read stuff, you reply to e-mails;</li>
 	<li>It is equally as engaging and just as interactive as a native application;</li>
 	<li>It leverages a lot of smartphone capabilities (including off-line operation — it caches messages on the phone and operates without an internet connection as well)</li>
</ol>
I have an iPhone, but I don’t use its native mail application, instead I use the Gmail mobile web app, <em>because I think it’s better than the native iPhone mail app</em>. Can you believe it?
<blockquote>As a software engineer, and CTO of a software company, I do not like mobile web apps at all, and here’s why:
<ul>
 	<li>They do not constitute a legitimate product offering — they are not acceptable for your customers/users in 2010, and they do not pass as a mobile app. Smartphone users are intelligent and it is insulting and a waste of their time to ask them to use such a dumbed down app/product. It makes the company that has published the app looks stupid and cheap. It looks like they aren’t trying at all and don’t really care about their product/offering, so why should a customer care? Why should a customer care and waste their time with your mobile web app, if you don’t care?</li>
</ul>
</blockquote>
It is all about the quality of the application, not about the technology used to implement it. If you have crappy developers and designers, your native application will look crappy, cheap, be extremely slow and have a bad user experience. The same goes for mobile web apps. It doesn’t matter.
<blockquote>
<ul>
 	<li>They provide no user experience for customers — smartphone web browsers have even fewer capabilities than regular web browsers, and many mobile devices don’t support flash or web plugins, so they are the worst possible choice for delivering an experience. The web browser on a smart phone is literally the worst technology you can imagine for delivering an experience.</li>
</ul>
</blockquote>
Don’t you know that smart phones have <em>even fewer</em> capabilities than desktop computers? They don’t have keyboards, usually, and if they do, they’re very small. They have tiny little screens, they’re 10x slower than a desktop PC. I would say the smart phone is literally the worst technology you can image for delivering an experience.
<blockquote>
<ul>
 	<li>They cannot utilize 95% of what the smartphone can do — if you are going to deliver your mobile experience via a mobile web view, your customers might as well use a feature phone with keyboard, like a Pantec, or a BlackBerry with OS 5.0 or prior. Smartphone users love their smartphones because of what they can do! NOT for what they can’t! They love features, capabilities, customization, and the excitement of their smartphone! They want to be engaged and delighted by mobile applications! Mobile web views negate all of the awesomeness of mobile devices that users love and want to interact with.</li>
</ul>
</blockquote>
95%? Do you realize how much that is? Just to make sure we know what we’re talking about here. This is 95%:

Ergo, 95% is a lot.

If web app can utilize 94% of what a smart phone can do, I think that is pretty good as well. In fact, I would argue certain phone manufacturers don’t allow you to do utilize 82% of what a phone can do, even with <em>native apps</em>. They don’t allow customization, they don’t allow access to things that their own software <em>does</em> have access to.

And to be perfectly clear, this is 82%:

So, let’s see what are all the things (supposedly) impossible with mobile web applications:
<blockquote>
<ul>
 	<li>Make location based apps that use GPS to display accurate location information, and deliver relevant information to users based on their current location.</li>
</ul>
</blockquote>
<a href="http://dev.w3.org/geo/api/spec-source.html">Really</a>?
<blockquote>
<ul>
 	<li>Use push notifications to create in-app payments, realtime interactions, realtime communications, and ecommerce transactions.</li>
</ul>
</blockquote>
I don’t really see the connection between push notifications and all the examples that follow. But push notifications, <a href="http://notifo.com/">yes, yes you can</a>.
<blockquote>
<ul>
 	<li>Implement in-app advertising with detailed statistics from attention profiling.</li>
</ul>
</blockquote>
<a href="http://www.google.com/mobileads/publisher_home.html">Really</a>?
<blockquote>
<ul>
 	<li>Use Android notifications in the notifications bar since your mobile web app can’t push updates. And sending an email or text message is NOT a push update!</li>
</ul>
</blockquote>
Not yet for Android, but <a href="http://notifo.com/">notifo</a> will come out with an Android and Blackberry app soon. Plus, I think that yes, technically, e-mail and text messages are perfect examples of push updates.
<blockquote>
<ul>
 	<li>Use cool UI elements to engage users like lists, buttons, layout managers, animations, etc. that users love and want, that make an app look “Android-y” and make users feel engaged and excited to use the app.</li>
</ul>
</blockquote>
<a href="http://code.google.com/p/iui/">Re</a><a href="http://jqtouch.com/">al</a><a href="http://jquerymobile.com/">l</a><a href="http://www.sencha.com/products/touch/">y</a>? (maybe not all native-looking, but definitely rich)
<blockquote>Not to mention, you can’t really handle DPI independence and multiple screen/display resolutions and sizes (ranging from tiny screens, to 4” screens, to tablets, and netbooks, and in-dash car displays).</blockquote>
If there’s something that web applications have been good at is scaling to the size of screens, because so far every computer screen has had exactly the same size, which has been very convenient.
<blockquote>
<ul>
 	<li>Integrate with smartphone’s native apps. These mobile web apps or web views cannot integrate with native the media app, native PIM apps (email, contacts, calendar), or any other native apps on the smartphone, which is the entire point of making a mobile app! They can’t replace the default apps either to handle media, browsing, etc.</li>
</ul>
</blockquote>
True. But again, iOS apps also hardly do this (only in a limited fashion).
<blockquote>[ Rant insulting web application developers, Russian, Chinese and Indian engineers. ]</blockquote>
Whatever you say, ma’am.
<blockquote>
<ul>
 	<li>Make fast, high performance apps. Mobile web views are very slow, laggy, and get slower (or require disproportionately more network, server, and wireless bandwidth resources) the more users you have.</li>
</ul>
</blockquote>
Sure they’re somewhat slower, but it’s not a world of difference (if executed well).
<blockquote>
<ul>
 	<li>Create apps that are resilient to drops in network coverage, or laggy networks.</li>
</ul>
</blockquote>
<a href="http://www.w3.org/TR/html5/offline.html">Really</a>?

Just for the fun of it, I looked up the definition of white paper on <a href="http://en.wikipedia.org/wiki/White_paper">Wikipedia</a>:
<blockquote>A white paper (or “whitepaper”) is an authoritative report or guide that is often oriented toward a particular issue or problem. White papers are used to educate readers and help people make decisions, and are often requested and used in politics, policy, business, and technical fields.</blockquote>
I suppose authoritative does not imply “remotely correct”. And let’s just hope this particular one hasn’t helped anybody make a decision.

Why I’m qualified to write this white paper  — — — — — — — — — — — — — — — — — — — — — -

I can think critically. I can check facts. I can use excel to draw a chart. I have tried a mobile web application more recently than 5 years ago.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>474</wp:post_id>
		<wp:post_date>2010-11-25 14:27:00</wp:post_date>
		<wp:post_date_gmt>2010-11-25 13:27:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>whitepaper-how-to-spot-the-ignorant-whitepaper-author</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[43876772890]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Full-Text Search in persistence.js</title>
		<link>http://zef.me/2010/04/28/full-text-search-in-persistence-js/</link>
		<pubDate>Wed, 28 Apr 2010 13:19:26 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2010/04/28/full-text-search-in-persistence-js/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>A while ago I released [persistence.js](http://zef.me/2774/persistence-js-an-asynchronous-javascript-orm-for-html5gears), a light-weight ORM for Javascript. It was built to use the [HTML5 SQLite database](http://dev.w3.org/html5/webdatabase/) that modern browser implement. I use it as part of [mobl](http://zef.me/3117/mobl-screencast-1-todo-application), but others have also started to use it for their own projects, e.g. on Palm Pre and [Nokia’s QML](http://doc.trolltech.org/4.7-snapshot/declarativeui.html).</p>
<p>I spent some time adding a nice new feature: full-text search. Enabling it simple, just include both `persistence.js` and `persistence.search.js` in your HTML page:</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>486</wp:post_id>
		<wp:post_date>2010-04-28 15:19:26</wp:post_date>
		<wp:post_date_gmt>2010-04-28 13:19:26</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>full-text-search-in-persistence-js</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="javascript"><![CDATA[JavaScript]]></category>
		<category domain="post_tag" nicename="mobl"><![CDATA[Mobl]]></category>
		<category domain="post_tag" nicename="orm"><![CDATA[Orm]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Slides From My Mobl Lecture</title>
		<link>http://zef.me/2010/05/18/slides-from-my-mobl-lecture/</link>
		<pubDate>Tue, 18 May 2010 19:31:46 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2010/05/18/slides-from-my-mobl-lecture/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>I gave a lecture about [mobl](http://mobl-lang.org) today. Here are the slides. I also recorded video, but I have to check if it is of sufficient quality.</p>
<p><a href="http://www.slideshare.net/zefhemel/mobl" title="mobl" target="_blank"><strong>mobl</strong></a></p>
<a href="http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=mobl-100518142735-phpapp01&amp;stripped_title=mobl"></a><p>View more <a href="http://www.slideshare.net/" target="_blank">presentations</a> from <a href="http://www.slideshare.net/zefhemel" target="_blank">zefhemel</a>.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>660</wp:post_id>
		<wp:post_date>2010-05-18 21:31:46</wp:post_date>
		<wp:post_date_gmt>2010-05-18 19:31:46</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>slides-from-my-mobl-lecture</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="mobl"><![CDATA[Mobl]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Reactive Programming</title>
		<link>http://zef.me/2010/03/21/reactive-programming/</link>
		<pubDate>Sun, 21 Mar 2010 11:06:45 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2010/03/21/reactive-programming/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>For the past two days I’ve been looking into [reactive programming](http://en.wikipedia.org/wiki/Reactive_programming). Wikipedia defines it as follows:</p>
<p>&gt; Reactive programming is a programming paradigm oriented around data flows and the propagation of change. This means that it should be possible to express static or dynamic data flows with ease in the programming languages used, and that the underlying execution model will automatically propagate changes through the data flow.</p>
<p>But that sounds kind of abstract, to make it more clear, let’s look at a simple Javascript program:</p>
<p>~~~~~~~~~~<br>function calculateSum(l) {<br> var sum = 0;<br> for(var i = 0; i &lt; l.length; i++) {<br> sum += l[i];<br> }<br> return sum;<br>}<br>var l = [2, 3, 4, 5];<br>var sum = calculateSum(l);<br>print(sum);<br>~~~~~~~~~~</p>
<p>This program will print `14`. Alright. Now let’s change the list `l` a little bit and print `sum` again:</p>
<p>~~~~~~~~~~<br>l[2] = 6;<br>print(sum);<br>~~~~~~~~~~</p>
<p>We now turned the `4` in `l` into `6`. But when we print `sum` the sum hasn’t changed. This will likely not be very surprising to you. To calculate a new sum, you have to execute the `calculateSum` function again. But wouldn’t it be convenient if this happens automatically?</p>
<p>In spreadsheets this is exactly what happens. Open up Excel or Google Docs and fill in some numbers:</p>
<p>Now, in the cell below type a formula: `=SUM(A2:A5)` and push enter:</p>
<p>The cell now shows the sum of the numbers you entered. So far, nothing surprising. Now let’s change the `4` in that list into a `6`, just like in the Javascript program:</p>
<p>Hey, the cell containing the sum has changed with it! This is called reactive programming. The `SUM(A2:A5)` is not a one time calculation, but _reacts_ to changes to its parameters and recalculates if required. I feel this is a very powerful concept that has recently become more popular.</p>
<p>[Flapjax](http://www.flapjax-lang.org) is a language that adds this type of behavior to Javascript. Microsoft has the [reactive extensions to .NET](http://msdn.microsoft.com/en-us/devlabs/ee794896.aspx) (Rx) that makes it easier to deal with events using LINQ. [LunaScript](http://www.asana.com/luna) is a Javascript-like language, currently under development that brings this programming model to Ajax web applications (have a look at their demo video, it’s cool). [Trellis](http://pypi.python.org/pypi/Trellis) is a Python module that adds reactive features to Python. And currently I’m also adding these features to [mobl](http://github.com/zefhemel/mobl).</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>728</wp:post_id>
		<wp:post_date>2010-03-21 12:06:45</wp:post_date>
		<wp:post_date_gmt>2010-03-21 11:06:45</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>reactive-programming</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="mobl"><![CDATA[Mobl]]></category>
		<category domain="post_tag" nicename="reactive-programming"><![CDATA[Reactive Programming]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>CSS3 Makes DOM Unnecessary?</title>
		<link>http://zef.me/2010/06/29/css3-makes-dom-unnecessary/</link>
		<pubDate>Tue, 29 Jun 2010 07:50:36 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2010/06/29/css3-makes-dom-unnecessary/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>[Google to use HTML5 in Gmail](http://www.computerworld.com/s/article/9178558/Google_to_use_HTML5_in_Gmail) (emphasis added):<br>&gt; Google’s current goal is to get Gmail to load in under a second. “Speed is a feature,” he said.<br>&gt;<br>&gt; Early tests have proved promising. For instance, Gmail looks for those browsers that can work with version 3 of the Cascading Style Sheets (CSS), a standard closely related to HTML5. __If the browser supports CSS3, Gmail will render the pages using these specifications, rather than its traditional approach of using the Document Object Model (DOM).__ The company has found that using CSS3 can speed the rendering time by 12 percent.</p>
<p>Glad to be finally get rid of that [DOM](http://en.wikipedia.org/wiki/Document_Object_Model).</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>753</wp:post_id>
		<wp:post_date>2010-06-29 09:50:36</wp:post_date>
		<wp:post_date_gmt>2010-06-29 07:50:36</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>css3-makes-dom-unnecessary</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="google"><![CDATA[Google]]></category>
		<category domain="post_tag" nicename="weird"><![CDATA[Weird]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Flattr: Micro-payments That May Actually Work</title>
		<link>http://zef.me/2010/05/17/flattr-micro-payments-that-may-actually-work/</link>
		<pubDate>Mon, 17 May 2010 13:43:40 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2010/05/17/flattr-micro-payments-that-may-actually-work/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>I use a bunch of cool open source software. Software that works great and is free to use. It’s written by an individual, or a group of people in their spare time. They don’t ask for money. Sometimes they have a tip jar on their web site, but the overhead for me to go there and make a PayPal payment of a few bucks is rather off-putting. So I rarely do it.</p>
<p>I visit a bunch of websites that I really like. Blogs run by individuals in their spare time. Sometimes they have ads on the site, but I don’t click them. Still, their content is great and I’d love to show my appreciation. However, the barrier to give them a few bucks or even cents for an article is high. So I rarely do it.</p>
<p>I have [a blog](http://zef.me) that I try to update regularly. It takes time. In addition, it costs me money to host it — about $20 per month. I’m happy to do it — it’s not a reason to take the site down — but it would be nice to at least earn the hosting costs back. I tried ads, they don’t work.</p>
<p>As a consumer and producer of content, albeit software or text, I feel the need to appreciate and be appreciated. Appreciation does not have to be shown through payment, of course, but it is an effective way. Especially when running the project in question _costs_ money. A tip jar, or advertising usually does not work. The overhead of sending somebody money is too high. It takes time, and it _feels_ expensive. And advertising only works for a particular kind of content website, with a certain audience.</p>
<p>That’s why I really like the idea of [Flattr](http://flattr.com). When you sign up for flattr (invite-only at this time, but you can [quickly sign-up to receive an invite](https://flattr.com/register/beta)), you pledge to pay a certain amount of money (at this point 2, 5, 10 or 20 euros) per month to sites and projects you like. So, no matter if you “flattr” one site, or a hundred, it is going to cost you that flat (get it?) rate. Your monthly funds are evenly distributed over all the things you flattr. If you put in 2 euros per month, and you only flattr one project, that project is going to get 2 euros that month. If you flatter 10, it will be 20 cents per project. It’s as simple as that.</p>
<p>I think the fact that you pay a flat rate per month (and honestly, is 2 euros per month too much for anybody?) has a major impact on somebody’s willingness to contribute to projects in this way. With just one or two clicks you flattr a site or project and they will get a small payment by the end of the month. _And it will not cost you more than when you hadn’t made those two clicks._ Then, a month later, if you still like the site or project, you can flattr it again.</p>
<p>The problem right now is that flattr is still invite-only and that very few sites I visit use it, but I expect that will change once it gets out of beta.</p>
<p>They may be onto something here.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>776</wp:post_id>
		<wp:post_date>2010-05-17 15:43:40</wp:post_date>
		<wp:post_date_gmt>2010-05-17 13:43:40</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>flattr-micro-payments-that-may-actually-work</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="flattr"><![CDATA[Flattr]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Firefox 4 Indexed DB Support</title>
		<link>http://zef.me/2010/05/16/firefox-4-indexed-db-support/</link>
		<pubDate>Sun, 16 May 2010 19:14:42 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2010/05/16/firefox-4-indexed-db-support/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>It looks like Firefox is going to take a different route than other (Webkit-based) browsers, by adopting the [“Indexed Database API”](http://dev.w3.org/2006/webapi/WebSimpleDB/), rather than the [“Web SQL API”](http://dev.w3.org/html5/webdatabase/) for storage of local data in the browser, that are used by e.g. [persistence.js](http://github.com/zefhemel/persistencejs). The Indexed Database API is a type of NoSQL database. You can store JSON-formatted documents in it and retrieve them. It does not support SQL. In a way this makes sense, as the proposed Web SQL standard was essentially dictating that SQLite should be provided by the browsers, which is not a great way of creating a standard — and would Internet Explorer ever include SQLite in its browser? Not likely.</p>
<p><a href="http://www.slideshare.net/beltzner/firefox-roadmap-2010-0510" title="Firefox 4: fast, powerful and empowering" target="_blank"><strong>Firefox 4: fast, powerful and empowering</strong></a></p>
<p><a href="http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=firefoxroadmap20100510-100510155953-phpapp01&amp;stripped_title=firefox-roadmap-2010-0510" target="_blank">http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=firefoxroadmap20100510-100510155953-phpapp01&amp;stripped_title=firefox-roadmap-2010-0510</a></p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>864</wp:post_id>
		<wp:post_date>2010-05-16 21:14:42</wp:post_date>
		<wp:post_date_gmt>2010-05-16 19:14:42</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>firefox-4-indexed-db-support</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="html5"><![CDATA[Html5]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>mobl Screencast #1: Todo Application</title>
		<link>http://zef.me/2010/03/29/mobl-screencast-1-todo-application/</link>
		<pubDate>Mon, 29 Mar 2010 11:43:25 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2010/03/29/mobl-screencast-1-todo-application/</guid>
		<description></description>
		<content:encoded><![CDATA[

<a href="http://vimeo.com/moogaloop.swf?clip_id=10520782&amp;server=vimeo.com&amp;show_title=1&amp;show_byline=1&amp;show_portrait=0&amp;color=00ADEF&amp;fullscreen=1"></a><p><a href="http://vimeo.com/10520782" target="_blank">mobl sneak preview</a> from <a href="http://vimeo.com/user3478903" target="_blank">Zef Hemel</a> on <a href="http://vimeo.com" target="_blank">Vimeo</a>.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>944</wp:post_id>
		<wp:post_date>2010-03-29 13:43:25</wp:post_date>
		<wp:post_date_gmt>2010-03-29 11:43:25</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>mobl-screencast-1-todo-application</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="mobl"><![CDATA[Mobl]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>The Clever Slide</title>
		<link>http://zef.me/2010/11/08/the-clever-slide/</link>
		<pubDate>Mon, 08 Nov 2010 09:44:23 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2010/11/08/the-clever-slide/</guid>
		<description></description>
		<content:encoded><![CDATA[Creating engaging presentations is hard. I love going to conferences, but most talks there are just killing. Hence the phrase “death by powerpoint”. Slides are nothing but bullet point after bullet point with full sentences — a culture of presentation that is well supported by Powerpoint software. After a slide or two the audience simply switches off. It is simply insulting that you, the presenter, expects us, the audience, to look at <em>your</em> talking notes — clearly not taking us into consideration, at all. If we wanted <em>all</em> the information and <em>all</em> the details, we’d read your paper or find more information about your product. But we won’t, because we switched off after two slides (containing 20 bullet points and 250 words of text).

Luckily, the idea of <a href="http://www.presentationzen.com/">Presentation Zen</a> came around a couple of years ago, and even if you never heard of “Presentation Zen” before, you have likely seen a Zen presentation. It’s the presentation style without the bullet points, but with large pictures and key words instead.

Luckily this presentation style is becoming more common. While using slides like this certainly do not guarantee good presentations (trust me, they don’t), they are <em>usually</em> a big improvement over bullet-point slides.

But instead of just being happy about the adoption of Presentation Zen, I’m going to complain a little bit. Because, at it turns out, that’s what I’m good at.

Presenters often misunderstand the point of the Zen approach. It’s <em>not</em> about putting pretty, soothing pictures on the screen. It’s about putting something on the screen that either represents the <em>essence</em> of your point, or <em>supports</em> your point in a way that is easy to <em>parse</em> for the audience (= usually graphical). It is definitely <em>not</em> the goal to show the picture that was the first hit when searching <a href="http://images.google.com/">images.google.com</a> for some key words.

When presenting a software pipeline, rather than showing a nice oil pipeline — although, arguably, it does make a prettier picture — it would be much more <em>helpful</em> if you showed a diagram representation of the pipeline stages, what goes in where, and comes out at the other end.

<strong>Putting <em>actual</em> information on a slide is perfectly fine. <em>Graphical</em> does not imply <em>superficial</em>.</strong>

Too often presentations are temporarily derailed into a meta-discussion on a <em>clever</em> picture in a slide. “What exactly <em>is</em> that machine?” “Oh, I don’t know, I just thought it was a cool picture.”

Not to get all “listen to me, I figured it all out” on you — I made bad slides like this — but I think it’s important to focus on the goal of the presentation. A presentation zen presentation may save you from your audience falling asleep, but you (supposedly) want your audience to remember more from your presentation than pretty landscapes and industrial sites. Take that into account.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>952</wp:post_id>
		<wp:post_date>2010-11-08 10:44:23</wp:post_date>
		<wp:post_date_gmt>2010-11-08 09:44:23</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-clever-slide</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="presentation"><![CDATA[Presentation]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[43876777842]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>mobl 101</title>
		<link>http://zef.me/2010/05/19/mobl-101/</link>
		<pubDate>Wed, 19 May 2010 12:57:22 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2010/05/19/mobl-101/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Yesterday I posted the slides of my 41 minute long lecture about [mobl](http://mobl-lang.org). I also recorded video of it (through my MacBook’s webcam) and the result is acceptable enough to publish. So, if you have some time to spare, here’s me presenting mobl to a group of our students, a demo is included:</p>
<a href="http://vimeo.com/moogaloop.swf?clip_id=11865442&amp;server=vimeo.com&amp;show_title=1&amp;show_byline=1&amp;show_portrait=0&amp;color=00ADEF&amp;fullscreen=1"></a><p><a href="http://vimeo.com/11865442" target="_blank">Mobl Lecture</a> from <a href="http://vimeo.com/user3478903" target="_blank">Zef Hemel</a> on <a href="http://vimeo.com" target="_blank">Vimeo</a>.</p>
<p>In a nutshell, mobl is a new language to develop mobile applications using web technologies. It’s a statically typed language that compiles down to Javascript and HTML.</p>
<p>Some interesting features:</p>
<p>* Automatically transforms synchronous code to [asynchronous code](http://zef.me/2726/on-asynchronous-programming) using [continuation-passing style transformation](http://en.wikipedia.org/wiki/Continuation-passing_style).<br>* [Reactive programming](http://zef.me/3098/reactive-programming) support<br>* Built as an Eclipse plug-in<br>* Compile on save. Simply make changes to your application, save the file and reload it in the mobile browser.<br>* Syntax similar to WebDSL and Javascript.</p>
<p>Slides:</p>
<p><a href="http://www.slideshare.net/zefhemel/mobl" title="mobl" target="_blank"><strong>mobl</strong></a></p>
<a href="http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=mobl-100518142735-phpapp01&amp;stripped_title=mobl"></a><p>View more <a href="http://www.slideshare.net/" target="_blank">presentations</a> from <a href="http://www.slideshare.net/zefhemel" target="_blank">zefhemel</a>.</p>
<p>There is no release yet, if you feel very adventurous, you can install [Spoofax](http://strategoxt.org/Spoofax) and then clone the [mobl git repo](http://github.com/zefhemel/mobl) to try it out.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1164</wp:post_id>
		<wp:post_date>2010-05-19 14:57:22</wp:post_date>
		<wp:post_date_gmt>2010-05-19 12:57:22</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>mobl-101</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="mobl"><![CDATA[Mobl]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>The Future of Mobile is the Web App</title>
		<link>http://zef.me/2010/04/27/the-future-of-mobile-is-the-web-app/</link>
		<pubDate>Tue, 27 Apr 2010 07:51:35 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2010/04/27/the-future-of-mobile-is-the-web-app/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>It was January 9th, 2007, a highly anticipated date for many. Steve Jobs got on stage of MacWorld and, for the first time, pulled an iPhone out of his pocket. He showed off the device and spoke: “We figured a really great way to develop applications for this amazing device, and we call them ‘web apps’.” Today, three and a half years later, the users of this amazing device go crazy buying and downloading _native_ applications from a locked-down AppStore. What happened? Where did things go wrong?</p>
<p>The development of mobile applications has always been a complex and expensive endeavor due to the large number of different mobile phones (with different screen sizes, processor speeds, color or greyscale screens) running different software. While J2ME promised to be the unifying platform, it did not work out that way due to wildly diverging implementations of this “standard”. Therefore, as a mobile developer you had little choice than to develop separate implementations for a huge amount of phones.</p>
<p>But then the iPhone gave the struggling category of smart phones an enormous push. Smart phones quickly converged toward iPhone-like form-factors. They all started to have large screens operated with touch, GPS, a considerable amount of storage and 400+ Mhz CPUs. Examples include the iPhone, Android devices, BlackBerry, Palm Pre and newer Nokia devices. While this type of phone is still a minority in the mobile space today, its market share is rapidly increasing and it doesn’t take a stretch of the imagination to believe that within a few years everybody will own a device like this.</p>
<p>While smartphone hardware converged, its software did not. While HTML and Javascript was initially the way to develop software for the iPhone, developers weren’t satisfied and demanded to build native apps. They got what they wanted. Today, iPhone native apps have to be developed using Objective-C or C. Applications for Nokia Symbian phones are developed using Java or C++, for Android using Java, and Palm Pre developers use HTML and Javascript. It is pretty challenging to share code between these platforms. Adobe briefly attempted to turn Flash into the platform to rule them all, but [Apple shot them down](http://daringfireball.net/2010/04/why_apple_changed_section_331) by changing their developer agreement to mention that applications need to be originally written using Objective-C, C or Javascript. With this decision, Apple essentially forced the arm of many developers: either you develop for iPhone or you develop for another platform, but you can’t do both at the same time. And even if you decide to develop for iPhone you rely on Apple’s approval of your applications for its AppStore; Apple can decide to [reject an application for any reason](http://www.google.com/search?q=application+rejected+app+store), or [pull it off](http://www.google.com/search?q=application+pulled+app+store) the AppStore any time it likes.</p>
<p>But the obvious alternative remains. After Google’s [Google Voice application was rejected from the AppStore](http://techcrunch.com/2009/07/27/apple-is-growing-rotten-to-the-core-and-its-likely-atts-fault/), they redeveloped it as a [web application](http://googlevoiceblog.blogspot.com/2010/01/google-voice-for-iphone-and-palm-webos.html). However, it is not just to work around Apple’s rejection of Google applications (Google and Apple do not seem to get along so well lately). Google also develops other major products as mobile web apps, including [Gmail](http://gmail.com), [Google Buzz](http://buzz.google.com) and [maps](http://maps.google.com).</p>
<p>In an interview, Google’s Vic Gundotra, Google Engineering vice president, said Google sees the [future of mobile applications on the web](http://blogs.ft.com/techblog/2009/07/app-stores-are-not-the-future-says-google/):</p>
<p>&gt; He claimed that even Google was not rich enough to support all of the different mobile platforms from Apple’s AppStore to those of the BlackBerry, Windows Mobile, Android and the many variations of the Nokia platform.<br>&gt; “What we clearly see happening is a move to incredibly powerful browsers,” he said.<br>&gt; “Many, many applications can be delivered through the browser and what that does for our costs is stunning.<br>&gt; We believe the web has won and over the next several years, the browser, for economic reasons almost, will become the platform that matters and certainly that’s where Google is investing.”</p>
<p>Still, Apple initially launched web applications as the way to develop mobile applications on its platform. Why did it not work _then_?</p>
<p>There are three obvious reasons that can be identified:</p>
<p>1. __The state of hardware.__ The original iPhone hardware was slower than today’s hardware. The use of web technologies comes at a cost and will always be slower than native code.<br>2. __The state of web standards.__ HTML5 did not exist yet (a first draft was published early 2008). Web applications had no off-line capabilities (meaning applications had to be redownloaded every time they were invoked), no local data storage, no access to position information.<br>3. __Not close enough to “the metal”.__ Developers wanted to build 3D games, applications that used other phone applications such as the calendar, SMS and so on. There was little integration with the operating system beyond the ability to link to a phone number. Interestingly enough, native apps on the iPhone at this point still have only very limited ways of integrating into the iPhone OS.</p>
<p>But it’s 2010, what is the state of the mobile web today? Is it a more viable alternative to native applications? While it is very difficult to develop a web application that feels and behaves _completely_ like a native application, it is possible to get very close, as Apple itself has proven, [John Gruber found out](http://daringfireball.net/2009/12/pastrykit):</p>
<p>&gt; It ends up there is a company, however, that has developed an amazing iPhone web app framework which:<br>&gt;<br>&gt; * Completely hides the address bar, even when running not from a saved-to-the-home app icon, but within a page in MobileSafari itself.<br>&gt; * Allows for fixed-position toolbars that never budge from the top when you scroll.<br>&gt; * And: sets its own scrolling friction coefficient, allowing you to fling long lists.<br>&gt;<br>&gt; The company behind this web framework is Apple. And the framework is apparently named [PastryKit](http://daringfireball.net/2009/12/pastrykit).</p>
<p>The only known application that uses PastryKit is [the iPhone user manual](http://help.apple.com/iphone/3/mobile/) (view on the iPhone) and uses a number of HTML5 features, including the ability to store data locally on the device in a [SQL database](http://developer.apple.com/safari/library/documentation/iPhone/Conceptual/SafariJSDatabaseGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40007256-CH1-SW1) and the ability to install an application as [an offline web app](http://developer.apple.com/safari/library/documentation/iPhone/Conceptual/SafariJSDatabaseGuide/Introduction/Introduction.html). Both HTML5 features that work on Android, Palm Pre and likely on future versions of BlackBerry as well. HTML5 also specifies a [Geolocation API](http://dev.w3.org/geo/api/spec-source.html) that is supported by Android, iPhone and Palm Pre. In addition, [SVG](http://www.w3.org/Graphics/SVG/) and [Canvas](http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html) support enable (2D) drawing and animations. Touch input is handled [through touch events](http://developer.apple.com/safari/library/documentation/AppleApplications/Reference/SafariWebContent/HandlingEvents/HandlingEvents.html). And in case you were wondering, yes, Apple developed [a similar framework for the documentation of the iPad](http://www.nxfx.com/blog/design-topics/adlib-ipad-javascript-framework/). So the question is: what _can’t_ a web application do today?</p>
<p>That question applies to mobile as it does to the desktop. What can’t a web application do on the desktop? It does not integrate well with the OS. It cannot access arbitrary files on the file system (although iPhone native applications cannot do that either), it is not very suitable for advanced graphics (although it should be noted that Apple’s impressive iAds demo advertisements are implemented with HTML5). While a web application’s abilities are limited, we still move more and more of our daily workflow to the web. Why would the same thing not be true for mobile? Many mobile applications we use today are glorified websites: [Foursquare](http://www.foursquare.com), [Twitter](http://www.twitter.com), Weather, TV Guides, [Facebook](http://www.facebook.com) — they are all thin wrappers around web services.</p>
<p>I can’t see another way than mobile phones and other touch screen devices — like the iPad and undoubtedly dozens of other touch tables that are about to come out — to eventually move to the web. Just like happened on the desktop. It only makes sense. Mobile applications would become portable and cheaper to develop. And you’d finally have your “f5 software upgrades” on your phone, no need to wait 6 weeks for an Apple employee to get around to it.</p>
<p>Just wait and see.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1424</wp:post_id>
		<wp:post_date>2010-04-27 09:51:35</wp:post_date>
		<wp:post_date_gmt>2010-04-27 07:51:35</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-future-of-mobile-is-the-web-app</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="android"><![CDATA[Android]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="iphone"><![CDATA[iPhone]]></category>
		<category domain="post_tag" nicename="mobile"><![CDATA[Mobile]]></category>
		<category domain="post_tag" nicename="mobl"><![CDATA[Mobl]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>iPad: a Great Holiday Computer</title>
		<link>http://zef.me/2010/05/31/ipad-a-great-holiday-computer/</link>
		<pubDate>Mon, 31 May 2010 08:24:30 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2010/05/31/ipad-a-great-holiday-computer/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Yesterday we came back from a 10 day trip to [Coma-ruga, Spain](http://maps.google.com/maps?f=q&amp;source=s_q&amp;hl=en&amp;geocode=&amp;q=coma+ruga,+spain&amp;sll=16.130262,-55.283203&amp;sspn=55.830742,87.890625&amp;ie=UTF8&amp;cd=1&amp;hq=&amp;hnear=Barri+mar%C3%ADtim+de+Coma-ruga,+Spain&amp;ll=40.86368,-0.439453&amp;spn=11.409787,21.972656&amp;z=6). We stayed in a nice hotel, but like any hotel, you don’t really want to leave expensive stuff there while you’re out on the beach. Usually we take a laptop to watch movies and TV series during the evening, this time we decided to take my iPad, which conveniently fit into our room’s little locker.</p>
<p>The iPad is great for media playback, we managed to take about 10 movies and a dozen or so episodes from TV series we watch (I got a 16GB version). I bought a leather case that wraps around the screen and can also be folded over to the back to let it stand up, for instance on the bed, which worked out great.</p>
<p>Not only is the iPad great for watching video, it’s great for games too. My wife finally beat the adventure mode of [Plants versus Zombies](http://www.popcap.com/games/pvz), and I played a bit of [Asphalt 5 HD](http://appadvice.com/appnn/2010/04/ipad-app-breakdown-asphalt-5-hd-2/) and [Orbital HD](http://appadvice.com/appnn/2010/04/orbital-hd-full-advantage-ipad/).</p>
<p>When I finished the two physical books I took I also read the 97-paged sample of [“Under the Dome”](http://en.wikipedia.org/wiki/Under_the_Dome) that I got through iBooks (I think I’ll have to purchase the whole thing now). And yes, I read it outside, albeit in the shadow. The screen brightness is good enough to read outside. Unless you’re reading in the sun, that probably won’t work so well.</p>
<p>But maybe my favorite feature was that although it can do all of the above, it is not a full-fledged computer that would invite me to do some work. If you’re carrying around a laptop, why not open up Eclipse and do some programming? On the iPad you can’t and when you’re on _holiday_ that’s a feature for sure. I could have read one of the few dozen academic papers that I have stored on it, but I resisted. Who wants to read about functional reactive programming when you’re outside on the beach anyway?</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1578</wp:post_id>
		<wp:post_date>2010-05-31 10:24:30</wp:post_date>
		<wp:post_date_gmt>2010-05-31 08:24:30</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ipad-a-great-holiday-computer</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="ipad"><![CDATA[iPad]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>How Git Encourages Open Source Contribution</title>
		<link>http://zef.me/2010/07/14/how-git-encourages-open-source-contribution/</link>
		<pubDate>Wed, 14 Jul 2010 09:05:23 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2010/07/14/how-git-encourages-open-source-contribution/</guid>
		<description></description>
		<content:encoded><![CDATA[It is almost exactly 10 years ago that I released my first piece of open source software. The name of the project was <a href="http://www.yabbforum.com/">YaBB</a> and it was the first open source bulletin board/forum software written in Perl. Really — Perl? Yeah, that was the lingua franca of the web at that time — <a href="http://en.wikipedia.org/wiki/Common_Gateway_Interface">CGI</a> baby!

A few months after YaBB’s initial release the team of contributors grew to about a dozen or so people. Our main collaboration tool was the YaBB software itself and e-mail. We did not use a version control system (who knew how to use CVS anyway). The main “repository” of source code was my hard drive, or even the FTP where the YaBB website was hosted. Some people had “commit” access i.e. had the FTP username and password and they contributed by directly uploading their changed files straight to the FTP — any changes were live immediately. Once in a while we would make a release (in the beginning about a few times a day, later less frequently).

Outsiders could contribute by submitting patches to us, or send us modified files via e-mail. But frankly, that did not happen often. The barrier to contribute was pretty high. People essentially had to be invited to join the team and get FTP access to contribute. Looking back, I think this greatly reduced the amount of outside contributions. And in case you were wondering, the project is still around — not very popular anymore, it seems — but its successor <a href="http://simplemachines.org/">SMF</a>seems to be doing pretty well.

Later on, as a <em>consumer</em> of open source software I encountered this issue from the other end. Even if a project did use a version control system, like CVS or subversion, it was mostly useful to stay up to date with developments of the project team — the people with commit access. If I made any changes myself, there was no light-weight way to contribute them back. Sure, I could make a patch and send it by e-mail, but that’s a lot of hassle. Who does that? In effect, my changes only lived on my hard drive and ultimately disappeared when cleaning stuff up, after I didn’t need them anymore.

About a year ago I started to use <a href="http://git-scm.com/">Git</a>, a <em>distributed</em> version control system. That means that, rather than having a centralized source repository, every developer keeps his or her own repository locally. Locally, but maybe also remotely someplace, so that others can access it. For open source, a popular place to host such remote repositories is <a href="http://www.github.com/">GitHub</a>. I host <a href="http://github.com/zefhemel">a number</a> of repositories at github myself.

<strong>So, how does “git encourage open source contribution” then?</strong> Well, in Git, forking a project is a very common thing to do. Effectively, as soon as you <em>clone</em> a repository (a “checkout” in subversion-speak), you keep your own copy locally. You can commit to that copy as much as you want, create branch, tags etc. Effectively you have now created a fork of the project, which you can <em>push</em> (upload) to your own project repository, on GitHub for instance. As an example, let’s consider <a href="http://github.com/zefhemel/persistencejs">persistence.js</a> — my Javascript ORM library. According to GitHub, <a href="http://github.com/zefhemel/persistencejs/network/members">there are currently 7 forks</a> of this project. The main one lives at , but there’s another one at , and yet another one at . That is, there are 7 people who made changes locally and pushed them to their own GitHub project repository.

<strong>So, what would you <em>fork</em> a project for, is that like a hostile take-over?</strong> Not really. People usually do it if they found some kind of bug, or want to add some kind of feature and publish those changes (or they want to <a href="http://github.com/eegg/orm.js">port the whole thing to Coffeescript</a>, lord knows why). They can do that by simply forking and pushing it to GitHub. If they want, the can send me a <em>pull request</em>, which is a request for me to pull in <em>their</em> changes into <em>my</em> repository, these changes can be merged into my main repository. I say <em>main</em> repository, but there is really no such thing.

<strong>So, does that actually work?</strong> Yes, it turns out that, indeed, it does. In the case of persistence.js, people have contributed bug fixes and the <code>persistence.migrations.js</code> plug-in (to handle changes in your data model) has been contributed by a “stranger”. With stranger I mean somebody who did not request to be “part of the team” (there’s not really a team), or to get commit access to anything. Just a somebody that happens to use persistence.js, and needed this plug-in. I have contributed fixes to a couple of projects started by others as well, such as <a href="http://github.com/sidorares/nodejs-mysql-native">nodejs-mysql-native</a>, <a href="http://github.com/davidaurelio/TouchScroll">TouchScroll</a> and <a href="http://github.com/somnium/congomongo">congomongo</a>. Doing so was a breeze.

If your open source project is still running on subversion — or lord forbid, CVS — and you feel you do not get a lot of outside contributions, Git (or Mercurial for that matter) is definitely something to consider. <a href="http://www.github.com/">GitHub</a> is a great place to host your code, but if you need more space (you only get about 300MB for all your repos together), <a href="http://www.gitorious.org/">Gitorious</a> is excellent as well (you get virtually unlimited space there). Or use both!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1737</wp:post_id>
		<wp:post_date>2010-07-14 11:05:23</wp:post_date>
		<wp:post_date_gmt>2010-07-14 09:05:23</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>how-git-encourages-open-source-contribution</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="git"><![CDATA[Git]]></category>
		<category domain="post_tag" nicename="open-source"><![CDATA[Open Source]]></category>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[43876787397]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Back on Android</title>
		<link>http://zef.me/2010/07/02/back-on-android/</link>
		<pubDate>Fri, 02 Jul 2010 08:31:36 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2010/07/02/back-on-android/</guid>
		<description></description>
		<content:encoded><![CDATA[When my <a href="http://zef.me/3332/ios4-upgrading-hangs-and-how-to-fix-it">iPhone was unusable last week</a>, I had to temporarily switch back to Android. At that time an early build of <a href="http://android-developers.blogspot.com/2010/05/android-22-and-developers-goodies.html">Android 2.2 Froyo</a> came out and I decided to install it, which was, when you think of it, kind of stupid — upgrading your back-up phone when the other one is unusable because of an upgrade — but I did it anyway. This upgrade succeeded, thankfully, and I must say that I like it a lot.

Android feels a lot snappier since the upgrade. I also love the fact that you can tether via wifi without having to hack your phone (as I did with the iPhone). It made me reconsider using the Nexus One as my main phone, and for the past week and a half, I have. To be frank, I’m pretty happy with it.

Sure, the iPhone is more polished and slightly more responsive. It is more user friendly. Android is more like Linux and Windows, and iPhone is more like the Mac. The iPhone is simpler, but with that also more limited. The Android is more complex — you actually have to <em>learn to use it effectively</em>, but when you do, it is more powerful.

Multi-tasking, for instance, is touted as the main new feature in iPhone. Except, it’s not really multi-tasking — it doesn’t do two things at the same time hardly ever (with a few exceptions such as playing music in the background), it just enables faster switching between multiple applications. Does that distinction matter? I thought it didn’t — my main annoyance on the iPhone was when I had to e.g. copy and past stuff from one application to the other; and in that case fast app switching is all you need. However, now that I’m on Android I experienced the advantage of <em>true</em> multi-tasking.

When I wake up in the morning my phone has automatically downloaded new podcast episodes to my phone. I do not have to connected it to my computer to sync them. When I have time to read some tweets, my twitter application has already loaded them; ready for me to read. That is something you simply will not get on the iPhone, currently. On the iPhone you launch or switch to the Twitter app, wait for it to connect to twitter and fetch new tweets, then you read them.

If you’re a (new) Android user, be sure to check the following applications out (just search for them on the Marketplace):
<ul>
 	<li>CallTrack, to log your phone calls to a Google Calendar.</li>
 	<li><a href="http://code.google.com/p/android-scripting/">Android Scripting Environment</a>, run Python, Ruby and Javascript scripts on your phone. Program on the REPL!</li>
 	<li><a href="http://groups.google.com/group/audible-for-android-beta">Audible for Android (beta)</a>, are you and Audible subscriber? They got a great Android app now.</li>
 	<li>DiskUsage, where did all your storage go?</li>
 	<li>File Manager, a nice clean file manager.</li>
 	<li>Dropbox, are you a dropbox user? This application allows you to upload, download and manage files on your dropbox account (and edit them using other applications)</li>
 	<li>Fring, call other people, e.g. on skype. Also features video chat.</li>
 	<li>IMDB, a nice application for the <a href="http://www.imdb.com/">IMDB</a> movie database</li>
 	<li>Kindle, read your kindle books on Android. Includes whisper sync.</li>
 	<li>Listen, to download and listen to podcasts.</li>
 	<li>QuickSSHd (not free), a nice little SSH server so you can remotely log-on to your phone.</li>
 	<li>Rom buddy/SNesoid (not free), play all those nice old super nintendo games</li>
 	<li>Spotify, are you a <a href="http://www.spotify.com/">Spotify</a> Premium subscriber? Listen to all music on the go.</li>
 	<li>Terminal emulator, access your phone’s command line</li>
 	<li>Twitter, Twitter’s official twitter client.</li>
 	<li><a href="http://smartkeyboardpro.com/">Smart keyboard pro</a> (there’s also a free version), a great keyboard replacement. The key feature of it is that there’s Dutch and Polish dictionaries available for it so I can finally benefit from auto corrections.</li>
</ul>
And as far as the paid applications goes. Did you know you can return a paid app within 24 hours and get a refund? No reason not to try these apps.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1759</wp:post_id>
		<wp:post_date>2010-07-02 10:31:36</wp:post_date>
		<wp:post_date_gmt>2010-07-02 08:31:36</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>back-on-android</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[43876782644]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>I Hate Puzzles: Am I Still A Programmer?</title>
		<link>http://zef.me/2011/02/27/i-hate-puzzles-am-i-still-a-programmer/</link>
		<pubDate>Sun, 27 Feb 2011 15:52:14 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2011/02/27/i-hate-puzzles-am-i-still-a-programmer/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>About a month or two ago, me and my wife got a present from friends: a 1000 pieced puzzle version of this Escher drawing:</p>
<figure>

<img data-width="300" data-height="450" src="https://cdn-images-1.medium.com/max/800/1*SkAqiIShA48IGX-PNbh9Lg.jpeg">
</figure><p>Yesterday we decided to give it a shot.</p>
<p>Have a good look at this picture, 60–70% of it is shades of gray. The pieces are small enough that only a few pieces by themselves contained anything recognizable: Escher’s eyes and parts of the window in the background. After putting those together we got stuck.</p>
<p>Why do people enjoy this kind of thing? If you don’t have anything else to do, sure — but we had plenty of more useful stuff to do.</p>
<p>We decided to give up. We once again concluded what we already knew: we hate doing puzzles.</p>
<p>Later during the day I found <a href="http://img.archive.today/0Cg01/88d1e7c8f5dc0554cb0d3f8d7b1f893c4e870721.png" target="_blank">this “comic”</a> on Reddit or Hacker News or someplace. It’s about the joy of programming. In short: writing boilerplate code — boring; coming up with new algorithms — fun.</p>
<p>Coming up with algorithms is the programmer’s version of puzzle solving. There’s a problem, and it’s fun to come up with the most efficient algorithm to solve it — right? As the end of my PhD is approaching, and I’m looking around to see what’s next, this is what I see many interesting companies want: clever guys and gals that are great at algorithmic puzzle solving. At least, it appears that way from their hiring practices.</p>
<p><a href="http://www.facebook.com/careers/puzzles.php" target="_blank">Facebook</a>:</p>
<blockquote>Do you like puzzles? So do we.</blockquote>
<p><a href="http://www.mytechinterviews.com/10-google-interview-questions" target="_blank">Google</a>:</p>
<blockquote>Four people need to cross a rickety bridge at night. Unfortunately, they have only one torch and the bridge is too dangerous to cross without one. The bridge is only strong enough to support two people at a time. Not all people take the same time to cross the bridge. Times for each person: 1 min, 2 mins, 7 mins and 10 mins. What is the shortest time needed for all four of them to cross the bridge?</blockquote>
<p>A few weeks ago I was contacted by a recruiter from a fairly high-profile San Francisco-based startup — if I was interested in joining their team. Sure! Great! Could you please solve this algorithmic puzzle within half an hour? I failed. Hiring decision made. End of story.</p>
<p>I hate puzzles.</p>
<p>Does that make me a bad programmer? Am I a programmer at all, if I don’t like and suck at these types of problems? There are more hints that I’m not a real nerd — I don’t like science-fiction, for instance. Maybe I’m simply not the type of programmer these companies are looking for. That’s fair enough.</p>
<p>I’ve been programming for 18 years now. Only very rarely have I had to come up with a complex algorithm. What I like about programming is not problem solving — it’s design. How do I design an application in such a way that people will understand it? What tools can you give developers to make them more productive?</p>
<p>My first large-scale programming project, almost ten years ago, was <a href="http://www.yabbforum.com/" target="_blank">YaBB</a>. I needed forum software and there weren’t any good ones that were free. Was there anything algorithmically complex in YaBB? Hardly. Still, it was immensely useful to people and at the time very successful.</p>
<p>More recently I wrote <a href="http://persistencejs.org/" target="_blank">persistence.js</a> and <a href="http://www.mobl-lang.org/" target="_blank">mobl</a>. Both products that make developers more productive. Again, the challenge here was not algorithmic at all. The challenge was coming up with an API (in case of persistence.js) and language (in case of mobl) that is both simple, powerful, flexible and useful. That’s not an easy challenge and has nothing to do with algorithms. It’s design.</p>
<p>Maybe I should refer to myself as software designer rather than programmer.</p>
<p>What does programming mean to you? Is it algorithmic in nature or not at all? Am I crazy not to enjoy puzzles?</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>75</wp:post_id>
		<wp:post_date>2011-02-27 16:52:14</wp:post_date>
		<wp:post_date_gmt>2011-02-27 15:52:14</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>i-hate-puzzles-am-i-still-a-programmer</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="best-of"><![CDATA[Best Of]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Augmented Reality RPG</title>
		<link>http://zef.me/2011/05/13/augmented-reality-rpg/</link>
		<pubDate>Fri, 13 May 2011 09:06:39 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2011/05/13/augmented-reality-rpg/</guid>
		<description></description>
		<content:encoded><![CDATA[Last week, for the first time, I had some time to play some of the games I had been buying over the past months on my iPad. The one that made most of and impression was <a href="http://itunes.apple.com/nl/app/aralon-sword-and-shadow-hd/id399045373?mt=8">Aralon</a>, a role-playing game (RPG). I spent several hours running around in its virtual world, shooting bad guys with my bow.

I’m not much of a gamer. Generally I find it somewhat of a waste of time. Yet, millions of people do not seem to agree. Online RPGs such as World of Warcraft have tens, if not hundreds of thousands of players. They spend hours a day walking around in a virtual world, completing virtual quests, collecting virtual items and fighting virtual enemies. I always wondered why people would do this. Is the interesting angle the social component? It’s kind of cool that you’re not alone exploring this world, there are others as well that you can interact with, team up with and trade with.

I found the whole Aralon experience oddly satisfying. You kill bad guys, help people with their problems, earn money with which you can buy weapons and these thing. You get more experienced and learn new skills along the way. It’s almost like leading a small second life, except more quantifiable and more fast paced.

Still, I find a bit of a shame that you have to sit inside behind a computer screen to play this. I’m aware of LARPs (Life-Action Role-Playing Games), but I find those a bit extreme. Not everybody wants te dress up as a warlord of some kind. I definitely don’t want to.

What if we could turn this into a casual, augmented reality, location-based game, played on our mobile phones?

Rather than virtually running around in a virtual world, you physically run around in the real world. Your neighborhood, your city, other cities, other countries even when on holiday. Based on your actual location you would receive virtual quests on your phone. “You see a boy crying on X street, he lost his dog. Can you find it for him?” Accept. Walking around the block you see on your phone the dog is nearby. You pick it up (virtually of course, you don’t know where the creep has been), return to the boy’s location, return it to him and get some reward in return.

You “see” a runner nearby, challenging you to a run around the block. You accept, win and earn some more money. Using these rewards you can go to the (virtual) merchant around the corner to get a cool looking t-shirt that other players can see on their phone when they’re nearby. Or a set of electric binoculars to temporarily see farther away (allowing you to see, and pick up items that are farther away from you). Quests could involve nearby players involving actual real-life interaction.

The advantage over pure-virtual RPGs? You actually get exercise walking around your town. You actually meet real people. Real stores and restaurants could offer real discounts in exchange for some quest. It can be used for education as well. For instance, a zoo may develop quests to teach players actual things about actual animals requiring them to walk around the zoo, observing animal behavior, answering multiple-choice questions, earning them a special “animal observer level 1 achievement” that every other nearby players and friends can see. Companies may hand out virtual stickers you can make part of your virtual image. Cities and towns can develop tour guides as bots and quests. Virtual items may be traded with other players.

I think such a game may be a very interesting competitor to many location-based services like foursquare, where you check-in and earn badges — and that’s it. Actually turning it into a real game would be much more engaging I would think.

Technically such a game is not very difficult to develop. The server maintains a database of players, their items, ongoing quests and their locations; bots and some representation of their quests and instances of those bots all over the world; items that lie around, with associated value and uses. It’s essentially just a big database of locatable things and some algorithms to ensure there is something to do wherever there are players. A mobile client then simply asks “give me a list of nearby things” and enables the interaction with those things.

The big challenge would be the development of content. Virtual worlds are large, but the actual world is a lot larger. How do you augment the entire world with items and quests? Initially, an approach could be to develop a large collection of generic quests that can be instantiated on demand in different locations. Boys can lose their dogs all around the world, can they not? People can ask you to deliver messages and runners can challenge you to a duel no matter where you are in the world. Technically, if you log on to the game such quests could be instantiated dynamically if others are not available.

Subsequently, for major cities, companies, sights, zoos and museums, custom quests can gradually be developed. Potentially by these companies, sights and cities themselves.

Maybe it would be possible to crowd-source the writing of quests, run it as an open source project of some kind. Although one would have to come up with a sparse way of giving out rewards to avoid “push this button to earn $10,000.” Another way could be to let players act as quest-givers, letting other players perform real-life quests for them where rewards are taken from the quest-giver’s personal “account”.

It surely would be an interesting experiment, would it not? Has this never been tried?]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>82</wp:post_id>
		<wp:post_date>2011-05-13 11:06:39</wp:post_date>
		<wp:post_date_gmt>2011-05-13 09:06:39</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>augmented-reality-rpg</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="game"><![CDATA[Game]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="mobile"><![CDATA[Mobile]]></category>
		<category domain="post_tag" nicename="rpg"><![CDATA[Rpg]]></category>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[43757352758]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Streamlined Asynchronous JavaScript, with Bruno Jouhier</title>
		<link>http://zef.me/2011/05/29/streamlined-asynchronous-javascript-with-bruno-jouhier/</link>
		<pubDate>Sun, 29 May 2011 10:16:01 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2011/05/29/streamlined-asynchronous-javascript-with-bruno-jouhier/</guid>
		<description></description>
		<content:encoded><![CDATA[<figure><a href="http://en.wikipedia.org/wiki/JavaScript">Javascript</a> is a language that has come a long way since Brendan Eich implemented it <a href="http://news.ycombinator.com/item?id=1797304">in 10 days</a> in the mid-nineties. Until a few years ago it was mainly used to build drop-down menus on website, but since the advent of — what we now refer to as — <a href="http://www.adaptivepath.com/ideas/ajax-new-approach-web-applications">AJAX</a>, Javascript has started to be taken more seriously as a language. Since then, Javascript codebases have increased rapidly. With the advent of <a href="http://nodejs.org/">node.js</a>, Javascript is also used on the server-side, because it turns out the be an excellent language to write efficient asynchronous code — or is it?

As it turns out, not everybody is satisfied with the verboseness and structure of Javascript code.

We talk to <a href="http://bjouhier.wordpress.com/">Bruno Jouhier</a>, author of <a href="https://github.com/Sage/streamlinejs">streamline.js</a>, a Javascript preprocessor that attempts to <em>streamline</em> asynchronous code written using Javascript (and CoffeeScript as well), removing the need to write all those callbacks by hand.

<strong>To start, who are you and what is your background?</strong>

I’m a 50 year old programmer. I studied at Ecole Normale Supérieure in Paris where I obtained a doctorate in Physics. I also have an engineering degree from Ecole Nationale Supérieure des Télécommunications in Paris.

Before <a href="http://sage.com/">Sage</a>, I worked for two startups. The first one was called Neuron Data. I participated to the development of the company’s first product, an Expert System Shell called Nexpert Object, in the late 80s. I was at the origin of two of the company’s later products: a cross platform UI toolkit called Open Interface and a business rules engine called Blaze Advisor. I left the company in 1999 and joined a small startup called Ubiquis where I developed an e-commerce application closely integrated with Sage’s accounting products. We sold the company to Sage in 2000.

My programming experience is mostly with C, Java and C# but I’ve been exposed to all sorts of O-O languages: Smalltalk, Objective-C, C++, Eiffel, etc. I was fluent in emacs-lisp at some point and I also wrote stuff in esoteric AI languages like OPS5. I worked on various systems: Unix and Windows of course but I also did a lot of development on VMS and some on Macintosh.

<strong>What does <a href="http://www.sage.com/">Sage</a> do and what is your role there?</strong>

Sage develops business software for small and medium size businesses. We have many products because Sage has grown by acquiring local software vendors. About 18 months ago I took the lead on the architecture of our global ERP product, Sage ERP X3.

<strong>Why has Sage chosen to use Server-Side JavaScript, and is this a across-the-board decision or made on a project-by-project basis?</strong>

Sage is a very decentralized company and product architects have had a lot of autonomy in their technology choices in the past. Things are starting to change though as we are more and more faced with global challenges. Sage is not considering SSJS as a global platform at this time as it is too immature for the type of applications we are building. But, despite its conservative image, Sage is open to innovation and is supportive of the choice that I made to use SSJS for a project around Sage ERP X3. If this project is successful (and I think it will be), SSJS may be considered for other projects.

<strong>Why did you select Javascript for the server-side for this project? Code reuse between client and server? Performance?</strong>

I initially selected Javascript to be able to reuse code between client and server. In offline mobile scenarios, we need to sync a subset of the data to the client, and the idea of sharing business logic between client and server is attractive.

The benefit is not just in using the same code, it is also in having the same language, even for code that is not shared. This way we can share expertise, best practices, etc.

Another reason is that I discovered <a href="http://jquery.com/">jQuery</a> in the summer of 2009 and it completely changed my opinion about dynamic languages and Javascript. It made me rediscover the pleasure of programming, and it reminded me of the pleasure that I had writing emacs-lisp 20 years ago. And retrospectively this LISP code was actually quite solid and elegant.

And behind this, the main motivation was <em>simplicity</em>: Javascript is an incredibly <em>simple</em> language (emacs-lisp too BTW), JSON is <em>simple</em>, REST is <em>simple</em>, Google search is <em>simple</em>, Apple’s products are <em>simple</em>, etc. I had just accumulated too much frustration with C#, XML, SOAP+WS-*, Windows, etc. I thought that we needed a radical departure from all this complexity, in order to build great products. Javascript was an opportunity!

Performance is not what made me choose Javascript, it is what made me switch from servers powered by <a href="http://www.mozilla.org/rhino/">Rhino</a> (<a href="http://ringojs.org/">ringo.js</a> and <a href="http://narwhaljs.org/">narwhal</a>) to <a href="http://nodejs.org/">node.js</a>.

<strong>What is the problem you identified while using JavaScript? Is the problem specific to Sage’s use of JavaScript, a server-side JS programing specific problem, or is it a general (fundamental?) problem with JavaScript?</strong>

The problem comes from the fact that we are using node.js which enforces a strictly asynchronous programming model. Javascript is probably better suited than many other languages to deal with asynchronous programming and it copes rather well with asynchronous APIs in the browser where we have thin layers of logic. But on the server side, we have thicker layers. In the case of a business application we typically have lots of business rules sitting on top of data access layers and web services. I found it really hard to implement the business logic and the underlying infrastructure with the callback and event models that node.js proposes for asynchronous code. The problem is that callbacks and events somehow <em>turn the code upside down</em>: you cannot use standard flow control statements like if/else, switch or loops to express your logic; instead, you have to write non-trivial code that manipulates callbacks. Some people have developed helper libraries that ease the pain but even with these libraries, the code that you write contains a lot more “noise” that the code you would have written if the APIs had been synchronous.

The problem is not specific to our use of Javascript and node.js. It is probably more stringent in our case because we have a lot of business logic to develop but I think that it is a general problem that all node.js developers have to solve in one way of another. The proliferation of async helper libraries in the node.js ecosystem and the recurrence of this topic on the forum are signs that there is a real pain point here.

And the problem exists in the browser too, as we start to develop more complex applications and put thicker business logic in the browser to support offline scenarios.

In some sense, the problem is even a fundamental problem with the language itself: Javascript lacks a high level mechanism to deal with asynchronous code flows. The programmer is left with low level mechanisms such as callbacks and events. There is actually a hot debate in the Javascript community about the introduction of coroutines or continuations in the language. These mechanisms would solve the problem but there is a strong resistance to their introduction in the language because they enable a limited form of threading (fibers).

<strong>How does <a href="https://github.com/Sage/streamlinejs">streamline.js</a> solve this problem?</strong>

Streamline.js solves the problem with weaker mechanisms that don’t let threads creep in. <a href="https://github.com/Sage/streamlinejs">Streamline.js</a> solves the problem with a preprocessor that transforms the code. Basically, streamline lets you write your code as if the APIs were synchronous and gives you a special placeholder parameter (an underscore) that you pass everywhere a callback is expected.

The preprocessor uses the placeholder to spot all the places where callbacks need to be generated, and it somehow “writes the callbacks for you”. The strength of the preprocessor is that it knows how to deal with all the standard Javascript flow control statements (conditionals, loops, exception handling). So it rearranges the code and generates the callbacks so that your code behaves as you would expect it to behave. The generated code is not very different from the code you would have written if you had to write the callbacks by hand. So you can use it with a debugger.

You have the choice of running the preprocessor before executing your program, in which case your program won’t need to embed the streamline transformation engine, or you can embed the engine and let the node.js “require” infrastructure invoke the transformation as it loads your modules.

From a more theoretical standpoint, streamline performs a <a href="http://en.wikipedia.org/wiki/Continuation-passing_style">CPS (Continuation Passing Style)</a> transform. I am not a specialist of CPS transforms but I think that two things differentiate this CPS transform from other CPS transforms. The first one is that the transformation is partial: only the code flows that contain asynchronous calls are transformed. The second one is that it is based on an algebraic application of patterns (the patterns being the patterns that I discovered progressively when I was still writing the callbacks by hand). These two characteristics explain why streamline.js somehow “writes the callbacks for you” instead of turning the entire code upside down like some other CPS-based tools do.

Another important point about streamline.js is its compatibility with native node.js APIs and the absence of an additional runtime. You do not need to write wrappers around node.js APIs, you can call them directly. And the same applies in the other direction: you can call functions written with streamline.js from regular Javascript code.

Also, streamline comes with some goodies to facilitate asynchronous programming. For example it provides “futures” to let you parallelize I/O operations.

<strong>This underscore argument, is that just there for technical reason (to detect which functions should be called asynchronously) or does it serve another purpose as well?</strong>

The first version that I published on GitHub did not have the underscore argument. Instead, I had used a different marker: an underscore at the end of the function name. I introduced the underscore argument shortly after, when I did the CoffeeScript adaptation. As CoffeeScript only generates anonymous functions, and as I did not want to get dragged into hacking compilers, I changed the syntax and introduced the underscore parameter/argument.

And this was a lucky move! First, this syntax translated a key property of asynchronous functions, i.e. the fact that asynchronism is “contagious”, into a simple scoping rule: if a function calls an asynchronous function, it becomes asynchronous itself (unless you don’t care about completion of the sub function). This translates into the fact that you may only pass the underscore argument from a scope where the underscore is defined (as a parameter of the current function). The only violation of this rule is for top level calls in a script and there is another gotcha: the underscore parameter must be in the current function, not one of its ancestors in the scope.

But the syntax also had some practical benefits: it allows streamline.js code to call node.js functions in which the callback is not the last parameter; it also makes it easy to design functions that have optional parameters, by putting the callback in first rather than last position. And, it also allows allowed me to introduce a special syntax (_<em>wrapXxx(</em>)) for wrapper functions that adapt the callback for APIs that do not adhere to the standard node convention (for example callbacks that don’t take an error parameter).

And more recently, I found a really cute way to leverage this underscore parameter. I was investigating ways to initiate several asynchronous operations in parallel and being able to join them later, without introducing much extra syntax or heavy libraries. I knew about “promises” and “futures” and I had the idea that asynchronous functions could return a “future” when called without a callback. So if <code>foo(arg1, _)</code> is an asynchronous function, calling <code>f = foo(arg1)</code> would return (synchronously) a future, which could be used later as <code>f(_)</code> to retrieve the result. In CS jargon, this translates into: “futures are obtained by currying the callback away”. So, and this is were I was really lucky with the underscore parameter design, futures came almost for free: “if you omit the underscore argument you get a future”.

There are certainly alternatives to this syntax (special call operators for example) but I went with this design because I wanted the source to remain valid Javascript. I always use the “reformat entire file” command when I write code and I don’t want this feature to be broken because of new syntax (and I have no time to hack text editors any more). This also allowed me to implement the transformation around Narcissus without having to hack it. Same thing with CoffeeScript: I did not have to do anything in the CoffeeScript compiler.

<strong>About debugging, you mention that the generated code is roughly what you would have written by hand otherwise, which helps. Still, in order to debug your program, you have to understand what the streamline.js preprocessor does exactly, i.e. you still have to understand how to write code in the continuation-passing style by hand. In that sense it’s a <a href="http://www.joelonsoftware.com/articles/LeakyAbstractions.html">leaky abstraction</a>. Would it possible to debug at the level of a streamline.js program rather than at the level of the generated Javascript or would that require changes to the Javascript infrastructure currently in place (e.g. v8)?</strong>

Yes, it could be seen as a leaky abstraction, but actually, is this really worse than working with an asynchronous helper library? If you use a helper library and something goes wrong, you often end up stepping into the library, and then you have to understand the internals of the library. With streamline.js, you step through code in which you easily recognize the code that you have written yourself and the callback “decorations” that streamline has added around it. So, stepping through may actually be easier because you are not jumping between your code and a library, you have everything under your eyes in a single file.

Also, I would reformulate your statement a bit: to debug streamline code, you do not have to understand “what the streamline preprocessor does exactly”, you have to understand “the code that it generates”. This is much easier.

I’d be careful with the term “leaky abstraction” though. Joel gives a subtle definition but a lot of forum posters are abusing it to easily disqualify things that they dont’t like. There is an obvious association with memory leaks, leaky engines, etc. In that sense, I do not consider streamline.js to be leaky. It may have emerged from a somewhat pragmatic investigation but it is based on an algebraic application of patterns and I think that it would be possible to write a formal proof that this transformation does not distort semantics (some of the limitations that I mentioned in the wiki, like the fact that the order of subexpression evaluation is not always preserved, are not too difficult to lift but lifting them would increase the size of the generated code and I chose not to do it).

I haven’t investigated if debuggers could be modified to operate on streamline source rather than on the generated code. Will Conant has contributed a feature that maps the output lines to the source lines, which might be a first step. But there is probably hard work to get to a really transparent debugging experience.

It may actually be easier to rewrite the transform as an AST transform directly in V8. But I’m not familiar at all with V8’s internals so I have no idea of what this really entails. But the transformation is less than 1600 lines of Javascript so this may not be such a big endeavor after all.

<strong>How do streamline.js’s futures and “goodies” compare to the libraries to facilitate async programming already out there?</strong>

There aren’t that many goodies actually.

The first set is just an async version of the ECMAScript 5 array methods (forEach, map, filter, every, some, reduce, reduceRight). They are probably equivalent to what you can find in other libraries. The only special thing is that the callback is passed as first argument rather than last, which works better in this case because the functions have optional arguments.

Then, there is a special function that I really like and that I called “funnel”. It allows you to control the number of concurrent executions over one or several code blocks. It can be used to limit the level of parallelism and avoid exhaustion of system resources (for example you quickly run out of file descriptors if you blindly parallelize recursive traversal of directories). It can also be used to set up “critical sections” by setting the limit to 1. I’m also thinking of introducing a variant that would handle exclusion between one writer and multiple readers.

The “futures” feature compares to futures found in promise/future libraries (Krys Zip and Kris Kowal are experts here). But there is a big difference because streamline only provides futures and it does not provides them as classes with methods. Instead, every function that you write with streamline will return a future if you call it without providing a callback; and the future itself is just an asynchronous function that returns the result via a callback. So, there is no special API to learn.

I just introduced another set of goodies to wrap node.js stream objects. The idea behind these wrappers it to let the consumer of the stream “pull” the data by calling a “read” method instead of having the stream “push” the data by emiting events. There are libraries that ease the work with node’s streams but I haven’t seen any that takes the radical approach of “inverting the flow” completely and exposing “read” methods instead of events. I think that this API style blends really well with streamline.

One thing that streamline does not provide is libraries to chain asynchronous calls. There are a lot of them around but they simply don’t apply to streamline because the chaining problem is solved differently, by a CPS transform.

Overall, I try to avoid introducing large APIs. I try to keep the APIs minimalist and very thin. Also, I have an unfair advantage over people who implement other helper libraries because I write them for streamline source. So I don’t have to constantly fight against callbacks; the CPS transform moves them out of the way which removes a big thorn. For example it becomes very easy to design functions that chain with each other.

<strong>How is streamline.js received by the Javascript community?</strong>

There are a few fans who praise it and some who have contributed but I also got a lot of negative feedback. For example, the first response I got when I announced it on the node forum was something like “callbacks are just fine, we don’t need any extravagant framework like this one” and it was followed by a series of “+1” posts. On one hand, this was a bit of a surprise to me because I was expecting that people were actually having a hard time with callbacks and that they would be happy to have an alternative but this was not the case in general. On the other hand, I’m an old programmer and I’ve seen many ugly religious debates. Programmers will always be programmers!

I don’t know about the Javascript community at large. Today I’ve only posted about streamline on the node forum because I feel that it is the focal point for “asynchronous Javascript”.

I’m nevertheless a bit concerned about this negative feedback that I got from the node community. I’m not concerned because of streamline itself but rather because of node.js. I really think that node.js is a great technology: simple, based on simple innovative principles, and very fast, but I think that the entry ticket is way too high today. There is a lot of buzz around node.js today but I would not be too surprised to hear some discordant voices soon. What concerns me is that node.js has the ambition of being the next PHP or the next RoR but it lacks the “basic spirit” of the former and the “structuring nature” of the latter. If we want this to happen, we need to work on the “entry ticket” problem. So, to me, people who stick to the “programmers just have to learn how to program with callbacks to deserve node.js” mantra do a great disservice to node.js. Node.js cannot become a mainstream platform without lowering its “entry ticket”. Maybe streamline.js is not the answer but maybe there are some good ideas to pick from it.

<strong>How do you see the future of streamline.js, can you imagine it to be a built-in feature of Javascript at some point in the future?</strong>

What I know for sure is that we (Sage) will use it, unless something better comes along. And I hope that we will build great products with it. Beyond that I don’t know but I’d be thrilled to discuss with the Javascript gurus, even if it is just to exchange ideas.

There are a few things that I like a lot about streamline. One of them is the economy of means: a simple syntax trick (reserving the underscore parameter) solves a big problem and even enables unexpected features (futures). Another one is that it preserves the single-threaded nature of Javascript and it actually makes the async-points “explicit” (but very discrete, just an underscore). This is not the case with fibers, and actually this is not even the case with the classical callback approach (after all, a callback is just a callback, there are both “synchronous” and “asynchronous” callbacks, and there is really nothing in the syntax that differentiates between them).

<strong>Links</strong>
<ul>
 	<li><a href="https://github.com/Sage/streamlinejs">streamline.js on GitHub</a></li>
 	<li><a href="http://bjouhier.wordpress.com/2011/01/09/asynchronous-javascript-the-tale-of-harry/">The tale of Harry</a></li>
 	<li><a href="http://bjouhier.wordpress.com/">Bruno’s weblog</a></li>
 	<li><a href="https://twitter.com/bjouhier">Bruno on twitter</a></li>
</ul>
</figure>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>111</wp:post_id>
		<wp:post_date>2011-05-29 12:16:01</wp:post_date>
		<wp:post_date_gmt>2011-05-29 10:16:01</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>streamlined-asynchronous-javascript-with-bruno-jouhier</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="asynchronous"><![CDATA[Asynchronous]]></category>
		<category domain="post_tag" nicename="compiles-to-javascript"><![CDATA[Compiles To Javascript]]></category>
		<category domain="post_tag" nicename="event"><![CDATA[Event]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="interview"><![CDATA[Interview]]></category>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[43757337126]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Post-PhD Plans: Cloud 9 IDE</title>
		<link>http://zef.me/2011/05/26/post-phd-plans-cloud-9-ide/</link>
		<pubDate>Thu, 26 May 2011 10:58:38 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2011/05/26/post-phd-plans-cloud-9-ide/</guid>
		<description></description>
		<content:encoded><![CDATA[Starting September 1st I will be employed by <a href="http://ajax.org/">Ajax.org</a>, the Amsterdam based company that is developing <a href="http://c9.io/">Cloud 9 IDE</a> — not to be confused with the similarly named <a href="http://www.ajax.nl/">Amsterdam-based soccer club</a>.

<strong>Why an IDE in “the cloud”?</strong>

During the past decade more and more of the stuff we do every day has moved online: e-mail, word processing, spreadsheets, chat, collaboration tools. The obvious next — almost inevitable — step is to move the IDE (Integrated Development Environment) to the cloud as well. Exit Eclipse. Enter Cloud9.

A few (potential) advantages:
<ul>
 	<li>Your code is accessible anywhere, from any computer, but also mobile device: iPhone, iPad. Just point your browser to a URL and off you go.</li>
 	<li>No complex tool setup. It’s typically very difficult to properly install your IDE (e.g. Eclipse) with all the plug-ins, web servers etc. A Cloud IDE makes this simpler, just point your browser at a URL and everything just works: testing web servers run in the cloud, deployment is simple etc.</li>
 	<li>Real-time collaboration with team members: remember Google Wave? Imagine collaborating on a single code base with many developers. Great for pair programming.</li>
</ul>
An IDE implemented in Javascript is now possible because Javascript speeds are rapidly improving. If you try out <a href="http://c9.io/">Cloud9</a> right now you’ll see it is very snappy already. Another often heard criticism is that you cannot use web apps when offline. Cloud9 will soon feature <a href="http://googlecode.blogspot.com/2011/05/working-offline-with-cloud9-on-google.html">offline support</a> allowing you to work, even without an Internet connection.

<strong>Why me?</strong> I have been working for the past 4 years on code analysis tools and compilers. I implemented <a href="http://www.mobl-lang.org/">a language from scratch</a>, covering both the compiler side, as well as the IDE side (error checking, code completion etc.). The group that I’m doing my PhD in has a lot of experience with developing such tools, and I will be leveraging much of that knowledge to build a language infrastructure for Cloud 9, enabling others, as well as Ajax.org itself, to easily build great language support for any programming language, including features like inline error highlighting, code analysis, code outlining, code completion and refactoring. Recently a lot of my work has been in Javascript, so I know the language pretty well — which is useful, because Cloud9 is almost 100% built on Javascript, both on the client and on the server (they use <a href="http://nodejs.org/">node.js</a>).

Initially, the focus will be on dynamic languages, starting with Javascript, but rapidly adding other languages as well — hopefully resulting in an infrastructure that anybody can use to build Cloud9 support for their language of choice. I have done some preliminary work on this with <a href="https://github.com/zefhemel/treehugger">treehugger.js</a>, a language processing library written in Javascript. Treehugger.js intends to be the jQuery of AST transformations, borrowing a lot of ideas from <a href="http://www.strategoxt.org/">Stratego/XT</a>and the <a href="http://www.program-transformation.org/Tools/ATermLibrary">ATerm</a> library (both of which I have been using for the past years, and represent the state of the art in program transformation and analysis tools). I’d like to look into other options as well, such as attribute grammars — anything to simplify language analysis, helping the developer to do their job more efficiently.

There are some Javascript analysis tools already (including <a href="http://zeonjs.com/">Zeon.js</a>, <a href="http://doctorjs.org/">DoctorJS</a>, <a href="https://github.com/olov/jsshaper">JSShaper</a> and of course <a href="http://www.jslint.com/">JSLint</a>, the latter already being integrated in Cloud9). We have to see if we can integrate, collaborate or borrow ideas from these tools for Cloud9.

<strong>What about <a href="http://www.mobl-lang.org/">mobl</a>?</strong> Ajax.org is interested in mobl. We have yet to see what role it will play in the company as well as in Cloud9. There are several options there. All I can say is: don’t worry, mobl is not dead :)

<strong>Weren’t you moving to Poland?</strong> Indeed I am! I will be working on site in Amsterdam for the first few weeks and then move to Poland (<a href="http://maps.google.nl/maps?f=q&amp;source=s_q&amp;hl=nl&amp;geocode=&amp;q=poznan&amp;aq=&amp;sll=51.929818,4.367893&amp;sspn=0.012967,0.02459&amp;ie=UTF8&amp;hq=&amp;hnear=Pozna%C5%84,+Powiat+Pozna%C5%84ski,+Groot-Polen,+Polen&amp;t=h&amp;z=11">Poznań</a> to be exact) and work remotely. Ajax.org has more employees distributed around the world and this will become even more the case in the future. This shouldn’t be a problem, as they are developing a product to make this easier after all.

Anyway. This is still a couple of months ahead. First I have a PhD thesis to finish up.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>156</wp:post_id>
		<wp:post_date>2011-05-26 12:58:38</wp:post_date>
		<wp:post_date_gmt>2011-05-26 10:58:38</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-phd-plans-cloud-9-ide</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="cloud9ide"><![CDATA[Cloud9ide]]></category>
		<category domain="post_tag" nicename="future"><![CDATA[Future]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="javascript"><![CDATA[JavaScript]]></category>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[43757356860]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Bye Bye File System</title>
		<link>http://zef.me/2011/06/19/bye-bye-file-system/</link>
		<pubDate>Sun, 19 Jun 2011 15:36:04 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2011/06/19/bye-bye-file-system/</guid>
		<description></description>
		<content:encoded><![CDATA[I don’t want to deal with files and directories anymore.

A few weeks ago I bought <a href="http://www.informationarchitects.jp/en/">IA Writer</a> for Mac (thanks <a href="https://twitter.com/evilhackerdude">Stephan</a>!) — the most basic text editor one could imagine. Its goal is to facilitate distraction-free writing. Before being turned into a Mac app, it was a successful application on the iPad.

As you are likely aware, iOS apps don’t expose file systems. When you open an app like IA Writer you can immediately start typing, either in a previously created document or a new one. As a user you don’t have to deal with directories or file names, meaning you don’t have to make two choices:
<ol>
 	<li>What am I going to call my document?</li>
 	<li>Where am I going to put it?</li>
</ol>
You may think it’s silly, but those two choices seem to considerably reduce my “barrier to entry” when it comes to creating a new document. When I want to create a new document I don’t care what it’s called or where it’s stored, I just want to enter content.

As it turns out, IA Writer <em>for Mac</em> does not mirror this paradigm. I can start typing immediately, but it doesn’t save content automatically and to save it… you guessed it: you have to choose a file name and location to store it. I have found this really reduced my pleasure of using IA writer — it’s not purely about content anymore, I also have to worry about keeping things tidy. Is this file name descriptive enough? Can I really store this in my Documents directory, won’t that pollute it? Stuff I really don’t want to be bothered anymore. I’ve been spoiled. The same thing goes for other applications too: Keynote, Eclipse, graphic editors. The file system is a pain.

It’s not just mobile where the file system has disappeared. The web has largely got rid of it. Google Docs don’t have file names or directory names. Neither do Gmail or calendar. Files and directories are a major distraction.

As far as I’m concerned, the file system is dead. If I’m looking for something, I’ll open an app and search for it. Get those directories and files out of my face.

(This was written in a unsaved IA Writer file.)]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>214</wp:post_id>
		<wp:post_date>2011-06-19 17:36:04</wp:post_date>
		<wp:post_date_gmt>2011-06-19 15:36:04</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>bye-bye-file-system</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="because-i-care"><![CDATA[Because I Care]]></category>
		<category domain="post_tag" nicename="file-system"><![CDATA[File System]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="ia-writer"><![CDATA[Ia Writer]]></category>
		<category domain="post_tag" nicename="ios"><![CDATA[iOS]]></category>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[43757318227]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Changing the World, One Paper at a Time</title>
		<link>http://zef.me/2011/03/17/changing-the-world-one-paper-at-a-time/</link>
		<pubDate>Thu, 17 Mar 2011 12:48:37 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2011/03/17/changing-the-world-one-paper-at-a-time/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p><a href="http://en.wikipedia.org/wiki/Software_engineering" target="_blank">Software Engineering</a> is an important field. Millions and millions are spent every year on developing software even though, frankly, we suck at it: Software is delivered too late. Software has bugs. Software is completely incomprehensible to its users.</p>
<p>So, companies and governments around the world invest in software engineering research. Professors and PhD students are hired to investigate the problems and come up with solutions. The solutions are written up in academic papers and published to academic conferences. Academic conferences are mostly attended by other academics, listening to each other, collaborating, sharing ideas.</p>
<p>So much for the theory.</p>
<p>I myself am part of this system. I’m a PhD student, 3.5 years in. I <a href="http://researchr.org/profile/zefhemel/publications/published" target="_blank">have published papers</a>, and I have attended conferences. When I submit a paper to a conference about 3–4 people peer review it and, ideally, accept it. It’s then published to conference proceedings, available in book-form, as well as online, typically behind a pay wall (downloading one of my papers individually costs around $10). Therefore, my paper readership is in practice mostly limited to other academics, whose universities pay big bucks to get access to conference proceedings.</p>
<figure>

<img data-width="500" data-height="334" src="https://cdn-images-1.medium.com/max/800/0*gKHCA8XZ85TYKA-Y.jpg">
</figure><p>When publishing to a conference, you also get to go to go and talk publicly about your paper for about half an hour. There will likely be a few dozen people in the room, half of which are typing away on their laptops.</p>
<p>The thing is, <a href="http://swerl.tudelft.nl/" target="_blank">in our group</a>, a lot of us build tools. The target audience of those tools, ideally, is not the academic world, it’s the software engineering world — not people <em>talking</em> or <em>researching</em> it, but the people<em>doing</em> it. That is, while we are writing papers for academics, we don’t really reach our target audience directly. Sure, indirectly, when your ideas are good, they may reach the mainstream one day. But that will likely be a matter of years.</p>
<p>I’m doing work in the programming language space — how many languages you use today came from academia? A few (a recent one is Scala), but most were developed in industry.</p>
<p>Why?</p>
<p>As it turns out building tools that are robust and reliable take a lot of <em>engineering work</em>. Research is only a small part of it, and that’s a problem because you cannot publish engineering work, you’re an academic, you publish research. All the time you spend engineering on your tools, you’re not spending researching and writing papers. Published papers are currency. I must add here that <a href="http://swerl.tudelft.nl/bin/view/Main/WebHome" target="_blank">in our group</a> they’re really good about these things, we get a lot of time to do engineering without a professor breathing in our neck yelling “publish, publish!” We are encouraged to build real, useable tools. Still, intrinsic in the system is that for an important part success is measured by publication count. My PhD thesis is to be filled with published papers.</p>
<p>What’s the result? A bunch of tools are out there that, even if you wanted to, you cannot even download, or if you can, don’t compile, and if they do, are not documented. Abandoned after the paper was published.</p>
<p>But I digress.</p>
<p>Beside publishing papers, I have a <a href="http://zef.me/" target="_blank">blog</a>. Over the past years I published a few blog posts that were related to my work. Some of them ended up on the frontpages of <a href="http://programming.reddit.com/" target="_blank">programming reddit</a> and <a href="http://news.ycombinator.com/" target="_blank">hacker news</a> and many of them were read more times in one day than all my papers together will likely be read over my life time. And the readers are programmers — exactly my target audience. Sure, some of these readers called me names — but I like to think I planted some seeds here and there. I believe that my blogging has done more in terms of “changing the world” than any of my papers (so far, at least).</p>
<p>I’ll give three examples.</p>
<h3>1</h3>
<p>A year and a half ago I published <a href="http://zef.me/2308/when-rails-fails" target="_blank">When Rails Fails</a>, which was a small part of the related work research I did for <a href="http://swerl.tudelft.nl/twiki/pub/Main/TechnicalReports/TUD-SERG-2010-034.pdf" target="_blank">this paper</a> (have you read it?). My main message was: Ruby on Rails is not very forgiving when you make mistakes, you often get horrible error messages at runtime. Sure, I got half the Rails community taking a dump on my porch, but the blog article raised an issue: you should’t have to put up with this, the bar must be raised. Some people picked it up and were discussing solutions. Not sure if this changed anything, but it’s a start.</p>
<h3>2</h3>
<p>A year ago I published <a href="http://zef.me/2774/persistence-js-an-asynchronous-javascript-orm-for-html5gears" target="_blank">persistence.js: An Asynchronous Javascript ORM for HTML5/Gears</a>, a post about a little Javascript library that I needed for what eventually would become <a href="http://www.mobl-lang.org/" target="_blank">mobl</a>, but did not yet exist.<a href="http://www.persistencejs.org/" target="_blank">persistence.js</a> is more of an engineering project than a research project. There were some new-ish ideas, but basically it was just implementing an Object-Relational Mapper in Javascript. Nothing to write a paper about. Although persistence.js didn’t make a splash entrance, slowly but steadily a community grew around it, and today persistence.js it being maintained by about a dozen contributors and it expanded from the browser to the server, where Javascript is rapidly taking off with node.js. Recently I got a thankful e-mail from one the guys behind <a href="https://www.readability.com/" target="_blank">Readability</a> who use persistence.js in their mobile application. No paper, but impact on the industry? A little, at least.</p>
<h3>3</h3>
<p>Lately, we have been struggling with <a href="http://www.mobl-lang.org/" target="_blank">mobl</a>, the language for mobile development that launched this January. Interest in mobl is been pretty incredible since I built a reasonable website, started blogging about it, and wrote an <a href="http://www.infoq.com/articles/Mobl" target="_blank">InfoQ article</a>. And thus I spent the past few months mostly fixing bugs, adding features and providing support the growing community of users. I gave a few talks about mobl, both in an academic setting and in industry and everywhere the feedback has been overwhelmingly positive. People are impressed with this stuff. Yet, the paper we wrote about mobl and submitted to a big web-related academic conference got rejected. “Where is the research contribution here?” they asked. Mobl is a nice mashup of programming language ideas, yet none of them are truly new. <em>You</em> may not have seen them all before, but that’s likely because they were published in academic papers, and who reads those during breakfast? Not me. The trick, now, is to somehow package the mobl story in such a way that our future reviewers will see it as enough of a research contribution to publish it. We’ll see what happens there.</p>
<p>Yet, I believe, even if mobl for some reason would not be the next big thing (can you imagine? ;)), our real audience will have seen it and thought “that one thing there, that is a really cool feature”. They will look for that feature in future languages and frameworks, because they know it exists — the bar has been raised.</p>
<p>Now that I mention it. If I’m being extremely cynical, for an academic knowing that “that one language had that cool feature” may be a reason <em>not</em> to implement it, because it’s not novel, it’s not a research contribution. But maybe I’m stretching it a bit.</p>
<h3>So?</h3>
<p>“What’s your point, mate? Set fire to the whole institution they call ‘academic research’?”</p>
<p>Meh. Let’s not do that just yet. I do think, but this depends on the kind of research that you do, that academics should talk to their <em>real</em> audience more. Don’t only submit papers to academic conferences, but industrial conferences as well. Blog. Create screencasts. Somehow negotiate time to build a real, usable, stable tool with a website that uses at least one feature from HTML 4.</p>
<p>And to those who give out research grants: expect more than academic papers, expect usable products and thePR that goes with it.</p>
<p>There’s so much interesting work happening in academia and the people that it affects simply don’t get to see it. It’s a shame.</p>
<p>We can do better than this!</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>225</wp:post_id>
		<wp:post_date>2011-03-17 13:48:37</wp:post_date>
		<wp:post_date_gmt>2011-03-17 12:48:37</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>changing-the-world-one-paper-at-a-time</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="best-of"><![CDATA[Best Of]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Web vs. Native On Mobile: The Never Ending Struggle</title>
		<link>http://zef.me/2011/06/10/web-vs-native-on-mobile-the-never-ending-struggle/</link>
		<pubDate>Fri, 10 Jun 2011 10:35:49 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2011/06/10/web-vs-native-on-mobile-the-never-ending-struggle/</guid>
		<description></description>
		<content:encoded><![CDATA[It seems to be an everlasting battle: what’s “better”: developing mobile <em>native</em>applications or developing mobile <em>web</em> applications? Sadly, the answer is boring: it depends.

What matters to you as the developer?

<strong>Multiple-platform support.</strong> Web applications are a cheap way to go. Develop your application once, run on many platforms immediately. You can reuse the same code base on multiple platforms. When going the native route you will likely have to entirely redevelop (and maintain) your application on every platform.

<strong>Quick iteration.</strong> Iteration can happen quickly on the web: simply deploy a new version and all users get it instantly. Deployment of native applications requires an explicit update action from the user, plus a (possibly lengthy) approval process on some stores (e.g. Apple’s AppStore).

<strong>Integration with the OS.</strong> Web applications can do less than native applications. Need access to the camera, file system, address book, notifications (or even extend those features)? That’s a no-go for pure web applications (at least, for now). However, you can wrap your web app using <a href="http://www.phonegap.com/">PhoneGap</a> to get access to many of those APIs as well, the drawback is that you lose the advantage of being able to iterate quickly, because you have to deploy your applications through app stores.

What matters to your users?

<strong>Performance.</strong> Web applications are <em>typically</em> slower than native applications. Of course, it is possible to write extremely slow native applications, but assuming good development practices: a native application will always outperform a web app. That’s the way it is, that’s the way it will be. However, on the long term, the performance of native and web apps will converge. The question is: what are your performance requirements? Is a web application <em>fast enough</em>?

<strong>Native look and feel.</strong> By default, a web application is not going to have a native look-and-feel. You can get quite far in mimicking a native look and feel (e.g. by using similar colors, similar transitions), yet — very likely — your users are going to be able to notice the difference. I have yet to see a web app where I couldn’t notice it was not native. The question is: does it matter? How important is it that the user notices a difference? Take the <a href="http://gmail.com/">Gmail</a> mobile web application, for instance. It doesn’t look native, but it looks clean and it works well. Does it bother me it’s not a native application? Not enough not to use it. I prefer it over Apple’s native mail application because <em>I</em> choose functionality over looks.

<strong>User experience.</strong> The way the user interfaces are laid-out and operated differ slightly from platform to platform. Although iPhone and Android appear to be extremely similar, there are subtle differences in how the user interfaces are organized and operated. Android makes use of the touch screen, as well as three (hardware) buttons: back, menu and search. No such buttons exist on iOS. The back button is typically an on-screen button, but the idea of a pop-up menu is inherently non-iOS-esque. For web applications this is a problem. First of all, a web app cannot take advantage of additional hardware buttons (other than the back button), but beyond that, you will likely not want to redevelop the way your UI is laid-out for every platform. Thus, you have to come up with some sort of greatest-common denominator: pick the user interface elements that all platforms support and use those exclusively. Is that a problem? Depends who you ask.

So…

Even though I develop <a href="http://www.mobl-lang.org/">mobl</a> (a language for mobile web application development) I’ll be honest. As <em>user</em>, if I could choose between a web app and a native app, having the same feature set, I would go for the native one. However, from a <em>developer’s</em> perspective it’s a much more difficult choice. It completely depends on target audience (what do they care about, what devices do they use?) and specific requirements of the application (do I care about performance, do I need OS integration?).

And I haven’t even touched on development models and tools yet.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>234</wp:post_id>
		<wp:post_date>2011-06-10 12:35:49</wp:post_date>
		<wp:post_date_gmt>2011-06-10 10:35:49</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>web-vs-native-on-mobile-the-never-ending-struggle</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="html5"><![CDATA[Html5]]></category>
		<category domain="post_tag" nicename="mobile"><![CDATA[Mobile]]></category>
		<category domain="post_tag" nicename="mobl"><![CDATA[Mobl]]></category>
		<category domain="post_tag" nicename="native"><![CDATA[Native]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[43757342371]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Three Routes to Spaghetti-Free Javascript</title>
		<link>http://zef.me/2011/03/02/three-routes-to-spaghetti-free-javascript/</link>
		<pubDate>Wed, 02 Mar 2011 12:20:16 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2011/03/02/three-routes-to-spaghetti-free-javascript/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>_(If you are familiar with the problems of moving from synchronous to asynchronous programming, feel free to move to the next section.)_</p>
<p>**Update:** A lot of people misunderstood the main issue: [here is another shot at explaining it better.](http://zef.me/3753/planning-ahead-the-async-javascript-problem)</p>
<p>Let’s build a script that determines the titles of a set of URLs. Let’s start simple, we create a function that takes a URL, and returns the title:</p>
<p>var reg = /(.+)&lt;/title&gt;/mi;&lt;/p&gt;&lt;p&gt; function getTitle(url) {&lt;br&gt; var body = “&lt;html&gt;&lt;title&gt;My title”;<br> var match = reg.exec(body);<br> return match[1];<br> }</p>
<p>In this first prototype we ignore the fetching of the webpage, for now and assume some dummy HTML — for testing purposes. We can now call the function:</p>
<p>getTitle(“http://whatever.com");</p>
<p>and we’ll get back:</p>
<p>“My title”</p>
<p>So far, so good. Now let’s iterate over an array of URLs and get each of their titles:</p>
<p>var urls = [“http://zef.me", “http://google.com",<br> “http://yahoo.com"];<br> var titles = [];<br> for(var i = 0; i &lt; urls.length; i++) {<br> titles.push(getTitle(urls[i]));<br> }<br> console.log(titles);</p>
<p>And the array of resulting titles (all `”My title”`) is printed.</p>
<p>Next, to put in the actual URL fetching part into `getTitle`, we need to make an AJAX call (let’s just ignore the single-source restriction here):</p>
<p>function getTitle(url) {<br> var xmlHttp = new XMLHttpRequest();<br> xmlHttp.open(“GET”, url, true);<br> xmlHttp.send();<br> xmlHttp.onreadystatechange = function() {<br> if(xmlHttp.readyState==4 &amp;&amp; xmlHttp.status==200) {<br> // Now we get the body from the responseText:<br> var body = xmlHttp.responseText;<br> var match = reg.exec(body);<br> return match[1];<br> }<br> };<br> }</p>
<p>We open an `XMLHttpRequest` and then attach an event listener on the `onreadystatechange` event. When the ready-state changes, we check if it’s now set to `4` (done), and if so, we take the body text, apply our regular expression and return the match.</p>
<p>Or do we?</p>
<p>Note that `return` statement. Where does it return to? Well, it belongs to the event handler function — not the `getTitle` function, so this doesn’t work. The XMLHttpRequest is performed _asynchronously_. The request is set up, an event handler is attached and then the `getTitle` function returns. Then, later at some point, the `onreadystatechange` event is triggered, and the regular expression applied.</p>
<p>So, how do we fix this? Well, we can change our function a little bit:</p>
<p>function getTitle(url, callback) {<br> var xmlHttp = new XMLHttpRequest();<br> xmlHttp.open(“GET”, uri, true);<br> xmlHttp.send();<br> xmlHttp.onreadystatechange = function() {<br> if(xmlHttp.readyState==4 &amp;&amp; xmlHttp.status==200) {<br> var body = xmlHttp.responseText;<br> var match = reg.exec(body);<br> callback(match[1]);<br> }<br> };<br> }</p>
<p>Now, instead of `return`ing the value, we pass the result to a _callback function_ (the function’s new second argument). When we want to call the function, we have to do it as follows:</p>
<p>getTitle(‘http://bla.com', function(title) {<br> console.log(“Title: “ + title);<br> });</p>
<p>That’s annoying, but fair enough.</p>
<p>I suppose we also have to adapt our loop now, too. `getTitle` no longer returns a useful value, so we have to pass a callback function to it. Hmm, how do we do this?</p>
<p>var urls = [“http://zef.me", “http://google.com",<br> “http://yahoo.com"];<br> var titles = [];<br> for(var i = 0; i &lt; urls.length; i++) {<br> getTitle(urls[i], function(title) {<br> titles.push(title);<br> });<br> }<br> console.log(titles);</p>
<p>That looks about right. Except, that when running this code the last `console.log` will be executed immediately showing an empty array — because the `getTitle` calls have not finished executing yet. Asynchronous code executes in a different order than the code may suggest.</p>
<p>Shame.</p>
<p>We now have to think — what do we prefer? Do we want to have all the URLs fetched simultaneously, or do they have to be fetched in sequence? Implementing it in sequence is more difficult, so let’s do it in parallel. What we’ll do is add a counter!</p>
<p>var urls = [“http://zef.me", “http://google.com",<br> “http://yahoo.com"];<br> var titles = [];<br> var numFinished = 0;<br> for(var i = 0; i &lt; urls.length; i++) {<br> getTitle(urls[i], function(title) {<br> titles.push(title);<br> numFinished++;<br> if(numFinished === urls.length) {<br> // All done!<br> console.log(titles);<br> }<br> });<br> }</p>
<p>As we get back the `getTitle` results we increase the `numFinished` counter, and when that counter has reached the total number of URLs, we’re done — and print the array of titles.</p>
<p>Ugh. Let’s not even look at the code to [fetch these URLs sequentially](http://zef.me/3420/async-foreach-in-javascript).</p>
<p>Centuries of civilization and decades of programming research — and we’re back to this style of spaghetti programming?</p>
<p>There must be ways around this. Indeed, there are — let’s look at three of them.</p>
<p>Route #1: [streamline.js](https://github.com/Sage/streamlinejs)<br> — — — — — — — — — — — — — — —</p>
<p>[Streamline.js](https://github.com/Sage/streamlinejs) is a simple compiler, implemented in Javascript that enables you to write your code in a synchronous style. The nice thing about Streamline.js is that it operates on regular Javascript and does not add any new keywords — you can keep using your favorite editor and other tools. The only thing streamline.js does, is give the `_` identifier new meaning. Before I demonstrate it, let’s refactor our code slightly. We’ll create a generic `fetchHTML` function:</p>
<p>function fetchHTML(url, callback) {<br> var xmlHttp = new XMLHttpRequest();<br> xmlHttp.open(“GET”, url, true);<br> xmlHttp.send();<br> xmlHttp.onreadystatechange = function() {<br> if(xmlHttp.readyState==4 &amp;&amp; xmlHttp.status==200) {<br> callback(xmlHttp.responseText);<br> }<br> };<br> }</p>
<p>Now, streamline.js allows us to write our `getTitle` function as follows:</p>
<p>function getTitle(url, _) {<br> var body = fetchHTML(url, _);<br> var match = reg.exec(body);<br> return match[1];<br> }</p>
<p>You’ll notice the `_` argument there, which represents the callback function. It tells streamline.js that this is an asynchronous function. The next thing you’ll notice is the call to `fetchHTML`, which, although being an asynchronous function, is called as if it’s a regular synchronous function. The difference? The last argument: `_`.</p>
<p>Internally, streamline.js transforms this code to something equivalent to this:</p>
<p>function getTitle(url, _) {<br> fetchHTML(url, function(body) {<br> var match = reg.exec(body);<br> return _(match[1]);<br> });<br> }</p>
<p>This transformation is called the [continuation-passing style](http://en.wikipedia.org/wiki/Continuation-passing_style) transformation. We can now keep our loop simple as well:</p>
<p>var urls = [“http://zef.me", “http://google.com",<br> “http://yahoo.com"];<br> var titles = [];<br> for(var i = 0; i &lt; urls.length; i++) {<br> titles.push(getTitle(urls[i], _));<br> }<br> console.log(titles);</p>
<p>Basically the same as our original version, the only difference: an additional `_` argument to `getTitle`.</p>
<p>Not bad huh? [Streamline.js](https://github.com/Sage/streamlinejs) also has some nice functions to enable a parallel version of this code.</p>
<p>**Name:** [streamline.js](https://github.com/Sage/streamlinejs), a Javascript preprocessor (integrates nicely with node.js too) <br>**License:** MIT</p>
<p>Route #2: [mobl](http://www.mobl-lang.org)<br> — — — — — — — — — — —</p>
<p>My own project, [mobl](http://www.mobl-lang.org) is a language to rapidly develop mobile web applications. Although it’s not Javascript, the syntax of it scripting language is similar. Since mobl is typed, it is easy for the compiler to infer whether a function is asynchronous or not, which leads to code that is slightly more clean than streamline.js:</p>
<p>function getTitle(url : String) : String {<br> var body = fetchHTML(url);<br> var match = reg.exec(body);<br> return match.get(1);<br> }</p>
<p>and the loop:</p>
<p>var urls = [“http://zef.me", “http://google.com",<br> “http://yahoo.com"];<br> var titles = Array();<br> foreach(url in urls) {<br> titles.push(getTitle(url));<br> }<br> log(titles);</p>
<p>Like streamline.js, a continuation-passing style is performed by the compiler to produce asynchronous Javascript code.</p>
<p>[Mobl](http://www.mobl-lang.org) is aimed at the mobile web domain, it a whole new language to learn and doesn’t currently support concurrent execution of asynchronous calls. Nevertheless, unlike streamline.js there’s no special `_` variables to pass around.</p>
<p>**Name:** [mobl](http://www.mobl-lang.org), new language, browser only. <br>**License:** MIT</p>
<p>Route #3: [StratifiedJS](http://onilabs.com/stratifiedjs)<br> — — — — — — — — — — — — — — —</p>
<p>The most powerful option is [StratifiedJS](http://onilabs.com/stratifiedjs). It extends the Javascript language with various structured concurrency features using a few new language constructs such as `waitfor`, `and`, `or` and `retract`. To fully understand its expressive power, it’s a good idea to have a look at these [excellent interactive OSCON slides](http://onilabs.com/presentations/OSCON2010).</p>
<p>Here’s the code for StratifiedJS:</p>
<p>function getTitle(url) {<br> var body = fetchHTML(url);<br> var match = reg.exec(body);<br> return match[1];<br> }</p>
<p>and the loop:</p>
<p>var urls = [“http://zef.me", “http://google.com",<br> “http://yahoo.com"];<br> var titles = [];<br> for(var i = 0; i &lt; urls.length; i++) {<br> titles.push(getTitle(urls[i]));<br> }<br> console.log(titles);</p>
<p>As you can see, this code is basically exactly how you’d want to write the code. Compared to our original version, the only thing that changed was adding the `fetchHTML` call — as it should be.</p>
<p>With some effort I was able to capture the Javascript code that is this code fragment is translated to. Here’s the code generated for the `getTitle` function:</p>
<p>function getTitle(url) {<br> var body, match;<br> return __oni_rt.exseq(arguments, this, ‘whatever.js’,<br> [1, __oni_rt.Scall(3, function (_oniX) {<br> return body = _oniX;<br> }, __oni_rt.Nb(function (arguments) {<br> return fetchHTML(url)<br> }, 2)), __oni_rt.Scall(4, function (_oniX) {<br> return match = _oniX;<br> }, __oni_rt.Nb(function (arguments) {<br> return reg.exec(body)<br> }, 3)), __oni_rt.Nb(function (arguments) {<br> return __oni_rt.CFE(‘r’, match[1]);<br> }, 5)])<br> }<br> <br>and the loop:</p>
<p>var urls, titles, i;<br> __oni_rt.exseq(this.arguments, this, ‘whatever.js’,<br> [0, __oni_rt.Nb(function (arguments) {<br> urls = [“http://zef.me”, “http://google.com",<br> “http://yahoo.com"];<br> titles = [];<br> }, 4), __oni_rt.Seq(0, __oni_rt.Nb(function (arguments) {<br> i = 0;<br> }, 8), __oni_rt.Loop(0, __oni_rt.Nb(function (arguments) {<br> return i &lt; urls.length<br> }, 5), __oni_rt.Nb(function (arguments) {<br> return i++<br> }, 5), __oni_rt.Fcall(1, 6, __oni_rt.Scall(6, function(l){<br> return [l, ‘push’];<br> }, __oni_rt.Nb(function (arguments) {<br> return titles<br> }, 6)), __oni_rt.Nb(function (arguments) {<br> return getTitle(urls[i])<br> }, 6)))), __oni_rt.Nb(function (arguments) {<br> return console.log(titles)<br> }, 8)])<br> <br>What worries me somewhat about this generated code is that it seems rather heavy on the number of functions that’s being generated. Basically every expression is turned into a function passed to another function in the StratifiedJS runtime. This seems rather expensive. I haven’t done any performance benchmarking on this — so maybe it’s not as bad as I think.</p>
<p>Of the three, StratifiedJS is definitely the most flexible and allows you to write the cleanest code. Drawback is that it extends the Javascript language (unlike streamline.js) which could break your current tool chain. In addition, produced code is likely to be slower than the other two solutions.</p>
<p>**Name:** [StratifiedJS](http://onilabs.com/stratifiedjs), extension of Javascript. <br>**License:** MIT (although source code is only available in a minified version at the moment)</p>
<p>Conclusion<br> — — — — —</p>
<p>So there you go. Three ways to write clean synchronous code and produce efficient asynchronous Javascript code. The fact is that picking any of these requires a compiler of some kind to be added to your tool chain (although StratifiedJS performs this compilation at run-time), which may or may not be a problem.</p>
<p>A drawback of code generation in any shape or form is debugging. If something goes wrong, the code you’ll be debugging is generated Javascript code. StratifiedJS attempts to include original line numbers when exceptions occur, which helps. A [fork of streamline.js](http://groups.google.com/group/streamlinejs/browse_thread/thread/4da4323f0c2e4a86) attempts to maintain the line numbers in generated code.</p>
<p>In the end it’s all a trade off, a different route would be to use a library like [async.js](https://github.com/caolan/async) that, while not “fixing the language”, gives you an API that enables you to at least write asynchronous code in a more readable manner.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>237</wp:post_id>
		<wp:post_date>2011-03-02 13:20:16</wp:post_date>
		<wp:post_date_gmt>2011-03-02 12:20:16</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>three-routes-to-spaghetti-free-javascript</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="javascript"><![CDATA[JavaScript]]></category>
		<category domain="post_tag" nicename="mobl"><![CDATA[Mobl]]></category>
		<category domain="post_tag" nicename="stratifiedjs"><![CDATA[Stratifiedjs]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Microsoft to sponsor Windows version of node.js</title>
		<link>http://zef.me/2011/06/24/microsoft-to-sponsor-windows-version-of-node-js/</link>
		<pubDate>Fri, 24 Jun 2011 10:44:24 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2011/06/24/microsoft-to-sponsor-windows-version-of-node-js/</guid>
		<description></description>
		<content:encoded><![CDATA[From the <a href="http://blog.nodejs.org/2011/06/23/porting-node-to-windows-with-microsoft%E2%80%99s-help/">node.js blog</a>:
<blockquote>I’m pleased to announce that Microsoft is partnering with Joyent in formally contributing resources towards porting Node to Windows. As you may have heard in a talk we gave earlier this year, we have started the undertaking of a native port to Windows — targeting the high-performance IOCP API.

This requires a rather large modification of the core structure, and we’re very happy to have official guidance and engineering resources from Microsoft. Rackspace is also contributing Bert Belder’s time to this undertaking.

The result will be an official binary node.exe releases on nodejs.org, which will work on Windows Azure and other Windows versions as far back as Server 2003.</blockquote>
<a href="http://nodejs.org/">node.js</a> has become the de-facto server Javascript implementation. It was already available on most Unix-based operating systems and with the introduction of a Windows port, it becomes a true cross-platform tool.

It could be time to consider node.js for localhost server applications: applications that need a client-side server component, but do not rely on a desktop native UI. Examples could be peer-to-peer style applications, or synchronization software like Dropbox. A localhost web front-end could be used to communicate with the local node.js and you’d get the same code sharing benefits of Javascript.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>301</wp:post_id>
		<wp:post_date>2011-06-24 12:44:24</wp:post_date>
		<wp:post_date_gmt>2011-06-24 10:44:24</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>microsoft-to-sponsor-windows-version-of-node-js</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="javascript"><![CDATA[JavaScript]]></category>
		<category domain="post_tag" nicename="windows"><![CDATA[Windows]]></category>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[43876608862]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Usable</title>
		<link>http://zef.me/2011/02/07/usable/</link>
		<pubDate>Mon, 07 Feb 2011 14:32:58 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2011/02/07/usable/</guid>
		<description></description>
		<content:encoded><![CDATA[If you have to implement a feature and you have two ways to do it: the easy way or the hard way, which one would you pick?

As a developer, when you look at your product you see its architecture. You see how all the parts fit together. Likely, you were involved in coming up with this architecture. You’re a believer.

So, if software is beautiful from the inside, is it also beautiful from the outside?

If a user asks you for a feature that does not fit your current software architecture — does your software architecture need adjusting, or does the user need adjusting?

If you walk into a plane, would you prefer to walk left, into the cockpit where you have full control over everything, have access to all the sliders and sticks — or right, where all you can do is push a button to call for a stewardess to bring you coffee?

What does your wife prefer: flexibility or simplicity?

If you give a non-technical person the choice between an Android or iPhone — which one would they pick?

Does your mother know how to use a VCR or DVD recorder?

How about a <a href="http://www.google.com/tv/">Google TV</a>, an <a href="http://www.apple.com/appletv/">Apple TV</a>?

<a href="http://www.amazon.com/Inmates-Are-Running-Asylum/dp/0672316498">Read the inmates are running the asylum</a>. I bet it will change your view on the importance of user interaction design forever.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>878</wp:post_id>
		<wp:post_date>2011-02-07 15:32:58</wp:post_date>
		<wp:post_date_gmt>2011-02-07 14:32:58</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>usable</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[43876747526]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Integer.getInteger()</title>
		<link>http://zef.me/2011/02/08/integer-getinteger/</link>
		<pubDate>Tue, 08 Feb 2011 12:16:27 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2011/02/08/integer-getinteger/</guid>
		<description></description>
		<content:encoded><![CDATA[Who came up <a href="http://konigsberg.blogspot.com/2008/04/integergetinteger-are-you-kidding-me.html">with this one</a>, seriously?
<blockquote><a href="http://download.oracle.com/javase/1.5.0/docs/api/java/lang/Integer.html#getInteger%28java.lang.String%29">getInteger</a>

public static Integer getInteger(String nm) Determines the integer value of the system property with the specified name. The first argument is treated as the name of a system property. System properties are accessible through the <code>System.getProperty(java.lang.String)</code> method. The string value of this property is then interpreted as an integer value and an Integer object representing this value is returned. Details of possible numeric formats can be found with the definition of getProperty.

If there is no property with the specified name, if the specified name is empty or null, or if the property does not have the correct numeric format, then null is returned.</blockquote>
Why the hell would there be a <code>getInteger()</code> method on <code>Integer</code>, when it is really a wrapper around <code>System.getProperty()</code>? Oh, and there’s a <a href="http://download.oracle.com/javase/1.5.0/docs/api/java/lang/Boolean.html#getBoolean(java.lang.String">Boolean.getBoolean()</a>).

And of course, don’t confuse those with <a href="http://download.oracle.com/javase/1.5.0/docs/api/java/lang/Integer.html#parseInt(java.lang.String">Integer.parseInt()</a>) and <a href="http://download.oracle.com/javase/1.5.0/docs/api/java/lang/Boolean.html#parseBoolean(java.lang.String">Boolean.parseBoolean()</a>).

Anybody knows the rationale?]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>923</wp:post_id>
		<wp:post_date>2011-02-08 13:16:27</wp:post_date>
		<wp:post_date_gmt>2011-02-08 12:16:27</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>integer-getinteger</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="java"><![CDATA[Java]]></category>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[43876739255]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>On Language Design: Semicolons or no semicolons?</title>
		<link>http://zef.me/2011/02/11/on-language-design-semicolons-or-no-semicolons/</link>
		<pubDate>Fri, 11 Feb 2011 10:40:16 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2011/02/11/on-language-design-semicolons-or-no-semicolons/</guid>
		<description></description>
		<content:encoded><![CDATA[<em>(This is a cross-post from the <a href="http://www.mobl-lang.org/417/semi-colon/">mobl blog</a>)</em>

When should I use semicolons (<code>;</code>) and when shouldn’t I in <a href="http://www.mobl-lang.org/">mobl</a>?

It’s a common question. Here’s the reasoning behind requiring semicolons in one context and none in the other.

In mobl, semicolons signify <em>imperative execution</em>, i.e. execution from top to bottom. For instance:

var n = 8; n = n + 10; n = n * n; alert(n);

First create a variable <code>n</code>, and assign <code>8</code> to it, <em>then</em> add 10 to <code>n</code>, then multiply <code>n</code>with itself and save the result to <code>n</code>, and <em>then</em> show a pop-up dialog with the result.

A lot of mobl is not imperative but <em>declarative</em>, i.e. you don’t define a recipe of how to get from A to B, but instead you define the desired end-result and let mobl figure out how to realize it. An example of this is mobl’s user interface language:

screen root() { header(“Welcome”) group { list(t in Task.all()) { item { checkBox(t.done, label=t.name) } } } }

Ostensibly you may think these are basically just a list of imperative statements. <em>First</em> render a header, <em>then</em> a group, <em>then</em> loop over each item in <code>Task.all()</code>. However, you shouldn’t think of it this way. While this may be the execution order in an initial render, parts of the user interface may <em>react</em> to application state changes later, e.g. when new tasks are added to the <code>Task.all()</code> collection. As a result, the user interface may change a lot after the initial render. In a user interface you define <em>what</em> you want, not how to realize this vision, unlike <em>script</em> where you spell out the steps to a desired result.

To make this conceptual difference clear in the syntax, mobl uses semicolons. <em>Imperative</em> code in mobl uses semicolons, <em>declarative</em> code does not.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>926</wp:post_id>
		<wp:post_date>2011-02-11 11:40:16</wp:post_date>
		<wp:post_date_gmt>2011-02-11 10:40:16</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>on-language-design-semicolons-or-no-semicolons</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="language-design"><![CDATA[Language Design]]></category>
		<category domain="post_tag" nicename="mobl"><![CDATA[Mobl]]></category>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[43876731221]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Save Dialogs Considered Distracting</title>
		<link>http://zef.me/2011/06/22/save-dialogs-considered-distracting/</link>
		<pubDate>Wed, 22 Jun 2011 14:50:54 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2011/06/22/save-dialogs-considered-distracting/</guid>
		<description></description>
		<content:encoded><![CDATA[Only too often I’m happily typing away in some newly created document until I do what a decade of Windows usage programmed me to do (even though I have been using a Mac for about 7 years): save my document. Just in case.

Then this happens:

While I am still organizing my thoughts and just instinctively push Command-s, I am now distracted and have to make two decisions (like my life isn’t tough enough as it is):
<ol>
 	<li>What to call my document. “Untitled” is likely not descriptive enough, so I have to come up with something better.</li>
 	<li>In what directory do I want to store my document so that I will be able to find it again.</li>
</ol>
Both of which I <em>really</em> do not want to be bothered with at this point, I just want to be sure I don’t lose any data.

Surely we can do better than this. What would be a better paradigm?

Let’s look at two applications for inspiration. First: the iPhone’s Notes application. When creating and editing notes, changes are automatically saved:

Not only don’t I have to save, I also don’t (cannot) name my note. It just uses the first characters as identifier. All my notes just appear in a list:

Now, this may be nice for small collections of notes. It wouldn’t scale to a larger collections. Some sort of organization is required. One solution may be search, another may be tagging.

Consider <a href="http://docs.google.com/">Google Docs</a>. It has a similar paradigm of a long list of documents in reverse chronological order. You can find your documents through search or through the use of tags. Tagging is completely optional, however. When saving a Google Document (which is automatic), you do not need to pick a name other than “Untitled” or pick a tag to file it under. By default it just ends up in your document stream. If you like, you can get organized later.

In my opinion this is a much better paradigm than a save file dialog:
<ol>
 	<li>Save constantly;</li>
 	<li>Derive an (initial) filename automatically;</li>
 	<li>Simply create a stream of documents that can be organized and searched after the fact.</li>
</ol>
This allows the user to not be bothered with naming and organizing when all they want to do is ensure they don’t lose their data.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>929</wp:post_id>
		<wp:post_date>2011-06-22 16:50:54</wp:post_date>
		<wp:post_date_gmt>2011-06-22 14:50:54</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>save-dialogs-considered-distracting</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="opinion"><![CDATA[Opinion]]></category>
		<category domain="post_tag" nicename="paradigm"><![CDATA[Paradigm]]></category>
		<category domain="post_tag" nicename="user-interface"><![CDATA[User Interface]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[43876617567]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>InfoQ: Mobl a DSL for Mobile Web Development</title>
		<link>http://zef.me/2011/03/07/infoq-mobl-a-dsl-for-mobile-web-development/</link>
		<pubDate>Mon, 07 Mar 2011 13:32:02 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2011/03/07/infoq-mobl-a-dsl-for-mobile-web-development/</guid>
		<description></description>
		<content:encoded><![CDATA[After the <a href="http://www.infoq.com/news/2011/02/Mobl">InfoQ news article</a> about mobl, I was invited to write a full-length article there as well. Well, I did, and here it is: <a href="http://www.infoq.com/articles/Mobl">2900 words of mobl goodness</a>:
<blockquote>Application development for mobile devices such as smart phones and tablets is popular. Apple’s AppStore (for iPhone, iPod and iPad) has over 350,000 applications and Android’s marketplace is quickly catching up counting over 200,000 applications. Android and iOS are not the only two mobile platforms, however. BlackBerry is a big player in business, as is Nokia. Microsoft recently launched Windows Phone 7, and HP announced new WebOS devices. While choice is great for users, it is a nightmare for us, developers. What platform should we target with our applications?</blockquote>
<a href="http://www.infoq.com/articles/Mobl">InfoQ article</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1081</wp:post_id>
		<wp:post_date>2011-03-07 14:32:02</wp:post_date>
		<wp:post_date_gmt>2011-03-07 13:32:02</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>infoq-mobl-a-dsl-for-mobile-web-development</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="mobl"><![CDATA[Mobl]]></category>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[43876702905]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Quora is Qool</title>
		<link>http://zef.me/2011/01/09/quora-is-qool/</link>
		<pubDate>Sun, 09 Jan 2011 08:32:53 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2011/01/09/quora-is-qool/</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://www.quora.com/">Quora</a> is the new hot new thing, started by a couple of former Facebook engineers. It’s a wiki-style question and answer site, somewhat similar to the <a href="http://stackexchange.com/">StackExchange</a> sites, except not focused on a particular topic, and with some of the usual social network features. You can follow people and topics, for instance.

What kind of topics? Both broad and niche. Here’s some that <a href="http://www.quora.com/Zef-Hemel/topics">I follow</a>:
<ul>
 	<li><a href="http://www.quora.com/How-Many-Servers-Does-X-Company-Have">How many servers does X have?</a></li>
 	<li><a href="http://www.quora.com/What-Technology-Stack-Does-X-Use">What Technology Stack does X Use?</a></li>
 	<li><a href="http://www.quora.com/Programming-Languages">Programming Languages</a></li>
 	<li><a href="http://www.quora.com/Domain-Specific-Languages">Domain-Specific Languages</a></li>
 	<li><a href="http://www.quora.com/Mobile-Development">Mobile Development</a></li>
 	<li><a href="http://www.quora.com/Programming">Programming</a></li>
 	<li><a href="http://www.quora.com/Web-Application-Frameworks">Web Application Frameworks</a></li>
 	<li><a href="http://www.quora.com/Server-Side-JavaScript">Server-Side Javascript</a></li>
</ul>
As well as some interesting questions:
<ul>
 	<li><a href="http://www.quora.com/How-does-one-market-a-programming-language">How does one market a programming language?</a></li>
 	<li><a href="http://www.quora.com/What-programming-languages-is-Gmail-implemented-in">What programming language is Gmail implemented in?</a></li>
 	<li><a href="http://www.quora.com/What-are-the-main-weaknesses-of-Python-as-a-programming-language">What are the main weaknesses of Python as a programming language?</a></li>
 	<li><a href="http://www.quora.com/What-are-the-main-weaknesses-of-Ruby-as-a-programming-language">What are the main weaknesses of Ruby as a programming language?</a></li>
</ul>
etc. etc.

Technically, Quora is extremely well executed. It has excellent search for topics and questions. Real-time updates. A very well executed way of linking to topics, people and other questions. There’s also quite a few high-profile tech company people there, including many Amazon, Twitter and Facebook engineers.

I’m really liking it a lot. Asking a question is more or less anonymous, so you there’s no such as looking stupid asking a dumb question. And sharing your knowledge by answering questions is always a satisfying thing to do. <a href="http://www.quora.com/">Give it a shot!</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1104</wp:post_id>
		<wp:post_date>2011-01-09 09:32:53</wp:post_date>
		<wp:post_date_gmt>2011-01-09 08:32:53</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>quora-is-qool</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[43876765859]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Mobl Around the World</title>
		<link>http://zef.me/2011/02/23/mobl-around-the-world/</link>
		<pubDate>Wed, 23 Feb 2011 08:25:39 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2011/02/23/mobl-around-the-world/</guid>
		<description></description>
		<content:encoded><![CDATA[<ul>
 	<li>Brazil: <a href="http://www.scrollux.com.br/2011/02/mobl-uma-nova-linguagem-para-criacao-de.html">Mobl: uma nova linguagem para a criação de aplicativos móveis</a></li>
 	<li>Japan: <a href="http://www.moongift.jp/r/2011/02/20110214/">これは凄いぞ！スマートフォン向けHTML5生成プログラミング言語「mobl」</a></li>
 	<li>China: <a href="http://news.cnblogs.com/n/90829/">Mobl — — 用于创建HTML移动应用程序的新DSL</a></li>
 	<li>France: <a href="http://dev.neowebmag.com/html-css/mobl-un-langage-html5-pour-le-developpement-mobile">Mobl, un langage HTML5 pour le développement mobile</a></li>
 	<li>Germany: <a href="http://www.tagdocs.de/2011/02/22/mobl-web-applikationen-fuer-android-und-ios-entwickeln/">mobl — Web-Applikationen für Android und iOS entwickeln</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1125</wp:post_id>
		<wp:post_date>2011-02-23 09:25:39</wp:post_date>
		<wp:post_date_gmt>2011-02-23 08:25:39</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>mobl-around-the-world</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="mobl"><![CDATA[Mobl]]></category>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[43757378738]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Ars’s Duke Nukem Forever Review</title>
		<link>http://zef.me/2011/06/17/arss-duke-nukem-forever-review/</link>
		<pubDate>Fri, 17 Jun 2011 09:44:46 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2011/06/17/arss-duke-nukem-forever-review/</guid>
		<description></description>
		<content:encoded><![CDATA[I’m not a gamer. Nevertheless, like many, I have been fascinated with <a href="http://en.wikipedia.org/wiki/Duke_Nukem_Forever">Duke Nukem Forever</a> as the prototypical example of vaporware. It’s been in the works since 1996 and never seemed to be released. A few days ago, finally, it has been.

Although it looks like it would have been better if it was never released at all.

According to the <a href="http://arstechnica.com/gaming/reviews/2011/06/duke-nukem-forever-review-barely-playable-unfunny-and-rampantly-offensive.ars">Ars Technica review</a> it’s a pretty horrible game. Not just bad — but <em>bad</em>:
<blockquote>In the first few moments of Duke Nukem Forever, your character pees in a urinal and then earns an achievement for reaching into a toilet and extracting a piece of human excrement. Why does the game reward you for doing this? I have no idea. It’s not part of a joke or important to the story; the designers of the game apparently feel that you would miss out by not holding some poo in your virtual hand.</blockquote>
But infantile humor is not the worst. The game appears to contain rampantly offensive story elements.

Ars Technica:
<blockquote>Just in case you didn’t feel like the game had adequately rubbed your nose in its horrific depiction of women, Duke arrives at a point where two nude ladies promise to lose their pregnancy weight from bearing their alien children, and they plead with you to let them live. (These are the same characters who performed fellatio on you during the beginning sequences of the game.)

The only way past this section of the game is to kill both women.</blockquote>
That’s just poor, <em>poor</em> taste.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1145</wp:post_id>
		<wp:post_date>2011-06-17 11:44:46</wp:post_date>
		<wp:post_date_gmt>2011-06-17 09:44:46</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>arss-duke-nukem-forever-review</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="game"><![CDATA[Game]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[43757325380]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Are Web Apps An Insult To Users?</title>
		<link>http://zef.me/2011/06/21/are-web-apps-an-insult-to-users/</link>
		<pubDate>Tue, 21 Jun 2011 20:04:44 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2011/06/21/are-web-apps-an-insult-to-users/</guid>
		<description></description>
		<content:encoded><![CDATA[Web apps vs. native apps for mobile — this appears to be <a href="http://www.tbray.org/ongoing/When/201x/2011/06/14/Native-vs-Web">what</a> <a href="http://www.infoq.com/news/2011/06/native-vs-web">everybody</a> <a href="http://cvil.ly/2011/06/19/pretenders-why-mobile-web-apps-should-stop-trying-to-act-like-native-apps/">is talking</a> about these days.

I think native apps currently provide the best user experience, don’t you? As a user, given the choice between a web app and native app, which one would you pick? Unless you signed your life away to the web browser, it’s likely going to be the native one.

Still, reasons to develop for the web are there: portability, simpler deployment, perhaps simpler development — all <em>developer</em> reasons.

But ehm, who are we developing sofware for? Ourselves or our users?

Following that logic — aren’t web apps a statement saying to users: <a href="https://twitter.com/metapgmr/status/81314275569827840">we favor ourselves over you</a>?

On the desktop this is not really the case. Over the past decade, web apps have not become popular because of developers; they are convenient for <em>users</em> too: no need to install anything, access from any computer, no (manual) software updates, usually free, data “safely” stored in “the cloud” and easily shared with others. The fact that the user experience is a bit limited is a small price to pay.

On mobile, the story is a little bit different. Every smartphone comes with an application store of some kind from which you can easily install and update applications. Since a phone is a personal device, rarely shared with multiple people, it’s less common that you want to use somebody else’s phone to access <em>your</em> applications — which makes the “login from any computer” pitch less relevant. And mobile apps almost all store their data “in the cloud”. What is left of the web app advantages are <em>developer</em> specific: portability, easy development and deployment.

So, I ask again: is a mobile developer using web technologies choosing himself over the user?

As usual, it’s not that simple.

Let’s say I run a one-person company and I want to build a mobile app. I have three months to go to market. Effectively, I have roughly three options:
<ol>
 	<li>Pick one mobile platform, say iPhone, and develop only for it. <strong>Advantage:</strong> I can focus on a single application and provide the best possible user experience to my users. <strong>Disadvantage:</strong> my users are going to be only iPhone users — Android, BlackBerry and Windows Phone users will be left in the cold.</li>
 	<li>Instead of one, I pick multiple platforms, say four, and develop separate apps for all of them. <strong>Advantage:</strong> I reach a much larger audience with great, custom tailored mobile apps. <strong>Disadvantage:</strong> the mobile apps will only have about one fourth of the functionality I had planned, because I had to develop every feature four times as code reuse is barely possible.</li>
 	<li>I develop my mobile application using web technologies. <strong>Advantage:</strong> I have to implement my app once and it runs on multiple platforms. In addition, my application has all the features I intended to build, because I only had to build them once. <strong>Disadvantage:</strong> The user experience is worse. The application doesn’t blend in or integrate with the OS.</li>
</ol>
So, what have we learned?
<ol>
 	<li>Reasonable time to market</li>
 	<li>Flawless user experience</li>
 	<li>Big reach</li>
</ol>
Pick any two — a company with limited resources <em>cannot</em> have all three.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1396</wp:post_id>
		<wp:post_date>2011-06-21 22:04:44</wp:post_date>
		<wp:post_date_gmt>2011-06-21 20:04:44</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>are-web-apps-an-insult-to-users</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="mobile"><![CDATA[Mobile]]></category>
		<category domain="post_tag" nicename="native"><![CDATA[Native]]></category>
		<category domain="post_tag" nicename="opinion"><![CDATA[Opinion]]></category>
		<category domain="post_tag" nicename="user-experience"><![CDATA[User Experience]]></category>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[43876622544]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Planning Ahead: the Async Javascript Problem</title>
		<link>http://zef.me/2011/03/03/planning-ahead-the-async-javascript-problem/</link>
		<pubDate>Thu, 03 Mar 2011 09:18:48 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2011/03/03/planning-ahead-the-async-javascript-problem/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Yesterday [I posted about spaghetti-free Javascript code](http://zef.me/3715/three-routes-to-spaghetti-free-javascript). A [lot](http://news.ycombinator.com/item?id=2279862) of [reactions](http://www.reddit.com/r/javascript/comments/fvrhj/three_routes_to_spaghettifree_javascript/) [followed](http://www.reddit.com/r/programming/comments/fvrhf/three_routes_to_spaghettifree_javascript/).</p>
<p>As it turns out, most people misunderstood my point. That’s probably my fault. Here is at again, more concisely:</p>
<p>When you write Javascript you have to think ahead: in the code I’m about to write, is there going to be an asynchronous call at some point? If not, I can write Javascript in a nice, synchronous succinct style. If so, in many cases I cannot really use many of the regular language Javascript constructs, such as for-loops, but instead have to use one of the many Javascript libraries that implement asynchronous versions of loops, conditionals, etc.</p>
<p>If, like in my example, you do not plan ahead — and it turns out you need an asynchronous call somewhere, you have to go back and rewrite a lot of your code to use the asynchronous programming style.</p>
<p>The three tools I listed are ways around this problem. There you can keep writing your code in a synchronous style, no matter if you need an async call at some point.</p>
<p>Hope that clears things up.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1589</wp:post_id>
		<wp:post_date>2011-03-03 10:18:48</wp:post_date>
		<wp:post_date_gmt>2011-03-03 09:18:48</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>planning-ahead-the-async-javascript-problem</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="async"><![CDATA[Async]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="javascript"><![CDATA[JavaScript]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Mobl on InfoQ</title>
		<link>http://zef.me/2011/02/10/mobl-on-infoq/</link>
		<pubDate>Thu, 10 Feb 2011 20:46:36 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2011/02/10/mobl-on-infoq/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>[InfoQ: Mobl — A New DSL for Creating HTML5 Mobile Applications](http://www.infoq.com/news/2011/02/Mobl):<br>&gt; Mobl is an external DSL targeted at creating cross-browser applications for mobile devices by compiling the code into HTML5, and it has been developed by Zef Hemel as part of his Ph.D. thesis in model-driven engineering and domain-specific languages, being inspired by the WebDSL project. InfoQ has discussed with Hemel in an attempt to find out more about this approach to writing mobile apps.</p>
<p>Cool. I also got an invitation to write a full article for InfoQ, so you can look forward to that, hopefully. Nice words in the comments as well:</p>
<p>&gt; A beautiful example of what can be achieved when a small and coherent group of people (or just one mind) implement their vision starting with a clean slate — just capitalizing on existing experience and knowledge but not being encumbered by backwards compatibility.</p>
<p>It has been a good week for mobl.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1672</wp:post_id>
		<wp:post_date>2011-02-10 21:46:36</wp:post_date>
		<wp:post_date_gmt>2011-02-10 20:46:36</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>mobl-on-infoq</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="mobl"><![CDATA[Mobl]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Lisp: The Programmable Programming Language, with Manuel Simoni</title>
		<link>http://zef.me/2011/06/27/lisp-the-programmable-programming-language-with-manuel-simoni/</link>
		<pubDate>Mon, 27 Jun 2011 05:58:44 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2011/06/27/lisp-the-programmable-programming-language-with-manuel-simoni/</guid>
		<description></description>
		<content:encoded><![CDATA[Lisp is the ultimate power tool. The language can be extended by the programmer in almost any way it sees fit, without having to wait for Lisp 2.0 or 3.0. It appears to be the ultimate road to infinite programmer expressivity. Nevertheless, with great power comes great responsibility. Are programmers capable of dealing with so much power? I talked to Manuel Simoni to find out more.

Manuel Simoni runs the excellent (and brilliantly named) <a href="http://axisofeval.blogspot.com/">Axis of Eval</a> blog about programming languages in general, but specifically about Lisps. He has worked on multiple Lisp implementations. Currently he works on <a href="https://github.com/manuel/edgelisp">EdgeLisp</a>, a lisp that compiles to JavaScript.

<strong>To start off, can you tell us something about yourself?</strong>

I’m 30 years old, and have been programming for half of that time, starting with Pascal and the TI-92’s language, then C++, Java, Ruby, O’Caml, Haskell, and Common Lisp. I’ve worked as programmer in a couple of Austrian software companies, and am currently a consultant. In my spare time I like to hack on programming languages and internet applications, but they’re not really past the toy stage yet.

<strong>As an aside: Is it LISP or Lisp, does it matter? Since Unix and UNIX are two different things.</strong>

Uppercase LISP stands for LISt Processing and was the original name of the language, in 1959. Back then, that meaning was more appropriate, because Lisp’s use of lists facilitated the comfortable writing of a Lisp evaluator in Lisp, which was a big discovery.

In an article on Paul Graham’s page Doug McIlroy, one of the inventors of Unix, relates how mind-blowing John McCarthy’s discovery of Lisp was. It’s worth including it here in full, because it gives an interesting view of computer science at the time:
<blockquote>Just fifty years ago, John McCarthy circulated a notice that he would be giving an informal talk that he thought would be of interest. I drove up to MIT from New Jersey to attend this seminar of typical length in a typical classroom. But the seminar was anything but typical. It was a revelation. In one session at the blackboard, John introduced Lisp — all you could do with car, cdr, cons, cond, lambda, and recursion.

Recursion had no place in mainstream programming at the time, nor did lambda calculus. Only two years before, I had sat in a coffee-room discussion of what it would mean for a subroutine to call itself. Questions raised but unanswered were whether recursive instances deserved to be deemed the “same” subroutine, and, if you could do it, what good would it be? It turned out you could do it: I programmed it for the IBM 704. Given the challenge, the now standard stack solution arose inexorably. But the question of what it was good for remained.

In the course of the lecture John introduced the usual basic list functions like copy, append and reverse (quadratic and linear), as well as tree manipulation. He went on to higher-level functions, demonstrating maplis and lambda. By the end of the hour he had put together a powerful little toolkit of functions which he used in his finale: symbolic differentiation of univariate expressions.

There it was — functional programming ex nihilo. McCarthy acknowledged IPL V and recursive function theory, but the elegant and practical face he put upon these antecedents was a work of genius. Nobody would ever again wonder what good it was to allow functions to call themselves. And it was all so clear one could go home and build it oneself without any instruction book.</blockquote>
Today, Lisp is about much more than list processing, and so people call it “Lisp”, deemphasizing the original meaning of list processing.

<strong>How do you view yourself: Are you a Lisp guy? A programming language guy who leans towards Lips? An agnostic?</strong>

I think Lisp is the archetype, the crystallized form of all dynamically-typed scripting languages, and for that reason I like it. I also like C and Haskell, because they’re similarly crystallized languages in their respective areas. I also find Java not too shabby, although larger Java apps should probably embed a scripting language interpreter, and you really want to steer clear of “best practices”. ;)

<strong>So far I’ve seen roughly three ways to get pulled into Lisp: (1) you’re an older, bearded guy who was there in the ’60 when Lisp came to be and never looked back (2) you studied computer science in school and learned to program in Scheme and never looked back, or (3) you’re a follower of the Graham (Paul, that is) who converted you and you never looked back. You’re too young to be in category 1, you didn’t study computer science, so, was it Paul Graham?</strong>

Yes, Paul Graham. I think Paul really kicked off the Lisp renaissance with his well-written and insightful articles, and I’m very thankful to him.

<strong>You work and worked on various Lisp implementations. What is the core feature that attracts you, what does it mean to be a Lisp?</strong>

I think the core idea of Lisp is doing the “Right Thing”. This has to be qualified a bit. Lisp’s dynamically-typed, object-oriented, reflective programming style is certainly not for anyone. Haskellers kind of abhor it. But once you embrace that paradigm — and for some applications it’s certainly the best — I think you’ll find that Lisp gets far more things right than other languages with a similar style.

For example, once Lispers found that object-orientation was a nice addition to Lisp, they ran with it, and built the Common Lisp object system, the “biggest and baddest” object system in existence. It features multiple inheritance, multiple dispatch (methods dispatch on all arguments, not only the first argument), methods defined outside classes, nice integration with functional programming, and is fully programmable via a metaobject protocol. This is clearly an instance of Lispers doing the right thing, no matter the costs.

The flip side of doing the right thing is that you also have to live with its consequences. For example, for Lispers “language-oriented programming”, i.e. the definition of custom languages, is second nature and very common. And to do that right, you have to use a very simple syntax, i.e. Lisp’s s-expressions, which is somewhat lacking in the aesthetics department. But Lispers accept that, because it’s clearly the right thing — you couldn’t do such powerful language-oriented programming in a language with a more elaborate syntax.

<strong>You say Lisp is not for everyone, who is it for, you think? And who should stay away from it?</strong>

I think Lisp is very widely applicable, so it’s hard to say who is it for exactly. In the words of Kent Pitman:
<blockquote>Please don’t assume Lisp is only useful for Animation and Graphics, AI, Bioinformatics, B2B and E-Commerce, Data Mining, EDA/Semiconductor applications, Expert Systems, Finance, Intelligent Agents, Knowledge Management, Mechanical CAD, Modeling and Simulation, Natural Language, Optimization, Research, Risk Analysis, Scheduling, Telecom, and Web Authoring just because these are the only things they happened to list</blockquote>
Two areas in which Lisp has been used, but in which I’d personally would choose something else is either extremely low-level stuff, like operating systems, or extremely high-level stuff like verified compilers. You can do these in Lisp, but I think you’ll be fighting a bit of an uphill battle in these areas. For low-level stuff, I’d just use C, and for high-level, verified stuff, I’d look into Haskell or even higher-level languages like Coq or Isabelle.

<strong>If Lisp is about doing “the right thing”, who decides? What’s the process there? Some languages have a benevolent dictator, this doesn’t seem to be the case for Lisp.</strong>

To stay with the dictator metaphor, Lisps seem to follow a “benevolent junta” model. There was a Common Lisp junta, and there’s something of a Scheme standardization junta. But I don’t know much about these processes.

One thing that’s different from most other languages is that every Lisp user is also a language designer. This means that evolution can happen quickly and community-based. Language is design is too damn hard for single humans, but even Lisp needed about 30 years until it got roughly its current shape with Scheme and Common Lisp.

<strong>There seems to be disagreement within the Lisp community as well — there’s not just one Lisp, there’s many: Common Lisp, Scheme, Clojure, Arc. While they all share the parentheses and macro systems, they don’t appear to be the same language at all. So, what is it that makes these languages Lisps?</strong>

Dave Moon, another central Lisp figure, is developing a new language called Programming Language for Old Timers (PLOT), and he says:
<blockquote>How can this be a dialect of Lisp, you say, if it does not have S-Expressions, does not have NIL, does not have conses, does not have atoms, and does not have a simple parenthesized Polish prefix syntax?

I say it is a dialect of Lisp because it uses a fully dynamic memory model, fully dynamic typing, a resident program semantics (although separate compilation is possible), fully powerful macros (but hygienic!), and because (almost) everything about the language is defined in the language itself. It has the same extreme flexibility and extensibility, and the same minimum of nonsense that gets in your way, that have always been hallmarks of Lisp.</blockquote>
Kent Pitman’s href=”<a href="http://www.nhplace.com/kent/PS/Lambda.html%22%3ELambda">http://www.nhplace.com/kent/PS/Lambda.html"&gt;Lambda</a>the Ultimate Political Party looks at this very issue and comes to the conclusion:
<blockquote>What unifies dialects of Lisp is not the operators themselves, but rather the set of people who provide them. In essence, I’ll suggest that Lisp is a social phenomenon, akin to a political party, and that what unifies Lisp are the people who are its leaders, and the ways in which they respond (or fail to respond) to the needs of that community.</blockquote>
<strong>About language oriented programming, could you explain what you mean with that?</strong>

Language-oriented programming means that you not only write programs in the language, but also program the language itself, using macros. A premier example of this is Racket:
<blockquote>In Racket, we’ve developed a type system, two module systems, two object systems, an extensible pattern matcher, a contract system, multiple domain-specific languages for writing macros, implementations of prolog and datalog, many languages for teaching, a language for functional reactive programming, implementations of the two most recent Scheme standards, an implementation of ACL2, languages for writing stateless web servlets, a language for writing slide presentations, a language for modeling and executing formal systems, a language for writing papers and documentation, a set of loop comprehensions, and so on, all as macros. Citations and explanations &gt; href=”<a href="http://www.ccs.neu.edu/scheme/pubs/pldi11-thacff.pdf%22%3Ehere">http://www.ccs.neu.edu/scheme/pubs/pldi11-thacff.pdf"&gt;here</a> [pdf].</blockquote>
(from a reddit comment by Sam Tobin-Hochstadt)

<strong>Although it’s cool to be able to do that, a commonly heard criticism of Lisp is that it is <em>too</em> dynamic. You can change anything you want, I think in Common Lisp you can even adapt the parser at runtime. The question is: is this a good thing, can a programmer who is not familiar with your code still understand it if your code consists of little DSLs for anything. Recently I read a post by Rudolf Winestock on this matter: <a href="http://www.winestockwebdesign.com/Essays/Lisp_Curse.html">The Lisp Curse</a>. What are your thoughts on this matter?</strong>

First, it’s simply a matter of good engineering. If you use these powers in a lousy way, yes, your code will suffer. But as href=”<a href="http://lambda-the-ultimate.org/node/1544#comment-18176&quot;&gt;Luke">http://lambda-the-ultimate.org/node/1544#comment-18176"&gt;Luke</a> Gorrie observed a while ago:
<blockquote>People have an unfortunate tendency to […] focus on hypothetical software-engineering mumbo-jumbo scenarios. “Oh my, what if Luke installed an exception handler that ROT13 encoded every string on the heap, then how would Jane debug her programs?” This is not the way to illumination.</blockquote>
Powerful tools can be powerfully abused, but that doesn’t mean I don’t want them!

Second, regarding DSLs, I like to think of language statements like the WHILE loop as a “macro” that expands to more primitive statements, like IF and GOTO. Now, it’s self-evident that code using WHILE is clearer than code using IF and GOTO (and not because GOTO is harmful. GOTO rocks! :)).

I wouldn’t want to miss the power to extend my language’s syntax.

<strong>Where do you stand in the whole static vs. dynamically typed languages debate?</strong>

My experience is that when I use a statically typed language, especially one where types are easy to use, such as O’Caml or Haskell, I start to obsess about type safety, and want to express as many things as possible using types. I really get into a “typeful” mode of programming and it seems wonderful. And then I use a dynamically typed, scripting-style language, like Python or Lisp, the whole thing seems much less important, and I seem to get by just as fine.

That said, I’ve studied type systems a bit, and I must say that they really force you to think deeply about programming in general, and are very insightful. To paraphrase an old saying, even if you’re never going to use an advanced type system, you’ll be a much better programmer by learning about them.

And there’s some recent advancements in type systems that are plain awesome. For example, the language ATS can give you compile-time errors for very important stuff, like forgetting to close a file handle, or allocating an array of the wrong size. See href=”<a href="http://www.bluishcoder.co.nz/2011/02/26/reading-data-from-a-file-in-ats.html%22%3Ethis">http://www.bluishcoder.co.nz/2011/02/26/reading-data-from-a-file-in-ats.html"&gt;this</a> blog post by Chris Double. A related language is Tim Sheard’s Omega, about which I wrote href=”<a href="http://lambda-the-ultimate.org/node/4088%22%3Ea">http://lambda-the-ultimate.org/node/4088"&gt;a</a> post on Lambda the Ultimate.

<strong>Does a typed language help the programmer or hold it back?</strong>

One area where current type systems seem lacking is interactivity. In Common Lisp you can redefine everything at runtime. For example, you can add new superclasses to a class at runtime. I don’t know of any current static type systems that can handle that, so for an interactively extensible app like Emacs, they seem unsuited. But I’d like to be proven wrong, and I don’t think there’s any reason why future type systems should be unable to do this.

<strong>What is EdgeLisp and why are you developing it?</strong>

<a href="https://github.com/manuel/edgelisp">EdgeLisp</a> is my attempt to disassociate myself from the Rube Goldberg device that is JavaScript, once and for all.

EdgeLisp is a not-uncommon Lisp, with some of the same features as Common Lisp: classes, multiple dispatch, standard Lisp control flow (nonlocal exits, UNWIND-PROTECT), a numerical tower.

EdgeLisp compiles to pretty straightforward JS. It’s only usable by me at the moment, really, but I’m already using it for prototyping web apps, and liking it more than JavaScript.

One thing I’m proud of is how EdgeLisp implements a hygienic DEFMACRO: by putting support for hygiene deep into the compiler, hygiene support is only a couple of dozen lines of code. I want to write a paper about that one day.

<strong>How does the Javascript target influence the language (if at all)?</strong>

The Eich tarpit isn’t much different from the Gosling tarpit. You gnash your teeth a lot, but if you stay within the confines of what’s offered by JS, it’s an acceptable target language for a compiler. And being able to run your language everywhere JS runs is wonderful.

<strong>Links</strong>
<ul>
 	<li><a href="http://axisofeval.blogspot.com/">The Axis of Eval</a></li>
 	<li><a href="https://github.com/manuel/edgelisp">EdgeLisp</a>.</li>
 	<li><a href="http://twitter.com/msimoni">Manuel on twitter</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>192</wp:post_id>
		<wp:post_date>2011-06-27 07:58:44</wp:post_date>
		<wp:post_date_gmt>2011-06-27 05:58:44</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>lisp-the-programmable-programming-language-with-manuel-simoni</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="interview"><![CDATA[Interview]]></category>
		<category domain="post_tag" nicename="lisp"><![CDATA[Lisp]]></category>
		<category domain="post_tag" nicename="programming-languages"><![CDATA[Programming Languages]]></category>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[43876591828]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>TwUI: Twitter’s Hardware Accelerated UI Toolkit</title>
		<link>http://zef.me/2011/07/06/twui-twitters-hardware-accelerated-ui-toolkit/</link>
		<pubDate>Wed, 06 Jul 2011 08:18:26 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2011/07/06/twui-twitters-hardware-accelerated-ui-toolkit/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>[Twitter open sources the Mac toolkit](http://engineering.twitter.com/2011/07/starting-today-twitter-is-offering-twui.html) that they used to build the [Twitter Mac app](http://itunes.apple.com/nl/app/twitter/id409789998?mt=12) (formerly known as Tweetie):</p>
<p>&gt; Until now, there was not a simple and effective way to design interactive, hardware-accelerated interfaces on the Mac. Core Animation can create hardware-accelerated drawings, but doesn’t provide interaction mechanisms. AppKit and NSView have excellent interaction mechanisms, but the drawings operations are CPU-bound, which makes fluid scrolling, animations, and other effects difficult — if not impossible — to accomplish.</p>
<p>&gt; UIKit on Apple’s iOS platform has offered developers a fresh start. While UIKit borrows many ideas from AppKit regarding interaction, it can offload compositing to the GPU because it is built on top of Core Animation. This architecture has enabled developers to create many applications that were, until this time, impossible to build.</p>
<p>[TwUI](https://github.com/twitter/twui) brings this idea back to the desktop:</p>
<p>&gt; It is built on top of Core Animation, and it borrows interaction ideas from AppKit. It allows for all the things Mac users expect, including drag &amp; drop, mouse events, tooltips, Mac-like text selection, and so on. And, since TwUI isn’t bound by the constraints of an existing API, developers can experiment with new features like block-based drawRect and layout.</p>
<p>&gt;</p>
<figure>

<img data-width="1" data-height="1" alt="Screen Shot Example Cell" src="https://cdn-images-1.medium.com/max/800/0*IwW2Ut9JrBCiH3g6.png">
</figure><p>This raises the question: why has Apple not yet hardware accelerated its AppKit?</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>195</wp:post_id>
		<wp:post_date>2011-07-06 10:18:26</wp:post_date>
		<wp:post_date_gmt>2011-07-06 08:18:26</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>twui-twitters-hardware-accelerated-ui-toolkit</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="apple"><![CDATA[Apple]]></category>
		<category domain="post_tag" nicename="cocoa"><![CDATA[Cocoa]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="mac"><![CDATA[Mac]]></category>
		<category domain="post_tag" nicename="twitter"><![CDATA[Twitter]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Clojure Support on Heroku</title>
		<link>http://zef.me/2011/07/08/clojure-support-on-heroku/</link>
		<pubDate>Fri, 08 Jul 2011 13:16:42 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2011/07/08/clojure-support-on-heroku/</guid>
		<description></description>
		<content:encoded><![CDATA[

<figure><img src="https://cdn-images-1.medium.com/max/800/0*05-j-nWugB8ByhBN.gif"></figure><p>Heroku is known for its [Ruby](http://ruby-lang.org) hosting and later added [node.js support](http://blog.heroku.com/archives/2010/4/28/node_js_support_experimental/) as well. Now, [Heroku also supports Clojure](http://blog.heroku.com/archives/2011/7/5/clojure_on_heroku/):</p>
<p>&gt; We’re very excited to announce official support for [Clojure](http://clojure.org), going into public beta as of today. Clojure is the third official language supported by Heroku, and is available on the [Cedar stack](http://devcenter.heroku.com/articles/cedar).</p>
<p>[Clojure](http://clojure.org) is a popular Lisp for the Java Virtual Machine. While Clojure applications could already be deployed on other Platform-as-as-Services (PaaS), such as [Google AppEngine](http://www.infoq.com/articles/deadline-clojure-appengine) — Heroku is the first Platform-as-a-Service provider to offer official Clojure support.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>207</wp:post_id>
		<wp:post_date>2011-07-08 15:16:42</wp:post_date>
		<wp:post_date_gmt>2011-07-08 13:16:42</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>clojure-support-on-heroku</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="clojure"><![CDATA[Clojure]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="heroku"><![CDATA[Heroku]]></category>
		<category domain="post_tag" nicename="lisp"><![CDATA[Lisp]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Mobile Web Browsers Wars: iOS vs. Android</title>
		<link>http://zef.me/2011/06/28/mobile-web-browsers-wars-ios-vs-android/</link>
		<pubDate>Tue, 28 Jun 2011 09:28:29 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2011/06/28/mobile-web-browsers-wars-ios-vs-android/</guid>
		<description></description>
		<content:encoded><![CDATA[

<figure>

<img data-width="1" data-height="1" src="https://cdn-images-1.medium.com/max/800/0*4BrhudRpPsyyI_ij.png">
</figure><p>iOS 5 will be featuring a few new features that enable a better user-experience for web applications. Great news for those rooting for mobile web apps. [Matteo Spinelli (creator of iScroll) even claims](http://cubiq.org/ios5-the-first-true-web-app-ready-platform) that web apps are now completely ready to replace native apps on iOS:</p>
<p>&gt; The real revolution might be iOS5. In the [first beta they revealed overflow:scroll and position:fixed](http://cubiq.org/what-you-can-really-do-with-native-position-fixed), while the second beta seems to unleash the devastatingly cool `-webkit-overflow-scrolling:touch` CSS property.</p>
<p>&gt; With `-webkit-overflow-scrolling:touch` you can finally have native scrollview inside your web app and together with webGL there’s no reason on Earth to go Object-C (I’m over-exaggerating, don’t flame).</p>
<p>&gt; As it is already happening for Mac Apps you may decide to publish your future iOS apps on the Apple Store, or release them on your website, or take advantage of the two worlds and follow both paths.</p>
<p>&gt; I envision a future where 90% of the native apps are just webview wrappers (as it is already happening thanks to Phonegap).</p>
<p>Although clearly iOS is moving in the right direction, it is not there yet. Beside the issues of still-limited access to device APIs and somewhat worse performance, there are some subtle issues (even in iOS5). For instance, web apps added to the home screen do not support multi-tasking. When switching between applications and switching back to a web app, the app completely reloads.</p>
<p>Still, iOS is doing _way_ better than its main competitor Android.</p>
<figure><img src="https://cdn-images-1.medium.com/max/800/0*BH9F9oquqrfDNLl_.gif"></figure><p>It’s ironic that iOS is far ahead of Android when it comes to mobile web app support, given the fact that Android comes from this company called Google, that is all about the web, or so they claim. Apple, on the other hand embraces the web, but mostly as a transport mechanism and utility. Apple’s vision of the future is native apps, mixed with pragmatic use of web views.</p>
<p>As a case in point: iOS allows users to add web apps to the home screen, appearing like any other locally installed application — runnable without any browser chrome (no back and forward buttons), you can set the top bar color and the icon to be used on the home screen. Android offers no such feature. You can create a bookmark on the desktop, but it really looks like a bookmark, and when tapped simply switches to the browser and displays the page like any other website you visit.</p>
<p>It gets better, though. Consider Google’s own web version of [maps](http://maps.google.com) for mobile. While on iOS you can use pinch-to-zoom, the Android version does not support this feature and requires the user to use zoom in/out buttons. Why? Android does not implement the required HTML5 features to implement this, as became painfully obvious when asked during a Q&amp;A session at Google IO.</p>
<p>[Shi Chuang](http://www.blog.highub.com/mobile-2/an-inconvenient-truth-android-and-the-open-mobile-web/):</p>
<p>&gt; When someone asked about the lack of effective zoom feature on Android browser. Susannah said the pinch-and-zoom feature is supported by iOS, because iOS has a meta data setting used to specify that this map should be displayed full-screen and should not be resizable by the user.</p>
<p>&gt;</p>
<figure>

<img data-width="1" data-height="1" src="https://cdn-images-1.medium.com/max/800/0*Qxi5YRtfY04SykpC.png">
</figure><p>Chuang observes another problem:</p>
<p>&gt; Android never reads W3C papers written by other Google employees. Andrei Popescu and Steve Block at Google W3C team has written a paper about DeviceOrientation, again, ironically, a draft initiated by Google’s employee is implemented by its rival Apple iOS, but nowhere to be seen on an Android device.</p>
<p>Although Android’s browser is a great browser to browse the “desktop” web — arguably as good or better than iOS — it does not seem to take the web as a _web application platform_ seriously enough. Which is ironic — you know — because it’s _Google_.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>208</wp:post_id>
		<wp:post_date>2011-06-28 11:28:29</wp:post_date>
		<wp:post_date_gmt>2011-06-28 09:28:29</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>mobile-web-browsers-wars-ios-vs-android</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="android"><![CDATA[Android]]></category>
		<category domain="post_tag" nicename="apple"><![CDATA[Apple]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="google"><![CDATA[Google]]></category>
		<category domain="post_tag" nicename="ios"><![CDATA[iOS]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>v8: a Tale of Two Compilers</title>
		<link>http://zef.me/2011/07/08/v8-a-tale-of-two-compilers/</link>
		<pubDate>Fri, 08 Jul 2011 13:29:02 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2011/07/08/v8-a-tale-of-two-compilers/</guid>
		<description></description>
		<content:encoded><![CDATA[Ever wanted to take a peek under the hood of <a href="http://code.google.com/p/v8/">v8, Google’s Javascript virtual machine</a>, without having to check out the code and poke around?

<a href="http://wingolog.org/archives/2011/07/05/v8-a-tale-of-two-compilers">Here is a nice post</a> that gives a look at what’s going on behind the scenes:
<blockquote>V8 compiles all JavaScript to native code. V8 has two compilers: one that runs fast and produces generic code, and one that doesn’t run as fast but does try to produce optimized code.

The quick-and-simple compiler is known internally as the “full-codegen” compiler. It takes as its input the abstract syntax tree (AST) of a function, walks over the nodes in the AST, and emits calls to a macroassembler directly.</blockquote>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>211</wp:post_id>
		<wp:post_date>2011-07-08 15:29:02</wp:post_date>
		<wp:post_date_gmt>2011-07-08 13:29:02</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>v8-a-tale-of-two-compilers</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="google"><![CDATA[Google]]></category>
		<category domain="post_tag" nicename="javascript"><![CDATA[JavaScript]]></category>
		<category domain="post_tag" nicename="v8"><![CDATA[V8]]></category>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[43876531524]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Keyword Arguments</title>
		<link>http://zef.me/2011/06/26/keyword-arguments/</link>
		<pubDate>Sun, 26 Jun 2011 11:19:36 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2011/06/26/keyword-arguments/</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://briancarper.net/blog/579/keyword-arguments-ruby-clojure-common-lisp">Brian Carper blogs about keyword arguments</a> in Ruby, Clojure and Common Lisp:
<blockquote><strong>Why are keyword arguments good?</strong>
<ul>
 	<li>You can omit arguments.</li>
 	<li>You can supply arguments in an arbitrary order.</li>
 	<li>Arguments are labeled, so you know what argument means what.</li>
</ul>
Positional arguments require mentally lining up the 7th argument in your function call with the 7th argument in the function signature, and so on. Keyword arguments become more and more attractive the more arguments you have in your function signature.

Keyword arguments trade a bit of verbosity for added explicitness, clarity and reduced mental burden. (Kind of like Lisps do overall. Fancy that.)</blockquote>
More mainstream languages should natively support keyword/named arguments (and increasingly, they do). Generally it is a good trade-off between clarity and conciseness.

The prototypical example (not mentioned in the article) is <a href="http://en.wikipedia.org/wiki/Smalltalk">Smalltalk</a> and derivatives languages such as <a href="http://en.wikipedia.org/wiki/Objective-C">Objective-C</a> and <a href="http://en.wikipedia.org/wiki/Objective-J">Objective-J</a>, where every argument is prefixed with the argument name.

Objective-C example:

[self presentModalViewController: controller animated: YES];

Which, in a C-style language using the less verbose naming convention (that C-style languages tend to have):

this.presentModal(controller, true);

Advantage? More concise. Disadvantage: what is that <code>true</code> argument for again?]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>228</wp:post_id>
		<wp:post_date>2011-06-26 13:19:36</wp:post_date>
		<wp:post_date_gmt>2011-06-26 11:19:36</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>keyword-arguments</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="lisp"><![CDATA[Lisp]]></category>
		<category domain="post_tag" nicename="objective-c"><![CDATA[Objective C]]></category>
		<category domain="post_tag" nicename="objective-j"><![CDATA[Objective J]]></category>
		<category domain="post_tag" nicename="opinion"><![CDATA[Opinion]]></category>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[43876597710]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Facebook’s Project Spartan</title>
		<link>http://zef.me/2011/07/07/facebooks-project-spartan/</link>
		<pubDate>Thu, 07 Jul 2011 08:58:35 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2011/07/07/facebooks-project-spartan/</guid>
		<description></description>
		<content:encoded><![CDATA[

<figure>

<img data-width="1" data-height="1" src="https://cdn-images-1.medium.com/max/800/0*VQsOLN5mhPPYLVKR.jpg">
</figure><p>While Facebook released its [video calling feature](http://www.facebook.com/videocalling) yesterday, something much more interesting may be coming, possibly later this month. It is called [Project Spartan](http://techcrunch.com/2011/06/15/facebook-project-spartan/).</p>
<p>Our interpretation of [TechCrunch’s posts](http://techcrunch.com/2011/06/15/facebook-project-spartan/) about Spartan is that Facebook will do for mobile what it did for its regular web version before: upgrade its “application” status to “platform”. A few years ago [Facebook started enabling developers to build applications into Facebook](http://www.facebook.com/apps/directory.php), integrating them with the timeline, getting access to friend information etc. This enabled companies such as [Zynga](http://www.zynga.com) to create incredibly successful social games. Since that launch, Facebook is no longer just a website, it has become a social platform — _the_ social platform.</p>
<p>Soon, Facebook will do the same thing for mobile.</p>
<p>There is a big difference in landscape, however. On the desktop, Facebook is primarily accessed through the web browser. On mobile, this is not yet the case. The majority of users access Facebook through one of its native applications. With Project Spartan, Facebook will go for a hefty HTML5 push.</p>
<p>Why? Freedom and portability.</p>
<p>Freedom from Apple’s restrictions on the ability to extend the functionality of iOS applications on the fly, by downloading new code — which is disallowed by the iOS developer terms. This means that it would not be allowed to let external developers extend the Facebook mobile app the way they can extend the regular web Facebook.</p>
<p>Portability: Facebook is maintaining about a dozen mobile applications right now. It would be a breath of fresh air to drop a few of those in favor of HTML5 implementations.</p>
<p>[If it’s true](http://techcrunch.com/2011/07/05/facebook-spartan-ipad-html5/), Facebook will essentially be launching an alternative AppStore, with its own set of APIs and own payment system. Still, a lot of questions remain: how will developers develop for this new platform, will there be tools available? Will it come with a custom set of Facebook-style user interface controls? How are the applications hosted?</p>
<p>[According to TechCrunch](http://techcrunch.com/2011/06/15/facebook-project-spartan/) the focus will initially be on iOS (iPhone, iPad and iPod Touch). Presumably to get the experience right without having to deal with the idiosyncrasies between mobile browsers. After the initial launch, it will quickly spread to Android and other platforms as well.</p>
<figure>

<img data-width="1" data-height="1" src="https://cdn-images-1.medium.com/max/800/0*qiLhWKG54hN6rg6A.png">
</figure><p>(Supposedly [leaked screenshots](http://techcrunch.com/2011/07/05/facebook-spartan-ipad-html5/) of the service.)</p>
<p>Even if you are not interested in Facebook, this will be a development to watch: it could mean a big push for HTML5 on mobile if Facebook pulls this off. In the end, it will all depend on what the experience will be, and if its applications are attractive enough.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>235</wp:post_id>
		<wp:post_date>2011-07-07 10:58:35</wp:post_date>
		<wp:post_date_gmt>2011-07-07 08:58:35</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>facebooks-project-spartan</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="facebook"><![CDATA[Facebook]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="html5"><![CDATA[Html5]]></category>
		<category domain="post_tag" nicename="mobile"><![CDATA[Mobile]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>JSIL: Compile .NET to Javascript</title>
		<link>http://zef.me/2011/07/01/jsil-compile-net-to-javascript/</link>
		<pubDate>Fri, 01 Jul 2011 08:55:32 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2011/07/01/jsil-compile-net-to-javascript/</guid>
		<description></description>
		<content:encoded><![CDATA[As if compiling <a href="https://github.com/kripken/emscripten">LLVM bytecode to Javascript wasn’t crazy enough</a> there is now the <a href="http://jsil.org/">JSIL</a>, a project by Mozilla engineer Kevin Gadd. JSIL compiles CIL (.NET’s bytecode format) to readable Javascript.

For instance, after compiling the following C# code using the C# compiler to CIL:
<pre><code><span class="hljs-keyword">using</span> System;
<span class="hljs-keyword">using</span> System.Collections.Generic;

<span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span> {
 <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span> (<span class="hljs-params"><span class="hljs-keyword">string</span>[] args</span>) </span>{
 <span class="hljs-keyword">var</span> array = <span class="hljs-keyword">new</span>[] { <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">8</span>, <span class="hljs-number">16</span> };

<span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> i <span class="hljs-keyword">in</span> array)
 Console.WriteLine(i);

<span class="hljs-keyword">var</span> list = <span class="hljs-keyword">new</span> List(array);

<span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> j <span class="hljs-keyword">in</span> list)
 Console.WriteLine(j);
 }
}
</code></pre>
<a href="http://jsil.org/">JSIL</a> compiles it to the following Javascript (which we had to somewhat awkwardly reformat to fit the width of this site):
<pre><code>JSIL.MakeStaticClass(“Program”, <span class="hljs-keyword">true</span>);

Program.Main = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(args)</span> </span>{
 <span class="hljs-keyword">var</span> <span class="hljs-keyword">array</span> = JSIL.<span class="hljs-keyword">Array</span>.<span class="hljs-keyword">New</span>(System.Int32,
 [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">8</span>, <span class="hljs-number">16</span>]);
 <span class="hljs-keyword">var</span> array2 = <span class="hljs-keyword">array</span>;
__loop0__: 
 <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> k = <span class="hljs-number">0</span>; k &lt; array2.length; ++k) {
 <span class="hljs-keyword">var</span> i = array2[k];
 System.Console.WriteLine(i);
 }
 <span class="hljs-keyword">var</span> <span class="hljs-keyword">list</span> = <span class="hljs-keyword">new</span> (System.Collections.Generic
 .<span class="hljs-keyword">List</span>$b1.Of(System.Int32))
 (<span class="hljs-keyword">array</span>);
 <span class="hljs-keyword">var</span> enumerator = JSIL.Cast(<span class="hljs-keyword">list</span>.GetEnumerator(), 
 System.Collections.Generic
 .<span class="hljs-keyword">List</span>$b1.Enumerator.Of
 (System.Int32));
 <span class="hljs-keyword">try</span> {
 __loop1__: 
 <span class="hljs-keyword">while</span> (enumerator.MoveNext()) {
 <span class="hljs-keyword">var</span> j = enumerator.Current;
 System.Console.WriteLine(j);
 }
 } <span class="hljs-keyword">finally</span> {
 enumerator.IDisposable_Dispose();
 }
};
</code></pre>
The site contains a couple of demo applications, including <a href="http://hildr.luminance.org/Tetris/Tetris.html">a version of Tetris</a>originally developed using Microsoft XNA 4.

We asked its creator, Kevin Gadd, a few questions.

<strong>You work for Mozilla, is this a personal project or part of Mozilla’s strategy?</strong>

This is a personal project. I believe it’s in line with the general principles of the Mozilla Corporation but it’s not currently being funded by the company. Emscripten is, as I understand it, also a personal side project, not funded work.

<strong>Why did you start the project, just for fun or do you have actual code or applications you want to port?</strong>

I have a bunch of code written in C# that I want to make available to people running web browsers (particularly on mobile devices, where a good port is difficult or otherwise impossible). I also think that .NET provides a good way to build portable applications while still delivering a relatively good experience on each platform, because it’s expressive enough to let you get close to the metal in a way that’s harder with other, more portable languages.

<strong>How does this compare to Emscripten, which compiles LLVM to Javascript. CIL is probably higher level, does that make it easier to port or faster?</strong>

Emscripten is, to a certain degree, both faster and easier to port. However, this is because it ends up operating at a different level - effectively, you’re using the JS runtime as a virtual machine to run LLVM bytecode. The bytecode is translated into JS, and in some cases it’s possible to translate the bytecode into higher level constructs, but in many cases it ends up being very low-level. This makes it very difficult to leverage any browser features that aren’t integrated directly into Emscripten, and maintenance and debugging are a significant challenge because the resulting code has little resemblance to the original source. I think in the long run it might be possible to get better performance out of JSIL because it will be easier to detect higher level patterns and features in the original .NET code and translate them to efficient JS equivalents.

To provide a contrived example, most of the existing ports of games like doom or quake using Emscripten are still using a software rasterizer, and basically generating pixel data in JS and blitting it to the screen. For the XNA games I’ve translated so far, JSIL is able to trivially adapt uses of the XNA graphics APIs into equivalent canvas-based code, which can then be hardware accelerated. It’s possible to do something like that with Emscripten, but the type information provided by .NET makes it much simpler.

Emscripten pretty much kicks ass though :) A counter-example is that structs are considerably faster in Emscripten, because they’re translated into raw memory accesses, just like singular variables of primitive types. JSIL has to emulate the semantics of structs, so they end up becoming reference types just like classes, and that produces tremendous garbage collection overhead.

<strong>Readability of generated code is a goal. Can this be used as a migration tool?</strong>

Yes, I believe that it is possible to use JSIL as a migration tool, where you run it once and then maintain the resulting JS by hand and make improvements there. However, parts of the JSIL framework are not currently friendly to authoring JS by hand — so anyone attempting to migrate a large project to JS and do further maintenance/development in JS would probably find themselves having to fix up the output from JSIL. A lot of this is because I can’t make many assumptions about what specific language features an application needs, so I end up emulating language semantics consistently even if they make the resulting code noisier.

A good example of this is how the ‘foreach’ construct in C# implicitly involves a <code>try { } finally { }</code> block, so that if the enumerator is Disposable, it is disposed upon the termination of the loop. This makes the resulting JS a lot uglier than it would be if it were written as native JavaScript, and worse still, try/finally has severe performance consequences in some runtimes. A developer can easily come in and fix these by hand when they show up in a profiler, of course, but it is a downside.

<strong>What about the .NET framework libraries. To make JSIL work, you need a considerable amount of framework code. Do you cross compile Microsoft’s .NET .dll’s, do you use Mono’s open source implementation, a custom Javascript implementation?</strong>

Currently I use a custom JavaScript implementation. Given a minimal set of stuff that can’t be machine translated, though, it should be possible to cross compile the Mono/Microsoft mscorlibs. I’ve compiled the Microsoft mscorlibs before and gotten them to work, but shipping those with an app poses significant IP issues. My long term plan is to cross-compile the mono libraries and use those to supplement a small set of core JS stubs.

Links  — — -
<ul>
 	<li><a href="http://jsil.org/">JSIL website</a></li>
 	<li><a href="https://github.com/kevingadd/JSIL">JSIL on GitHub</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>248</wp:post_id>
		<wp:post_date>2011-07-01 10:55:32</wp:post_date>
		<wp:post_date_gmt>2011-07-01 08:55:32</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>jsil-compile-net-to-javascript</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="compiles-to-javascript"><![CDATA[Compiles To Javascript]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="interview"><![CDATA[Interview]]></category>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[43876628654]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Why Programming Languages</title>
		<link>http://zef.me/2011/06/29/why-programming-languages/</link>
		<pubDate>Wed, 29 Jun 2011 09:31:35 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2011/06/29/why-programming-languages/</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://soft.vub.ac.be/~tvcutsem/whypls.html">Why Programming Languages?</a>
<blockquote>When I present my research work on programming languages, people often ask me “why do you need a new programming language to solve this problem? Why not just implement it as a library?” Or, I get asked “why didn’t you implement it as an extension to {some existing language}?” In this essay I will try to make explicit some of the goals and motivations behind language design. They are formulated wholly from my own background in this area, so I might be missing some important ones I haven’t thought about.

In this essay, I will distinguish four primary goals that can drive the language design process:
<ul>
 	<li>Language as syntactic abstraction mechanism: to reduce repetitive “boilerplate” code that cannot be abstracted from using another language’s built-in abstraction mechanisms.</li>
 	<li>Language as thought shaper: to induce a paradigm shift in how one should structure software (changing the “path of least resistance”).</li>
 	<li>Language as a simplifier: to boil down an existing paradigm to just its essential parts, often to increase understanding and insight.</li>
 	<li>Language as law enforcer: to enforce important properties or invariants, possibly to make it easier to infer more useful properties from programs.</li>
</ul>
</blockquote>
A must-read essay by <a href="http://soft.vub.ac.be/~tvcutsem">Tom Van Cutsem</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>309</wp:post_id>
		<wp:post_date>2011-06-29 11:31:35</wp:post_date>
		<wp:post_date_gmt>2011-06-29 09:31:35</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>why-programming-languages</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="opinion"><![CDATA[Opinion]]></category>
		<category domain="post_tag" nicename="programming-languages"><![CDATA[Programming Languages]]></category>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[43876576588]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Twitter’s Move to the JVM</title>
		<link>http://zef.me/2011/07/05/twitters-move-to-the-jvm/</link>
		<pubDate>Tue, 05 Jul 2011 08:09:16 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2011/07/05/twitters-move-to-the-jvm/</guid>
		<description></description>
		<content:encoded><![CDATA[While many perceive Java as “that old language we used to build those super slow Applets with”, the Java Virtual Machine (JVM) is one of the most, if not <em>the</em> most advanced virtual machine in use today. While the Java language may not be the hot new language it used to be in the ’90s, don’t dismiss the JVM just yet.

Twitter certainly doesn’t. <a href="http://www.infoq.com/articles/twitter-java-use">An interesting InfoQ article</a> discusses the ongoing move of the twitter architecture to the JVM. More and more is ported from Ruby to Java and Scala:
<blockquote>We were originally a Rails shop, and I believe we are the largest Rails site in the world, but as we’ve grown as an organization, and as a service, performance and encapsulation have become very critical. I wouldn’t say that Rails has served as poorly in any way, it’s just that we outgrew it very quickly. So there are two things about Rails that make it no longer ideal for our situation. First, the Ruby runtime is slow, particularly in comparison to the JVM. We’ve worked hard on the garbage collector to get reasonable performance.

And also the LAMP model that Rails embodies, where you have a set of tiers each of which only talks to the one above and below, and no vertical encapsulation, doesn’t serve a large organization like us very well.

As we’ve been focusing on performance and encapsulation, we’ve fixed performance problems as necessary, with caches, or working on the VMs.

The majority of requests on Twitter go through Rails right now, but as we build new services, if we choose to build them from scratch, in order to achieve better encapsulation we move them into the JVM, because the performance concerns outweigh any sort of productivity or agility downside those languages might have. So when we re-built Tweet storage we built it in Gizzard as a homogenous service, it exposes a domain interface, and that’s a Scala system that partitions and manages uncoordinated MySQL nodes. So that effectively eliminated ActiveRecord use for tweets from the core Rails stack.

The same with the queue; when we wanted to rebuild it and re-encapsulate it for performance reasons we wrote it on JVM. So as those kind of lightweight, service-oriented projects proceed, more and more concerns are being taken out of the core Rails application.</blockquote>
The article also discusses <a href="http://www.infoq.com/articles/twitter-java-use">static typing and Ruby MRI vs. JRuby</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>358</wp:post_id>
		<wp:post_date>2011-07-05 10:09:16</wp:post_date>
		<wp:post_date_gmt>2011-07-05 08:09:16</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>twitters-move-to-the-jvm</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="jvm"><![CDATA[JVM]]></category>
		<category domain="post_tag" nicename="scala"><![CDATA[Scala]]></category>
		<category domain="post_tag" nicename="twitter"><![CDATA[Twitter]]></category>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[43757305504]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Objective-J and Cappuccino, with Francisco Tolmasky</title>
		<link>http://zef.me/2011/07/04/objective-j-and-cappuccino-with-francisco-tolmasky/</link>
		<pubDate>Mon, 04 Jul 2011 11:42:00 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2011/07/04/objective-j-and-cappuccino-with-francisco-tolmasky/</guid>
		<description></description>
		<content:encoded><![CDATA[<figure><a href="http://280north.com/">280 North</a> (bought by <a href="http://gigaom.com/2010/08/25/why-motorola-bought-280-north/">Motorolla</a>) is the company behind the impressive <a href="http://280slides.com/">280 slides</a> web-based presentation application (a la Keynote) and the framework it was built on: <a href="http://cappuccino.org/">Cappuccino</a>. Cappuccino is an oddball compared to other Javascript frameworks. First of all, it abstracts completely from HTML and CSS, and second of all: it’s not built using <em>regular</em> Javascript but with <a href="http://en.wikipedia.org/wiki/Objective-J">Objective-J</a>, a strict superset of Javascript that adds support for classes and message sending to Javascript — much like Objective-C adds those features to C. Objective-J was one of the first languages that uses Javascript as a target language.

The Cappuccino framework is more or less a port of Apple’s Cocoa framework, and Cappuccino applications seem to share the same elegant design style that Mac applications have.

We talk to Francisco Tolmasky, creator of Objective-J, one of the founders of 280 Degrees North and former Apple employee.

<strong>I understand you used to work at Apple where, presumably, you picked up on the ObjC/Cocoa virus. Can you attempt to explain where the attraction comes from. Is it simply familiarity, or is it more? Is it the language, is it the framework — both?</strong>

I did in fact come from Apple, but ironically enough this was the period where I probably used ObjC/Cocoa the least. I was on the original iPhone team where I worked mainly on MobileSafari, so a lot of my work was in C++ WebKit (making it work on mobile, determining how “touch” should work on the web, etc). When I did do ObjC, it was either in WebKit bindings or in what would later become UIKit. So I didn’t touch AppKit at all during my time there (which is what most people probably consider “Cocoa”).

I think the attraction of ObjC and Cocoa is that they are just an incredibly productive environment when it comes to UI work. If you pick up Aaron Hillegass’ Programming for Mac OS X, it is astonishing how quickly you are writing real apps. I believe the first examples don’t even require any code. I think this further proved itself with the App Store. In very little time incredibly unique new applications came from almost nowhere, its just a great “getting things done” set of tools. What we wanted to do is bring that same experience to the web. This experience of course is more than just the language and framework, you have things like XCode and Interface Builder which are essential pieces of the workflow. I think Interface Builder is really unique because its one of the few visual development tools that is used both in simple and very complex apps, and produces actually good looking stuff, and has made the transition to mobile successfully, and has withstood the test of time.

So originally we weren’t sure how important ObjC and Cocoa were to this mix. The initial goal was simply to make it possible to use things like Interface Builder for the web. So the first stab we took was using pure JavaScript to make a “Cocoa-inspired” framework. As it turns out though, API design is really hard, and we were doing a lot of wheel reinventing. So the next step was to have the Cocoa APIs in pure JavaScript. Unfortunately what we found is that JavaScript makes it very hard to do things like classical inheritance and even importing code from one file into another (this is still only a half-sovled problem in “pure” JS and when we first started working on it it was like 5 years ago). Additionally, Cocoa method names don’t really work if you don’t have labels. So at that point we started experimenting with simple language translation. Our first take looked a lot like Java and was similar to how CoffeeScript handles classes in that we were just wrapping the prototype semantics up in our own custom syntax. This didn’t solve a lot of our problems though, such as the need for method missing and dynamic dispatch for a lot of Cocoa features, and once again trivial things like the lack of an “import” command.

When we were thinking about these problems we realized that we were basically already on an asymptotic path to really just re-implementing ObjC/Cocoa on the web, so we decided to stop artificially stopping ourselves half way and just go for it. This all of a sudden made things surprisingly simple for us, and it makes sense because the problems we were trying to solve were more or less the same that ObjC was trying to solve 20 years before. ObjC wanted to add a very limited set of features to, and remain backwards compatible with, C. We of course were just trying to add a very simple set of features to, and remain backwards compatible with, JavaScript, which has a very C-like syntax. So there wasn’t a lot of “philosophy” or “religion” to it, it was just a very practical solution to a set of very real and practical problems, and we ended up with this cool language that can give you all the interesting features of Objective-C (code importing that intuitively works, dynamic dispatch, method missing, classical inheritance), with none of its drawbacks, and that can inter-operate with pure JavaScript seamlessly. There are more details on the evolution of Objective-J in <a href="http://cappuccino.org/discuss/2008/12/08/on-leaky-abstractions-and-objective-j/">a blog post I wrote a while back</a>.

Fast forward a few years and this investment has really paid off, allowing us to make full use of Xcode and Interface Builder, along with the plethora of existing Cocoa resources. Not to mention the interesting side effect that a lot of developers are able to very easily port their existing Mac and iPhone apps. It’s kind of cool that you can now pick up that same Programming for Mac OS X book and use it to make a fully functioning web app.

<strong>You mention ObjC/Cocoa are an incredibly productive environment. Do you have experience with other UI toolkit, e.g. WinForms, Java Swing, GTK? Can you identify where (and if) Apple/NeXT made different design decisions in their framework and why that worked out?</strong>

I’ve used a few other UI toolkits, including Java Swing and GTK, and have found them pretty frustrating. I think the magic of ObjC and Cocoa comes from two things: first, the very practical choices made in the framework, and second, ObjC and Cocoa’s participation in the whole stack.

The first point is more technical: I think Apple is really good at making the right compromises in their technologies. Objective-C is significantly more dynamic than C and C++ (e.g. you can treat it almost as untyped if you really want to), but it manages to do so without going overboard and really hurting performance. This is pretty subtle but really important I think. The “magic” really disappears if you have a nice language/framework and you create an app and then it feels like it will be impossible to get it fast enough. Objective-C has done a really good job of balancing these two elements, and over time evolving so that it never feels really outdated (the most recent example being the addition of blocks which are like closures).

The second point is less technical, but much of the magic comes from the surrounding environment: everything from tools to community. This is something that’s really easy to dismiss because most people developing technologies will probably consider most of this stuff “not their job”. For example, someone developing a language or framework may very well think that an IDE is someone else’s responsibility. However, especially with the App Store now, Apple really holds your hand throughout the whole process: from a great language and APi thats incredibly well documented, to a great set of tools you get for free (not just IDE, but all the performance stuff too), to finally publishing your app. The community is also focused on a lot the right things: such as good UI. It’s really hard and tangential to your normal duties to foster that kind of community, but its really important if you want to be a terrific UI framework. But I don’t want the takeaway here to be that ObjC/Cocoa are only good because of this surrounding environment, rather they are an excellent piece of a great whole. I think it would be hard to simply “swap in” a different language and framework without having to make major modifications to the other pieces as well.

<strong>When you ported AppKit and other Cocoa frameworks to the web, did you have any problems — did all the desktop metaphors easily port over to the web, or did you have to do certain things differently. Have you made improvements, particular choices different to the original Cocoa frameworks?</strong>

For the most part, most of the framework translates very nicely to the web, mainly because most of the concepts don’t change regardless of what platform you are on. A good example of this is undo: the mechanics of grouping undos and inserting them into your code is a very important and hard problem, but one that is platform agnostic. From an API standpoint most of the actual differences, while large perhaps “conceptually”, were not too difficult to handle programmatically. The most obvious I think is the asynchronous nature of the web. We had to add a lot of matching APIs for doing things asynchronously. I think where we were successful is in starting with Cocoa by default, and making changes when they made sense. This is a big win because again, most of the time the solutions that have existed for a long time just work (for example, all of Foundation works as is). That way we can focus on the really interesting problems when they come up, as opposed to having to split our time between them and the ones that are already solved. I think there’s a general and unfortunate culture of “starting from scratch” in the engineering community that really slows development down, where people try their new solution to a truly uninteresting problem first, and only revert to a tried and tested way if it fails.

I think most of the hard problems, whether technical or otherwise, had less to do with Cocoa itself and are just general problems any framework would have. A good technical example of this is the work we did to bundle all the resources of an app. On the desktop, this is not really an issue, but loading all the images and so forth needed in an online app is something everyone deals with. We had to come up with a lot of interesting solutions, like our <a href="http://cappuccino.org/discuss/2009/11/11/just-one-file-with-cappuccino-0-8/">“automagic” image spriter</a>. A less technical example was determining the right “feel” for an app on the web. We knew we didn’t want it to feel like a web page, so we started on the opposite end of the spectrum and made it feel like a desktop app, and slowly retreated when it made sense. This is an ongoing process, and we still have a lot to learn. We just announced Aristo 2, our new UI graphics/feel designed by <a href="http://madebysofa.com/">Sofa</a>, which I think feels like a really good compromise. Sofa likes to call it “under-promise, over-deliver”, where your UI elements may at first glance appear more traditional web, but as soon as you interact with them you see they have all the capabilities of their desktop counterparts. In other words, the look is more web, but the feel is very desktop. I’ve played around with it on their latest Cappuccino apps and it really feels good.

<strong>The thing that people first notice when seeing ObjC/ObjJ is their extremely long message names. Programming languages vary wildly in their conciseness. Extremes never seem like a good idea: Perl is so concise nobody can read it. On the other hand, ObjC/ObjC seem very verbose when it comes to class and message naming. Can you explain why ObjJ made the right choice here?</strong>

I personally love the “long” message names, but I don’t think “long” really describes what’s going on. If you’ve never used a labeled method syntax, it’s easy to just think of a really long method which doesn’t do anyone much good. But in my experience after people try it, they really understand the benefit, especially when returning to old code. I think its also important to realize that the language is in no way “forcing” long message names, but rather they are a conscious decision of the framework designers. The fact of the matter is most programming is reading code, not writing it, so I don’t understand why you’d ever optimize for the 20% case. Objective-C/J really reads like english, you know exactly what’s going on most the time, and most importantly, you don’t have floating arguments in a method that you can only understand by looking up documentation. How many times have you seen the last argument of a method be “true” or “false”, and have had no idea what it could apply to? That never happens in Objective-C/J. Here’s another example, look at the appendChild API from JavaScript:

node.appendChild(node1, node2); I always see people mixing up whether node1 is being appended before node2, or vice versa. Again, this would never happen in Cocoa since the API would be:

[node appendChild: node1 beforeChild: node2]; Any new team member would immediately know what’s going on, which in my opinion is much more important than chasing some vague aesthetic ideal. After all, a program’s true conciseness doesn’t come from chopping chars off of method names, but from being able to express algorithms well.

<strong>Objective-J is built on top of Javascript, which is dynamically typed. Objective-J, however, requires type signatures for return types and arguments types. Why? Is this type information checked, is it for documentation purposes, IDE support?</strong>

So the “types” in Objective-J are completely optional (and they are actually optional in Objective-C methods as well). We keep them in mainly for documentation purposes, and because we do in fact have tools that catch a lot of common bugs by telling you that you are sending the wrong type to a method. I think most JavaScript languages document what types they expect, we’ve just elevated to a language level feature if you want it:

// With types  — (BOOL)containsObject:(id)anObject;

// Without types  — containsObject:anObject;

<strong>There have been rumors of Obj-J 2.0. For this you built <a href="http://languagejs.com/">language.js</a>, a Javascript parser library that can handle parser errors well resulting in nicer error messages. What are the advantages of using this new library over the approach you took before? Are there any other new features coming in 2.0?</strong>

Objective-J 1 was written a <em>long</em> time ago when our requirements were very different. When we were making Objective-J, the only other group that had seriously tried building a language on top of JavaScript was GWT, so we were convinced we needed to nail the experience of loading an Objective-J file on the web and having it “just work” without a separate compilation step. For this reason, the ObjJ parser was designed to be incredibly fast at converting code, to the detriment of a lot of other features. SInce Objective-J is already so close to JavaScript, the parser actually identifies large pieces of code to skip altogether. This makes it quite fast, but of course means we don’t get the benefits of building a real AST and thus incorporating a lot of fancier features. That’s changing with Objective-J 2.0, where we are starting from scratch on a real parser that will allow all this. We’ll be able to support things like fast enumeration (kind of like forEach but without the slowdown of a closure, and additionally optionally “checked” for mutation during iteration), as well as some really impressive performance improvements all around (I go into the technical aspects of this in my CappCon talk that we will be posting on the website soon). And of course, the other nice benefit is really excellent error and warning support, probably even better than what the browser currently gives you.

To help me with this, I’ve started development on a new JavaScript parser generator library called <a href="http://languagejs.com/">language.js</a>. Its still quite early and experimental, but language.js basically tries to solve a lot of the issues in making and, more importantly, maintaining a language that compiles to JavaScript. I think the most important aspect of this is to make it really accessible for people to be able to contribute to the language (and also of course to make new languages as well). One of the things we noticed when working on Cappuccino is that it was very hard to ever make changes to the parser. This is because parsers are generally hard to understand, and also because the performance implications were never obvious so when we did get someone who knew what was going on, we were still afraid to accept the patch. This would have been mitigated by using a parser generator like Jison, but then we would have had to sacrifice a lot of speed. Language.js thus has first class support for a lot of the things people would want to do to a language, while not hindering performance.

The best example of this is error support. I’ve added a new operator designed specifically to handle errors trivially and declaratively. If you are familiar with PEG parser generators, the “Naughty OR “operator (%) behaves just like the choice operator (/), but only gets used if the parse first completely fails. Because of this, performance is guaranteed to never be affected, regardless of how many error rules you add to the grammar. Thus, you are allowed to offer alternative “incorrect but valid” grammars to provide increasingly useful errors to your users. The idea is that as users file bugs when they get angry at experiencing an error that has a less than optimal error message, they can very easily submit patches to deal with the problems they encounter. For example, the following simplified snippet from the JavaScript grammar:

Identifier = !(ReservedWord !IdentifierPart) IdentifierName % ReservedWordIdentifier

ReservedWordIdentifier &lt; Identifier can’t be a reserved word&gt;= ReservedWord !IdentifierPart

generates the following error message with no additional code for “new = 5”:

new = 5; ^^^ ERROR line 0: Identifier can’t be a reserved word.

Another common error, a missing end brace, is handled just as easily:

Block = “{“ <em>StatementList? </em>“}” % BadBlock

BadBlock &lt; Missing ending brace&gt;= “{“ <em>StatementList? </em>

There is still a lot of work left in language.js though, which is why it hasn’t been rolled into Cappuccino proper as the official new parser yet, but if you want to contribute, you should <a href="https://github.com/tolmasky/language">definitely checkout the project</a>.

<strong>Beside proper parsing and a foreach loop, what else will be new in Objective-J 2?</strong>

The feature set of Objective-J 2.0 is not set in stone yet. We are in the unique position now where all the crazy ideas we had in the past are now easily doable, so we are going to have a period where we have to weigh their pros and cons and choose only the ones that really make sense. Some of the ideas are present in Objective-C (such as properties), and others are of our own creation. Additionally, we have the choice of supporting a lot of the new JS features in browsers that don’t support them yet. One example that might be welcome to current Cocoa programmers would be the ability to enforce immutability on arrays:

immutable_array[0] = 5; // throws an error array[0] = 5; // no problem

This could be really interesting as it would allow you to return arrays from APIs safely without having to copy them, as well as possibly encouraging better programming in general. But the question arrises whether this would be confusing or not. An example of a unique feature we’ve been thinking about is much richer literal support for the Foundation types, such as CPSet. I have always been of the opinion that a lot of code abuses arrays solely because they’re “easier” to type (since they have a literal form), and this leads to a lot of misuse. Sets are a good example because people end up unknowingly writing O(n) code that should be O(1). This is something I’ve been thinking a lot about recently and will probably end up writing extensively about in a blog post at some point when I get the time. There are many more feature ideas that have been suggested and most of them have been discussed on our mailing lists so if this is something that interests you, you should <a href="https://groups.google.com/forum/#!forum/objectivej">check it out there</a>.

<strong>Have you considered using Objective-J in a server context — seems like it could quite easily run on node.js — any interest in that?</strong>

Objective-J actually already works on the server, and did from the very beginning. A lot of people don’t know that the backend of <a href="http://280slides.com/">280slides.com</a> has been Objective-J from the very start (and we did it back when basically your only option for JS on the server was Rhino). A lot of the code is shared and it’s really convenient since you can do cool stuff like archive your documents on the client and unarchive them on the server with the same model code, which is how our exporter works. You can even take it a step further and create entire graphic interfaces on the server and just send them over the wire really easily (think cibs). Luckily you don’t have to use Rhino anymore, and our tools support the CommonJS “standard”. We’re working on getting it all up and running on node too (you might have noticed language.js is all node). Its currently pretty trivial to get Objective-J running in node since it just compiles to JS at the end of the day, but we’d like to provide an official solution that makes it even easier.

<strong>During your <a href="http://vimeo.com/4778201">JSConf ’09 talk</a> you talk about working with the Webkit team to improve profiling and debug information for Objective-J by adding <code>displayName</code> to functions. I wonder, what else could debugging tools) do to better support non-Javascript languages running in the browser’s Javascript VM? <code>displayName</code> is great for profiling, but what about actual debugging (getting appropriate stack traces and line numbers, for instance)? Are you aware of any developments in that area?</strong>

I believe there is ongoing work in <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=618650">this field at Mozilla</a>. Basically this provides the ability to map compiled lines to source lines. There are also hacks users can do themselves, for example a very easy one that’s popular in the Objective-J community is to edit the WebKit inspector file so that it accepts Objective-J in the console.

<strong>Every client-side web framework seems to be moving in the direction of mobile. Are there plans to move Cappuccino in that direction as well?</strong>

The mobile web, and specifically how it relates to applications, is an interesting area that I haven’t been able to really solidify my thoughts on yet. I think there are kind of two different ways to approach this question: “traditional” apps, and “magical” apps. I think Cappuccino is very capable of making some great traditional apps for the mobile web today. If you run 280slides.com on an iPad 2 today, even though it is in no way optimized for mobile, its really impressive how well it works. If we were to make it again today, I think it would be very possible to provide an awesome mobile web experience as well. The fact of the matter is that we went from Cappuccino basically not running at all to running really well in very little time, almost entirely thanks to the hardware advancing so quickly. I think very soon making these “traditional” apps will be no problem.

On the other hand, this isn’t very interesting beyond a technical and practical appreciation. What’s really interesting about mobile is the new experiences that only it can uniquely offer, the experiences that users are increasingly coming to expect. This is what I mean by “magical” apps. Even if we can solve all the performance problems (just a matter of time), and bring in all the necessary touch APIs (again, not very difficult), we still can’t give people the same “magic” as a native app. There’s no way that we the JavaScript developers can give people video recording for example, we can’t even give them access to the photos they took on their camera. Things like this will almost certainly come with time, but that is precisely the point: the mobile web isn’t blocked by any particular library, it’s simply blocked by its own lack of maturity.

GarageBand is the most exciting app I’ve seen on the iPad, and perhaps that I’ve ever seen in my life. When you use it, you really get excited about what mobile has to offer. Unfortunately today there is simply no way to make something comparable in MobileSafari. I think its a feat even in native. No JavaScript library can offer this today, and so I think its really disingenuous for anyone to really bill themselves as an honest alternative to native on mobile right now. On the other hand, I think the desktop has been ready for a long time. We see apps all the time that can very seriously compete and often outclass their desktop counterparts. The only remaining hurdle for the desktop web really seems to just be speed. But of course this wasn’t always the case, it took time for us to get to that point, and it will for the mobile web too.

Links  — — —
<ul>
 	<li><a href="http://twitter.com/tolmasky">Francisco Tolmasky on twitter</a></li>
 	<li><a href="http://cappuccino.org/">Cappuccino</a></li>
 	<li><a href="http://cappuccino.org/discuss/2008/12/08/on-leaky-abstractions-and-objective-j/">On Leaky Abstractions and Objective-J</a></li>
 	<li><a href="http://languagejs.com/">language.js</a></li>
 	<li><a href="http://vimeo.com/4778201">JSConf ’09 talk</a></li>
</ul>
</figure>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>376</wp:post_id>
		<wp:post_date>2011-07-04 13:42:00</wp:post_date>
		<wp:post_date_gmt>2011-07-04 11:42:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>objective-j-and-cappuccino-with-francisco-tolmasky</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="cappuccino"><![CDATA[Cappuccino]]></category>
		<category domain="post_tag" nicename="cocoa"><![CDATA[Cocoa]]></category>
		<category domain="post_tag" nicename="compiles-to-javascript"><![CDATA[Compiles To Javascript]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="interview"><![CDATA[Interview]]></category>
		<category domain="post_tag" nicename="javascript"><![CDATA[JavaScript]]></category>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[43757295289]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Dr. Zef</title>
		<link>http://zef.me/2012/01/20/dr-zef/</link>
		<pubDate>Fri, 20 Jan 2012 08:11:43 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2012/01/20/dr-zef/</guid>
		<description></description>
		<content:encoded><![CDATA[Last week Wednesday I successfully defended my PhD thesis. Therefore, I am now officially a doctor. I was a little nervous, because you don’t know in advance what questions will be be asked during the defense. However, it was a very nice, friendly defense.

<a href="http://zef.me/thesis.pdf">You can download my thesis as PDF</a>, though I must warn you: it’s a page turner!
<blockquote>Domain-Specific Languages (DSLs) are programming language aimed at a particular problem domain, e.g. banking, database querying or website page lay-outs. Through the use of high-level concepts, a DSL raises the level of abstraction and expressive power of the programmer, and reduces the size of programs.

This dissertation covers various aspects of the design and implementations of such DSLs. Throughout the project, two DSLs were developed: WebDSL, a language for rapid web application development, and mobl, a DSL for mobile application development. Using these two case studies, the dissertation explores the design space, as well as techniques developed to implement the compiler and IDE for such DSLs.

The general design principle applied is syntactic integration and separation of concerns. Rather than using a number of DSLs to build a single application, our approach is to develop a single, integrated DSL that can be used to develop the entire application, while still enabling clear separation of concerns. The result of this integration is static verification — the ability to instantly be notified when your program is inconsistent, without having to run it.

The dissertation covers five aspects of DSL design and implementation: (1) Verification, the ability to verify applications written using the DSL; (2) Coverage, how to ensure that a DSL enables its user to express what he needs to express; (3) Abstractions, the use as well as the definition of abstractions in a DSL; (4) Code generation, techniques for efficiently generating executable code from a DSL; (5) Portability, the ability to generate code from a DSL that is runnable on multiple platforms.</blockquote>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>528</wp:post_id>
		<wp:post_date>2012-01-20 09:11:43</wp:post_date>
		<wp:post_date_gmt>2012-01-20 08:11:43</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>dr-zef</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[43757225825]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>+</title>
		<link>http://zef.me/2011/06/29/712/</link>
		<pubDate>Wed, 29 Jun 2011 07:54:33 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2011/06/29/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p><a href="http://www.youtube.com/v/xwnJ5Bl4kLI?version=3" target="_blank">http://www.youtube.com/v/xwnJ5Bl4kLI?version=3</a></p>
<a href="https://www.youtube.com/v/xwnJ5Bl4kLI?version=3">https://www.youtube.com/v/xwnJ5Bl4kLI?version=3</a>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>712</wp:post_id>
		<wp:post_date>2011-06-29 09:54:33</wp:post_date>
		<wp:post_date_gmt>2011-06-29 07:54:33</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>712</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="facebook"><![CDATA[Facebook]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="google"><![CDATA[Google]]></category>
		<category domain="post_tag" nicename="plus"><![CDATA[Plus]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Everything “In The Cloud”</title>
		<link>http://zef.me/2011/09/04/everything-in-the-cloud/</link>
		<pubDate>Sun, 04 Sep 2011 13:11:38 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2011/09/04/everything-in-the-cloud/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Here’s what I use my computer for:</p>
<p>* Browsing the web<br>* Email<br>* Twitter, Facebook, …<br>* Listening to music<br>* Watching video<br>* Chat/call/skype<br>* Developing software</p>
<p>I realized that all of these take place “in the cloud” (distributed on multiple servers across on the internet) today. There’s very little vital data that I still store locally on my harddrive.</p>
<p>Browsing the web, email, twitter, Facebook is all online, all this data is in the cloud. I do most of my music listening on [Spotify](http://www.spotify.com), which also stores my playlists, and have my iTunes Music directory backed-up on [Dropbox](http://www.dropbox.com). Recently I have been uploading almost all my documents to [Google Docs](http://docs.google.com) as well as some video content (which I can now stream from my Docs account). Chatting and calling is also all online, using Skype, IRC and Google Talk.</p>
<p>Last Thursday I started my job at [Cloud9 IDE, Inc.](http://wwww.cloud9ide.com) who build the Cloud9 IDE — which, you guessed it, enables you to develop software in the cloud.</p>
<p>I think I can truthfully say that if my laptop breaks down right now, it really wouldn’t matter. I wouldn’t lose any important data.</p>
<p>None.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>779</wp:post_id>
		<wp:post_date>2011-09-04 15:11:38</wp:post_date>
		<wp:post_date_gmt>2011-09-04 13:11:38</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>everything-in-the-cloud</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Avoiding JavaScript Pitfalls Through Tree Hugging</title>
		<link>http://zef.me/2012/02/05/avoiding-javascript-pitfalls-through-tree-hugging/</link>
		<pubDate>Sun, 05 Feb 2012 11:45:33 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2012/02/05/avoiding-javascript-pitfalls-through-tree-hugging/</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Mid-january I have a talk about <a href="https://github.com/ajaxorg/treehugger">treehugger.js</a> at <a href="http://summit.meetjs.pl/">MeetJS Summit</a>. Treehugger is the library I developed for use in Cloud9 for <a href="http://cloud9ide.posterous.com/toward-better-code-editing">various code analysis features</a>.</p>
<p>The video of my live coding is not always super clear, but I think it gives a good, albeit brief, introduction to my work there anyway. To play with treehugger.js (as I did during the talk), you can use the <a href="http://ajaxorg.github.com/treehugger/test.html">treehugger.js playground</a>.</p>

<!-- wp:core-embed/youtube {"url":"https:\/\/www.youtube.com\/embed\/wY3Ycpqa3KE","type":"rich","providerNameSlug":"","className":"wp-embed-aspect-16-9 wp-has-aspect-ratio"} -->
<figure class="wp-block-embed-youtube wp-block-embed is-type-rich wp-embed-aspect-16-9 wp-has-aspect-ratio"><div class="wp-block-embed__wrapper">
https://www.youtube.com/embed/wY3Ycpqa3KE
</div></figure>
<!-- /wp:core-embed/youtube -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>850</wp:post_id>
		<wp:post_date>2012-02-05 12:45:33</wp:post_date>
		<wp:post_date_gmt>2012-02-05 11:45:33</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>avoiding-javascript-pitfalls-through-tree-hugging</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[43757245271]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Mobile Apps Are Bad At Mobile</title>
		<link>http://zef.me/2011/06/27/mobile-apps-are-bad-at-mobile/</link>
		<pubDate>Mon, 27 Jun 2011 18:28:08 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2011/06/27/mobile-apps-are-bad-at-mobile/</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://blog.davidsingleton.org/mobiletcp">David Singleton</a> monitored his Internet connection while on a train journey. Most people have experienced what it is like using mobile Internet in a driving vehicle — it’s generally pretty unreliable.

David found that the big issue is incidental latency. Latency can vary wildly, in his measurements between 100 <em>milliseconds</em> and 20 <em>seconds</em>. TCP does not deal well with such differences, due to its exponential backing off. Do we need something built on IP that deals better with extremely unreliable connections?

This makes a strong case for offline capable mobile applications: make sure your application is still useful during those 20 second latencies. Cache data. Precache data. Show something more than just a spinner.

As it turns out mobile apps are generally good at the “app” part; not so much on “mobile”.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>895</wp:post_id>
		<wp:post_date>2011-06-27 20:28:08</wp:post_date>
		<wp:post_date_gmt>2011-06-27 18:28:08</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>mobile-apps-are-bad-at-mobile</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="mobile"><![CDATA[Mobile]]></category>
		<category domain="post_tag" nicename="tcp"><![CDATA[Tcp]]></category>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[43876582168]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Reality Distortion through Text</title>
		<link>http://zef.me/2011/12/29/reality-distortion-through-text/</link>
		<pubDate>Thu, 29 Dec 2011 16:08:32 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2011/12/29/reality-distortion-through-text/</guid>
		<description></description>
		<content:encoded><![CDATA[One of Steve Jobs’ most amazing traits was the ability to “invoke” a reality distortion field. He did it many a time. He went on stage, pitched his new product and even though you didn’t need it at all — you’d feel deep inside that in fact you really <em>did</em>. You had to have it.

According to his biography, Steve did this in many aspects of his life. Not just on stage, but also during meetings and even with his disease. In the later case that did not work out so well.

I always wondered — what is the essence of this distortion field? Could I do that, or is it Steve-specific? Does it require you hearing him, seeing him, or could he do the same thing through text? Yeah. Would it be possible to convince somebody of about anything as long as you would pitch it the right way <em>in text</em>, online? Is it about the pitch, or is it more than that? Can you somehow perfect a writing style that does that?

Since then I made an attempt or two, of really working on pitching an idea <em>just</em>right. Perfecting it in every possible way. Attempting to describe it in such a way that you simply <em>could not</em> disagree. And I think, at times, I did pretty well. But then I found out the reality of an online audience.

They don’t read this far. <a href="http://en.wikipedia.org/wiki/Wikipedia:Too_long;_didn't_read">TL;DR</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>928</wp:post_id>
		<wp:post_date>2011-12-29 17:08:32</wp:post_date>
		<wp:post_date_gmt>2011-12-29 16:08:32</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>reality-distortion-through-text</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="because-i-care"><![CDATA[Because I Care]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[43757257262]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Luna</title>
		<link>http://zef.me/2011/07/12/luna/</link>
		<pubDate>Tue, 12 Jul 2011 11:06:31 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2011/07/12/luna/</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://tjholowaychuk.com/post/7517832396/the-luna-programming-language">Luna</a> is a new language <a href="http://tjholowaychuk.com/">TJ Holowaychuk</a> is working on. Its goals are stated as follows:
<blockquote>The current goals of Luna are the following:
<ul>
 	<li>small, simple, expressive, and explicit syntax</li>
 	<li>fast, fast, and fast</li>
 	<li>robust reflection capabilities</li>
 	<li>opt-in callee evaluated messages</li>
 	<li>register based VM</li>
 	<li>embeddable</li>
</ul>
</blockquote>
Luna — not to be confused with Asana’s <a href="http://asana.com/luna/">Luna</a> — borrows ideas from numerous languages including Python, IO, and Lua and Ruby. It is a pure prototype-based language. It made some interesting syntax choices:

greet =: user msg console log(‘hello ‘ . user . ‘ ‘ . msg)

This code defines a <code>greet</code> function with two arguments: <code>user</code> and <code>msg</code>. The <code>=: user msg</code> should be interpreted as a separate <code>=</code>, followed by a function literal <code>: user msg</code>, with its body indented on the next line.

Luna is an <a href="https://github.com/visionmedia/luna">open source project hosted at GitHub</a>. It is in early stages, but an interesting language to follow.

“Stop inventing languages!”  — — — — — — — — — — — — — - An oft heard critique when any new language is introduced is “Why a new language? Please stop inventing new languages!” This sentiment is <em>wrong</em>. If people would not be inventing new languages, we would still be writing assembly code, or be stuck writing COBOL. It is through experimentation that we came to the current state of programming languages. We’re not there yet. We’re not done. Therefore, any new language should be welcomed and studied. While most will not survive, they may influence their successors.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>971</wp:post_id>
		<wp:post_date>2011-07-12 13:06:31</wp:post_date>
		<wp:post_date_gmt>2011-07-12 11:06:31</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>luna</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[43757278091]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Google’s New Mobile Tab Interaction</title>
		<link>http://zef.me/2011/07/03/googles-new-mobile-tab-interaction/</link>
		<pubDate>Sun, 03 Jul 2011 12:47:46 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2011/07/03/googles-new-mobile-tab-interaction/</guid>
		<description></description>
		<content:encoded><![CDATA[It’s always interesting to observe how regular desktop web <a href="http://en.wikipedia.org/wiki/Interaction_design_pattern">interactions</a> can be translated to mobile. With the launch of <a href="http://plus.google.com/">Google+</a> with accompanying mobile web app, Google has changed the tab bar along the top of their mobile web apps. At first sight, they seem to have shrunk significantly:

When looking more closely you notice an orange thing at the top right. What’s up there? To find out you can swipe the tab bar downwards:

As it turns out that each tabs is accompanied with a giant product icon that creates a large enough touch surface to select it even with the thickest of fingers. At the right there’s the Google+ notification counter with a “More” area. When you select it, it slides down and shows more Google products.

As it turns out, this “More” section contains sub-sections of its own: “Search”, “Apps” and “Notifications”. When selecting “Notifications” a list of Google+ notifications appear that can be acted upon:

Note that all this action takes place in the tab section of the screen. At the bottom of the screen, you can still interact with Gmail as usual. This is Google’s mobile version of the pop-over it uses in the desktop browser versions of its applications:

A clever solution that works very well in practice.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1010</wp:post_id>
		<wp:post_date>2011-07-03 14:47:46</wp:post_date>
		<wp:post_date_gmt>2011-07-03 12:47:46</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>googles-new-mobile-tab-interaction</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="google"><![CDATA[Google]]></category>
		<category domain="post_tag" nicename="interaction"><![CDATA[Interaction]]></category>
		<category domain="post_tag" nicename="mobile"><![CDATA[Mobile]]></category>
		<category domain="post_tag" nicename="mobile-web"><![CDATA[Mobile Web]]></category>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[43876633936]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Google and Design</title>
		<link>http://zef.me/2011/06/29/google-and-design/</link>
		<pubDate>Wed, 29 Jun 2011 09:16:25 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2011/06/29/google-and-design/</guid>
		<description></description>
		<content:encoded><![CDATA[

<figure>

<img data-width="1" data-height="1" alt="Google logo" src="https://cdn-images-1.medium.com/max/800/0*o39EBIKLqGbP2ZHI.jpg">
</figure><p>User interaction design is possibly one of the [most difficult parts of software engineering](http://www.amazon.com/gp/product/0672326140/ref=as_li_tf_tl?ie=UTF8&amp;tag=sta080-20&amp;linkCode=as2&amp;camp=217145&amp;creative=399369&amp;creativeASIN=0672326140)</p>
<figure>

<img data-width="1" data-height="1" src="https://cdn-images-1.medium.com/max/800/0*WnqTC7Ej3y7jh54p.">
</figure><p>. It is also an aspect that has not been the strong point of Google. Google’s strength is in its culture of algorithms and data analysis. The way to win an argument at Google it to _prove_ the other wrong with hard numbers — not to impress somebody by making it look pretty.</p>
<p>Whether that approach works well when it comes to user interaction design, remains to be seen. Google’s products are generally functional, but pretty? No.</p>
<p>One of the more memorable quotes in Steven Levy’s <a href="http://www.amazon.com/gp/product/1416596585/ref=as_li_tf_tl?ie=UTF8&amp;tag=sta080-20&amp;linkCode=as2&amp;camp=217145&amp;creative=399369&amp;creativeASIN=1416596585" target="_blank">In The Plex</a></p>
<figure>

<img data-width="1" data-height="1" src="https://cdn-images-1.medium.com/max/800/0*aqWw4x3ZLAEsyct7.">
</figure><p>(a very worthwhile book, by the way) comes from Marissa Mayer responding to a proposed redesign of Gmail, involving fancy shades and visual effects: “It does not look as if a computer designed it.” According to Google, the ideal user interface is one that looks like it was “designed” by a machine.</p>
<p>But yesterday that seemed to have changed. Not only is [Google redesigning the layout of its search engine](http://googleblog.blogspot.com/2011/06/evolving-google-design-and-experience.html) for the better, one has to admit — [Google+](http://plus.google.com) is also looking pretty good. Almost [unGoogly](http://techcrunch.com/2011/06/28/google-plus-design-andy-hertzfeld/)...</p>
<p>What happened? As it turns out [Andy Hertzfeld](http://en.wikipedia.org/wiki/Andy_Hertzfeld) is behind the Google+ design, one of the original Macintosh designers. Hertzfeld is not the only design talent that Google put to work. A while ago [Google also hired Matias Duarte](http://www.engadget.com/2010/05/27/palms-matias-duarte-has-joined-google-as-user-experience-direct/) who was responsible for the WebOS look and feel. He’s been hard at work on Android.</p>
<p>Has Google algorithmically determined that design does matter?</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1410</wp:post_id>
		<wp:post_date>2011-06-29 11:16:25</wp:post_date>
		<wp:post_date_gmt>2011-06-29 09:16:25</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>google-and-design</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="google"><![CDATA[Google]]></category>
		<category domain="post_tag" nicename="interaction-design"><![CDATA[Interaction Design]]></category>
		<category domain="post_tag" nicename="opinion"><![CDATA[Opinion]]></category>
		<category domain="post_tag" nicename="user-experience"><![CDATA[User Experience]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Node.js and The Case of the Blocked Event Loop</title>
		<link>http://zef.me/2012/12/20/node-js-and-the-case-of-the-blocked-event-loop/</link>
		<pubDate>Thu, 20 Dec 2012 16:47:38 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2012/12/20/node-js-and-the-case-of-the-blocked-event-loop/</guid>
		<description></description>
		<content:encoded><![CDATA[In <a href="http://zef.me/4235/pick-your-battles">Pick Your Battles</a> I listed a few problems that we had in our production deployment of a big node.js codebase. Some people asked me to elaborate on one in particular:
<blockquote>“Oh, our node.js server processes seem to freeze up for a long time (seconds) from time to time, why does that happen?”</blockquote>
So, why <em>did</em> this happen? The short answer is our code blocked the node.js eventloop from time to time. As you may be aware, node.js — like Javascript in the browser — is a single-threaded, <a href="http://blog.mixu.net/2011/02/01/understanding-the-node-js-event-loop/">event loop driven</a> environment: only one thing can happen at a time. Parallelism does not exist from the programmer’s perspective. This works, because the applications built using node.js should be I/O bound instead of CPU bound. Meaning that to to handle a request, most time is spent waiting for I/O (a disk has to spin, data has to travel over a network) rather than doing CPU intensive computations.

In a sense, node.js brings us back to the <a href="http://en.wikipedia.org/wiki/Cooperative_Scheduler#Cooperative_multitasking.2Ftime-sharing">cooperative scheduling</a> days of Windows 3.x/Mac OS 9 and earlier — but with the advantage of avoiding all the overhead that threads bring to the table.

Cooperative scheduling works well, as long as you — well — cooperate. What does cooperate mean in this context? You have to make sure that you chop up the work that needs to done in small nuggets of computation and don’t do too much computation, especially not at once. For instance:

function requestHandler(req, res) { db.getUser(req.params.uid, function(err, user) { res.end(user.username); }); } This super poor piece of Javascript code is wrong in many ways, but it does one thing well: whenever <code>requestHandler</code>is called (presumably when a HTTP request comes in) it performs an asynchronous call and returns immediately. Assuming <code>db.getUser</code> is as asynchronous as it looks — you’re good to go — very little computation, immediately invoking another I/O-bound operation.

A year ago, Ted Dziuba made an important point about node.js in <a href="http://pages.citebite.com/b2x0j8q1megb">a fairly inflammatory post (since removed from his blog, but I found a copy)</a>:
<blockquote>A function call is said to block when the current thread of execution’s flow waits until that function is finished before continuing. Typically, we think of I/O as “blocking”, for example, if you are calling socket.read(), the program will wait for that call to finish before continuing, as you need to do something with the return value.

Here’s a fun fact: every function call that does CPU work also blocks. This function, which calculates the n’th Fibonacci number, will block the current thread of execution because it’s using the CPU.</blockquote>
&gt;

function fibonacci(n) { if (n &lt; 2) return 1; else return fibonacci(n-2) + fibonacci(n-1); } He goes on to demonstrate how his Fibonacci server written in node.js has abismal performance. That’s great, but we don’t usually build fibonacci servers in node.js. However, there are cases where node.js <em>does</em>become CPU bound and blocking, albeit unintentional:

function requestHandler(req, res) { var body = req.rawBody; // Contains the POST body try { var json = JSON.parse(body); res.end(json.user.username); } catch(e) { res.end("FAIL"); } } Looks fine right? It just takes the request’s body and parses it. This works great until somebody POSTs a 15mb JSON file, which your server will now have to process. I just tested this on my laptop. Executing the <code>JSON.parse()</code> call on a 15mb JSON file took about 1.5 seconds. Similarly, if I stringify a JSON data structure of this size with <code>JSON.stringify(json, null, 2)</code> it takes about 3 seconds.

You may think: “oh, 1.5 seconds, 3 seconds, that’s still pretty fast!” Do realize that during this time the event loop is completely blocked, your node.js server process will do <em>nothing</em> else. It will not accept new connections, it will not keep processing ongoing requests — the entire process freezes. While a 15mb request is a bit of a stretch, a 200kb JSON document may seem more reasonable. Yet, if you get 20 of those, your server clogs up just the same.

So, how much of an impact does this blocking have on performance? That’s pretty easy to calculate. Let’s say 1 request takes 1ms to process, that means you can handle at most 1/0.001 = 1000 requests/s (assuming you don’t do any I/O). That’s pretty good. Alright, so how about some longer event loop blocking?
<ul>
 	<li>5ms/req = max 200 reqs/s</li>
 	<li>50ms/req = max 20 reqs/s</li>
 	<li>500ms/req = max 2 reqs/s</li>
 	<li>2s/req = 0.5 reqs/s</li>
</ul>
Of course this correlation holds for any other technology just the same: the more processing each request takes, the fewer a single server can handle. However, with other platforms requests will just get <em>slower</em> as the load increases on a server. With node.js, if you do a blocking computation the entire process hangs completely for the duration of the request. You can limit the impact on your users by using a module like <a href="http://nodejs.org/api/cluster.html">cluster</a>, but the message is clear: blocking the eventloop is bad, mkay?

Node.js’s core strength is message passing and glueing components together. It’s great at receiving a request, processing it slightly and passing it on to another (database) server, waiting for a result, tweaking that result and passing it back to client.

The main problem is that you may be completely unaware that your program does serious computation until you start to notice hiccups. Tooling for this aspect of node.js development is still severely lacking.

A while back I was in contact with <a href="http://www.nodefly.com/">NodeFly</a>, they seem very serious about building tools to detect these types of issues. Definitely a company to watch in this space.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>74</wp:post_id>
		<wp:post_date>2012-12-20 17:47:38</wp:post_date>
		<wp:post_date_gmt>2012-12-20 16:47:38</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>node-js-and-the-case-of-the-blocked-event-loop</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="programming"><![CDATA[Programming]]></category>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[43757154287]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Message Queue-Based Load Balancing</title>
		<link>http://zef.me/2012/12/19/message-queue-based-load-balancing/</link>
		<pubDate>Wed, 19 Dec 2012 16:01:34 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2012/12/19/message-queue-based-load-balancing/</guid>
		<description></description>
		<content:encoded><![CDATA[When you run a big mission critical web app, you have to two big challenges on the operational side:
<ol>
 	<li>Handling <em>failure</em> — failure is all around: servers fail, processes crash, datacenters blow up.</li>
 	<li><em>Scaling</em> as traffic increases and decreases.</li>
</ol>
A tool in use by practically everybody to solve both of these challenges are load balancers. Here’s how most of them work:

In this architecture, the <em>load balancer</em> is the single entry point for the client (often a web browser). The load balancer keeps a <em>registry</em> of <em>servers</em> that can handle a request. Usually this registry is kept up to date more or less manually (or via scripts). If a new server should be added to the load balancing pool, an API call is sent to the load balancer. Similarly, when a server has to be brought down (e.g. for upgrading or scaling down) it has to be removed from the pool manually.

Whenever a client request comes in, the load balancer picks a server from the pool (usually at random or <a href="http://en.wikipedia.org/wiki/Round-robin_scheduling">round-robin</a>) and proxies the request to it. A response from the server is proxied back to the client through the load balancer.

This system scales nicely because the load balancer itself has to do very little, all it does is proxy requests. Load balancers like <a href="http://haproxy.1wt.eu/">HAProxy</a> can handle <em>tons</em> of requests (in the order of tens or hundreds of thousands per second) and nicely distribute them over a large number of servers.

The question remains how many worker servers you need to handle a certain amount of traffic. How do you know if you have to scale up or down? There’s a few things you can look at, for instance response times, CPU load or memory usage of the servers. It does remain a tricky problem, though.

Effectively every big site uses these types of load balancers (be it in software or hardware). They are so prevalent that most cloud providers offer pre-built appliances for them, such as Amazon’s <a href="http://aws.amazon.com/elasticloadbalancing/">ELBs</a> and Rackspace <a href="http://www.rackspace.com/cloud/public/loadbalancers/">Cloud Load Balancers</a>.

While load balancers are great at helping a site scale, handling failure is a bit more tricky. What if one of the servers registered with a load balancer fails? Requests sent there will simply never return a result. To deal with this problem, most load balancers periodically poll all the servers in the pool and eject servers that repeatedly don’t respond to requests.

Ejecting a failing server is not instantaneous, however. A load balancer usually retries a server a few times to make sure it’s really down before ejecting it. Requests that were proxied there while the load balancer had not detected failure will likely just fail.

So, we can identify three problems/inconveniences with the current state of practice in load balancing:
<ol>
 	<li>Management of the registry with the pool of servers is manual, we have to manually (or via scripts) add and remove servers from the pool.</li>
 	<li>It can be tricky to know if you need to scale your system up or down.</li>
 	<li>Failure detection happens based on polling and take time to detect failure.</li>
</ol>
<strong>An alternative approach</strong> So, here’s another approach — an approach based on good old <a href="http://en.wikipedia.org/wiki/Message_queue">message queues</a>. Schematically this architecture looks as follows:

In this architecture the model is slightly different. The flow is as follows:
<ol>
 	<li>The client sends a request to a load balancer</li>
 	<li>Instead of proxying it to a server directly, the load balancer puts the request on a message queue.</li>
 	<li>One or more servers are subscribing to this request queue and one of them pulls in the message containing the request.</li>
 	<li>After the request is handled and response produced, the server puts the response on the response message queue.</li>
 	<li>The load balancer is subscribed to the response queue and forwards the response back to the client.</li>
</ol>
So, why is this a more attractive approach than traditional load balancing?

From the server perspective it’s a pull model. When a server boots up, it subscribes to the request queue, so there’s no manual registry that has to be kept up to date. The server <em>itself</em> decides whether it has the capacity to handle a request or not. It will only pull in a request message when:
<ol>
 	<li>It’s up (duh)</li>
 	<li>It has the capacity to do so (it is not overloaded)</li>
 	<li>It’s not hiccuping</li>
</ol>
Compare this to the traditional load balancing approach where requests are pushed to servers whether or not they’re capable of handling them.

The message queue-based system handles failure beautifully as well. If the server crashes while handling a request, the message queue will detect the lost connection and relay the request message to another server: no failed requests.

It’s also easier to detect whether you need to scale up your system or not. You can easily see when your servers are having a tough time handling all requests when the request message queue is growing instead of staying steady. It’s trivial to add a message queue watcher that scales your system accordingly: if the queue goes over a certain threshold, you spin up some extra servers to handle the load. Similarly, if the request message queue is constantly empty, it may be possible to kill one or more servers.

Message-queue based load balancers bring some other advantages to the table:
<ul>
 	<li>Message queues usually support topic filtering, enabling flexible ways of routing requests: the server itself can decide to only handle requests to certain paths or subdomains, for instance.</li>
 	<li>Decoupling of request logging and request analytics (e.g. response times) from regular request handling becomes much easier by multicasting request and response messages to multiple queues (one for regular request handling, one for logging, one for analytics etc.)</li>
</ul>
At this point you’ll be asking: “So, what’s the catch? There must be something wrong with message queue based systems, right?”

Everything comes at a price.

As you can tell from the two diagrams I sketched, the message que-based model is more complex. Instead of having to worry about just a load balancer and servers, now you have to scale and failover a message queueing system as well. Clearly, this is more complicated, but not impossible. Let’s not forget message queues have been around for decades. Scaling and failover strategies for message queues are well known and you don’t have to build them yourself, there are some very solid implementations freely available, for instance <a href="http://www.rabbitmq.com/">RabbitMQ</a> or the more low-level <a href="http://www.zeromq.org/">ZeroMQ</a>.

Another drawback is increased request overhead and latency due to the extra level of indirection. It’s hard to say how much latency will result — it depends on the implementation and message queue used.

<strong>Mongrel</strong> All excited and want to start playing with a message queue-based web server today? Have a look at <a href="http://mongrel2.org/">Mongrel2</a> — it’s the only (open) implementation of this idea that I know of right now, if you know of others <a href="mailto:zef@zef.me">please let me know</a>.

Mongrel2 uses ZeroMQ as its message queue and seems pretty damn fast. Mongrel2 is completely language agnostic due to the message queue-based decoupling. From the looks of it, it’s a pretty awesome system — definitely worth a look.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>110</wp:post_id>
		<wp:post_date>2012-12-19 17:01:34</wp:post_date>
		<wp:post_date_gmt>2012-12-19 16:01:34</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>message-queue-based-load-balancing</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="programming"><![CDATA[Programming]]></category>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[43757163776]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>The Glorious Days of CGI</title>
		<link>http://zef.me/2012/12/14/the-glorious-days-of-cgi/</link>
		<pubDate>Fri, 14 Dec 2012 14:59:51 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2012/12/14/the-glorious-days-of-cgi/</guid>
		<description></description>
		<content:encoded><![CDATA[CPUs barely get faster anymore, it’s physically difficult to do so. What we can do, however, is build many CPUs and strap them onto a board. That’s much cheaper and easier. Whereas before we simply waited a year for CPUs to catch up with your software’s performance requirements, today we have to approach the problem differently, by thinking concurrent. What parts of my program can be executed simultaneously?

In computer science, this is the big nut to crack. As it turns out, our brain is not wired to think about concurrency problems. It is just too damn difficult.

When I started web development, I did have to worry about this problem at all. Applications would easily scale to multiple processors and servers without a problem. Back then, the only real language used to develop web applications was Perl, which ran through the <a href="http://en.wikipedia.org/wiki/Common_Gateway_Interface">Common Gateway Interface</a>. The way it worked was that for every HTTP request a new instance of the Perl interpreter would be fired up, which handled the request and then died. Later came PHP, which optimised this process by embedding the interpreter in the web server itself. Still, every request would give you a completely clean PHP environment. Requests were 100% isolated. <a href="http://en.wikipedia.org/wiki/FastCGI">FastCGI</a> is a similar optimisation technique used to reduce overhead by reusing interpreter processes. Optimisations aside, conceptually the CGI model remains the same:
<ol>
 	<li>HTTP requests comes in</li>
 	<li>Interpreter is launched</li>
 	<li>Interpreter handles request</li>
 	<li>Interpreter is destroyed</li>
 	<li>Goto 1</li>
</ol>
This was in the late nineties. Since then, <em>much</em> cooler languages have emerged, for instance: Java, Ruby, Python and Javascript (with node.js).

This generation of languages, however, no longer ran through CGI or equivalents — a shift that had consequences I was more or less oblivious to for a long time:
<blockquote>Request isolation as enforced by CGI is what <em>forced</em> you into the <a href="http://zef.me/883/the-share-nothing-architecture">share-nothing architecture</a>. With this restriction gone, it has become easy (attractive?) to no longer do the right thing™.</blockquote>
Why this change?

Typically, when using Java, Javascript, Ruby or Python, the entire web server is written in the language of choice. You start it, and from that point onwards it keeps running all the time, waiting for a request, handling it and waiting for the next. Instead of launching an entire sub-process, a thread is taken from a thread pool to handle the request. Nothing is reset in between requests (beyond some garbage that is collected). The main reasons to take this approach are:
<ol>
 	<li>Simplicity, you no longer need to setup a web server to run it,</li>
 	<li>Performance, no need to fire up sub-processes to handle requests.</li>
</ol>
However, maintaining state in the web server between requests has now become simple and often slips in, for convenience or performance reasons. Why store session data in a database and perform two extra queries on every request, when it can be implemented in a single in-memory map? I’ve also seen cases where people would accidentally store something in a global variable or a static field of a class — all of a sudden you share state with all other ongoing requests without knowing it.

Risky business.

As a result, here’s what I’ve seen happen in the context of a big node.js application, but I’m sure the same problems could have happened with Ruby or Python just the same:
<ul>
 	<li>Memory leaks occur and it’s unclear where they come from.</li>
 	<li>One request may interfere with another request resulting in unpredictable behaviour. Specific to node.js (specifically 0.6 and earlier) is that an uncaught exception will kill the entire process, and with that all ongoing HTTP requests.</li>
 	<li>Horizontal scaling becomes difficult because of in-process state.</li>
 	<li>Server performance inexplicably seems to degrade over time.</li>
</ul>
As a result, developers have to do what they dread: monitor the application to figure out the problem, do a heap dump to see what kind of objects are leaked, or when desperate: killing and restarting the server from time to time. <a href="http://david.heinemeierhansson.com/posts/31-myth-2-rails-is-expected-to-crash-400-timesday">Yikes</a>!

Once in-process state is introduced, horizontal scaling may not be a trivial exercise. For instance, for convenience you decided to maintain some map in memory with user sessions. Now we have to scale up, of course if we launch two instances of the app, they will no longer share that map. Now you need a way to keep the map in sync between servers, or encode the map in a database or something like memcached. Not an impossible refactor, but one that would have been avoided if you weren’t able to persist state in-between requests at all, like in the CGI model.

CGI strictly enforces that you do not keep state in the web server. Any state is maintained during a request only and is completely volatile. During a request you can be as stateful as you like — enjoy! — but after the request, all of that is gone. Any state that needs to be maintained is stored in a system that’s specialised in exactly that: storing data safely — usually a database.

From this strict enforcement you get a lot of benefit:
<ol>
 	<li>No danger of memory leakage over time.</li>
 	<li>Virtually infinite horizontal scalability with <em>no extra effort</em>, only limited by external systems such as databases.</li>
 	<li>No concurrency problems. Requests cannot affect each other, cannot share state and the crashing of one request handler does not affect others at all.</li>
 	<li>Upgrading of the software is much easier, because any new incoming request will automatically use the new version.</li>
</ol>
But, like any solution, this it’s not a silver bullet, there’s a clear disadvantage: more per-request overhead (depending on the sophistication of the implementation), conceptually you have to start up a new process for every request. Therefore you can expect:
<ol>
 	<li>Higher latency (for setting up the request)</li>
 	<li>Higher memory usage (less sharing of resources)</li>
 	<li>More queries to a database or memcached, because in-process caching is no longer an option.</li>
</ol>
The question is if that’s a deal breaker in practice. In addition, I do believe that the impact of many of these can be minimised, both by the environment (e.g. through clever copy-on-write sharing of resources, or by embedding the runtime with direct support for environment isolation) or the program itself (minimize the amount of setup that needs to be done for every request).

You may have terrible memories of Perl or PHP, but the key idea behind CGI — process isolation — was surprisingly brilliant; an idea that has seems to have been forgotten, but is just as relevant today.

Worth revisiting, perhaps?]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>141</wp:post_id>
		<wp:post_date>2012-12-14 15:59:51</wp:post_date>
		<wp:post_date_gmt>2012-12-14 14:59:51</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-glorious-days-of-cgi</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[43876502508]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Zef’s Law</title>
		<link>http://zef.me/2012/12/18/zefs-law/</link>
		<pubDate>Tue, 18 Dec 2012 14:08:03 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2012/12/18/zefs-law/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p><a href="http://en.wikipedia.org/wiki/Murphy%27s_law" target="_blank">Wikipedia on Murphy’s law</a>:</p>
<blockquote>Murphy’s law is an adage or epigram that is typically stated as: “Anything that can go wrong will go wrong”.</blockquote>
<p>Actually, the way I always heard Murphy’s law be formulated is “Everything that can go wrong with eventually go wrong.” However he said it, after running operations and release management for a web application with significant traffic, I can tell you this:</p>
<p>Murphy was an optimist.</p>
<p>“Let’s just get this release out of the door at 5pm, just before we go home. What could possibly go wrong?”</p>
<p>“Let’s release this minor update on Friday. What could possibly go wrong?”</p>
<p>“Let’s migrate everybody over to our new VPC setup at once. What could possibly go wrong?”</p>
<p>“Let’s not apply everything I learned at Cloud9 to my personal website and have it run on a single, not externally backed up, unoptimised WordPress install. What could possibly go wrong?”</p>
<p>For a long time at Cloud9, we’ve had guidelines based on past experience, here’s just three:</p>
<ol>
<li>No end-of-day releases, because things always catch on fire while you’re in transit home or just when you’re having dinner.</li>
<li>No releases on Fridays, because nobody likes firefighting on weekends.</li>
<li>Data has to be on two servers at the very least, because — you know — servers and hard drives break.</li>
</ol>
<p>Once in a while there seemed to be very compelling reasons to not follow a guideline <em>just this once</em>. “It’s just a tiny tweak, it cannot possibly break anything.” I saw a variant of the 5pm release happen while I was driving to my parents in law. It started with a proud internal email stating “We have released A and B just now!” I looked at my watch: 6pm. Alright, let’s see how this plays out. And indeed, only half an hour later another email: “ok, so that was a bad idea — reverted.”</p>
<p>Although it seemed impossible, things almost always seemed to go wrong when there was a chance, definitely too often to ignore it. So, there you have it — Zef’s law:</p>
<blockquote>Everything that can possibly go wrong will immediately blow up in your face. — Zef’s Law</blockquote>
<p>Since then these guidelines were turned into unbreakable laws.</p>
<p>If you live abiding Zef’s law, you learn to manage and accept the consequences of taking risk: immediate failure. The trick is to lower the risk to the level where the failure becomes tolerable.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>153</wp:post_id>
		<wp:post_date>2012-12-18 15:08:03</wp:post_date>
		<wp:post_date_gmt>2012-12-18 14:08:03</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>zefs-law</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="best-of"><![CDATA[Best Of]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Pick Your Battles</title>
		<link>http://zef.me/2012/12/13/pick-your-battles/</link>
		<pubDate>Thu, 13 Dec 2012 15:40:15 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2012/12/13/pick-your-battles/</guid>
		<description></description>
		<content:encoded><![CDATA[


<figure>

<img data-width="1524" data-height="915" src="https://cdn-images-1.medium.com/max/1200/1*LQJZLa6U76P9A1OthaWRqw.png">
</figure>

<p>So, you decided to build a real application. Not a toy. Not a hobby project. Something that’s supposed to last, supposed to scale, supposed to work and remain reliable.</p>
<p>If you’re in any way like me, I bet <em>right now</em> you’re browsing the interwebs like crazy to find the hottest new technology you get your hands on to use in this new venture. This is a once in a lifetime opportunity! You can choose <em>anything</em> you like. Erlang, Clojure, Ruby, Node.js — the sky is the limit! NoSQL databases are <em>hot</em>. Let’s use MongoDB. Redis. Cassandra. Let’s make the front-end super fancy and reactive with Backbone and EmberJS!</p>
<p>This is what <a href="http://c9.io/" target="_blank">Cloud9</a> did. Cloud9 picked the hottest thing at the time: <a href="http://nodejs.org/" target="_blank">node.js</a> and built its entire back-end using it. Javascript front to back! Database? <a href="http://redis.io/" target="_blank">Redis</a>. Super fast. Nicely scalable, ready for the future! A dream technology stack.</p>
<p>Here’s some of the things we ran into:</p>
<ul>
<li>“Oh, how do we organize a big (200k+ lines of code) JavaScript code base?”</li>
<li>“How do we roll out releases without bringing the site down?”</li>
<li>“How do we test this thing?”</li>
<li>“Oh, when an exception occurs in a node.js program, it crashes the entire server process.”</li>
<li>“Oh, our node.js server processes seem to freeze up for a long time (seconds) from time to time, why does that happen?”</li>
<li>“Oh, why does the <a href="http://nodejs.org/api/cluster.html" target="_blank">cluster module</a> not distribute load over all processes equally under load?”</li>
<li>“Oh, now we have all this data in Redis, but at some point data started to get inconsistent, when did that happen? How do I fix that?”</li>
<li>“Oh, from time to time Redis completely blocks, not responding to queries for seconds at a time, what’s going on?”</li>
<li>“Oh, now I’d like to know something from the database that I cannot find out with simple get and put-style queries. Do I really have to write a script now that pulls in half the database to get an answer to my question?”</li>
</ul>
<p>All of these are technically interesting problems. If you want to pioneer, this is the way to do it. Often it turns out you’re the first person to run into such a problem, because nobody pushed the technology to the limit before. It’s challenging, but not always pure fun — many of these problems tend to be discovered at 2am on a Friday night and they have to be solved quick. “No pressure, but our entire site is down and people cannot do their daily work.”</p>
<p>Are any of these problems unsolvable? Of course not. We figured most of them out, but it did take time and investment.</p>
<p>The approach taken for a large part of our infrastructure is to adopt every piece of code used as our own, and make sure the team can debug issues and fix problems at every level of the stack (at least all the “new” tech). We hired a few node.js core developers (actually, over time we ended up hiring 75% of the core node.js team) — they were incredibly helpful. We also, over time, replaced a lot of parts of our infrastructure with custom built parts, because parts we reused from third-party developers were sometimes of poor quality or simply not maintainable.</p>
<p>What I learned is that you have to figure out how many simultaneous challenges you’d like to handle. Does the project <em>require</em> a new technology that may result in problems down the road, or is making the project successful by itself enough of a challenge? You have to pick your battles carefully.</p>
<p>If a new technology is the only way to solve a problem you have, it’s a no brainer.</p>
<p>If a new technology is going to give you the edge to push the competition out of the market, it’s a no brainer.</p>
<p>If it’s new technology for the sake of new technology, think twice.</p>
<p>If you’re a startup, or are launching a new product inside a bigger company, you have to find <a href="http://www.mikekarnj.com/blog/2012/11/05/reaching-the-startup-holy-grail-product-market-fit/" target="_blank">“product-market fit”</a> — you have to proof that your idea is viable, and that there’s people who’re willing to use it — even pay for it, you have to make sure you grow and eventually grow exponentially. More often than not, that is a huge challenge in itself. It requires focus on what matters: finding out and building what your users need. Anything other than that is a distraction. Being called out of bed at 2am, because the US woke up and started to use your application, and your language runtime of choice appears to have problems under load and now stuff breaks — that’s a distraction.</p>
<p><strong>So, here’s my advice:</strong> go and build amazing applications. Build them with the most boring technology you can find. The stuff that has been in use for years and years. Where every edge case has been covered. Where every library you will ever need has been in production for years. Where every part of the release cycle has been ironed out. Where the best practices on how to do testing are known.</p>
<p>Use PHP. Use Java. Use Python. Use Ruby on Rails. Use .NET. Use jQuery. The language may be more verbose, and the framework may be <em>years</em> old, but at least googling your error message will return you results you can use. You don’t have to invent everything yourself. You’re not going to be the first to hit a certain limit.</p>
<p>Pick your battles.</p>
<p>About a decade ago I was really into forum software. I <a href="http://yabbforum.com/" target="_blank">built forum software in Perl</a> and when I was bored with it, I rebuilt it in PHP and then in Java. I knew what a forum needed to do, that was not a challenge. The challenge was in the technology. If the software you’re building is a snooze, a no-brainer, you can possibly afford some technology risk to <a href="http://www.youtube.com/watch?v=9wfpXI5PKlw" target="_blank">spice up your life</a>. If it’s not: don’t take too many chances.</p>
<p><strong>No sequel</strong><br>Everybody seems to be moving to NoSQL databases, because, you know, “MySQL doesn’t scale! My app will outgrow MySQL!” That’s what we call premature optimisation. First, prove you even <em>have</em> to scale, and if you do, that it’s your database that has scaling issues. Facebook uses MySQL to keep most of its data, are you going to get bigger than them? Accept that you simply do not yet know your technological challenges. At Cloud9, more often than not we predicted our bottlenecks wrong. Dead wrong.</p>
<p>I in no way mean to badmouth NoSQL databases. They have use cases, but you have to make sure you hit them. Redis is an amazing piece of engineering. It’s simple and its performance is unbelievable. There have been cases where a bug in one of our scripts would effectively launch a DoS attack on our Redis server, executing queries like crazy, but Redis wouldn’t break a sweat. Many tens of thousands of requests per second on a single box — no problem.</p>
<p>However, much of the Cloud9 data is very relational: we store users, workspaces, workspace members. A user has many workspaces, a workspace has many workspace members. Everything is encoded in clever ways with keys, hashtables and sets. Sadly, a bug or crash could easily make the data inconsistent. Redis has no way to ensure consistency in any way. In addition, the way data is stored in Redis has to be optimised for the type of queries that need to be performed. If, later on, you find out you need other ways to get your data out, you have a problem. For instance, you want to know which user has most workspaces, or what workspace type is most popular. With SQL that would be a single query. With Redis, because you didn’t plan for this type of query, you have to iterate over every single user and count the number of members in its “workspaces” set. Finding out what workspace type is most popular would require pulling in every single workspace record (hundreds of thousands of them), one query at a time, and then checking the value of the “property” field.</p>
<p>If this is a trade off you make to be able to scale to the million of users you have — great. If you pick this because it’s “cool”: don’t torture yourself.</p>
<p>I always used to be — and in many ways still am — an early adopter. New technology gets me excited, makes me want to play with it and use it for everything. I’ve since learned that this attitude can work, but comes at a cost.</p>
<p>In summation:</p>
<ol>
<li>
<strong>Don’t underestimate the value of mature technology.</strong> Things will break, and you will have to fix them. It’s bad enough if your own code is a problem, it’s worse when the problem is a poorly understood “feature” of your platform of choice.</li>
<li>
<strong>Don’t optimise prematurely.</strong> Don’t choose C because it’s faster. Don’t use MongoDB because, supposedly, it scales better. Don’t cache until you’re sure you have to.</li>
<li>
<strong>Be pragmatic.</strong> Technology like node.js and Redis have many great uses. If you hit one of their use cases: limit their scope to what makes sense. There’s no need to go all-in at all costs.</li>
</ol>
<p>I know it’s exciting to plan for a system that’s ready for Google-like traffic — but seriously, focus on something people <em>want</em> first. You will have to go through multiple refactors of your infrastructure. There’s not a chance in the world you will get it right the first time, so don’t assume you will.</p>
<p><strong>Update:</strong> There are <a href="http://www.reddit.com/r/programming/comments/14wo9v/go_and_build_amazing_applications_build_them_with/" target="_blank">Reddit</a> and <a href="http://news.ycombinator.com/item?id=4926461" target="_blank">Hacker News</a> discussions about this post.</p>
<p><strong>Update 2:</strong> A <a href="http://zef.me/4384/the-innovators-challenge" target="_blank">follow up: The Innovator’s Challenge</a>.</p>

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>166</wp:post_id>
		<wp:post_date>2012-12-13 16:40:15</wp:post_date>
		<wp:post_date_gmt>2012-12-13 15:40:15</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>pick-your-battles</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="best-of"><![CDATA[Best Of]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Never Commit to Master</title>
		<link>http://zef.me/2013/01/22/never-commit-to-master/</link>
		<pubDate>Tue, 22 Jan 2013 14:38:55 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2013/01/22/never-commit-to-master/</guid>
		<description></description>
		<content:encoded><![CDATA[If you managed to build, or be part of a team that is infallible in every possible way; a team that doesn’t produce code with bugs; a team that has a <a href="http://en.wikipedia.org/wiki/Group_mind_(science_fiction">hive mind</a>) knowing exactly what code is written, how it works and where it is located — then, you will be happy to learn, life will be easy. Everybody can commit to a single branch and you don’t need code reviews.

If you’re unfortunate (or lucky?) enough to not have such a team, you will likely have to come up with a strategy to prevent people from blocking each other, sharing knowledge and ensuring code quality. One way of doing that are code reviews.

As I see it, code reviews have two key purposes:
<ol>
 	<li>Sanity checking.</li>
 	<li>Knowledge sharing.</li>
</ol>
<strong>Sanity checking.</strong> A second pair of eyes on a piece of code is good. These eyes can find bugs, point out potential problems and corner cases. After years of research in the wild, I have come to the conclusion that people make mistakes. Sometimes silly ones, sometimes serious. It’s human. Everybody makes mistakes.

<strong>Knowledge sharing.</strong> Unless you are pair programming everything, it is likely that specific knowledge about your codebase will naturally concentrate in specific team members. This is a dangerous thing, because people get ill, quit their jobs, get hit by a bus, or are unreachable when the shit hits the fan.

In that sense, teams are like distributed systems: they ought to be designed to withstand failure. Would you build a distributed system without redundancy and failover mechanisms? Only if the system is not all that important. If it is, you need to build in redundancy. It’s the same with teams, and code reviews are one way of encouraging this knowledge sharing — creating redundancy in knowledge.

In summary, code reviews: good, no code reviews: bad.

Where do code reviews fit in?

When I was at Cloud9, we made it part of how we used our version control system and Github (but Mercurial and <a href="http://bitbucket.org/">Bitbucket</a> would work just as well).

<strong>Never commit to master.</strong> The way of working that has worked well for us is the “never commit to master” approach (replace “master” with “default” if you use mercurial). As the name suggests, this approach dictates that you never commit to the main branch directly, the only commits on the main branch are merge commits.

So, the rules are pretty simple; there’s only one:
<blockquote>Never commit directly to the main branch.</blockquote>
Well, unless you have to fix this one litt… No! <em>Never.</em> Commit. To. The. Main. Branch. Not for big whopping new features, not for a small bugfix.

Why? The main branch has to be stable and ready to be released at all times. That means that all features and fixes merged into this branch have to be <em>done</em>. Even if in your model of development you do not have continuous releases, consider your team members. If they check out the main branch with your half-baked work that is inadvertently breaking things, you are now blocking them. I bet that would never happen with any of <em>your</em> work, but could you say the same about your team members?

Since we all use distributed version control systems these days, each developer has a local clone of the main repository. When you want to start working on a new feature or create a bug fix, you simply branch off the main branch. You work on this branch locally and push the branch to the central repository from time to time. Pushing the branch to the central repository both enables other team members to watch the feature progress and to try the feature out, but also is an additional back-up mechanism of the work in progress.

Every morning (or more often), you merge the latest changes from the main branch into your feature branch, to keep up with recent changes and to avoid large merging conflicts at a later time.

When the feature has been completed from a code and test perspective, it is time to issue a pull request with the main branch. GitHub and Bitbucket both provide very nice UIs for this purpose these days. In the pull request description, clearly describe what the feature/bug fix is supposed to do and reference any related issue. You can use the @username notation in the description field to assign the review to one or more people, who will receive an e-mail about the new pull request.

The pull request is a very convenient and light-weight tool to do code reviews. It has a “Diff” view which shows all the changes of the pull request compared to the main branch — so there is no need to look through each commit individually (but you can if you like to). Each line of the code can be commented on to give suggestions for improvement or ask clarifying questions.

Here’s an example from an older <a href="https://github.com/ajaxorg/cloud9/pull/2540">pull request to the open source Cloud9</a>:

When everybody is happy about the feature — Bitbucket even has a per-developer “Approve” button — the “Merge” button is pushed and the new feature lands in the main branch. Ready to be released to the public. Recently both Github and Bitbucket added the ability to easily delete the now-merged branch from the repository to keep things clean.

<strong>Concerns</strong> A valid concern with enforcing code reviews for everything, even the tiniest of changes, is the impact of the productivity of developers. In the short term, code reviews slow down the process. Beside writing code, developers now also spend a significant amount of their time reviewing code of others. These code reviews have to be somehow planned, and there needs to be a process to ensure they don’t keep piling up.

Nevertheless, in the long term I do believe they are absolutely worth it. I’ve seen many bugs being found as part of code reviews.

Additionally, it’s a great way of keeping up with what’s happening within your and other teams. In my role at Cloud9, pull requests were an invaluable way of keeping up with development of the product. I didn’t have time reading through every commit made by everybody in the company all the time, but whenever somebody finished something, I was notified and could read through the pull request, diff and comments. You will find that introducing code reviews and pull requests that everybody can look at, there will grow more awareness of what is going on, what code is actively being worked on and how it works.

Seems like a good value proposition to me.

This is an adaptation of <a href="https://c9.io/site/blog/2011/11/never-commit-to-your-master/">a post I did at the Cloud9 blog back in 2011</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>177</wp:post_id>
		<wp:post_date>2013-01-22 15:38:55</wp:post_date>
		<wp:post_date_gmt>2013-01-22 14:38:55</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>never-commit-to-master</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[43757103921]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>How To Make Remote Work</title>
		<link>http://zef.me/2012/12/12/how-to-make-remote-work/</link>
		<pubDate>Wed, 12 Dec 2012 16:03:09 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2012/12/12/how-to-make-remote-work/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>When we moved to Poland I did not speak a lot of Polish. In fact, I still don’t, but that’s another story. I definitely was not close to the level where I could actually function in an office environment. When it came to finding a job there I had to ask myself: would a Polish software company hire a foreigner without any industrial experience who does not speak Polish? Also, would there be any interesting work for me in the city we decided to move to at all, or would I have to compromise?</p>
<p>I’m not a big risk aficionado, so I decided to preventively look around for alternative options. I found a company that had a most of their people work remotely all around Europe. It was an interesting company too, doing work closely related to my research topic. They were interested in me, and I in them. For our first in-person meeting they picked Amsterdam as location. “Hey, <a href="http://c9.io/" target="_blank">Cloud9</a> has their launch BBQ today, shall we go there?”</p>
<p>The rest is history.</p>
<p>From the get go I made clear at Cloud9 that I would have to work remotely. They were willing to accept that, but weren’t super enthusiastic. They had a few other people work remotely with varying degrees of success.</p>
<p>The first three weeks I worked for Cloud9 I spent in their office in Amsterdam. During this time I got to meet all the people, and spend a considerable amount of time with most of them. I felt this was going to be a key element of success: people should not forget about you as soon as you walk out the door and sign in from home. In addition, since a significant amount of communication would happen via text chat (Skype in this case), it was essential to know what the person is like when you’re talking to them: what their sense of humor is, for instance.</p>
<p>One of the remote people (in the US) would sometimes sign on to “the wall computer”. In the main room of the office, they had put up a big flatscreen with a webcam and mic attached to a Mac Mini. On the Mac Mini, Skype was setup to automatically pick up calls from contacts, allowing anybody remote to simply dial in and look and listen into the office, while the caller would appear full-screen.</p>
<p>This was an eye opener for me. Virtual presence in the office.</p>
<p>After three weeks it was time to make the move. “Later guys, on Monday I’ll appear on there.” I pointed to the display.</p>
<p><strong>Challenges of working from home</strong><br>I had never worked remotely much. We had work-from-home Mondays at my previous job, but I always found it hard to remain focussed during the day. It was so easy to get distracted and do a little bit of shopping, or a bit of YouTube watching and simply not get much done during such a day. When I was studying I had a similar problem when writing my master’s thesis. For a few months I basically had one task: write the thesis, and I’d do it from home. On the first day I got up at 7am, shower, eat breakfast and get to work. Next day, 7:30, then 8, 9, 10. At some point breakfast and lunch started to overlap and I realised this wouldn’t work. I had to create a schedule for myself and stick to it. I set myself daily goals and stuck to them, which eventually brought me back on track.</p>
<p>I was worried I would have similar problems when working remotely for months, perhaps years, full-time. How would I ever stay in the rhythm of the office. How would I avoid this:</p>
<figure>

<img data-width="500" data-height="587" src="https://cdn-images-1.medium.com/max/800/1*BcuheXg5f8NgyzSq_9VT_w.png">
</figure><p>Another thing that worried me was staying connected to the people, missing out on all chatter around the water cooler. I was very worried I would be left out of many things and be quietly forgotten.</p>
<p>This is why I liked the wall computer idea so much, and decided to be present as much as possible that way.</p>
<p><strong>Consistent virtual presence</strong><br>In the morning, when people started to come in to the office and switched on the lights, I would already be on the screen. “Good morning!”</p>
<p>I was on a Skype video call to the office always when I was working. The mic was good enough for me to hear the discussions in the back of the room, and speaker loud enough for me to participate. At first people were surprised to hear a voice coming from the wall, but over time it became business as usual. On Friday afternoons we would even have beers together; they had their tiny Dutch beers and I enjoyed a proper Polish sized-beer on my end.</p>
<p>Being on camera also helped me stay focused and on time. If I would be gone for hours during the day, people would notice. If I signed in later or left early, people would notice. It worked pretty well.</p>
<p>About half a year in, my role in the company changed. I was asked to lead the effort to stabilise the product, a job that eventually grew into the VP Engineering role.</p>
<p>This was a significant shift. Before I was hacking on Javascript code in a one-person team. Now, as it would turn out, I would spend most of my time collaborating with others; helping teams to get the things done that needed to get done. That’s more of a talking and meeting job than a hardcore hacking-by-myself job.</p>
<p>Nevertheless, in Amsterdam they did not consider the VP Engineering being remote as a problem. Clearly, they did not think of me as being remote, but as part of their office and did not see the physical distance (around a thousand kilometers) as an issue any longer.</p>
<p><strong>How to talk to people from a distance</strong><br>This new role did pose a few new challenges. Challenges related to my new responsibilities, but also at the I’m-remote-how-do-I-do-this level. As mentioned, I now had to talk to numerous people many times daily. With some people it was easy, they always had Skype on and would respond immediately when I’d send them a message. With others it was harder. They wouldn’t respond to chat messages at all, or with a big delay. They saw chat as a distraction from their work. Clearly, that wasn’t going to work for me.</p>
<p>I decided to solve this by using the remote equivalent of walking over to somebody and talking to them: I’d just give them a call. At first this was a last resort; later it became my default modus operandi for some people. People always notice being called, they don’t usually ignore that. So that worked out great. Voice calls are usually more effective than chat conversations anyway.</p>
<p>In some cases people would forget to switch on Skype. That was easy to solve as well, I’d just ask them “from the wall” to switch on their Skype, or if they were in another room, I asked somebody to go and ask them to switch on Skype. Simple.</p>
<p><strong>Return often</strong><br>To keep the connection strong with the office, every few months I’d plan a trip to Amsterdam. Usually, I’d stay there for a week or so. Every evening I would go out for dinner with one or more colleagues and spending most of the day time sitting next to people, discussing things, talking about personal stuff. If you’re there, use your time for stuff that is harder to do remote.</p>
<p><strong>Tips</strong><br>So, working remotely <em>can</em> work very well, even if you’re one of the few remote people in a company. Here’s some key take aways for me:</p>
<ol>
<li>
<strong>Kick-off.</strong> To start things well, go there physically. Hang out with your colleagues for a few weeks. Get to know them. Figure out their sense of humor, this will turn out to be vital when the primary way of communication changes to plain text.</li>
<li>
<strong>Virtual presence.</strong> Be present, both via video and audio. A wall computer like the one in the Cloud9 office is not a big investment for a company, but can have a huge impact on relationship between local and remote people.</li>
<li>
<strong>Consistency.</strong> Be present <em>always</em>. That way you become part of the office rhythm and it will feel like you’re there, both for you and them.</li>
<li>
<strong>Find your communication medium.</strong> People use their tools differently. Make sure you always have a way to communicate with everybody at all times, don’t let it linger. Worst case: call people on their cell phone.</li>
<li>
<strong>Renew.</strong> Return to the office regularly. Meet with your colleagues in person. Use this time to compensate for the things that are hard to do when you’re remote.</li>
<li>
<strong>Be there when it matters.</strong> When times are tough, when important events/releases occur, be there physically. Jump on a plane, be part of it.</li>
</ol>
<p>In most cases employers will prefer all employees to sit in the same office. However, it may be challenging to get the people to hire to move. They may not be willing to, or they may simply be incapable. Remote can work for this group and it can work very well. It does require good will, however, and a bit of investment. Do everything in your power to make remote people feel part of the group. Fly them in regularly. Organize a company trip with everybody once in a while.</p>
<p>My fondest memories of working at Cloud9 did not occur while I was physically at the office in Amsterdam; they happened a thousand kilometers away. Debugging a complicated problem with a few guys all night and finally finding the cause. Getting a Friday afternoon tour through the house and garden of another remote colleague as he took his laptop for a walk. Pippa, the office dog, jumping after toys thrown around by a colleague who before always claimed to be a dog hater.</p>
<p>I was there.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>188</wp:post_id>
		<wp:post_date>2012-12-12 17:03:09</wp:post_date>
		<wp:post_date_gmt>2012-12-12 16:03:09</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>how-to-make-remote-work</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="remote-working"><![CDATA[Remote Working]]></category>
		<category domain="post_tag" nicename="startup"><![CDATA[Startup]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Dart: Web Fragmentation vs. Web Development Fragmentation</title>
		<link>http://zef.me/2013/01/28/dart-web-fragmentation-vs-web-development-fragmentation/</link>
		<pubDate>Mon, 28 Jan 2013 13:30:50 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2013/01/28/dart-web-fragmentation-vs-web-development-fragmentation/</guid>
		<description></description>
		<content:encoded><![CDATA[Remember <a href="http://www.dartlang.org/">Dart</a> — that language that Google is developing to replace Javascript? Frankly, I haven’t given it much thought the past year. When I heard it being pitched as a “web scripting language that we can make run really fast” about a year ago by <a href="http://en.wikipedia.org/wiki/Lars_Bak_(computer_programmer">Lars Bak</a>), I kind of dismissed it. I don’t find the ability to execute programs in a language very quickly a particularly important property of a programming language, nor do I believe that VM implementers make for very good language designers. Of course, there was more to Dart than the ability to execute fast, but I didn’t care much about that at the time.

As far as I remember, Dart’s reception wasn’t particularly positive. The criticisms fell into roughly two categories:
<ol>
 	<li>The language is boring, uninspired and too Java-like.</li>
 	<li>No browser but Chrome will ever support it, so it’s bound to fail.</li>
 	<li>Google is fragmenting the web by offering an alternative to Javascript, it’s VBScript all over again.</li>
</ol>
I don’t think (1) is such a bad thing, but that’s a <a href="http://zef.me/5019/throwing-darts">discussion for another day</a>. I think (2) is a legitimate concern, unless you find the compiles-to-Javascript option acceptable long-term. But what I really like to talk about is (3).

Fragmentation is in fact the reason why I revisited Dart a few days ago, but it’s not the kind of web fragmentation that the critics of Dart are referring to. Ironically, it’s a kind of fragmentation that Dart helps <em>solve</em>.

Let me give some context.

At LogicBlox we do stuff with data — we’re a database company. Data has to be presented to the user, and if you don’t want look ridiculous with your <a href="http://en.wikipedia.org/wiki/Swing_(Java">Java Swing UI</a>), the obvious solution is building web apps.

A common way representing data is a data grid:

<img src="https://dl.dropbox.com/u/103476/zef.me/datagrid.png" alt="Data grid" /> (↑ Interesting-looking data grid screenshot I pulled from <a href="http://images.google.com/">Google Images</a>.)

In various applications built for our customers we’ve used off-the-shelf grid components, for instance the grid from <a href="http://www.sencha.com/products/extjs">ExtJS</a>. The problem with these components that they usually come with a whole family-in-law: if you decide to go with ExtJS’ grid, you basically have to buy into ExtJS as a whole. You’re not going to build your web application with, say, <a href="http://emberjs.com/">Ember</a> and then pull in another huge chunk of the ExtJS library, just to render a grid.

This is a serious problem for us. A data grid is core to what we do. We would like to have a grid component that’s rock solid, scalable and we can plug into any web app we like, whatever happens to be the hot new framework of the day. We’re not ready to “bless” one web framework that all our applications should be built with. Basically, we’d like to build zero-dependency web components.

I expect that at some point we will implement our own grid component, the question is: <em>how</em>?

ExtJS’s grid gets a <em>lot</em> of its implementation from the ExtJS framework. There’s a fairly solid foundation in ExtJS that implements various kinds of data sources, does lay-outing of components etc. That’s convenient, you wouldn’t want to reimplement that in every component you build.

I tackled a similar problem a few years back when I developed <a href="https://github.com/zefhemel/persistencejs">persistence.js</a>(an ORM mapper for Javascript). While I personally only planned to use it in conjunction with jQuery at the time, I appreciated that other people make other life decisions, and I didn’t want to exclude them because of that — I’m not a framework-cist. I had to jump quite some hoops to build this library in a zero-dependency way. As a result, the library contains quite some code that most frameworks will also offer — like its own simple inheritance mechanism and asynchronous sequential and parallel versions of for-each, as well as the ability to work both on the client and server using node.js. It was a pretty bad development experience to get it done, and it didn’t even have to use the <a href="http://en.wikipedia.org/wiki/Document_Object_Model">DOM</a>.

Modularization is another obvious problem. Persistence.js over time got too big to reasonably fit a single JavaScript file, and had some optional components, such as its syncing support. So, it needed modularization. Javascript has no built-in module system (yet). There’s dozens of module systems out there, such as <a href="http://requirejs.org/">require.js</a>, but to be optimally portable, you don’t really want to buy into any particular one. Do you let people include multiple JavaScript files in their HTML header? Do have the user do a build with their particular preferences? If so, what tool chain do you use to do this building? If you choose to go this route, it is still not a good fit for projects that use a system like require.js, because it has its own scoping mechanism that don’t natively fit with this “just `]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>213</wp:post_id>
		<wp:post_date>2013-01-28 14:30:50</wp:post_date>
		<wp:post_date_gmt>2013-01-28 13:30:50</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>dart-web-fragmentation-vs-web-development-fragmentation</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="programming"><![CDATA[Programming]]></category>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[43876449137]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Declare Everything</title>
		<link>http://zef.me/2013/01/04/declare-everything/</link>
		<pubDate>Fri, 04 Jan 2013 14:40:10 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2013/01/04/declare-everything/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Let me start with a brief heads up, this post starts with a rather elaborate pitch for an idea, eventually building up to what my new job is all about. If you’re in a hurry and want to go all TL;DR on me, jump to about the middle of this post to find out what I will be doing.</p>
<p>Still here? Fantastic. So, here goes.</p>
<p>Here’s a snippet of <a href="http://www.mobl-lang.org" target="_blank">mobl</a> code. Mobl is a programming language I developed for mobile web development during my PhD, a few years back:</p>
<pre>list(task in Task.all() where done == false<br>                        order by dueDate) {<br>  item {<br>     checkBox(task.done)<br>    label(task.name)<br>  }<br>}</pre>
<p>Even though this is likely the first snippet of mobl code you’ve ever seen, you should get the gist of what it does: it defines a UI for a list of tasks only showing tasks that are not done, ordered by due date. Each item in the list represents a single task, and is rendered as a checkBox bound to the `done` property of the task object and a label with the `name` property.</p>
<p>Ostensibly, this looks like a loop as you would write in any imperative language. It’s not, though. It’s a declarative declaration of a user interface that automatically updates itself when:</p>
<ul>
<li>A new task is added that matches the done == false filter (the task appears in the list)</li>
<li>The due date of a task is changed (tasks reorder in the list)</li>
<li>A task is marked as done (it will disappear from the list)</li>
<li>A completed task is marked as done somehow (it will appear in the list)</li>
<li>A task is deleted (it will disappear from the list)</li>
</ul>
<p>Since this is a language with data binding, what will happen when you mark a task as done, it will be disappear from the list, as it no longer matches the filter.</p>
<h3>So, how does this work?</h3>
<p>Internally the query is represented as an observable collection and you can subscribe to its `change` events. So, what the `list` will do is subscribe to this collection’s change events, and adapt its DOM representation (this is a web app) as `change` events come in. How does the collection know when to trigger a `change` event? Well, it knows it’s interested only in `Task` objects, and in the value of `done` and `dueDate` properties of those objects, so it registers itself to be notified of changes in those. Whenever a `Task` object changes its `done` or `dueDate` property, the collection object checks if this impacts the items in its collections, of not, it does nothing. If it does, it triggers a `change` event. How does a `list` update its content on `change` events? There’s a number of possible implementations:</p>
<ol>
<li>The naive implementation would be to completely re-render itself every time a `change` comes in.</li>
<li>A slightly less naive implementation delays re-rendering slightly, batching up change events to prevent re-rendering 10 times when 10 new `Task` objects are added at once.</li>
<li>A more sophisticated implementation (that I never got to implement) actually inspects the `change` event and updates the DOM incrementally — never re-rendering anything, but just changing the parts that need to be changed.</li>
</ol>
<p>Trust me, I left out a _lot_ of little intricacies and corner cases that are handled. If you are one of those people who tried mobl, I bet you never thought or realized what was happening behind the scenes to implement these few lines of UI code. You also probably didn’t realize that between version 0.3 and 0.4 I switched the implementation of the `list` updates from (1) to (2), and at any time (if I were still to work on mobl), I could switch to (3) without you having to worry about it. All you’d notice is an improvement in performance.</p>
<p>I like mobl a lot. It allows its users to write very concise programs that do a lot of things with little code — and they do not have to worry about how it’s implemented; they just have to express their intention: “I would like a list of tasks to appear here, that only shows these tasks in this order, where each task is seen as a checkbox and a label. Make it happen!”</p>
<p>It’s about the _what_ rather than the _how_. Mobl users don’t have to worry about the how, I spent about a year of my life putting that knowledge into the compiler machinery so that you don’t have to think about it.</p>
<blockquote>This is the essence of a _declarative_ program: focus on the WHAT rather than the HOW.</blockquote>
<p>You are likely thinking: “Cool story, bro, how does this apply to my life?” Declarative languages are all around these days: HTML, CSS, SQL, Ant build files, npm `package.json` files — they’re all declarative:</p>
<ul>
<li>HTML: “This is what the structure and content of my webpage should be — go render it.”</li>
<li>CSS: “If you find this HTML class somewhere, make sure it has this bright yellow background — make it so!”</li>
<li>SQL: “This is the data I’m interested in — go fetch it for me!”</li>
<li>Build files: “These are my source artifacts and how they depend on each other — go and figure out a way to build them.”</li>
<li>npm’s package.json file: “I have this piece of code, it depends on these versions of these libraries — go and make sure they’re installed.”</li>
</ul>
<p>Don’t you want more of your programming time be spent _declaring_ what you need rather than spelling out the steps to accomplish it every time?</p>
<p>I sure do.</p>
<p>So, this is a rather long introduction to what I’m sure you’ve spent numerous sleepless nights over:</p>
<blockquote>Zef left Cloud9, what is he going to do next?!</blockquote>
<p>Enter <a href="http://www.logicblox.com" target="_blank">LogicBlox</a>:</p>
<blockquote>LogicBlox is a cloud-delivered platform-as-a-service that enables the rapid development<br>of adaptive and actionable Big Data enterprise-class applications.</blockquote>
<p>Buzzword explosion!</p>
<p>“Cloud”</p>
<p>“Platform-as-a-Service”</p>
<p>“Rapid development”</p>
<p>“Big Data”</p>
<p>“Enterprise”</p>
<p>So, what is LogicBlox really about? LogicBlox is a (still) stealth-mode start-up (hence the amazing website). What they build is a database and application server that is programmed in a purely declarative way. _Everything_ is programmed declaratively, not just queries, but entire applications (from front to back-end).</p>
<p>For this purpose LogicBlox revived a previously mostly academic and as far as as the world was concerned-dead language called <a href="http://en.wikipedia.org/wiki/Datalog" target="_blank">Datalog</a> and hired two dozen PhDs to extend it and build a kick-ass compiler and runtime for it. And guess what, it worked!</p>
<p>LogicBlox makes its money by selling its technology to other companies (like <a href="http://www.predictix.com" target="_blank">Predictix</a> who use it (thus far) primarily to do big data (multiple terabytes) crunching for big retailers. Yet, the LogicBlox vision is much bigger: they believe Datalog’s declarative programming model is superior to the imperative programming model that is currently mainstream, and a lot of benefit is to be gained by going full-on declarative with Datalog:</p>
<ol>
<li>Declaring _what_ you need, rather than _how_ to get it, enables the runtime to optimize Datalog programs in all kinds of ways. A single Datalog program could be compiled to simple JavaScript to analyze bits of information purely on the client-side, e.g. in the browser, or be run on dozens of nodes in a cloud context analyzing terabytes of data. This is possible, because Datalog programs are abstract enough to allow enormous flexibility in implementation.</li>
<li>LogicBlox is a live environment. LogicBlox has workspaces which contain facts (think: database rows) and rules (think: ways to derive new information from existing information). You don’t really run a Datalog program like you run a Ruby program, by invoking a Ruby interpreter on it. Instead you run it by injecting new rules or facts into the database and then asking questions about it. In a sense you could compare it to a SQL database with stored procedures.</li>
<li>A live environment allows interactive development and opens up the market to end-user programming. It is often said that Excel is the most popular IDE in the world, and it’s true. When you use Excel, enter data and formulas, you’re basically programming. The cool thing is, you get instant feedback about all of your actions. Datalog allows the same thing (we “just” need to build a good UI for it) — therefore it allows for a lot of innovation on the IDE side as well.</li>
</ol>
<p>LogicBlox’ investment in declarative languages extends to deployment of the LogicBlox software itself. LogicBlox employs the core people behind the declarative <a href="http://nixos.org" target="_blank">Nix</a> package manager and NixOS, the Linux operating system built using it. Nix enables declaratively specifying the deployment architecture of a software deployment. Then, with a single command it can create the VMs, install the software you need. This is used by LogicBlox internally, but could be used for any complex software deployment.</p>
<p>All in all a pretty ballsy company in my humble opinion, so I felt I had to be part of it.</p>
<p>I started January 1st. I will likely focus on the user-facing parts: web service access, web UIs, tooling etc. First step: immerse myself in this whole new way of programming that I had no familiarity with whatsoever up to a few weeks ago. It’s very exciting.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>218</wp:post_id>
		<wp:post_date>2013-01-04 15:40:10</wp:post_date>
		<wp:post_date_gmt>2013-01-04 14:40:10</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>declare-everything</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>The Innovator’s Challenge</title>
		<link>http://zef.me/2012/12/17/the-innovators-challenge/</link>
		<pubDate>Mon, 17 Dec 2012 16:00:00 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2012/12/17/the-innovators-challenge/</guid>
		<description></description>
		<content:encoded><![CDATA[Last week I published an article on <a href="http://zef.me/4235/pick-your-battles">picking battles</a>. When I read comments on twitter, reddit and hacker news, the article was often summarised as “don’t jump on all the new stuff that people invent, stick with what you know and has been in use for years.” If that were true — wouldn’t that lead to a technological stand-still?

The intention of the article was slightly more subtle — I tried to point out the <em>cost</em> of adopting new tech. Adopting new, unproven technology <em>might</em> be much more costly than anticipated because of all the hidden problems that nobody ever found, because it hasn’t been stress tested before. Therefore, if the new language, runtime or database only slightly nicer, cooler, prettier, more concise or faster, it may not be worth the extra risk.

However, the pendulum swings to the other side too: if new technology makes a <em>big</em> difference in expressiveness, beauty or performance — and you’re sure those things matter to you — then choosing the new technology may be what makes your product a winner.

This does pose a challenge to the innovators among us — the people who work hard to push the status quo in software development:

<strong>Evolutionary change no longer cuts it, revolutionary change is required to be cost effective to its consumers.</strong>

As a reminder, here’s the two key reasons why using old technology is attractive:
<ol>
 	<li>All edge cases have been hit and ironed out, bottlenecks are known — the tech is rock solid.</li>
 	<li>There is a body of knowledge available:
<ul>
 	<li>You can read books about it</li>
 	<li>You can Google any problem and find a solution</li>
 	<li>You can find and hire experts</li>
</ul>
</li>
</ol>
If you are an innovator building new tools, this is what you’re up against.

When you’re starting out, you won’t have any of these things. Your tool is going to be young and buggy, and documentation will likely be lacking and since nobody used or wrote about it, if you run into a problem, there’s probably only one person to help fix it: you.

This is a classic chicken and egg problem: your tool will only ever mature in this way when people <em>actually</em> use it, and people will only ever <em>actually</em> use it once it becomes mature.

Sigh.

Let’s say you developed a new programming language that is slightly better. It catches a few more errors at compile time; it allows you to solve problem X in 2 lines, instead of 10. Or you are developing a database system does most things Redis does, but has faster set operations, or allows you to write in-database scripts with JavaScript and not just Lua. I’m happy to play with a language like this, or a database system with these new features. However, there’s no documentation for your language, there’s likely bugs in the runtime and who knows what happens if I try to compile a 10,000 line codebase. Therefore, once I intend to build a production-quality system, I have to ask myself: does the slight improvement in expressiveness, or slight improvement in performance trade off well against all the risk I’m taking?

It does when your tool would be revolutionary: if your language is not only slightly better, but an order of magnitude better; if your database is not slightly faster, but orders of magnitude faster.

If you managed to build such a tool: Congratulations! Now it’s time for the <em>second challenge</em> you have as an innovator: sell your idea to the rest of the world. You have to market the tool in such a way that people can no longer ignore its benefits.

My favorite example of where this worked is Ruby on Rails. One can argue whether Rails is revolutionary, but personally I considered the combination of DRY (don’t repeat yourself), convention-over-configuration and internal DSLs in a web framework a leap forward for the state of web development at the time. Undoubtedly some of you will email me telling me that none of these ideas were novel, but with that you’ll only prove my point:

<strong>If you aren’t able to sell your idea to others, it may as well not exist at all — those who can sell the idea reap the benefits.</strong>

Ruby on Rails was originally invented to simplify building a specific product: <a href="http://basecamp.com/">Basecamp</a>. As Basecamp became popular, people became interested in the tech is was built on. There was now a clear example of a popular application that was built using Ruby on Rails, and it had become clear it was up to the task of building a <em>real</em> application. Not only that, but the Ruby on Rails website looks pretty. It contained numerous tutorials and screencasts, one of which demonstrating how a simple blog application could be constructed in 10 minutes. In addition, there was David Heinemeier Hansson as outspoken spokesman. You may like his approach or not, it worked.

Today, Ruby on Rails is on my list of boring technology.

About a week or two ago I attended a pitch from a company working on what I have since come to believe could be the next big revolution in software development. When I heard the pitch, I got all excited. Not only about the idea itself, but also because there’s still a lot of work to be done in selling the idea to the larger public.

It looks like I will be joining this company next month. More on this topic later.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>284</wp:post_id>
		<wp:post_date>2012-12-17 17:00:00</wp:post_date>
		<wp:post_date_gmt>2012-12-17 16:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-innovators-challenge</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[43757184075]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>The Insane Story of Ithkuil</title>
		<link>http://zef.me/2012/12/31/the-insane-story-of-ithkuil/</link>
		<pubDate>Mon, 31 Dec 2012 07:49:26 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2012/12/31/the-insane-story-of-ithkuil/</guid>
		<description></description>
		<content:encoded><![CDATA[Few people know that in 2006 I was determined to drop out of computer science completely. After an extremely busy year doing my master’s in networks &amp; distributed systems at <a href="http://www.tcd.ie/">TCD</a> and a decade and a half of programming under my belt, I had enough of it all. I wanted to do something to do completely different than computer stuff. My girlfriend (now wife) studied English, which got me interested in “human” (non-programming) languages. So, I decided to start from scratch and enroll as a first-year student of English. I had a great time, but after a year reality hit and I dropped out, did a PhD in computer science, the rest is history.

Nevertheless, by far my favorite class was <a href="http://en.wikipedia.org/wiki/Linguistics">linguistics</a> — the scientific study of language: where do languages come from, how do they evolve and so on.

I forgot all about it until yesterday, when I found a <a href="http://www.newyorker.com/reporting/2012/12/24/121224fa_fact_foer?currentPage=all&amp;mobify=0">The New Yorker</a> article by Joshua Foer about a guy who spent 30 years of his life perfecting an invented language (<a href="http://en.wikipedia.org/wiki/Constructed_language">conlang</a>) named <a href="http://en.wikipedia.org/wiki/Ithkuil">Ithkuil</a> — a (human) language invented to be both concise and to be as <em>unambiguous</em> as possible.

To me this is interesting by itself, but what happens about three-quarters into the article turns the whole thing into a sci-fi movie plot. It’s insane.

<a href="http://www.newyorker.com/reporting/2012/12/24/121224fa_fact_foer?currentPage=all&amp;mobify=0">You should read it</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>541</wp:post_id>
		<wp:post_date>2012-12-31 08:49:26</wp:post_date>
		<wp:post_date_gmt>2012-12-31 07:49:26</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-insane-story-of-ithkuil</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[43757138748]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>On Interviews</title>
		<link>http://zef.me/2012/08/09/on-interviews/</link>
		<pubDate>Thu, 09 Aug 2012 16:42:59 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2012/08/09/on-interviews/</guid>
		<description></description>
		<content:encoded><![CDATA[A year ago I wrote <a href="http://zef.me/3666/i-hate-puzzles">about my dislike of puzzles</a> and their use in job interviews. The gist of it was I don’t like coming up with complex algorithms. Yet, they’re often used in job interviews. Luckily, since that post, I have been very lucky to get a job <a href="http://c9.io/">at a great company</a>. And guess what? A year in, I’m the one conducting interviews with potential job candidates. Who would’ve thought.

Now it is up to me to figure out if this person that I never met and never heard of is a good fit for Cloud9. We’d like to maintain our high standard of hiring. How am I supposed to know somebody’s good and would fit the team? By letting them solve a puzzle, perhaps?

Let’s not, although a test in the shape of actually implementing a simple Cloud9-related feature is usually part of the process of hiring somebody (if we find it difficult to judge if somebody has the skills required).

But it all starts with an application and interview. So let me share a few things I’ve learned so far (after doing about a dozen interviews and sifting through many dozens of resumes). These are tips “from the other side” that may be helpful if you’re applying to a company like ours. I do realize these may be very unique to me — I always like to think of myself as a very unique person — but chances are they’re not, so these may be useful for applying for jobs in other tech companies as well.

First, getting a foot in the door by applying for a job. A few tips:
<ol>
 	<li><strong>Be known.</strong> The first thing I do is look at your name. Do I know you? Have I heard of you already? If so, that’s a big plus, because you’re either famous or I will already have an idea what you’re about (good or bad). This is also how I got to work for Cloud9: I accidentally ended up at their launch BBQ, talked to a few people there about what I did. Some had actually heard of it. That helped a lot. Like it or not, networking helps <em>a lot</em>.</li>
 	<li><strong>Be prolific.</strong> This is related to 1. If I don’t know you already, what will a Google search bring up? Do you have a github page, twitter, blog, youtube videos of talks you gave? These are the type of people I look for: people with their own passion that they want to share with others. Github is a great way to show off your abilities, if you have a bunch of projects there that you started that are related to what we do: great! This will also give me an idea of your coding style.</li>
 	<li><strong>Write a good email.</strong> I see a lot of by-the-book style emails (or emails that simply say “Yeah, I’d be interested, here’s my CV.”). That’s fine, but also won’t make you stand out (positively). What I like to know is just two things: 1. Why Cloud9? 2. Why are you qualified? Send your resume, but highlight the parts that are of interest to us, what projects have you worked on that we can see in action of even see the code of (again: github?).</li>
</ol>
So, you did all this and you were invited for an interview. Here’s what I want to find out during an interview:
<ol>
 	<li><strong>Tell me something about you.</strong> I usually start with asking about your background: what have you been up to thus far, what are you about, what drives you? What are your hopes and dreams. Why do you want to leave your current employer (if any)? What are the roles you’ve had that you particularly liked?</li>
 	<li><strong>Tell me something I don’t know.</strong> In preparation I usually pick a few things from an application letter, github profile and resume that interest me. A Javascript library you wrote, a project you worked on, a library you used that I heard of and I’m interested in. I’ll ask you dumb questions, like what is it for, how have you used it, what do you think, how does it compare to Y. I’d like to hear you speak about a project you’ve been involved with, what is its vision, how did you execute? Or in the case of a third-party library, do you grasp its vision and core concepts, how do you evaluate them?</li>
 	<li><strong>Why do you want to work for us?</strong> Motivation is very important. Why us? Why not any of the other dozens of interesting tech companies? What would you like to work on at our company? If you have specific features you’d like to work on, how would you implement those, do you foresee any challenges in its implementation?</li>
</ol>
Beside being “smart and getting things done”, I care a lot about communication skills, these first steps are an important test. We all have to be marketers in a way, you need to be able to market yourself. I believe people with a passion can do that, and we want people with a passion (ideally one closely related to our product).

Oh yeah, <a href="https://c9.io/site/category/current-vacancies/">we’re hiring</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>614</wp:post_id>
		<wp:post_date>2012-08-09 18:42:59</wp:post_date>
		<wp:post_date_gmt>2012-08-09 16:42:59</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>on-interviews</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="because-i-care"><![CDATA[Because I Care]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[43757238491]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>How Great Leaders Inspire Actions</title>
		<link>http://zef.me/2012/12/11/how-great-leaders-inspire-actions/</link>
		<pubDate>Tue, 11 Dec 2012 15:40:02 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2012/12/11/how-great-leaders-inspire-actions/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Why -&gt; How -&gt; What. That is all.</p>
[embed]http://embed.ted.com/talks/simon_sinek_how_great_leaders_inspire_action.html[/embed]
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>824</wp:post_id>
		<wp:post_date>2012-12-11 16:40:02</wp:post_date>
		<wp:post_date_gmt>2012-12-11 15:40:02</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>how-great-leaders-inspire-actions</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="important"><![CDATA[Important]]></category>
		<category domain="post_tag" nicename="video"><![CDATA[Video]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_e435d90aeb0e718f6aa0df8816288712</wp:meta_key>
			<wp:meta_value><![CDATA[<div class="embed-ted"><iframe title="Simon Sinek: How great leaders inspire action" src="https://embed.ted.com/talks/simon_sinek_how_great_leaders_inspire_action" width="750" height="423" frameborder="0" scrolling="no" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe></div>]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_time_e435d90aeb0e718f6aa0df8816288712</wp:meta_key>
			<wp:meta_value><![CDATA[1588444445]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_330daa4c2f4bfb88550d5244f8894bc0</wp:meta_key>
			<wp:meta_value><![CDATA[<div class="embed-ted"><iframe title="Simon Sinek: How great leaders inspire action" src="https://embed.ted.com/talks/simon_sinek_how_great_leaders_inspire_action" width="750" height="423" frameborder="0" scrolling="no" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe></div>]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_time_330daa4c2f4bfb88550d5244f8894bc0</wp:meta_key>
			<wp:meta_value><![CDATA[1588444447]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Hypercritical</title>
		<link>http://zef.me/2012/12/31/hypercritical/</link>
		<pubDate>Mon, 31 Dec 2012 11:28:32 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2012/12/31/hypercritical/</guid>
		<description></description>
		<content:encoded><![CDATA[I’ve interested in, and been listening to podcasts for 8 years. My <a href="http://zef.me/1097/politics-to-go">very first book contribution</a> was a “how to” on podcasting. A lot has happened since then and I must have spent hundreds, if not thousands of hours listening to podcasts.

Yet, it was only about a month ago I discovered <a href="http://5by5.tv/hypercritical">Hypercritical</a>, a few episodes before it it is to be cancelled — sadly. Hypercritical is hosted by <a href="https://twitter.com/siracusa">John Siracusa</a>. Who’s that? you may ask. Well, that’s the guy who does the <a href="http://arstechnica.com/author/john-siracusa/">wildly elaborate Mac OS X reviews</a> for Ars Technica every time a new version comes out. After listening to a few episodes (around episode #95), I decided to do something I have never done before with a podcast: rewind and start listening to every single episode starting at #1.

It’s good stuff, and while some of the early podcasts are a bit dated (recorded in 2010), it’s still very insightful, super high quality stuff. A particular gem, which triggered this post is episode #14: <a href="http://5by5.tv/hypercritical/14">A Dark Age of of Objective-C</a> about why Apple needs to come up with a more modern runtime, API and programming language for its platform.

<a href="http://5by5.tv/hypercritical">Hypercritical</a> is mostly Apple related, so if you’re into that sort of thing, give it a listen.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1019</wp:post_id>
		<wp:post_date>2012-12-31 12:28:32</wp:post_date>
		<wp:post_date_gmt>2012-12-31 11:28:32</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>hypercritical</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[43757129277]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Live Programming at LIVE ‘13</title>
		<link>http://zef.me/2013/01/23/live-programming-at-live-13/</link>
		<pubDate>Wed, 23 Jan 2013 13:19:34 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2013/01/23/live-programming-at-live-13/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Live programming is the idea of getting immediate feedback while you’re writing your code, allowing you to get an early idea of what you program will be doing and how it works, or even to see what its potential problems are.</p>
<p>I first became aware of this idea by watching [a video from Bret Victor, entitled “Inventing on Principle”](http://vimeo.com/36579366). If you haven’t seen it, definitely worth a look. Later, other projects based on these ideas came along. Most notably [LightTable](http://www.lighttable.com), and more recently [Uxebu’s Orbit](http://uxebu.com/blog/2012/11/07/orbit-hotswapping-code-as-you-type-it/). Of course, “programming” in Excel works much the same way (you change a cell, and every cell that depends on it updates immediately).</p>
<figure>

<img data-width="763" data-height="443" src="https://cdn-images-1.medium.com/max/800/0*jwUlYru1bgt43CAu.png">
</figure><p>_(Live programming environment as shows by Bret Victor)_</p>
<p>We always dreamed of adding support for this type of development in Cloud9, but didn’t get around to it. Adding live support for programming works great for very specific domains, such as drawing and animation, but is harder to apply more generally. It does generally work better for declarative languages, which is why we’re looking into it at LogicBlox as well.</p>
<p>I have been asked to join the program committee of [LIVE](http://liveprogramming.github.com/2013/), a workshop at [ICSE 2013 conference](http://2013.icse-conferences.org), probably the biggest conference on software engineering in the world. Being in the programming committee means I will review submissions and partially decide if it’s interesting enough to be presented at the workshop.</p>
<p>You can find the [call for papers](http://liveprogramming.github.com/2013/cfp.html) on the LIVE 2013 website:</p>
<p>&gt; The workshop will be in the format of an unconference, with topics decided by the interests of the attendees. Below are examples of some, but by far not all (as organizers we do not want to limit the scope of the workshop with our own notion of live programming!) questions that we hope to discuss in the duration of the workshop.</p>
<p>I think this is a super interesting area. If you do too, consider [submitting something](http://liveprogramming.github.com/2013/cfp.html)! The deadline for research papers is Feb 7th and other submissions (tool demos, live coding performances — whatever those may entail) is April 4th. The workshop itself is held May 19th.</p>
<p>More examples of Live programming:</p>
<p>* [jeditoolkit live programming with Javascript](http://jeditoolkit.com/2012/11/12/interactivate.html#post)</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1101</wp:post_id>
		<wp:post_date>2013-01-23 14:19:34</wp:post_date>
		<wp:post_date_gmt>2013-01-23 13:19:34</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>live-programming-at-live-13</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="programming"><![CDATA[Programming]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Easily Manage Your Development Environment</title>
		<link>http://zef.me/2013/01/21/easily-manage-your-development-environment/</link>
		<pubDate>Mon, 21 Jan 2013 15:48:22 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2013/01/21/easily-manage-your-development-environment/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Every time I start working on new project it takes me a significant amount of time to get up and running. You have to install all software dependencies, make sure they are located in the right place. Configure environment variables. Hope and pray that whatever requires compilation will compile correctly on my Mac version, with the version of GCC that I happen to have installed. I’ve lost many a day with these types of problems once again here at LogicBlox.</p>
<p>This is a problem we [started to tackle at Cloud9](https://openshift.redhat.com/community/blogs/solving-the-two-week-problem-by-developing-in-the-cloud) by standardizing the runtime environment (an OpenShift gear), but we had not yet gotten to tackling the automatic installation of all dependencies when I was there. What we did do was offer an Amazon AMI for new employees, that they could instantiate and connect to Cloud9 to get up and running quickly. However, running such VMs is costly and we hadn’t yet built tooling to manage this process.</p>
<p>Today somebody pointed me to [Vagrant](http://www.vagrantup.com), a system to “Create and configure lightweight, reproducible, and portable development environments”. Rather than putting your entire development environment “in the cloud”, it essentially creates a small personal cloud based on VirtualBox instances, locally on your machine. I’ve been playing with it a little bit today and it works very nicely.</p>
<p>The idea is to create a declarative configuration file (using a Ruby DSL in a file called `Vagrantfile`) of what you need of your environment:</p>
<p>Vagrant::Config.run do |config|<br> config.vm.box = “lucid32”<br> config.vm.forward_port 80, 4567<br> config.vm.customize [“modifyvm”, :id, “ — memory”, 1024]</p>
<p>config.vm.provision :chef_solo do |chef|<br> chef.recipe_url = “http://server.com/cb.tar.gz"<br> chef.add_recipe(“dev_env”)<br> end<br> end</p>
<p>This examples uses [Chef](http://www.opscode.com/chef/), but you may as well use another deployment system, or even a shell script to provision the VM. After creating this file, you run `vagrant up` and it builds a VirtualBox VM with the specified environment, and maps `/vagrant` in the VM to the directory containing your application and `Vagrantfile`. You can SSH into the VM with `vagrant ssh` if you like and you can destroy the VM with `vagrant destroy`. If you make changes to your `Vagrantfile`, you run `vagrant reload` to rebuild the VM.</p>
<p>The brilliance of this approach, in my opinion is:</p>
<p>1. Instead of manually `apt-get`ing, or `.pkg`-installing your way toward your ideal development environment, you now have a single file that specifies _everything_ that needs to be done to setup such an environment.<br>2. There is no valuable state in the VM, all your source code is stored outside the VM and simply mapped into the VM. Anything you would like to keep, you put in `/vagrant`.<br>2. A `Vagrantfile` is environment independent, you can commit it to your repo, and others, whether they are on Mac, Windows or Linux can fully reproduce the environment with a simple `vagrant up` to get up and running.<br>3. The VirtualBox VMs that Vagrant produces are throw away VMs. You can destroy them at any time, so they don’t need to take up disk space and memory. Whenever you need to run it again, you just `vagrant up` and you’re ready to go.</p>
<p>I think this is a _very_ powerful idea and it gets even more interesting once you start to reuse these specifications to setup production deployments “in the cloud”.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1116</wp:post_id>
		<wp:post_date>2013-01-21 16:48:22</wp:post_date>
		<wp:post_date_gmt>2013-01-21 15:48:22</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>easily-manage-your-development-environment</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>That Dead Greek Dude and You</title>
		<link>http://zef.me/2013/01/29/that-dead-greek-dude-and-you/</link>
		<pubDate>Tue, 29 Jan 2013 13:34:45 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2013/01/29/that-dead-greek-dude-and-you/</guid>
		<description></description>
		<content:encoded><![CDATA[“Logos”, “pathos” and “ethos” are three ancient greek words often used by this ancient greek dude called Aristotle. He’s dead now. You’ll find that most native speakers of ancient greek are dead. <a href="http://instantrimshot.com/">Clearly a killer language</a>. Anyhow, if you’re anything like me, when you hear “Aristotle” you think: boring, what have you done for me lately? You think back of your philosophy classes, where it once and for all became clear how limited your job prospects are if you decide to study philosophy. So I never cared much for Aristotle, or his buddies.

Then, a year or two ago I came across a book called “<a href="http://www.amazon.com/gp/product/0307341445/ref=as_li_qf_sp_asin_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0307341445&amp;linkCode=as2&amp;tag=sta080-20">Thank You for Arguing</a>: What Aristotle (<em>snore!</em>), Lincoln (<em>snore!</em>), and Homer Simpson (<em>Woohoo!</em>) Can Teach Us About the Art of Persuasion.” It changed my life. Well, that’s a bit of stretch. It changed the way I write and communicate.

You should read this book.

Now, if I would apply all techniques explained in the book, I would manage to completely convince you to buy and read it. But that would be too easy. And why would I? I’m not profitting from you buying it. Actually, let me go back and replace that link with a Amazon associates link. Ok, done.

<a href="http://www.amazon.com/gp/product/0307341445/ref=as_li_qf_sp_asin_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0307341445&amp;linkCode=as2&amp;tag=sta080-20">Buy this book and read it</a>.

It’s got Homer Simpson in the title.

You can buy it for Kindle and read it on your iPad — you’ll look cool reading. Girls will be all like “hey, whatcha readin’?” And you’d be like “oh nuthin’ just about this greek dude Aristotle” and they’ll be all like “oh man, you’re so smart!”

Once you finish, drop me a line and tell me what rhetorical devices I managed to use in this post. Indeed, once you finish this book you’ll also be able to casually use the term “rhetorical device” in a sentence.

<a href="http://www.amazon.com/gp/product/0307341445/ref=as_li_qf_sp_asin_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0307341445&amp;linkCode=as2&amp;tag=sta080-20">Buy and read</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1173</wp:post_id>
		<wp:post_date>2013-01-29 14:34:45</wp:post_date>
		<wp:post_date_gmt>2013-01-29 13:34:45</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>that-dead-greek-dude-and-you</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[43757077426]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Company Incentive Hacking: App.Net</title>
		<link>http://zef.me/2013/01/25/company-incentive-hacking-app-net/</link>
		<pubDate>Fri, 25 Jan 2013 13:09:18 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2013/01/25/company-incentive-hacking-app-net/</guid>
		<description></description>
		<content:encoded><![CDATA[There is a general belief in Silicon Valley that once you have the users, revenue will follow. So that’s what <a href="http://twitter.com/">Twitter</a> decided to optimize for, back in 2006. One innovative way of doing that was getting third-party developers enthusiastic about the platform and offering a simple to use API that they could use to build their own twitter clients. And developers did. Twitter grew into a massive service, in part thanks to the great twitter clients that made using twitter a nice experience.

Twitter raised a number of rounds of funding, which was easy because many venture capitalists primarily look engagement numbers, and those were looking good. Recently, however, things have started to change. A company cannot continue on living just by raising more and more venture capital. At some point it will have to grow to be self sustaining, so that’s what Twitter started to work towards. How do you earn money from a free service? Advertising! Where do you advertise? On any user-facing part of the service.

Oops.

A significant part of users had since moved to using twitter almost exclusively in some third-party client that Twitter had no control over. Most people <em>never</em>visited the website. So, twitter needed to move its users back into its own clients and started acquiring popular clients such as <a href="http://techcrunch.com/2010/04/09/twitter-acquires-tweetie/">Tweetie</a> and <a href="http://techcrunch.com/2011/05/23/twitter-buys-tweetdeck-for-40-million/">Tweetdeck</a>. That wasn’t enough, so they had to limit the public API more and more. As a result, third-party twitter clients start <a href="http://mashable.com/2012/11/16/tweetro-dead-twitter-api/">to die completely</a> or have to <a href="http://techcrunch.com/2012/10/18/tweetbot-mac-twitter-osx-mac-app-store/">raise prices to be self sustaining</a>. It is to be expected that eventually, most third-party clients will be discontinued due to increasingly stringent rules on API usage.

This is not good for users and even worse for the third-party client developers.

Still, none of this should come as a big surprise when analyzing Twitter’s incentives. Initially the incentive was to get as many users as possible, recently it shifted to generating revenue. All of Twitter’s users got used to using the service for free, the chances of successfully switching to be a paid service are likely to fail, so: advertising. For advertising you need control over the user experience, and so we are where we are today.

Enter <a href="https://app.net/">App.Net</a>. <a href="http://daltoncaldwell.com/an-audacious-proposal">App.Net decided</a> to do a little bit of <a href="http://zef.me/4760/incentive-hacking"><em>incentive hacking</em></a>. They asked themselves: how can we build a Twitter-like service where the service’s incentives better align with what <em>users</em> want? Their solution: go paid. A percentage of the income goes toward running the services, another to third-party application developers, creating an incentive to develop great App.Net clients (users get a monthly email asking them to rate the clients that they use).

Clearly, this is a very different incentive than the Twitter’s. Sure, for App.Net, too, getting as many users as possible is beneficial, and it will try everything in its power to do so. More users is more income, but it benefits current customers too, as <a href="http://en.wikipedia.org/wiki/Metcalfe's_law">Metcalfe’s Law</a> says: a single fax machine is useless, but the value of every fax machine increases with the total number of fax machines in the network. App.Net wouldn’t need the millions of users Twitter has. It can be sustainable with far fewer. App.Net tries to emulate Twitter’s growth model by opening up the API for developers to develop third-party clients, but supercharges it by <em>paying</em> developers to do so. From the get-go, App.Net has a sustainable business model and it profits <em>only</em> from getting new sign-ups that stick around (they pay monthly or yearly).

<a href="http://app.net/">App.Net</a> is an interesting experiment in incentive hacking. Are people willing to pay for a service to ensure its incentives align with their needs? Time will tell.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1219</wp:post_id>
		<wp:post_date>2013-01-25 14:09:18</wp:post_date>
		<wp:post_date_gmt>2013-01-25 13:09:18</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>company-incentive-hacking-app-net</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[43876494365]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Incentive Hacking</title>
		<link>http://zef.me/2013/01/24/incentive-hacking/</link>
		<pubDate>Thu, 24 Jan 2013 13:23:40 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2013/01/24/incentive-hacking/</guid>
		<description></description>
		<content:encoded><![CDATA[Why do people do what they do? Why do companies what they do? The answer is pretty simple: <a href="http://en.wikipedia.org/wiki/Incentive">incentives</a>.
<blockquote>An <em>incentive</em> is something that motivates an individual to perform an action. The study of incentive structures is central to the study of all economic activity (both in terms of individual decision-making and in terms of co-operation and competition within a larger institutional structure).</blockquote>
Economics, wooh!

Considering one’s incentives is typically a good predictor of what one’s next move is going to be. If we could pick our own incentives, would that mean we could better control what we do and what we get good at?

Here’s an example of how incentives work from the phone and tablet industry and how it influences their behavior. What is the incentive of Android phone manufacturers like HTC and Samsung? Selling as many phones as possible. That’s where the money comes from. Now, let’s say you consider buying a phone from HTC with Android version <em>n</em> and you wonder: will I get an upgrade to Android <em>n+1</em> when it comes out? The question is: what is the incentive of HTC to provide its users with the upgrade. The cost is clear: for each of their phones (they carry dozens, if not hundreds of different models) they have to do considerable work porting whatever Google releases next, and rolling it out. There’s considerable cost associated with that. What will it win them? Some happy users. Let’s be realistic, most users don’t care or are even aware that they are running Android <em>n</em>, let alone that version <em>n+1</em> just came out, so there’s little reason to do all this work. In fact, <em>not</em> providing the upgrade may result in more sales, since hardcore Android fans may just buy a new phone if their old one is not upgraded. So, HTC has little incentive to provide upgrades, and therefore does so occasionally, slowly and reluctantly. On the bright side, this incentive also means that companies like HTC will iterate very quickly on their phones, which will always sport the latest and greatest specs. New phones are constantly coming out, trying to get people to dump their old ones and buy the new ones.

How about Apple? Apple is selling you two things when you’re buying an iPhone: the hardware and the platform. Apple controls both, and benefits from both, although the make the vast amount of their money from hardware. However, they also make a long-term investment in the buyer. If buyers use the device, buy content (applications, music, books) specific to the device (AppStore, iBook store, iTunes), they are more likely to stick around and buy more and more into the Apple ecosystem. “Oh, this iPad works just like my phone — it’s easy and I can run all the same apps as on my phone!” “Oh, with a push of the button I can send video to my TV when I buy an Apple TV” “Oh, my phone integrates perfectly with this Mac computer.” HTC and Samsung don’t leverage their own ecosystem, but use Google’s and therefore have little incentive to push Android as a platform, because their users can just as easily walk across the street and switch to a Motorola phone that also runs Android.

Apple benefits from selling hardware, and pushes it heavily, but also keeps investing in its current customers, because the more they buy, the more deeply invested they become. In addition, Apple has chosen the strategy of putting out a relatively small amount of different kinds of hardware, making pushing out upgrades simpler and cheaper. Therefore, for most Apple products, you can expect 2–3 years of software upgrades. By that time, Apple too strongly feels it’s time to move over to your next iPhone, iPad or Mac.

When Amazon released its Kindle HD tablet <a href="http://www.youtube.com/watch?v=VYi1jZXz9Kg">in their September 2012 keynote</a>, Jeff Bezos was surprisingly frank about their incentives. They used their incentives as a differentiator with their competition. Bezos clearly said: Apple and Android device manufacturers make their money from hardware, Amazon makes its money from content. That means that, while “hardware companies” make all their money with the sale, for Amazon that’s only when the relationship starts. Amazon Kindles are sold at close the cost, money is only made when people decide to buy content in the Amazon ecosystem (Kindle bookstore, streaming video etc.). Therefore, Bezos claims while hardware menufacturers don’t care at all if you put your tablet in a drawer right after you buy it and never look at it again — Amazon <em>does</em>. Amazon will do everything to make you use that tablet, to read more, watch more. Therefore, Amazon intrinsically has a big motivation to build a product that its buyers will want to use all the time. It also means that Amazon has little interest in pushing consumers to buy the latest and greatest hardware. It may even be cheaper for them if people keep using their Kindles for years on end. That also means they are incentivized to keep upgrading the software so that when — theoretically — 3D movie streaming comes out, you can just upgrade your Kindle Fire, get some glasses and you can now order and watch those movies as well. This is also why there’s a Kindle reading application for practically for every platform out there: it’s another gateway to their paid content.

The Amazon keynote was the first time that I heard a company talk so openly about their incentives. In this case it made sense, because they were able to spin it to show that their incentives aligned with what is best for the customer.

It did make me realize that the study of incentives is not like studying a natural phenomenon you have no control over. It is in fact possible to “design” the incentives of a company, team or even yourself, and thereby implicitly push it into a desired direction: first you decide what your goals are, then you come up with a set of incentives to achieve that goal.

Designing your incentives to match your goals is what you could call <em>incentive hacking</em>.

An example of personal incentive hacking that I often apply to myself is a task list for the day. At the beginning of the day I decide what I’m going to get done that day. Once I create the list, I freeze it. I will not allow myself to add items to it, or remove items other than by completing them. I find striking off an item from this list a very satisfying experience — that’s my incentive. Since doing things that are not on the list will not result in striking anything from the list — but do take time — I’m disincentivized to do anything that’s not on the list. As a result, I stay focussed and am super productive. It sounds silly, but you’d be amazing how much you can control your own behavior in this way.

Once you get used to this idea, you start to think in incentives and how to manipulate them constantly. How can <em>you</em> change your own, your team’s, your company’s incentives to steer in your desired direction?]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1521</wp:post_id>
		<wp:post_date>2013-01-24 14:23:40</wp:post_date>
		<wp:post_date_gmt>2013-01-24 13:23:40</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>incentive-hacking</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[43757089378]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>We don’t need no IDE!</title>
		<link>http://zef.me/2012/02/25/we-dont-need-no-ide/</link>
		<pubDate>Sat, 25 Feb 2012 04:41:52 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2012/02/25/we-dont-need-no-ide/</guid>
		<description></description>
		<content:encoded><![CDATA[Two quotes <a href="http://www.quora.com/What-is-a-good-IDE-for-someone-learning-HTML-CSS-PHP-MySQL-and-Javascript">from a random Quora question</a> asking for a HTML/CSS/PHP IDE:
<blockquote>You don’t need a full-blown IDE for web development</blockquote>
and
<blockquote>… you can’t go wrong with TextMate. It’s easy to use, convenient, and extensible. Plus the syntax highlighting blows everything else out of the water.</blockquote>
I wonder. What happened the past few years?

The 90’s and 00’s were the golden age of IDEs. No longer did you have to use plain text editors that did nothing but paint your code in colors. No longer did you have to use a command-line based debugger. No longer did you have to open up a reference manual to see what arguments that one method takes or how it works. No longer did you even have to remember what methods a string object has. No longer did you have to do Find &amp; Replace refactoring.

But today, IDEs got a bad rap.

Since the growing popularity of dynamic languages, people seem to get the idea that IDEs are only required for those bloaty old languages like C# and C++ and oh-my <em>Java</em>. IDEs are, general perception seems to be, bloaty pieces of software. Resource hogs. Slow. Badly designed. Not cool.

So, the current generation of programmers — <em>you</em>, most likely — seems to have moved away from the languages typically associated with IDEs. You use <em>cool</em>languages, like Ruby, Python, PHP and JavaScript. And <em>cool</em> languages don’t need no IDE. You’re pretty happy with your simple, basic text editor.

Your language don’t need no code completion — you can keep the entire API of your application in your head. You don’t need no refactoring — you no longer make design mistakes. You don’t need no debugger — because, there’s no more bugs in <em>your</em> software, and <code>console.log</code> ought to be enough for everybody. You don’t need constant analysis of your code and clearly marked warnings and errors — you’ll find the mistakes you made when it is time. You don’t need integrated API documentation — you know everything there is to know already.

But perhaps there is still <a href="http://vimeo.com/36579366/">a lot of opportunity for doing amazing stuff in the IDE space</a>. Maybe an IDE <em>can</em> be very useful. Cool. Great. Even for <em>dynamic</em>languages.

Yeah — — maybe.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1588</wp:post_id>
		<wp:post_date>2012-02-25 05:41:52</wp:post_date>
		<wp:post_date_gmt>2012-02-25 04:41:52</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>we-dont-need-no-ide</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[43876508292]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Decoupling: Events vs. Dependency Injection</title>
		<link>http://zef.me/2013/02/05/decoupling-events-vs-dependency-injection/</link>
		<pubDate>Tue, 05 Feb 2013 14:22:57 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2013/02/05/decoupling-events-vs-dependency-injection/</guid>
		<description></description>
		<content:encoded><![CDATA[Twitter open sourced <a href="http://twitter.github.com/flight/">Flight</a>: “a lightweight, component-based JavaScript framework from Twitter”. Its killer feature: develop components that are loosely coupled, through the power of events. Cool, right? We all <em>love</em> events.

<a href="http://en.wikipedia.org/wiki/Event-driven_programming">Events</a> are a powerful idea. They give you a nice way to decouple, and a great way to support extensibility in your software, by letting developers hook in and respond when certain events occur. A good example is the browser’s DOM, which defines many events on HTML elements: onclick, onmouseover etc. As a result, to hook into the DOM you don’t need to subclass it and override the “onClick” method, or patch its source code — you just subscribe to the events you’re interested in and off you go.

The question is: how far do you want to push ‘em?

Although event-based applications are very extensible, their control flow becomes very difficult to oversee. Triggering one event can result in a big storm of new events being triggered, often in unpredictable order, each activating code all over the place. If something doesn’t work the way you expect it to, it’s <em>very</em> hard to debug. I saw this a lot in the implementation of <a href="http://c9.io/">Cloud9</a> where we used events a lot.

This is why Flight worries me.

Flight seems to be pushing events a bit further by using them to implement loosely-bound-and-possibly-not-bound-at-all method calls.

Two examples from Flight’s <a href="https://github.com/twitter/flight/blob/master/README.md">README</a>:

this.trigger(“saveRequested”, currentDocument);

The name is phrased as an event: “saveRequested” suggests “hey, just so you know, somebody just requested a save!” However, in the example this event trigger is <em>not</em> followed by a method call that performs the <em>actual</em> save. Instead, the implicit assumption is that some event listener will perform the actual save action. This is how Flight enables decoupling of components: the code that <em>requests</em> the save is now independent from any component that actually <em>performs</em> a save.

The question is: is anybody listening to this event? Will a save <em>actually</em> occur? That will be difficult to say, since no error will be triggered if it doesn’t. If nobody listens to the event, the user’s request to save will go straight to <code>/dev/null</code>.

As I see it, events should be designed to be <em>ignorable</em>. “Somebody moved his mouse over this <em>div</em>.” Awesome, nobody cares, move along!

An event like “saveRequest” isn’t something that should be ever ignored: somebody requested a save, do something about it!

Another example from the README:

this.trigger(‘uiLoadUrl’, { url: $(e.target).attr(‘href’) });

This is an even clearer example: this is not a notification, it’s a call to action. “Hey UI component, whoever you are, load this URL!” Again, it’s cool that this code doesn’t have to have any knowledge where or what this UI component is or how it works, but it may as well be yelling into the void, because there’s zero guarantee that anybody is listening, which will result in <em>nothing</em> happening.

The silent failure that results is a <em>serious</em> problem, especially if you develop larger applications.

“So Zef, can we do any better?”

I’m glad you asked, hypothetical reader — indeed we can!

<strong>Enter the wonderful world of <a href="http://en.wikipedia.org/wiki/Dependency_injection">dependency injection</a>.</strong>

If you would have mentioned dependency injection to me a year ago, I would have given you a dirty look. Dependency injection? That sounds an awful lot like something people use in super bloated Java frameworks like <a href="http://www.springsource.org/">Spring</a>. Yuck! “Dependency injection is a solution to a problem that Javascript doesn’t have!” I would have said. But I would have been wrong.

Dependency injection is a <em>better</em> solution to the problem that Flight tries to solve: it provides a structured, safe and fast way to let components communicate while still being loosely coupled.

Just as a flight application, you build up your application from independent components. However, there is one important difference: rather than having <em>implicit</em> assumptions about other components out there — “well, we’ll just assume there’s a component that listens to event <em>takeABreath</em>, otherwise we’re screwed!” — components in the dependency injection context <em>explicitly</em> define their interface.

The term interface does not imply a fully typed Java-style, or worse <a href="http://www.w3.org/TR/wsdl">WSDL</a>-style interface, it can be very simple. In essence it has to specify just two things:
<ol>
 	<li>What are the services provided by other components that I <em>depend</em> on?</li>
 	<li>What are the services that I <em>expose</em> that other components can use?</li>
</ol>
For instance, in the Flight example, the sample component could depend on a UI component that exposes a <code>loadUrl</code> service, and a storage component that can save things. How these components are implemented is not relevant and can change at any time.

To wire the whole system together, you simply instantiate all your components, they will automatically “find” each other, and off you go.

From this, there’s two behaviors that you will get that a system like Flight won’t give you:
<ol>
 	<li>As soon as your application starts it will <em>verify</em> that all required services are implemented by some other component. If not, it will error on you. This is a good thing, because now you know you may have forgotten to load an important component.</li>
 	<li>As soon as you call a service method that does not exist, or you you did not declare as a dependency, your application will fail as well. This is also good, because this ensures that you did not mistype the service’s name (which, in an event-based system would result in crickets), and that your dependency list is indeed complete in order to make (1) more useful.</li>
</ol>
So: no more silent failure.

At <a href="http://c9.io/">Cloud9</a>, we developed a dependency injection library for Javascript, named <a href="https://github.com/c9/architect">Architect</a>. We primarily used Architect in our node.js back-end, but I’m pretty sure it works in the client as well. Architect allows you to define reusable components, clearly specifying what services it provides and consumes — the fulfillment of these requirements are statically verified once you launch your Architect application.

Here’s a simple Architect component (or “plug-in” in Architect terminology) that exposes an authentication service and implements it using a database service service defined by some other component:

// Plugin interface plugin.consumes = [‘database’]; plugin.provides = [‘auth’];

module.exports = function plugin(options, imports, register){ // “database” is a service this plugin consumes var db = imports.database;

register(null, { // “auth” is a service this plugin provides auth: { users: function(callback) { db.keys(callback); }, authenticate: function(user, pass, callback) { db.get(user, function (u) { if (!(u &amp;&amp; u.password === pass)) return callback(); callback(user); }); } } }); };

It may require <em>slightly</em> more ceremony compared to Flight’s components, but I think the pay-offs are definitely worth it.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>56</wp:post_id>
		<wp:post_date>2013-02-05 15:22:57</wp:post_date>
		<wp:post_date_gmt>2013-02-05 14:22:57</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>decoupling-events-vs-dependency-injection</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="programming"><![CDATA[Programming]]></category>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[43757044262]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Rethinking Code Editing</title>
		<link>http://zef.me/2013/03/08/rethinking-code-editing/</link>
		<pubDate>Fri, 08 Mar 2013 13:04:50 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2013/03/08/rethinking-code-editing/</guid>
		<description></description>
		<content:encoded><![CDATA[One thing frustrated me when I started programming 20 years ago: it’s very difficult to use any kind of software that you didn’t write, but <em>could</em> write yourself. There’s always something wrong, something you would have done slightly differently.

As it turns out, 20 years later, I still have this problem from time to time. This is the reason why this blog has been quiet the past two weeks, I decided to spend my spare time writing code rather than writing prose. I’m not yet happy enough with the result to share it with the world, but I would like to talk a little bit about some of the principles behind it.

As you will have guessed from the title, it’s a code editor.

“Hey, don’t you build a code editor for a living?” <a href="http://zef.me/4659/declare-everything">No, not anymore</a>. But as the Dutch say “the blood crawls where it cannot go,” I haven’t completely lost interest in code editing. Better yet, taking a bit of a distance allowed me to rethink some things. Anyway, the point here is not to build a competitor to <a href="http://c9.io/">Cloud9</a> by any means, it’s more of a playground to test some new and old ideas that I have. So far, I’ve been happy with the result.

But let’s take a step back, and start with some observations after 20 years of editing code.

<strong>Tabs</strong>: Whether you use them in an editor or in a browser, if you’re like me, your open tabs quickly become unwieldy and pretty soon you are unable to find the tab you’re looking for. Why do we use tabs in editors anyway? I believe its sole purpose is to be able to <em>quickly navigate</em> to files you’re working on. However, this convenience results in the inconvenience of having to manage the tabs themselves. Having up to ten tabs open is usually ok, but after that your tabs get so narrow you can no longer read their titles and you have to start deciding which ones to close. Usually what I do is give up on the whole thing and close all of them, and reopen the ones I need as I need them kind of defeating the whole purpose. Conclusion: tabs may not be a great idea for code editing.

<strong>File tree</strong>: There’s a few things I don’t like about the often present file tree. The first: it takes space. The second, usually you have to operate them with your mouse, or at least, I always end up operating them with my mouse. I don’t like using my mouse, it’s bad for my <a href="http://en.wikipedia.org/wiki/Repetitive_strain_injury">RSI</a>. Second, navigation is slow. If you have a big projects, with a big directory hierarchy, you end up expanding a lot of tree nodes, and it’s always the wrong nodes that have already been expanded cluttering up your view. So now you end up doing tree management as well as tab management. There’s the use case of doing file management (renaming, copying, moving files around) for the tree, but for navigation between files — for me by far the more common use case — it’s pretty bad. Conclusion: tree (at least as primary file navigation mechanism) gotta go.

<strong>File saving</strong>: If you’re an iOS (or I suppose Android) user, you may have noticed there’s no “Save” button to be found anywhere. Why? Well, why would you need one? Why does saving a file have to be an explicit command? At Cloud9 we discussed enabling auto saving by default, but decided against it because it was deemed too controversial (you can switch it on in your preferences, though). Personally, I don’t want to deal with having to press Cmd-S all the time. Some people say that they wouldn’t want to auto save, because quite often they making drastic changes to a file that they can then easily revert by closing the file and reopening it, but that seems more like the job of either a version control system, or simply good undo functionality. Conclusion: explicit file saving gotta go.

<strong>Split view</strong>: I have a 15" Macbook. If I maximize my editor, I have a lot of white space on the right side. My code doesn’t run much longer than approximately 80 characters. I also have a 27" external screen. Maximizing my editor there looks insane without split views. Split views are a must have, but when used too heavily can have similar problems as tabs. For instance, in Vim I sometimes go pretty crazy in the number of splits (perhaps 6 or 9 frames). Now you make good use of space, but how do you navigate this mess, which one is active, which file went where? In my experience, vertical splits are useful, but you probably only need about two, or three at most (until I get my 60" screen). Since the trend in computer screens appears to be for them to become wider rather than higher, horizontal splits are probably less useful (and combining the two always confuses me). Conclusion: split views are must haves, but maybe protect me against myself in using them.

<strong>Extensibility</strong>: At various times I have found the idea of Emacs very appealing and invested time in learning it. Emacs is the ultimate programmable editor. Using Emacs’ amazing Elisp language, you can change about everything about what Emacs does. You can rebind keys, add completely new features. The power in amazing. But yeah, Elisp… Vim in many ways is similar, it also very extensible, using Vimscript, not exactly as extensible as Emacs, but close. But yeah, it’s this interesting Vimscript language. If you go for Emacs you have to learn Elisp, if you go for Vim you have to learn Vimscript. These days, many developers don’t write Lisp or Vimscript for a living, it would be nicer if the language to extend their editor is something closer to what they know. Javascript for instance. Conclusion: extensibility is a must, but use a sane language.

<strong>Open source</strong>: I’m by no means a free software fundamentalist. I don’t believe software has to be free by any means. However, I do believe in the practicality of open source software. If you want to make building an editor your full-time job, like the guy who builds <a href="http://www.sublimetext.com/">Sublime Text</a>, that’s great, go ahead and sell your software. If you’re not interested in that, or want to attract an audience that wants to hack at the editor itself (the core of the thing, not just plugins), then open source is a good model. I believe that open sourcing stuff is a good thing and I like the <em>idea</em> of being able to go in, fix a bug and submit a pull request to the author. Conclusion: open source is good.

<strong>Chrome</strong>: Many editors today boast a “distraction free” mode. “Remove all the distracting chrome!” That’s great, but when <em>do</em> I want all this distracting chrome? Never. It should always be me and my code, with as little chrome as possible. No panels, no tab bars. Just as clean as functionally possible. If there’s anything visible to me other than the code I’m editing, there’d better be a damn good reason, that is either it gives me a sense of context (what file am I editing? Where am I within this file?) or it’s a temporary UI element that I explicitly asked for (e.g. an open file dialog). Conclusion: reduce chrome to the min.

<strong>Editor state</strong>: Another thing I observed using iOS applications: preserving UI state between application launches is very convenient. No longer do you need recreate your entire setup (open tabs, split views) between application restarts. All of that should just be persistent. We did this pretty well in Cloud9, that’s the way to go. Conclusion: near perfection UI state preservation is a must.

<strong>Remote file editing</strong>: Although all the points above this one are nice, I made them up as I worked on this project. The trigger to hack on my own editor is that I spend a lot of my time these days editing files in a virtual machine, i.e. not locally. The current version of LogicBlox runs only on 64-bit Linux, and I’m a Mac user. So, I have a VMWare Fusion VM with Linux running, with all my stuff there. I’ve wasted many hours in setting up shared folders with my Mac, using SSHFS and Fuse to share a file system, but each had its own set of problem. Eventually I broke down and switched to doing a lot of my editing inside the VM, which is <em>highly</em> confusing, because of course Linux keybindings are different than on the Mac. Not great. What I need is first-class support for editing files “remotely”. I realize this is not important to everybody, but hey, deal with it, this editor’s primary audience (for now) is me. Conclusion: gotta have remote file editing support.

So, what did I come up with?

Here’s a screenshot of the current state of affairs:

Some of you may instantly recognize the editor. Indeed, I have no intension in reinventing the wheel, so I’m reusing the excellent <a href="https://github.com/ajaxorg/ace">ACE</a> editor. It’s the editor component I know best, both as a user and from a technical perspective.

Also, yes, this is a web app, built using web technologies. I’m still unsure if it should remain living in a web browser or if I should wrap it in something like node-webkit. I’m not sure. As you can see, there’s very little chrome. No menus, no button bars, only the editor and a little editor bar at the bottom which tells you which file is visible there and what’s the current line and column offset (for context). That’s it.

<strong>Navigation</strong> So how do you navigate between files? Just press Cmd-E (or Ctrl-E on non-Mac keyboards) to open up the goto UI:

This UI is heavily inspired by the Textmate Cmd-T command, of course:

However, it’s also inspired by my favorite note taking program <a href="http://notational.net/">Notational Velocity</a>, which has a location bar that can be used both for search, but if no note’s title matches, pressing enter actually creates a new note and allows you to instantly edit it. I really like this UX concept, so I have it in my editor.

As a result the goto UI currently serves three purposes:
<ol>
 	<li>Search for any file in your project (using a cleaned up version of <a href="https://github.com/puls/fuzzy_file_finder.js">this fuzzy finder implementation</a>) and instantly navigate to it.</li>
 	<li>Navigate to recently opened files, replacing the typical use case of tabs. Recently openend files will have a higher ranking score so will always appear at the top ordered by last use, so typing jumps between this and the previously opened file, typing one character is probably enough to select a recent file you want to edit.</li>
 	<li>Create new files, by typing in a path that does not exist.</li>
</ol>
<strong>Editor state</strong> All editor components save their state using the <code>state</code> module. For instance:
<ul>
 	<li>Splits save how many splits there are and which files are loaded in which split</li>
 	<li>Session manager saves for recently opened files:
<ul>
 	<li>Cursor location and selection</li>
 	<li>Scroll state</li>
 	<li>Undo and redo stack</li>
 	<li>Last use (last time it was opened)</li>
</ul>
</li>
</ul>
As a result, restarting the editor brings you back in exactly the same editor state, you can even undo changes you made in the last launch. As you switch between the different files, you’ll always end up with the edition session in the same state you left it.

<strong>Back-end</strong> As I mentioned, I often have to edit files “remotely”. At Cloud9, to support this, we built <a href="https://github.com/c9/vfs">VFS</a> which is a nice, but non-trivial piece of machinery that abstracts the filesystem and can expose both a local file system, as well as an FTP file system, as well as exposing a file system via SSH. It’s very powerful, but relies on node.js. I decided to opt for something much simpler, which is a simple RESTful interface that only really requires you to implement three RESTful APIs:
<ul>
 	<li><code>PUT</code> on any path saves the body of the request to this path, for later retrieval via <code>GET</code>. If the content-type is <code>text/directory</code> an empty directory has to be created instead of a regular file.</li>
 	<li><code>GET</code> gives back the content of the file, or in case of a directory, a JSON representation of all files in this directory.</li>
 	<li><code>POST</code> is a general purpose RPC-like mechanism, currently it only requires a “filelist” command, which sends back a list of all files in the directory that was POSTed to, one file per line (basically the output of running the <code>find</code> command).</li>
</ul>
I have a simple implementation of this in PHP (yay, PHP!), which amounts to about 140 lines of code and should be easy to reimplement in whatever other language. To edit files on any server, all you’d have to do is upload one version of this script there and run it to serve the API on a certain port, point the editor to it and off you go.

<strong>Extensibility</strong> The whole thing is implemented in Javascript. I took inspiration from Cloud9 in pretty thoroughly separating the code base into separate pluggable modules. There’s a configured list of plugins that are loaded by default, you can easily add to it or remove things from it to add or disable features. Adding your own plugin is as simple as implementing a <a href="http://requirejs.org/">require.js</a>Javascript module that exposes a <code>hook</code> and <code>init</code> method.

<strong>Overall experience</strong> I’ve been using the editor for the past week almost exclusively for all my code editing and I like it a lot. I tweak a lot along the way, and I still hit Cmd-S from time, but overall I’m pretty happy with the current state. While a directory structure is inherent to any programming project today, this editor allows you to think about it more conceptually: you’re editing bits and pieces of your code in a namespace, you can select pieces in this namespace and add pieces to this namespace. Yes, of course, these translate to just directories and files, but you no longer have to worry about creating directories and files, because that’s all abstracted away and happens automatically on demand.

Anyway, this is what I work on occasionally in my spare time. It’s still a small project, amounting to about 2200 lines of my own code. As I said, it’s not ready to be used by people other than me, but if you want to, you can probably find the code (although I doubt you can get it to run).

More as this project matures.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>67</wp:post_id>
		<wp:post_date>2013-03-08 14:04:50</wp:post_date>
		<wp:post_date_gmt>2013-03-08 13:04:50</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>rethinking-code-editing</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="best-of"><![CDATA[Best Of]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="hobby"><![CDATA[Hobby]]></category>
		<category domain="post_tag" nicename="zed"><![CDATA[Zed]]></category>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[43876388079]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Compulsive Blending</title>
		<link>http://zef.me/2013/02/01/compulsive-blending/</link>
		<pubDate>Fri, 01 Feb 2013 13:39:23 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2013/02/01/compulsive-blending/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>I seem to have an irrational compulsion to blend in, to appear to be a native wherever I go. I seem to have this most strongly in foreign cities and countries. I had it when I lived in Schiedam (in the west of The Netherlands, a foreign place, since I’m really from the north), I had it in Dublin, I have it in Poland and here in the US as well.</p>
<p>For the past few weeks I’ve been staying in Atlanta, for work. It’s relatively easy to blend in here, a considerable part of the population is of foreign descent and you hear a lot of foreign accents around — whatever “foreign” may mean in the US.</p>
<p>One source of potential slip-up is the exchange of money. In stores I don’t pay with a bank card, for me it would be excessively expensive to do so. As a result, I pay cash everywhere.</p>
<p>Part of my irrational need to blend in is to definitely _not_ be a nuisance to anybody. People who are a nuisance attract attention, attention gives opportunity to notice that something’s off. So, in stores I always try to find everything I need by myself, and pay as routinely as possible — like I’ve been shopping there for years.</p>
<p>Paying cash doesn’t really help there. Since I don’t spend a lot of time in the US, I’m not very familiar with the coins. It’s not uncommon that I have to pay unfortunate amounts like $10.05. I have coins, but searching through them would take a noticeably long time. One time I naively attempted this, but US coins don’t clearly advertising their worth, they obscure by using texts like “dime”. Consequently, I have to recall what a dime is worth — 5, 10, 25 cents? This takes too much time, and getting it wrong would definitely raise an eyebrow — so I pay $11 and receive a handful of coins in return.</p>
<p>After about a week or two, my wallet gets so heavy and full of coins that it no longer fits into my jacket pocket. When I stay in San Francisco there’s always a homeless person to be friendly to — not so much in the area around me in Atlanta.</p>
<p>Today I decided to give up and just empty my wallet, as you can see above. At some point I’ll either study the value of each coin closely so I can quickly whip out the right amount, or I’ll just find a person in need.</p>
<p>As you may imagine, blending in in Poland isn’t any easier.</p>
<p>It’s about a year and a half ago that me and my wife moved there, and I don’t speak the language very well. Most foreigners make no effort. They don’t care about their foreign-ness, and don’t even attempt to keep up appearances. They just speak English to the cashier in the store. Sometimes that works out fine. Sometimes they get confused looks.</p>
<p>I don’t speak English in stores. I tend to keep quiet, hoping that nobody asks me questions that I don’t understand, or would take take more than a few words to answer — enough words to make it painfully apparent that I’m not from around here. As I answer, I carefully watch for expressions on the cashiers face — trying to detect if she figured it out.</p>
<p>On occasion I have absolutely no idea what the cashier is asking me. My usual, albeit slightly risky strategy is to either nod or shake my head, depending on the context. Usually that has the desired effect of the exchange ending, sometimes it turns out my bank card is rejected and no matter how much I nod, they won’t let me take my stuff home.</p>
<p>I do have my victories. My most satisfying visit to a store involves a few minor interactions. When paying, the cashier asks me if I have this and this amount of <a href="http://en.wikipedia.org/wiki/Polish_z%C5%82oty" target="_blank">groszy</a> in coins. I understand the question, I quickly collect them and proudly hand them over. All this with the minimal amount of words, because every word I speak is a potential tell. I thank and say good bye. As I walk out the store, I think to myself: maybe it _worked_.</p>
<p>Luckily, my wife is a great source of support in my compulsion: “Oh honey — you don’t look Polish at all, people know the instant you walk in.”</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>94</wp:post_id>
		<wp:post_date>2013-02-01 14:39:23</wp:post_date>
		<wp:post_date_gmt>2013-02-01 13:39:23</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>compulsive-blending</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="best-of"><![CDATA[Best Of]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Throwing Darts</title>
		<link>http://zef.me/2013/01/31/throwing-darts/</link>
		<pubDate>Thu, 31 Jan 2013 14:24:34 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2013/01/31/throwing-darts/</guid>
		<description></description>
		<content:encoded><![CDATA[A few days ago I <a href="http://zef.me/4835/dart-web-fragmentation-vs-web-development-fragmentation">talked about Dart and Javascript</a> and the features of <a href="http://www.dartlang.org/">Dart</a> that the web desperately needs. I did not say much about Dart as a language, or whether I believe Dart is going to make it or not. I’d like to elaborate a bit on that now.

I would like Dart to succeed, let me start with give a few reasons why.

<em>First</em> and foremost are the reasons I mentioned previously: Dart <a href="http://zef.me/4835/dart-web-fragmentation-vs-web-development-fragmentation">provides a few vital features that the web needs</a>:
<ol>
 	<li>Built-in support for modules.</li>
 	<li>A clear and unambiguous <a href="http://en.wikipedia.org/wiki/Object-oriented_programming">OOP</a> story.</li>
 	<li>An extensive library of APIs you commonly need, so there’s no need to reinvent the wheel every time.</li>
 	<li>A declarative way of specifying project dependencies and a package manager to manage them.</li>
</ol>
I know, JS.next — whenever it will be available in a browser near you — will give us modules and classes. That’s a good thing.

<em>Second</em> is a reason that’s usually used <em>against</em> Dart: Dart is <em>boring</em>. It’s uninspired. There’s isn’t much new there. It takes ideas from other languages that have been around for decades and remixes them.

I think that’s a <em>good</em> approach. The process of creating a language that is to be used by millions is a pretty bad time to experiment with crazy new language ideas. Chances are that those nifty features <a href="http://zef.me/4440/zefs-law">will blow up in your face</a>.

There’s always a degree of failure when you attempt this. Java brought a lot of good things to the mainstream, including garbage collection and fast JIT VMs. But other things failed, specifically <a href="http://en.wikipedia.org/wiki/Exception_handling#Checked_exceptions">checked exceptions</a>. <a href="http://en.wikipedia.org/wiki/Brendan_Eich">Brendan Eich</a> decided to put quite some nifty features in Javascript back in the day. Many worked well — Javascript is not a bad language — but guess what, some turned out to be <a href="http://oreilly.com/javascript/excerpts/javascript-good-parts/bad-parts.html">pretty bad ideas</a> too.

Dart takes features used for decades: modules, classes with single inheritance, lexical scoping, function closures and isolates (similar to <a href="http://en.wikipedia.org/wiki/Actor_model">actors</a> in Erlang) and mixes them together in good-ol’ curly-braced dynamic language.

Dart has one experimental feature, however: <a href="http://www.dartlang.org/articles/why-dart-types/">an optional and unsound type system</a>. This is a controversial idea. I have at least one colleague who think it’s insane to design a language this way.

Dart is a dynamically typed language, but it does allow you to add type information — for instance to variables, or function arguments. Both of the following are allowed, and as far as the runtime is concerned, are equivalent:

sayHello(name) { print(“Hello $name!”); }

and

void sayHello(String name) { print(“Hello $name!”); }

The thinking behind this is that you may want to start out writing your code without types while you’re still exploring how you want your program to work, without wasting too many finger and brain cycles on getting the types right. Later, when the code is more mature, you can annotate it with types for documentation and tooling purposes. You can run your program with runtime type checking on (if so, it will fail when you pass in arguments of the wrong type), or in production mode without any run-time type checking. Type annotations are not safe enough to be used to optimize the code in the Dart VM — the VM treats it as a fully dynamic language and ignores the type information. The current <code>dart2js</code> compiler, however, does appear to use <a href="http://2012.jsconf.eu/speaker/2012/08/28/javascript-as-a-compilation-target-making-it-fast.html">type annotations to generate more optimal Javascript</a>.

Conceptually I like the idea of optional types, but it’s a “new” feature, it could turn out to be a horrible idea. It’s a risk.

The <em>third</em> reason I like Dart is its support for structured programming. As mentioned, Dart supports modules and classes natively. You can ignore it all you want, but most large Javascript code bases <a href="http://www.crockford.com/javascript/inheritance.html">use</a> <a href="http://ejohn.org/blog/simple-javascript-inheritance/">some way</a> <a href="https://github.com/Joose/Joose">to encode</a> <a href="http://www.sencha.com/learn/the-class-system/">classes</a><a href="http://manual.qooxdoo.org/1.5.x/pages/core.html#object-orientation">and</a> <a href="http://mootools.net/docs/core/Class/Class">inheritance</a>. Dart, like Java, and Ruby, and Python, and C#, and C++ supports this at a language level. I think that’s a good thing.

Prototypes are a nice idea, but they may just be too powerful for many people to handle, class based object-oriented programming is simple and powerful enough.

And modules… well, you need modules. You need them to be part of your language.

All in all, I think Dart is a better language than Javascript — so I’d like it to succeed.

The question is: <strong><em>will</em> it succeed?</strong> Sadly, I’m all but convinced.

One big roadblock is politics. Brendan Eich, CTO of Mozilla (and inventor of Javascript) <a href="https://news.ycombinator.com/item?id=2982949">has said</a>:
<blockquote>[…] Yet I guarantee you that Apple and Microsoft (and Opera and Mozilla, but the first two are enough) will never embed the Dart VM.</blockquote>
Other browser vendors don’t like the fact that Google went rogue on them and developed a whole new language by themselves. Personally, I’d argue this is the only way to get to something better — all the compromising hasn’t sped up the development of Javascript, nor has it led to a prettier language.

In response to my previous article, people have told me Dart is bad because it is “proprietary”. <a href="http://en.wikipedia.org/wiki/Proprietary_software">That does not make much sense</a>, since Dart is BSD licensed and can be embedded in any browser. If Chrome were the only browser to adopt it, that’s the <em>choice</em> of other browser vendors. What people probably mean with “proprietary” it’s not an agreed upon and standardized like Javascript. Javascript by now has been blessed as <em>the</em> scripting language of the web — it is the standard, it’s in W3C documents and everything.

Now, I may be getting my history wrong, but I’m pretty sure that Javascript in the 90s started its life much more “proprietary” than Dart is today. It was a completely proprietary language, unique to the commercially licensed <a href="http://en.wikipedia.org/wiki/Netscape_(web_browser">Netscape browser</a>). It was later reverse engineered and copied by other browser vendors. Google from the outset has said that Dart will be open source and they wish to standardize the language once they have matured it.

A second big problem that I foresee for Dart is <em>Google itself</em>.

Google develops products like I threw darts when I was a kid: grab a bunch of darts and throw them full force in the general direction of the target to see what you hit.

If Google would go all-in on Dart, I’d be more convinced, but Google has many competing front-end developer technologies:
<ol>
 	<li><a href="https://developers.google.com/web-toolkit/">Google Web Toolkit</a></li>
 	<li><a href="https://developers.google.com/closure/compiler/">Closure compiler and library</a></li>
 	<li><a href="http://angularjs.org/">AngularJS</a></li>
 	<li><a href="https://developers.google.com/native-client/">Native client</a></li>
</ol>
All of these have slightly different audiences and use cases, but many of them are bound to be canned at some point. Google Web Toolkit is practically dead already.

In Google’s company culture, each team can choose its own tools. There is no top-down policy on these matters. That means that the Google Closure team is competing with the Dart and AngularJS teams trying convince developers internally to use the tools they develop. If none of the teams within Google would adopt Dart, would they can the project?

I should ote that Dart is still in a preview state. Google itself doesn’t even recommend you use it for more than just playing. Once there’s a 1.0, we’ll have to see what happens.

Is LogicBlox going to write its applications in Dart? We already had our fair share of buying into languages that didn’t make it long-term. <a href="http://zef.me/4235/pick-your-battles">You have to pick your battles</a>. Strategically it does not seem very wise to buy into Dart right now. I hope that day will come, though.

If only Google would stop throwing darts.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>175</wp:post_id>
		<wp:post_date>2013-01-31 15:24:34</wp:post_date>
		<wp:post_date_gmt>2013-01-31 14:24:34</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>throwing-darts</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="programming"><![CDATA[Programming]]></category>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[43757062469]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>FirefoxOS: Beyond Idealism</title>
		<link>http://zef.me/2013/02/11/firefoxos-beyond-idealism/</link>
		<pubDate>Mon, 11 Feb 2013 14:07:30 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2013/02/11/firefoxos-beyond-idealism/</guid>
		<description></description>
		<content:encoded><![CDATA[My former colleague Sergi Mansilla, now working on <a href="http://www.mozilla.org/en-US/firefoxos/">FirefoxOS</a>, <a href="http://sergimansilla.com/blog/promise-of-ffos/">wrote a nice article about the promise of FirefoxOS</a>:
<blockquote>But Firefox OS will not be directly battling against other mobile platforms. Its main objective is to change the way the world develops mobile apps, and even in the unlikely event that Firefox OS itself disappears in the process, if web-apps become mainstream, it will have succeeded.

The fact that any website is a potential app can’t be underestimated. By tapping into extremely popular and flexible technologies such as HTML5, CSS3 and JavaScript, Firefox OS instantly promoted millions of web and JavaScript developers into app developers. All they have to do is download a free simulator addon (and not even that is strictly necessary if your app is not going to use phone APIs). Developers already know the browser environment and the tools, and there’s no need to learn any new language or framework.</blockquote>
I appreciate that the vision of FirefoxOS is that mobile apps — like desktop apps before it — need to move to the web. I also appreciate the idea that even if FirefoxOS itself fails, but web apps will have become the go-to platform for mobile in the process — that this will be considered a success as well. That’s very admirable.

I’d like to talk about is the case where FirefoxOS <em>does</em> become a success.

What worries me is that FirefoxOS’ goals seem to be primarily technical and idealistc. The focus is on building out the web to become a great mobile platform. Don’t get me wrong, this is a good idea — the mobile web has to win some day. But if the user experience of FirefoxOS sucks, I’m a lot less enthusiastic.

<a href="http://www.mozilla.org/">Mozilla</a>, the main driver of FirefoxOS, has a strong engineering company culture, they hire people that excel at engineering. Another company with a similar company culture is Google. They put out a mobile operating system called Android. And guess what, the operating system is much like the company: technically impressive, but its usability has been sub-par from the beginning compared to alternatives like iOS. This is improving now, but it’s a slow process. Recently I had to explain my sister in law how to use her new Android phone (Android 4.0), and it became painfully clear that many things were not intuitive at all. They’re learnable, but not intuitive.

And guess who are supposed to be the ones <em>using</em> these FirefoxOS devices at the end of the day. Hint: it’s not web developers and freedom fighters.

You may have the best technical vision and idealism in the world, but technical idealism does not a good mobile operating system make.

If FirefoxOS from a UX perspective is going to be yet another Android 1.0, that would be bad. I’d like to see a web-based mobile operating system succeed that is <em>both</em> technically impressive <em>and</em> easy to use.

You can give end-users your most idealistic two-hour speech about how iOS and Android are locking them in and taking away freedom — they’ll just give you a blank stare. As far as they are concerned, their phones could only be used to make phone calls before, now they can also upload funny cat pictures and stalk people on facebook. All this “open” and “freedom” rhetoric may work on a subset of geeks, it does not speak to anybody else.

I sincerely hope Mozilla and its partners can put something together that has a good user experience. If not, it may just be one of those <a href="http://www.youtube.com/watch?v=lDT4ejKGKWs">meh</a> platforms that become “popular” through sheer carrier pushing, instead of users specifically <em>asking</em> for a FirefoxOS phone. And that’s not how I’d want the web to win.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>236</wp:post_id>
		<wp:post_date>2013-02-11 15:07:30</wp:post_date>
		<wp:post_date_gmt>2013-02-11 14:07:30</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>firefoxos-beyond-idealism</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="firefoxos"><![CDATA[Firefoxos]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="mobile"><![CDATA[Mobile]]></category>
		<category domain="post_tag" nicename="web"><![CDATA[Web]]></category>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[43757006187]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Google Glass APIs Released</title>
		<link>http://zef.me/2013/04/16/google-glass-apis-released/</link>
		<pubDate>Tue, 16 Apr 2013 06:26:05 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2013/04/16/google-glass-apis-released/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Google has released <a href="https://developers.google.com/glass/overview" target="_blank">documentation to the Mirror APIs</a>, the API to program against Google Glass. <a href="http://www.google.com/glass/start/" target="_blank">Google Glass</a>, if you spent the past year living under a rock — and even if you didn’t — is Google’s “I’ve got a weird little thing on my glasses that gives me useful information” upcoming product.</p>
<p>While Glass is supposedly powered by Android, that’s not the way to develop applications for us regular folk. Instead, we get to build web services. From what I can deduce from the documentation, the way it works is that your glass keeps a persistent connection with Google’s servers, which calls third-party web services on behalf of your glass. Similarly, if you need to push stuff to glass, you do so by calling Google’s webservice end-point, which in turn will push this data to the glass in question.</p>
<p>Diagrammatically it would look something like this:</p>
<p>Glass offers four groups of APIs:</p>
<ul>
<li>
<a href="https://developers.google.com/glass/v1/reference/timeline" target="_blank">Timeline</a>, to shove notifications in the glasser’s eye.</li>
<li>
<a href="https://developers.google.com/glass/v1/reference/subscriptions" target="_blank">Subscriptions</a>, to receive notifications of, for instance, a glasser calling an action on your timeline item (for instance “reply”, or “delete”).</li>
<li>
<a href="https://developers.google.com/glass/v1/reference/locations" target="_blank">Locations</a>, to enable stalking.</li>
<li>
<a href="https://developers.google.com/glass/v1/reference/contacts" target="_blank">Contacts</a>, to create, update and delete contacts (supposedly, this is what you’d use if you want to build a service that syncs Facebook or LinkedIn contacts).</li>
</ul>
<p>For now, only a developer edition is available of glass to a select group of developers (that were willing to pay $1.5k for alpha quality hardware) — the rest of us will have to wait until 2014 to look as cool as the — clearly satisfied — glass users below.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>381</wp:post_id>
		<wp:post_date>2013-04-16 08:26:05</wp:post_date>
		<wp:post_date_gmt>2013-04-16 06:26:05</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>google-glass-apis-released</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="google-glass"><![CDATA[Google Glass]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Welcome to my web-log</title>
		<link>http://zef.me/2013/04/15/welcome-to-my-web-log/</link>
		<pubDate>Mon, 15 Apr 2013 14:30:28 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2013/04/15/welcome-to-my-web-log/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>While everybody moved to <a href="http://twitter.com/zef" target="_blank">Twitter</a> to share their “funny links,” and some to <a href="http://alpha.app.net/zef" target="_blank">App.Net</a> to get just that little bit more space (little known fact: App.Net posts can be 255 characters long) — I’ve decided to make the move in reverse. I’m just that contrarian. Most of the time I just got a tad more to say about a link than the 100 characters I got left in a tweet.</p>
<p>Trend setter that I am, I think I’m able to make web-logs hot again. That’s right: <em>web-logs</em>, not blogs or weblogs. Dashes matter.</p>
<p>Next week I’ll add a pop-up to my site that asks if you want to set this page as your homepage (hint: the correct answer is going to be “Yes”) and if you’re all nice — I’ll consider a guestbook too.</p>
<p>Who’s with me?</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>425</wp:post_id>
		<wp:post_date>2013-04-15 16:30:28</wp:post_date>
		<wp:post_date_gmt>2013-04-15 14:30:28</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>welcome-to-my-web-log</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="because-i-care"><![CDATA[Because I Care]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>A Decade of Blogging</title>
		<link>http://zef.me/2013/02/10/a-decade-of-blogging/</link>
		<pubDate>Sun, 10 Feb 2013 10:41:22 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2013/02/10/a-decade-of-blogging/</guid>
		<description></description>
		<content:encoded><![CDATA[Today, it’s a <a href="http://zef.me/1/welcome-to-my-weblog">decade ago that I wrote my very first blog post</a>. That first post is a memorable one, one I often re-read for inspiration:
<blockquote>I just installed my weblog, here I will post all kinds of stuff, you’ll see what’ll come.</blockquote>
There’s a few things I like about this first post:
<ol>
 	<li>It’s just so <em>true</em>: I <em>did</em> post all kinds of stuff, and you — the reader — <em>did</em>see what would come. It was like I could look into the future.</li>
 	<li>It’s so concise and to the point, a thing that dwindled over time. Most of my recent posts are well over 1000 words each.</li>
</ol>
One thing that I would not have predicted is that a decade later this blog would still exist — although it varied greatly in post volume from year to year.

Over the past 10 years I wrote a little over 1.6k blog posts. Totaling over 396k words. According to <a href="http://www.huffingtonpost.com/2012/03/09/book-length_n_1334636.html">the Huffington Post</a> — my main source of truth — the average length of a novel is 64,531 words. Incidentally, this is so similar to <a href="http://en.wikipedia.org/wiki/65536_(number">65,536</a>) that this cannot be a coincidence. This means that I wrote over 6 average-length novels worth of words over the past years on this site alone. That does not count the <a href="http://zef.me/4006/dr-zef">PhD thesis</a> I also wrote during this time.

A lot has happened the past decade. And quite frankly, reading many of my earlier posts is a painful experience. For all of you who sat through it all this time: respect.

On to the century milestone!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>516</wp:post_id>
		<wp:post_date>2013-02-10 11:41:22</wp:post_date>
		<wp:post_date_gmt>2013-02-10 10:41:22</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>a-decade-of-blogging</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[43757022643]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Wouldn’t it be nice</title>
		<link>http://zef.me/2013/04/15/wouldnt-it-be-nice/</link>
		<pubDate>Mon, 15 Apr 2013 08:27:54 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2013/04/15/wouldnt-it-be-nice/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Wouldn’t it be nice to live in a world where “wouldn’t it be nice” was not an over-used phrase in product pitches?</p>
<p>I bet I just spoiled the <a href="https://play.google.com/store/apps/details?id=com.google.android.keep&amp;hl=en" target="_blank">Google Keep</a> ad for you:</p>
<a href="https://www.youtube.com/embed/UbvkHEDvw-o">https://www.youtube.com/embed/UbvkHEDvw-o</a><p>You’re welcome.</p>
<p>Knowing myself, I’m usually very sensitive to things I consider annoying that I do myself constantly — this is likely to be one of them. Challenge to self: stop saying “wouldn’t it be nice”.</p>
<p>Now, wouldn’t that be nice.</p>
<p><strong>Edit:</strong> So — it turns out I was right. I just found out that in this morning’s <a href="http://zef.me/5791/drones" target="_blank">post on Drones</a> I wrote “wouldn’t it be cool”. Crap.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>600</wp:post_id>
		<wp:post_date>2013-04-15 10:27:54</wp:post_date>
		<wp:post_date_gmt>2013-04-15 08:27:54</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>wouldnt-it-be-nice</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="because-i-care"><![CDATA[Because I Care]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Getting it wrong</title>
		<link>http://zef.me/2013/02/15/getting-it-wrong/</link>
		<pubDate>Fri, 15 Feb 2013 14:27:47 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2013/02/15/getting-it-wrong/</guid>
		<description></description>
		<content:encoded><![CDATA[Yesterday I decided to do some work with our issue tracker — I won’t name what issue tracking software we use, I don’t want to hurt anybody’s feelings. Our issues are divided into projects, projects are further sub-divided into components.

What I tried yesterday is just one thing: create a few issues. You’d say that’s a pretty difficult thing to get wrong. Also, it’s kind of an important feature to get right, you know, for an issue tracker.

Currently, I’m working on a component named “Message Import/Export”. I’m looking at the list of Message Import/Export related issues. Now I want to add a new issue to this component. So, let me see, how do I do that?

Ah right, there it is!

Now, guess… When I press the “Create Issue” link/button, what will it do?

If you guessed that it would open a panel to create a new issue, you’d be correct. Congratulations! However, will this panel have any sort of context awareness? We were looking at the list of issues of a particular component, after all:

Yeah, so that’s a <em>no</em>. I have to select the component by hand, again.

Alright, so let’s try something different. Let’s create a “sub-task” of an existing issue that is <em>already</em> part of the component. At least it should be able to guess I’d like the sub-task to be part of that same component, right?

Yeah, that’s another no.

Or is it?

When I create the sub-task, and I go to view it, it turns out that it <em>did</em> add it to the component of its parent.

Huh?

So this issue creation panel has no intention of giving me any hint of what it’ll do when I hit that “Create” button.

Perhaps, when I go back to my first test, creating a completely new issue while looking at component issue <em>will</em> in fact secretly set the component right behind my back? That would be at least be somewhat consistent.

But sadly, no, it doesn’t.

Now, you may say. “Oh Zef, give whatever company produced this a chance. I’m sure it’s a version 1.0 fluke.” Sadly, this product has been around for over a decade.

No more excuses.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>836</wp:post_id>
		<wp:post_date>2013-02-15 15:27:47</wp:post_date>
		<wp:post_date_gmt>2013-02-15 14:27:47</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>getting-it-wrong</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="because-i-care"><![CDATA[Because I Care]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[43876430654]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Code Hard or Go Home</title>
		<link>http://zef.me/2013/04/17/code-hard-or-go-home/</link>
		<pubDate>Wed, 17 Apr 2013 08:49:11 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2013/04/17/code-hard-or-go-home/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p><a href="http://hypercritical.co/2013/04/12/code-hard-or-go-home" target="_blank">Good article about Google forking Webkit</a> under the name Blink by John Siracusa:</p>
<blockquote>When Apple decided to make its own web browser back in 2001, it chose <a href="http://en.wikipedia.org/wiki/KHTML" target="_blank">KHTML</a>/<a href="http://en.wikipedia.org/wiki/KJS_%28KDE%29" target="_blank">KJS</a> from the <a href="http://en.wikipedia.org/wiki/KDE" target="_blank">KDE</a> project as the basis of its rendering engine. Apple didn’t merely “adopt” this technology; it took the source code and ran with it, hiring a bunch of smart, experienced developers and giving them the time and resources they needed to massively improve KHTML/KJS over the course of several years. Thus, <a href="http://en.wikipedia.org/wiki/Webkit#Origins" target="_blank">WebKit was born</a>.</blockquote>
<p>Even has some cool-looking graphs.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>956</wp:post_id>
		<wp:post_date>2013-04-17 10:49:11</wp:post_date>
		<wp:post_date_gmt>2013-04-17 08:49:11</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>code-hard-or-go-home</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Fixing Events in Javascript</title>
		<link>http://zef.me/2013/02/06/fixing-events-in-javascript/</link>
		<pubDate>Wed, 06 Feb 2013 14:08:00 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2013/02/06/fixing-events-in-javascript/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Events are an integral part of Javascript programming. No matter if you use Javascript in the browser or on the server with [node.js](http://nodejs.org), you will be listening to, and perhaps trigger numerous events. Yesterday [I talked about Twitter’s Flight, which, I argued, might be pushing events too far](http://zef.me/5390/decoupling-events-vs-dependency-injection). Nevertheless, the fact that something can be pushed too far, does not mean it should avoided altogether. Events are still a good solution to many problems. However, in its current implementation I see a big problem that way too few people complain about: its proneness to silent failure.</p>
<p>In case you never experienced it: from a debugging perspective, silent failure is the _worst_ kind of failure.</p>
<p>I appreciate that Javascript is a dynamic language. If your code calls a method that does not exist, you cannot expect a Javascript interpreter to complain about it as soon as it parsed the source code. The moment that Javascript _does_ complain is when the method call actually happens. This is the nature of dynamic languages.</p>
<p>But what if you attempt to listen to an event that doesn’t exist? Or what if you dispatch an event and mistype its name?</p>
<p>Crickets.</p>
<p>“Well,” you may say “why would you ever do that?” Well, you wouldn’t, not on purpose. But maybe you’re confusing event names, or you simply mistyped the name of the event. It can happen to the best of us. It certainly happened to me a few times.</p>
<p>As an example, the following is perfectly legal Javascript:</p>
<p>var bodyEl = document.getElementsByTagName(“body”)[0];<br> bodyEl.addEventListener(“clik”, function() {<br> console.log(“Don’t touch my body!”);<br> });</p>
<p>So, now I’m listening to the “clik” event. More likely than not, this event doesn’t exist, but do I get an error when I add the listener? Nope. Do I get a warning at least? Nope.</p>
<p>The same goes for dispatching an event:</p>
<p>this.dispatchEvent(“updat”, changes);<br> <br> // Some place else in your code<br> obj.addEventListener(“update”, updateView);</p>
<p>Do you get an error? No. Do you get a warning? No.</p>
<p>As it turns out, encoding “special” values as strings is a pretty bad idea. So, what would be a safer solution?</p>
<p>Once more, [Dart](http://darglang.org) may be a potential source of inspiration. How does Dart implement events?</p>
<p>In Dart, rather than having a single `addEventListener` or `on` method on an event emitting object, each event is part of the object’s `on` property of type [EventListenerList](http://api.dartlang.org/docs/releases/latest/dart_html/EventListenerList.html). You can `add` a callback to this `EventListenerList`, to be called when a given event occurs. For instance, to listen to click events on the body DOM element:</p>
<p>bodyEl.on.click.add((event) {<br> console.log(“Clicked!”);<br> });</p>
<p>If you’d misspell `click` as `clik` in this scenario, you’d get a exception along the lines of “bodyEl.on does not have a property ‘clik’.” — if Dart’s IDE doesn’t give you a warning in-line already. Alternatively, every event can also be used as a [Stream](http://api.dartlang.org/docs/releases/latest/dart_async/Stream.html), which allows you to do all kinds of fancy things like filtering and other [LINQ-like](http://msdn.microsoft.com/en-us/library/vstudio/bb397926.aspx) stuff.</p>
<p>As simple as Dart’s solution may be, it’s likely too different from the way events work in Javascript today. So it’s not a viable solution.</p>
<p>A simpler fix is to introduce a `.declareEvent` method on event emitters, and enforcing that every event is declared, before it can be dispatched or listened to:</p>
<p>this.declareEvent(“update”);<br> this.declareEvent(“error”);</p>
<p>Now, when somebody tries to listen to an event that is not explicitly declared, it would just throw an exception. When you try to dispatch an event that is not declared: exception. Yes, blowing up in your face is better than silent failure, people.</p>
<p>As a added bonus, these event declarations are very valuable _documentation_. It’s not uncommon that I have to use an object that’s an event emitter, but its implementation doesn’t clearly advertise the events I can expect it to trigger. If all events were explicitly declared, this information would be so much easier to find.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>974</wp:post_id>
		<wp:post_date>2013-02-06 15:08:00</wp:post_date>
		<wp:post_date_gmt>2013-02-06 14:08:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>fixing-events-in-javascript</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="dart"><![CDATA[Dart]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="javascript"><![CDATA[JavaScript]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>John Siracusa on eBook Publishing</title>
		<link>http://zef.me/2013/04/18/john-siracusa-on-ebook-publishing/</link>
		<pubDate>Thu, 18 Apr 2013 15:20:56 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2013/04/18/john-siracusa-on-ebook-publishing/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>As I mentioned before, I’m listening to the entire <a href="http://zef.me/4646/hypercritical" target="_blank">Hypercritical</a> podcast backlog. Absolutely worth it. Sadly, I’m getting closer to the end.</p>
<p>Episode #85 is a great episode about the publishing procedure of the e-book (ePub, Kindle) versions of John’s amazing <a href="http://arstechnica.com/apple/2012/07/os-x-10-8/" target="_blank">OS X reviews</a>. The amount of problems he encountered is pretty interesting to listen to.</p>
<p><a href="http://5by5.tv/hypercritical/85" target="_blank">Listen to it here, the real stuff starts around 20 minutes in</a>.</p>
<p><strong>Update:</strong> <a href="http://arstechnica.com/business/2009/02/the-once-and-future-e-book/" target="_blank">Here’s an article by John on the topic</a>.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>980</wp:post_id>
		<wp:post_date>2013-04-18 17:20:56</wp:post_date>
		<wp:post_date_gmt>2013-04-18 15:20:56</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>john-siracusa-on-ebook-publishing</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="because-i-care"><![CDATA[Because I Care]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>If you read only one thing about Bitcoin, read this</title>
		<link>http://zef.me/2013/04/19/if-you-read-only-one-thing-about-bitcoin-read-this/</link>
		<pubDate>Fri, 19 Apr 2013 12:40:12 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2013/04/19/if-you-read-only-one-thing-about-bitcoin-read-this/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>I’ve been following Bitcoin, the cryptographic currency, for a year or two, but I still <a href="https://medium.com/money-banking/2b5ef79482cb" target="_blank">learned a lot about it from this article by Felix Salmon</a>. There’s two angles to Bitcoin: the technical angle (how does it work, why does it work) and the economic angle. Felix Salmon does an <em>excellent</em> job at covering the economic angle:</p>
<blockquote>A few days ago, the value of all the bitcoins in the world blew past $1 billion for the first time ever. That’s an impressive achievement, for a purely virtual currency backed by no central bank or other authority. It’s also temporary: we’re in the middle of a bitcoin bubble right now, and it’s only a matter of time before the bubble bursts.</blockquote>
<blockquote>There are a couple of reasons why the bubble is sure to burst. The first is just that it’s a bubble, and any chart which looks like the one at the top of this post is bound to end in tears at some point. But there’s a deeper reason, too — which is that bitcoins are an uncomfortable combination of commodity and currency. The commodity value of bitcoins is rooted in their currency value, but the more of a commodity they become, the less useful they are as a currency.</blockquote>
<p>If you read <em>anything</em> about Bitcoin and its future, <a href="https://medium.com/money-banking/2b5ef79482cb" target="_blank">read this</a>.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1060</wp:post_id>
		<wp:post_date>2013-04-19 14:40:12</wp:post_date>
		<wp:post_date_gmt>2013-04-19 12:40:12</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>if-you-read-only-one-thing-about-bitcoin-read-this</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="bitcoin"><![CDATA[Bitcoin]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Restyled</title>
		<link>http://zef.me/2013/02/04/restyled/</link>
		<pubDate>Mon, 04 Feb 2013 13:50:56 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2013/02/04/restyled/</guid>
		<description></description>
		<content:encoded><![CDATA[
<p>This weekend I re-themed this site in preparation of its one decade anniversary (in less than a week). It now has a responsive design, so it should also look better on your mobile devices. It’s not exactly where I want it to be yet, but it’s getting there.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1134</wp:post_id>
		<wp:post_date>2013-02-04 14:50:56</wp:post_date>
		<wp:post_date_gmt>2013-02-04 13:50:56</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>restyled</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>The Chrome Route</title>
		<link>http://zef.me/2013/03/21/the-chrome-route/</link>
		<pubDate>Thu, 21 Mar 2013 14:36:51 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2013/03/21/the-chrome-route/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Two weeks ago [I talked about my little editor project](http://zef.me/5672/rethinking-code-editing). In the meantime work has progressed quite a bit and I’m really liking where it’s headed. However, one thing I had not yet figured out at the time was deployment: how are people supposed to get and run this editor? Since it’s all based on web technology the obvious answer would be: web browser!</p>
<p>However, there’s some drawbacks to that approach:</p>
<p>1. Many people still want to edit source code that resides locally (including me) and that web apps don’t have access to.<br>2. Many people want to edit even if they have no internet connection available (including me) while this is all technically possible with HTML5, my experience has been that the HTML5 support is not yet very stable, also it’s counter-intuitive to start up a browser while you’re offline (what’s the point?)<br>3. Web apps have to be hosted. I’ve been very closely involved with hosting a web-based IDE before, and I have no interest in repeating that exercise in my spare time.<br>4. Browser compatibility. Yes, I hear all the incompatibilities have not yet been resolved. Any day now, people. Any day now!</p>
<p>An alternative approach would be to wrap it in something like [node-webkit](https://github.com/rogerwang/node-webkit) and create a downloadable application. However, this approach has problems too:</p>
<p>1. You have to host the application’s downloads and prepare builds for all platforms.<br>2. Upgrades are tricky: you either need to build in support for upgrades in the application, or just ask users to download a new version from time to time. Either way it’s work for somebody.<br>3. I would like to offer cloud features, like automatic syncing all your editor settings between devices. Yet, I have no interest in building an infrastructure to support this.</p>
<p>Basically, going with a downloadable app would mean going back to the pre-web days. Don’t want to do that.</p>
<p>So, after doing a quite a bit of research I chose to go a slightly different route: [Chrome Packaged Apps](http://developer.chrome.com/apps/about_apps.html).</p>
<a href="https://www.youtube.com/embed/lBUGTVIJVfM">https://www.youtube.com/embed/lBUGTVIJVfM</a><p>If you package up your application as a Chrome App, you get [access to APIs](http://developer.chrome.com/apps/api_index.html) you usually wouldn’t have access to (like simple key-value storage that syncs between your machines), it allows you to create various kinds of windows (including ones without any chrome — hah!), bind global hotkeys and in the future: get its own desktop application icon, i.e. you can run the application without having to fire up Chrome. It does have some constraints: you cannot randomly access the local file system, although you can open and save to individual files. Also, the environment is designed to be more secure than a regular webpage, e.g. no inline scripts or eval [and some APIs are disabled](http://developer.chrome.com/apps/app_deprecated.html).</p>
<p>Chrome Packaged Apps are in principle fully offline capable. When the user installs the application all resources will be downloaded locally, so that it can be launched offline. In addition, Chrome automatically handles upgrades and offers storage sync APIs to easily sync application settings between devices you’re logged into (think: editor preferences).</p>
<p>Of course, Chrome apps are specific to Chrome, but quite frankly I don’t care. I use Chrome as do most other people that I know. I tend to be pragmatic in these things. I don’t have the time nor interest in ensuring compatibility with other browsers. Who knows, if and when Firefox will offer similar capabilities (maybe they already do), I or somebody else can repackage it as a Firefox app.</p>
<p>Until then: Chrome only. And yes,, this will be the app that will make ChromeBooks viable (Google, feel free to send me a [Pixel](http://www.google.com/intl/en/chrome/devices/chromebook-pixel/) for testing).</p>
<p>All in all [Chrome Packaged Apps](http://developer.chrome.com/apps/about_apps.html) are pretty interesting Chrome feature. Currently it’s not yet possible to upload these applications to the Chrome Webstore, but it [will be “soon”](http://developer.chrome.com/apps/publish_app.html).</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1165</wp:post_id>
		<wp:post_date>2013-03-21 15:36:51</wp:post_date>
		<wp:post_date_gmt>2013-03-21 14:36:51</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-chrome-route</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="zed"><![CDATA[Zed]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Zed Alpha Available</title>
		<link>http://zef.me/2013/04/08/zed-alpha-available/</link>
		<pubDate>Mon, 08 Apr 2013 06:37:19 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2013/04/08/zed-alpha-available/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Over the past weeks I’ve written about Zed, my experimental code editor project. <a href="http://zef.me/5672/rethinking-code-editing" target="_blank">I explained why I started the project</a>, <a href="http://zef.me/5712/the-chrome-route" target="_blank">why it’s a Chrome app</a> and <a href="http://zef.me/5722/zed-a-status-update" target="_blank">explained some of its design choices</a>. Those who couldn’t wait, probably found the project already (it has been on github all along). Now it includes some basic installation instructions. You can <a href="https://github.com/zefhemel/zed" target="_blank">download Zed from Github</a>. Getting it setup may be a bit more involved than your average editor, because you need to run a WebFS server.</p>
<h3>WebFS</h3>
<p>WebFS is a super simple RESTful protocol that I came up with, consider it a super lightweight version of WebDAV, without the XML. It <a href="https://github.com/zefhemel/zed/blob/master/app/manual/webfs.md" target="_blank">is documented here</a>. What it does is expose a file system via HTTP, supporting PUT for storing a file, GET for retrieving a file, OPTIONS for getting file metadata (currently just an ETag, used for file watching) and DELETE for deleting a file. The protocol is as simple as can be, the Python implementation <a href="https://github.com/zefhemel/zed/blob/master/server/webfs.py" target="_blank">is just 128 lines of code</a>. So why does Zed need WebFS? In <a href="http://zef.me/5712/the-chrome-route" target="_blank">a previous post</a> I explained that Chrome’s APIs do not support free access the the local file system (yet). You can open individual files via a file picker, and with a bit of effort even get write access to a bunch of them, but creating new files in a directory in the user’s file system is not supported. WebFS is a way to work around this problem, but also is a natural fit for the grander vision of moving your development environment “to the cloud”. Since Zed communicates with a WebFS server via HTTP, that server may live locally or remotely. This is a key feature to me, because I often want to edit file systems running inside a VM or remote. Zed with WebFS support that easily and efficiently. Zed comes with a PHP, Python and now <a href="https://github.com/zefhemel/zed/pull/1" target="_blank">node.js implementation</a> of WebFS. The PHP version supports authentication via BasicAuth, the Python and node.js version does not yet, but that should be easy to add. Reimplementing WebFS in any other language should be easy, send me a pull request if you do.</p>
<h3>Getting Started</h3>
<p>The project’s <a href="https://github.com/zefhemel/zed/blob/master/README.md" target="_blank">README</a> contains basic installation instructions. Once you get the application running, you’ll notice that there’s two projects already created:</p>
<ul>
<li>
<em>Settings</em> this is where you change Zed’s settings. As described in a previous post, Zed has a special settings file system. It loads its base settings from <a href="https://github.com/zefhemel/zed/tree/master/app/settings" target="_blank">the app/settings</a> directory, and stores anything you put in *user*.json files in Chrome’s sync storage. For instance <a href="https://github.com/zefhemel/zed/blob/master/app/settings/keys.default.json" target="_blank">the default key bindings are here</a>, and you can override them by editing /keys.user.json.</li>
<li>
<em>Manual</em> this is a read only project that eventually will contain more documentation about the editor. It retrieves its files from <a href="https://github.com/zefhemel/zed/tree/master/app/manual" target="_blank">app/manual</a>, which is just a bunch of Markdown files, you navigate it either using the usual Cmd-E/Ctrl-E or by moving your cursor to a file name and pressing Cmd-Shift-E/Ctrl-Shift-E to jump to the file. As the README describes, you create a new project by just typing its name and pressing Return, you will then be asked for the WebFS endpoint you’d like to mount.</li>
</ul>
<p><strong>This is alpha software</strong> Don’t sue me if it breaks. Please report <a href="https://github.com/zefhemel/zed/issues" target="_blank">issues in the issue tracker</a>, or fix them yourself and create a pull request, it’s <a href="https://github.com/zefhemel/zed/blob/master/LICENSE" target="_blank">open source software</a> after all. Also, if you create <a href="https://github.com/zefhemel/zed/tree/master/app/plugin" target="_blank">plugins</a> for languages not already supported, please create a pull request.</p>
<p>Enjoy!</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1326</wp:post_id>
		<wp:post_date>2013-04-08 08:37:19</wp:post_date>
		<wp:post_date_gmt>2013-04-08 06:37:19</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>zed-alpha-available</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="zed"><![CDATA[Zed]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Amazon Sure Knows How to Scale: 2 Trillion Objects, 1.1 million reqs/s on S3</title>
		<link>http://zef.me/2013/04/18/amazon-sure-knows-how-to-scale-2-trillion-objects-1-1-million-reqs-s-on-s3/</link>
		<pubDate>Thu, 18 Apr 2013 15:24:11 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2013/04/18/amazon-sure-knows-how-to-scale-2-trillion-objects-1-1-million-reqs-s-on-s3/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p><a href="http://aws.typepad.com/aws/2013/04/amazon-s3-two-trillion-objects-11-million-requests-second.html" target="_blank">Wow</a>…</p>
<blockquote>Last June I blogged about the <a href="http://aws.typepad.com/aws/2012/06/amazon-s3-the-first-trillion-objects.html" target="_blank">first trillion objects</a> stored in Amazon S3. On the first day of re:Invent I updated that <a href="http://aws.typepad.com/aws/2012/11/amazon-s3-price-reduction-december-1-2012.html" target="_blank">number to 1.3 trillion</a>.</blockquote>
<blockquote>It is time for another update!</blockquote>
<blockquote>I’m pleased to announce that there are now more than 2 trillion (2 x 1012) objects stored in <a href="http://aws.amazon.com/s3/" target="_blank">Amazon S3</a> and that the service is regularly peaking at over 1.1 million requests per second.</blockquote>
<blockquote>It took us six years to grow to one trillion stored objects, and less than a year to double that number.</blockquote>
<p>How many things can you keep in your head at once?</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1375</wp:post_id>
		<wp:post_date>2013-04-18 17:24:11</wp:post_date>
		<wp:post_date_gmt>2013-04-18 15:24:11</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>amazon-sure-knows-how-to-scale-2-trillion-objects-1-1-million-reqs-s-on-s3</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="amazon"><![CDATA[Amazon]]></category>
		<category domain="post_tag" nicename="aws"><![CDATA[AWS]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>InfoQ Editor</title>
		<link>http://zef.me/2013/04/05/infoq-editor/</link>
		<pubDate>Fri, 05 Apr 2013 13:30:26 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2013/04/05/infoq-editor/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Last week I graduated the [InfoQ](http://infoq.com) Editor Training Program (tm) and I am now [officially an InfoQ](http://www.infoq.com/author/Zef-Hemel) editor. Previously I wrote [an article about mobl](http://www.infoq.com/articles/Mobl) for InfoQ, and some videos featuring your sincerely were posted there. Now I’m part of the editing staff and will publish ~1 news post per week.</p>
<p>You can [track my postings here](http://www.infoq.com/author/Zef-Hemel), or just follow me [on twitter](http://twitter.com/zef), I’ll dump links there as well. If you have any leads on good stories, be sure to let me know too.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1474</wp:post_id>
		<wp:post_date>2013-04-05 15:30:26</wp:post_date>
		<wp:post_date_gmt>2013-04-05 13:30:26</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>infoq-editor</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Zed: a Status Update</title>
		<link>http://zef.me/2013/03/26/zed-a-status-update/</link>
		<pubDate>Tue, 26 Mar 2013 11:50:12 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2013/03/26/zed-a-status-update/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>A few weeks ago I [shared some thoughts on code editing](http://zef.me/5672/rethinking-code-editing). I described my spare<br>time project to build an editor that’s a bit different and that would suit my<br>needs. After a few weeks of on-and-off development I switched to the editor for<br>most of my work. That means not just writing code, but also writing articles and<br>notes — stuff that I used to do in Wordpress and [Notational Velocity](http://notational.net/) before.<br>The working title for the project has been _Zed_, which is not very original, but it seems to stick and [nobody seemed to have better ideas](https://twitter.com/zef/status/315495268126691328). So for now, Zed it is.</p>
<p>A few new observations and nuggets of the current status of the project.</p>
<p>**Keyboard** <br>Any editor that wants me to touch my mouse (or my case: trackpad)<br>has failed. The whole thing should be keyboard operable. Interesting side effect<br>is that this rules out the good old menu bar as a desirable UI element, at least<br>on Mac where you can only use the menu bar with the mouse, as far as I know.</p>
<p>So, the question is how to execute editor commands that don’t have a keyboard<br>shortcut, or that you don’t know the keyboard shortcut of. My first intuition<br>was: a Javascript REPL. If you use this editor, you can write code: just enter<br>whatever you’re interested as a Javascript command. However, I came back from<br>this idea when I watched [a few tutorial videos about<br>Sublime](http://net.tutsplus.com/articles/news/perfect-workflow-in-sublime-text-free-course/).<br>Now, I’m not a Sublime user myself. I have it installed, but I never really used<br>it. However, as it turns out it reuses the “Jump to file” UI idea that I first<br>encountered in Textmate:</p>
<p>src=”http://zef.me/wp-content/uploads/2013/03/textmate_intelligent_file.jpg" class=”aligncenter size-full”/&gt;</p>
<p>It reuses it in what it calls the “Command Pallette”:</p>
<p>This is clearly a _much_ better idea, so I reused the fuzzy finder panel I<br>already built for opening files and now it can be used to quickly find commands<br>as well.</p>
<p>**Tree** <br>So, I changed my stance a little bit on the tree. I still think it’s<br>pretty bad for navigating a project. However, using an editor without a tree has<br>showed me that for _exploring_ a project you’re not familiar with, it’s actually<br>pretty essential. So, I added a simple tree. Not as a persistent panel to the<br>left, but instead as a pop-over panel that you can open with a keyboard shortcut<br>and that hides again once you selected a file. Generally I’m thinking if using a<br>tree isn’t useful for exploring any kind of hierarchical fuzzy search view that<br>the user isn’t familiar with, e.g. it would also make sense for the<br>Sublime-style command palette. I have to explore this a bit further.</p>
<p>**Projects**: I’ve added the concept of projects. When you press Command-Shift-Z anywhere in Chrome, the Zed project picker shows up ordered by most recently used:</p>
<p>As everything in Zed, this window is 100% keyboard operable. You type in part of the name, and press return to open it in a new window. You create a new project by typing in a name that does not yet exist<br>and pressing return, it will then ask for the project’s URL and login credentials.</p>
<p>By default Zed comes with two projects: “Manual” and “Settings”. Both of those just use Zed to edit and navigate.</p>
<p>**Settings** <br>I’ve done a lot of thinking about settings. How do you represent<br>settings, and how do you change them. My first go was simply giving the user a<br>big JSON file with all default settings filled in. For this purpose I created a<br>separate in-editor settings file system, which stores its files using Chrome’s sync<br>storage so that it will automatically be synced between all your devices. I put<br>watchers on the settings file, which would reload settings whenever changes were<br>made to the file. The result worked quite well. You could change the `theme`<br>setting to something else and within a few seconds you would see the colors<br>of all your editor windows (on all your devices) change. The one drawback is<br>managing this file as new settings become available. You may want to change<br>defaults, add new settings and those would have to magically appear in the<br>user’s settings file. Instead, I changed this to have a built-in<br>`/settings.default.json` file which you cannot modify and a second<br>`/settings.user.json` in which you can override the settings you’d like to<br>override. Some settings will also be available as an editor command and will<br>automatically add or update the entry in the user’s settings file.</p>
<p>This is what it looks like when you open both files in a split view:</p>
<p>In the future I’d like to add another layer at the project level. You’d be able<br>to create a settings file in your projects, and those settings would then<br>override your editor-wide settings, which in turn override the defaults settings.</p>
<p>**Code Complete** <br>There’s only some much time you can spend in an editor before you start begging for some sort of code completion. Currently I’ve implemented three kinds of code completion in Zed:</p>
<p>* Word-based completion for the current file<br>* [Snippets](http://screencast.com/t/AYCwS0ZKE)<br>* CTags</p>
<p>[CTags](http://en.wikipedia.org/wiki/Ctags) are an ancient format for keeping an index of symbols within a project. The format is surprisingly dumb. In the days of C, with no object-oriented programming or namespaces it was probably perfect, in today’s language landscape it’s still useful, but cannot be used<br>as a basis of very intelligent code completion or “jump to defintion” like functionality. However,<br>it’s very easy to implement parsers that extract ctags from source files and to use those files. So, I<br>added ctags support to Zed. It can keep ctags up-to-date as you edit the file (if a `ctags` tool is defined for the language), or use `tags` files produced by tools like [exuberant ctags](http://ctags.sourceforge.net/). After using it for a while I wouldn’t want to go back, it’s pretty useful in the absence of “real” intelligent code completion.</p>
<p>**Extensibility** <br>As I mentioned in [my previous<br>post](http://zef.me/5712/the-chrome-route) a Chrome Packaged App in some ways is<br>more constrained than a regular web app. It is not allowed to load JavaScript<br>from arbitrary servers, for instance, or to use `eval`. The reason is to prevent<br>malicious scripts to get access to the chrome APIs, which allow you to do _more_<br>than a regular web app allows you to do. There’s one way around that, and that’s<br>sandboxing. You can sandbox pages, or use the special `` tag and load<br>any page in there. You can communicate with this page via `postMessage`, similar<br>to how you work with WebWorkers.</p>
<p>Still, as I don’t want to sandbox the entire editor, this stops me from allowing<br>a user to simply specify a list of his favorite extensions located someplace on<br>the web, and to run that code alongside the rest of the app. So, I started to think about different extension scenarios.</p>
<p>Thus far I’ve been working to support extension at the level of language modes.</p>
<p>Just like settings, a language mode is a JSON file on the settings filesystem (under `/mode/`)<br>with a `default` and a `user` version. Here’s what a shortened version of `/mode/javascript.default.json` looks like:</p>
<p>{<br> “name”: “JavaScript”,<br> “highlighter”: “ace/mode/javascript”,<br> “extensions”: [“js”],<br> <br> “tool:beautify”: {<br> “scriptUrl”: “plugin/beautify/javascript.js”<br> },<br> <br> “tool:ctags”: {<br> “scriptUrl”: “plugin/ctags/javascript.js”<br> },<br> <br> “tool:remotebeautify”: {<br> “url”: “http://webfs-js.herokuapp.com/beautify/js”,<br> “method”: “PUT”<br> },<br> <br> “tool:check”: {<br> “scriptUrl”: “plugin/check/javascript.js",<br> “options”: {<br> “undef”: true,<br> “unused”: true,<br> “es5”: true,<br> “esnext”: true,<br> “devel”: true,<br> “browser”: true,<br> “node”: true,<br> “laxcomma”: true,<br> “laxbreak”: true,<br> “lastsemic”: true,<br> “onevar”: false,<br> “passfail”: false,<br> “maxerr”: 100,<br> “expr”: true,<br> “multistr”: true,<br> “globalstrict”: true<br> }<br> },<br> <br> “snippet:log”: “console.log({0})”,<br> “snippet:def”: “define(function(require, exports, module) {nt{0}n});”, “snippet:foreach”: “for(var {0:i} = 0; {0:i} &lt; {1:array}.length; {0:i}++) {ntvar {2:item} = {1:array}[{0:i}];nt{3}n}”<br> }</p>
<p>The `name` should be self explanatory. The `highlighter` is a tricky one, for<br>now Zed won’t offer real extensibility at this level, but only support any of the<br>current [ACE](http://ace.ajax.org) highlighters. If you want to add one, contribute it to ACE and make<br>more people happy.</p>
<p>The `tool:*` settings are used to implement various useful editor features:</p>
<p>* `check`: check this piece of code and give me back an array of errors and<br> warnings (to be marked in the editor’s gutter). There’s currently implementations for JavasScript (based on JSHint), CSS (based on CSSLint) and JSON.<br>* `beautify`: reformat this piece of code.<br>* `preview`: render this piece of code into HTML for previewing (think:<br> markdown, Coffeescript Javascript preview).<br>* `ctags`: analyze this piece of code and give me back a list of symbols (for<br> navigation and completion)</p>
<p>In a tool object, you can specify either:</p>
<p>* a `scriptUrl`, which can be a local path, or a remote URL of a [require.js](http://requirejs.org)<br> module that exports a single function that implements the tool in question and<br> returns the result.<br>* a `url` in conjunction with some additional options (like the<br> `tool:remotebeautify` example). In this scenario the code that is operated on is submitted to the web service at this URL.</p>
<p>In addition, snippets for completion can be specified with [multiple insertion<br>points](http://screencast.com/t/AYCwS0ZKE).</p>
<p>**Release** <br>I think Zed is nearing the point where other people can start playing with it. This requires some additional work and especially documentation. I hope to have something to test for early adopters next week, we’ll see.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1711</wp:post_id>
		<wp:post_date>2013-03-26 12:50:12</wp:post_date>
		<wp:post_date_gmt>2013-03-26 11:50:12</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>zed-a-status-update</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="zed"><![CDATA[Zed]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Setting Up Development Environments With Nix</title>
		<link>http://zef.me/2013/05/29/setting-up-development-environments-with-nix/</link>
		<pubDate>Wed, 29 May 2013 10:06:50 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2013/05/29/setting-up-development-environments-with-nix/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>I remember my first day at <a href="http://c9.io" target="_blank">Cloud9 IDE</a> well. It was very similar to my first day <a href="http://www.tudelft.nl" target="_blank">Technical University of Delft</a> as a PhD student, and my first day at <a href="http://www.logicblox.com" target="_blank">LogicBlox</a>: a day spent on installing a bunch of software, tweaking configuration files, environment variables, running services to get my system into a state so that I could actually start contributing. In some cases it took a few hours, in others it took a day. Either way, it was an utter waste of time. Worse, this setup problem often not a one-time thing. It gets really interesting if you have to develop on two projects (or two branches of the same project) that have incompatible software environment requirements. For instance, at some point, at Cloud9 we had a branch that worked only on node.js 0.4, but not on 0.6 and a separate branch that worked on 0.6. Every time I switched between these projects I had to make sure that the right version of node.js was active. Tools like <a href="https://github.com/creationix/nvm" target="_blank">nvm</a> helped, but they’re a hassle and very specific to the particular platform. What about the Redis version that that particular project required, for instance? In aggregate weeks, months, years are wasted solving problems related to their development environment.</p>
<p>Setting up an environment to start developing on a project should be easy and fast. Yet in reality, all too often, it’s not. At <a href="http://c9.io" target="_blank">Cloud9 IDE</a> we developed a virtual-machine-based solution. Once we all made the move to developing on VMs in the cloud using <a href="http://c9.io" target="_blank">c9.io</a>, we started handing out EC2 VMs to employees with all software pre-installed. That was very helpful, but now you have to manage those VMs. Prepare VM images, and keep those images up-to-date. As requirements change, now you have to update all VMs and install new dependencies. If you want to work on two dev-environment incompatible projects, now you need two VMs and you have to configure them both with all your own preferences, and then there’s the cost of running multiple VMs at a cloud provider.</p>
<p>A tool like <a href="http://www.vagrantup.com" target="_blank">Vagrant</a> helps in provisioning VMs based on a recipe and uses locally run VirtualBox VMs. Using Vagrant, you declaratively specify all the software you need for a project and it builds a VM for you to develop in. You can commit this specification in your software repository so that it’s always in sync with your project. Vagrant boots the VM locally, mounts your project directory in there, and gives you a bash prompt over SSH for you to compile and run your software. That works, but it’s a little heavy weight. Now you need to have a Linux VM booted, using your memory and CPU cycles to run and test stuff.</p>
<p>Isn’t there a less heavy-weight solution?</p>
<p>At LogicBlox we are sponsoring the <a href="http://nixos.org" target="_blank">Nix project</a>. Nix is a family of deployment-related products, including a <a href="http://nixos.org/nix/" target="_blank">package manager</a>, operating system (<a href="http://nixos.org/nixos/" target="_blank">NixOS</a>), continuous integration server (<a href="http://nixos.org/hydra/" target="_blank">Hydra</a>) and cloud deployment tool (<a href="https://github.com/NixOS/nixops" target="_blank">NixOps</a>). Almost all of our production servers are deployed using Nix.</p>
<p>So why pull a deployment tool into this discussion? Because setting up a development environment is essentially a deployment problem. Basically what you want is to deploy all the services, applications and libraries to your local machine so that you can start developing on a project.</p>
<p>And indeed, with Nix, you can do this pretty easily. The experience is very similar to Vagrant, except that there are no virtual machines required. For this you only need the <a href="http://nixos.org/nix/download.html" target="_blank">Nix package manager installed</a>, which runs on almost all Unix-based operating systems (and if you really insist on Windows with Cygwin as well), including Linux and Mac. I won’t get into much of the technical detail of how Nix works (read more about it on the website), but in essence it’s a package manager that supports installing multiple versions of software components on a single system, stored in isolation with strict and very precisely defined dependencies defined between them.</p>
<p>All software managed by Nix is stored in the Nix store, a directory usually located at /nix/store. Here’s a small blip of the stuff stored there on my system (most of these are directories):</p>
<pre>jxi3kc3h7pg9ykyixlbgnlrndvnb0rxm-bash-4.2-p42<br>jymhsfjv6m201q69l23c6iskng2i4cs4-groff-1.22.2<br>k0kd4brqjm1017bhyj8rkyy36n0v5kmh-coreutils-8.21<br>ka9xg76y827bd70hds1w6296yik0kd9b-gettext-0.18.1.1<br>l5pdaahf6nqmpcy0gz5k2zdkj6z7dqsn-gnused-4.2.1<br>l81rf85cabpl5phz20wqn5c16m9yi80i-libiconv-1.13.1<br>larxfznqb48w2p8k5qr0v3kbvlplwc3v-nodejs-0.10.8<br>yw62q6acrpjnx2r1zg9bzsn7xld1y00s-nodejs-0.6.10<br>m6anp10748v2jmgvgjz56xxn7jizj03s-isl-0.07<br>m9znv6pvij31vyiv0z8qvd05h1bgc67l-openssl-1.0.1e<br>md3hd3k7igb45zxvkxb1qd6ij23v7xaj-nixops</pre>
<p>As you can see, every entry starts with a hash. This is a hash encoding all dependencies (inputs) of the build for that component, including: the source code, the platform it was built on and software build and runtime dependencies. If a package has a dependency on a certain library it will use an absolute path linking to a location in the Nix store to that library, so that always the <em>exact</em> same version is used at run-time as was used at compile time. As you can see there are two versions of <a href="http://nodejs.org" target="_blank">node.js</a> available in my Nix store, so that if one of my projects relies on node.js version 0.6 and another 0.8, I can work on them both simultaneously without them interfering in any way. If you want to learn more about how Nix works and why it is designed the way it is, and I encourage it, have a look at the <a href="http://hydra.nixos.org/build/5115624/download/1/manual/" target="_blank">manual</a>.</p>
<p>So, how does Nix help with setting up development environments? Before we get there, let’s first have a brief look at how a software component (or package) is built using Nix.</p>
<p>Nix defines its own purely functional programming language that is used to define components and their dependencies. Here’s a somewhat simplified version of the expression for the node.js package:</p>
<pre>{ pkgs, stdenv, ... }:<br>stdenv.mkDerivation <strong>rec</strong> {<br>  version = "0.10.7";<br>  name = "nodejs-${version}";<br>  src = pkgs.fetchurl {<br>    url = <a href="http://nodejs.org/dist/v0.10.7/node-v0.10.7.tar.gz;" target="_blank">http://nodejs.org/dist/v0.10.7/node-v0.10.7.tar.gz;</a><br>    sha256 = "1q15siga6b3rxgrmy42310cdya1zcc2dpsrchidzl396yl8x5l92";<br>  };<br>  buildInputs = [ pkgs.python pkgs.utillinux ];<br>}</pre>
<p>This piece of code, or “expression,” specifies a function with named arguments. It takes two or more arguments: pkgs, stdenv and possibly more, but those are ignored. The body of the function calls a function named mkDerivation, an attribute of stdenv, which was passed in as an argument to the function. mkDerivation takes one argument: a recursive attribute set, as an argument (the rec keyword specifies that the attribute set is recursive). Why recursive? Because its attributes (version, name, src and buildInputs) may occasionally refer to each other. Specifically, the value of the name attribute refers to the version attribute, as you can see. So, what does the mkDerivation function return? A built package. mkDerivation assumes an autoconf-style package that can be built with the usual ./configure &amp;&amp; make &amp;&amp; make install. The source code for our package can be downloaded from the specified URL, and should match a particular checksum hash. By specifying this hashcode we’re sure that in the future we’ll always get exactly the same version of the tarball and that the build is reproducible and you always get the same output (so that we can do caching and we don’t have to recompile much). For the package to be built, python and some package utillinux have to be installed and available in the build environment (in the PATH). The result of the build will end up somewhere in /nix/store/&lt;some-hash&gt;-nodejs-0.10.7 if successful. Unlike most other package systems, the result is <em>not</em> installed in /usr/local/bin or the like.</p>
<p>Alright, now let’s look at a slightly more <a href="https://github.com/zefhemel/nodejs-nix/blob/master/default.nix" target="_blank">elaborate Nix expression</a>:</p>
<pre><strong>let</strong><br>  pkgs = <strong>import</strong> &lt;nixpkgs&gt; {};<br>  stdenv = pkgs.stdenv;<br><strong>in rec</strong> {<br>  node = stdenv.mkDerivation <strong>rec</strong> {<br>    version = "0.10.7";<br>    name = "nodejs-${version}";<br>    src = pkgs.fetchurl {<br>      url = <a href="http://nodejs.org/dist/v0.10.7/node-v0.10.7.tar.gz;" target="_blank">http://nodejs.org/dist/v0.10.7/node-v0.10.7.tar.gz;</a><br>      sha256 = "1q15siga6b3rxgrmy42310cdya1zcc2dpsrchidzl396yl8x5l92";<br>    };<br>    preConfigure = stdenv.lib.optionalString stdenv.isDarwin ''export PATH=/usr/bin:/usr/sbin:$PATH'';<br>    buildInputs = [ pkgs.python ] ++ stdenv.lib.optional stdenv.isLinux pkgs.utillinux;<br>  };<br>  app = stdenv.mkDerivation {<br>    name = "application";<br>    src = ./app;<br>    PORT = "8888";<br>    buildInputs = [ node ];<br>  };<br>}</pre>
<p>You’ll recognize most of the part that says “node =”. This is a slightly more elaborate version of the node.js expression we just looked at, with just a few things added to also make it compile on Mac (where utillinux is not available). The first three lines basically set up some variables that are used throughout the rest of the expression. The meat of the expression is the attribute set with two attributes: node and app. node is the specific node.js build we’d like to use for our application, and app specifies the application itself. As you can see, app uses the <a href="https://github.com/zefhemel/nodejs-nix/tree/master/app" target="_blank">./app</a> directory as source and refers to our node attribute as a build input thereby specifying that it needs <em>this specific build</em> of node.js to build/run. The PORT attribute is an environment variable that is used by the running application to decide what port to run the server on.</p>
<p>You can find the <a href="https://github.com/zefhemel/nodejs-nix" target="_blank">“entire source code” of this application on Github</a>.</p>
<p>So, here’s where we get to the development environment part. If you have Nix installed, all you need to do to get ready to develop on this fancy node.js application is this:</p>
<pre>$ git clone git://github.com/zefhemel/nodejs-nix.git<br>$ cd nodejs-nix<br>$ nix-build -A app --run-env</pre>
<p>That last one is the magic one. What it will do is:</p>
<ol>
<li>Build and install all dependencies required to build app, if they have not been built before already. In our case: build our particular node.js version. If builds are available in the Nix store already (or are downloadable from a nix-channel), they will not be rebuilt, Nix builds are very incremental.</li>
<li>Launch a (bash) sub-shell with all environment variables setup the way as they would be to actually build the app attribute. That is: PATH will contain the bin directory of the node.js build specified in our expression (since it was specified in buildInputs, so imagine this looking something like PATH=/nix/store/&lt;hash&gt;-nodejs-0.10.7/bin:…), so it will not use whatever node.js version happens to be installed elsewhere in the system. It will also set the PORT environment variable to 8888.</li>
</ol>
<p>Here’s a typical terminal session demonstrating its use:</p>
<pre>$ nix-build -A app --run-env<br>bash-3.2$ echo $PORT<br>8888<br>bash-3.2$ node --version<br>v0.10.7<br>bash-3.2$ node app/server.js<br>Server running at <a href="http://127.0.0.1:8888" target="_blank">http://127.0.0.1:8888</a><br>^C<br>bash-3.2$ exit</pre>
<p>Of course, this is an extremely simple example, but you can imagine more complex setups. For instance, if your application depends on node.js and mongdb and some other programs, those can be specified similarly in the Nix expression. Then, all a user has to do is checkout the repo, run the nix-build command, and all those dependencies will be downloaded and setup. A script that starts required services is easy to write. As the default.nix file is part of the repository, switching to a different branch can also result in a very different set of components being made available in the shell, making switching between different projects and branches much faster.</p>
<p>I think setting up development environments is a <em>very</em> promising use case of Nix, and we’re starting to experiment with this internally at LogicBlox right now.</p>
<p>Because we’re essentially unifying development environments and deployment environments, we have now also specified a lot of information that <a href="https://github.com/NixOS/nixops" target="_blank">NixOps</a> needs to actually deploy this application to a server. <a href="http://zef.me/5981/deploying-a-simple-node-js-application-with-nixops" target="_blank">We’ll get into that in a future post</a>.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>96</wp:post_id>
		<wp:post_date>2013-05-29 12:06:50</wp:post_date>
		<wp:post_date_gmt>2013-05-29 10:06:50</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>setting-up-development-environments-with-nix</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="nix"><![CDATA[Nix]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Fresh Perspective as a Service</title>
		<link>http://zef.me/2015/10/09/fresh-perspective-as-a-service/</link>
		<pubDate>Fri, 09 Oct 2015 20:05:30 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2015/10/09/fresh-perspective-as-a-service/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>A few weeks back we had an internal lightning talk, at <a href="http://www.stxnext.com/" target="_blank">STX Next</a>, from a product owner and scrum master of one our teams. The talk was about their experience over the past year joining an existing team that, until then, had functioned without these roles. While the talk focused a lot on the value of adding “Agile people” to teams, for me it connected the dots on an important thing we don’t do enough:</p>
<p><strong>Question all the things.</strong></p>
<p>Here are the “facts of the world” in the specific project these guys joined a year ago:</p>
<ul>
<li>Automated regression testing is impossible to implement in this project</li>
<li>We cannot talk to the end user, there’s always a party in between</li>
<li>Every item on the backlog is <strong>top priority</strong>
</li>
<li>We have to deliver <strong>everything</strong> on time</li>
</ul>
<p>Here are the “facts of the world” today:</p>
<ul>
<li>Automated regression tests are being implemented</li>
<li>End-users are now involved in demos and sprint reviews</li>
<li>Every item on the backlog is prioritized, and much of it has been discarded since</li>
<li>We released was released on time, with a vastly reduced scope, and everything was just fine</li>
</ul>
<p>Everything you knew to be true, turns out to be false.</p>
<p><strong>Question all the things.</strong></p>
<p>Is this specific to “agile”? Based on my own experience, I don’t think so. I’ve seen too many cases where facts weren’t facts at all, and it’s tempting to draw the conclusion that almost everything can be influenced and changed.</p>
<p><strong>Facts often aren’t facts at all.</strong></p>
<p>At a process level, at a business level, but also at a technical level. “DevOps has already checked that, all NFS mounts are online — that’s not the problem.” Yeah… they didn’t check it properly, and it turns out it <em>was</em> the problem. “We cannot use technology X, it won’t handle all the traffic we’ll get.” Yeah… turns out there wasn’t going to be that much traffic to begin with. “We tried Selenium tests, and it was a disaster.” Yeah… turns out it’s saving hundreds of hours of monotonic testing time when done well.</p>
<p><strong>Question all the things.</strong></p>
<p>At the beginning of this year I posted something on our internal G+:</p>
<blockquote>After the 5 Whys, I introduce the 5 Reallys — ask ‘Really?’ until the person realizes he or she is wrong (average 5x).</blockquote>
<p>I was was only half kidding. I don’t remember what triggered this post at the time, but I’m sure it was because <em>once again</em> I found out that <strong>presented facts weren’t really facts at all</strong>.</p>
<p><strong>Question all the things.</strong></p>
<p>But, <strong>who</strong> should question everything? In the mentioned talk, it was a product owner and scrum master who asked the questions. Is this an “Agile person” job? Should we all do it? <em>Can</em> we all do this?</p>
<p>What’s really needed is a <strong>fresh perspective</strong>. Somebody who isn’t buried so deep in the situation’s reality, he or she doesn’t see things for what they are anymore.</p>
<p><strong>Do we need a Fresh Perspective as a Service?</strong></p>
<p>I’m reading a <a href="http://www.amazon.com/Management-Rev-Ed-Peter-Drucker/dp/0061252662" target="_blank">book</a> that claims this is management task: regularly review everything you’re doing in your organization (company, team, family) and reconsider it: does it still make sense to do this? If we wouldn’t be doing this already, would we decide to get into it now? And if not, what do we do about it?</p>
<p>But, can we reprogram ourselves to do this?</p>
<p>In our daily lives and work we often lose perspective. We suffer from <a href="https://en.wikipedia.org/wiki/Stockholm_syndrome" target="_blank">Stockholm syndrome</a>, we are set in our ways. We accept the “reality” we live in as “just the way things are.”</p>
<p>So, here is what I think we should do: invite an outsider to our group from time to time. Somebody who isn’t connected to your work day-to-day, and let this person ask questions. Lots and lots of questions. Question all the things.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>104</wp:post_id>
		<wp:post_date>2015-10-09 22:05:30</wp:post_date>
		<wp:post_date_gmt>2015-10-09 20:05:30</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>fresh-perspective-as-a-service</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="attitude"><![CDATA[Attitude]]></category>
		<category domain="post_tag" nicename="best-of"><![CDATA[Best Of]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Declaratively Provision Docker Images Using Nix</title>
		<link>http://zef.me/2013/11/07/declaratively-provision-docker-images-using-nix/</link>
		<pubDate>Thu, 07 Nov 2013 15:20:39 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2013/11/07/declaratively-provision-docker-images-using-nix/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>I like Docker. If you don’t understand why, read<a href="http://www.infoq.com/articles/docker-containers" target="_blank"> the 3.5k word epic that I wrote about it at InfoQ</a>. In this post I’ll assume<br>you’ve read my InfoQ article, or are at least somewhat familiar with Docker and its features.<br>Here’s two features that I care about in particular:</p>
<ul>
<li>It makes applications _portable_ to any cloud provider that supports Ubuntu<br> 12.04+ (and in the upcoming 0.7 release CentOS too), which is basically every<br> cloud provider in existence (although I hear that Google’s doesn’t yet support it. FAIL).</li>
<li>It makes trying out applications super simple: you no longer have to set up a<br> hundred libraries and services that the applications to be able to run,<br> everything comes in a single package, ready to run and ditch if it doesn’t<br> work.</li>
</ul>
<p>After playing<a href="https://github.com/zefhemel/docker-images" target="_blank"> with Docker a while and deploying some apps with<br>it</a>, one thing that I feel could some help is the <em>provisioning </em>aspect of it: how<br>do get your application and its dependencies into a container image?</p>
<p>The standard way of provisioning a Docker image is using a Dockerfile, which is basically<br>a simple imperative script that builds up an image from a base image step by<br>step. A typical `Dockerfile` looks starts like this:</p>
<pre>FROM ubuntu<br>RUN apt-get update<br>RUN apt-get upgrade -y<br>RUN apt-get install -y openssh-server python curl</pre>
<p>I like Docker. If you don’t understand why, <a href="http://www.infoq.com/articles/docker-containers" target="_blank">read the 3.5k word epic that I wrote about it at InfoQ</a>. In this post I’ll assume you’ve read my InfoQ article, or are at least somewhat familiar with Docker and its features. Here’s two features that I care about in particular:</p>
<ul>
<li>It makes applications <em>portable</em> to any cloud provider that supports Ubuntu 12.04+ (and in the upcoming 0.7 release CentOS too), which is basically every cloud provider in existence (although I hear that Google’s doesn’t yet support it. FAIL).</li>
<li>It makes trying out applications super simple: you no longer have to set up a hundred libraries and services that the applications to be able to run, everything comes in a single package, ready to run and ditch if it doesn’t work.</li>
</ul>
<p>After <a href="https://github.com/zefhemel/docker-images" target="_blank">playing with Docker a while and deploying some apps with it</a>, one thing that I feel could some help is the <em>provisioning</em> aspect of it: how do get your application and its dependencies into a container image?</p>
<p>The standard way of provisioning a Docker image is using a <a href="http://docs.docker.io/en/latest/use/builder/" target="_blank">Dockerfile</a>, which is basically a simple imperative script that builds up an image from a base image step by step. A typical Dockerfile looks starts like this:</p>
<pre>FROM ubuntu<br>RUN apt-get update<br>RUN apt-get upgrade -y<br>RUN apt-get install -y openssh-server python curl</pre>
<p>Every command that you run is committed, resulting in an <a href="http://en.wikipedia.org/wiki/Aufs" target="_blank">aufs layer</a>. This can be helpful, because Docker can now do basic caching. For instance, if your build fails at the last line, and you fix it and rerun the build, it can use the image resulting from the first succeeding lines and start from there. However, a few problems follow from this approach:</p>
<ol>
<li>Can those first initial lines really be cached, or may their result be dependent on the time of being run? Answer: yes, running these lines tomorrow may yield different results than running them today, but Docker will naively assume they will always result in the same thing.</li>
<li>AuFS can only handle a few dozen layers, if your Dockerfile has too many commands the build will simply fail. So, you better make them count. The <a href="https://github.com/zefhemel/docker-images/blob/master/logstash/Dockerfile" target="_blank">result is ugly stuff like this</a>.</li>
<li>There’s very little support for reuse. There’s no include files or configuration language. The only form of reuse is using base images where you create a base image with software common to all other images, and then you use FROM to base future images on. Yet, you’re still limited by (2), the layers all add up.</li>
</ol>
<p>There are other tools out that you can use to provision a Docker container, like <a href="http://tech.paulcz.net/2013/09/creating-immutable-servers-with-chef-and-docker-dot-io.html" target="_blank">Chef</a>. But I find these tools rather heavy weight and I really don’t want to add extra weight to my container by including a deployment tool.</p>
<p>At the same time I was playing with Docker, I also did a fair bit of deployment work with <a href="http://zef.me/tag/nix" target="_blank">Nix</a>. For instance, the <a href="http://zef.me/6044/opening-the-logicblox-gates" target="_blank">developer site we launched</a>, as well as the <a href="https://repl.logicblox.com/" target="_blank">load-balanced REPL servers</a> are all deployed using Nix and<a href="https://github.com/NixOS/nixops" target="_blank">NixOps</a> onto EC2 machines running <a href="http://nixos.org/nixos/" target="_blank">NixOS</a>. The <a href="http://developer.logicblox.com/" target="_blank">developer site</a>, <a href="https://download.logicblox.com/" target="_blank">releases site</a> and soon the <a href="http://www.logicblox.com/" target="_blank">main website</a> all run on separate wordpress installs that in principle share a lot of parts (plug-ins, themes). Nix makes it <em>really</em>easy to implement this reuse. It’s really a joy to work with. Ask my colleagues: every day that I used Nix I praised it in our company chatroom. It’s that cool, once you get over the initial learning curve.</p>
<p>However, NixOps and NixOS are pretty all-or-nothing solutions. To use it you need machines that run NixOS, which can run on “real” hardware, EC2 and Hetzner, but most other cloud providers (e.g. <a href="http://www.digitalocean.com/" target="_blank">DigitalOcean</a>, which I really like — especially its prices) don’t support it and may not for a while, or ever. Therefore, at this time it’s difficult to deploy applications onto random cloud providers using Nix technology. Its portability is limited.</p>
<p>So, for the past weeks I’ve been thinking: how can the portability of Docker and the general provisioning awesomeness of Nix be combined?</p>
<p>But let’s first take a brief step back and reiterate why Nix is and why I like it (and you will too, once you invest some time in learning it).</p>
<h3>What Nix brings to the table</h3>
<p><a href="http://nixos.org/nix/" target="_blank">Nix</a> is a relatively new package manager for Unix systems, it’s not specific to Linux, it works on any Unix system, in principle. This tweet sums it up pretty succinctly:</p>
<p>With Nix:</p>
<ul>
<li>Packages and sytems are built using the Nix functional language, which is a full-blown, dynamically typed functional language designed specifically for deploying simple and complex systems.</li>
<li>Dependencies of an application are guaranteed to be complete, and do not have to be constructed by hand (as is the case with dpkg and RPM).</li>
<li>Since the dependency closure of an application is complete, you can copy a closure for an application to something as bare as <a href="http://www.busybox.net/" target="_blank">BusyBox</a> and it’ll run. The closure contains everything required to run the application and nothing more, which makes it a great fit for Docker where you’d like to keep images small.</li>
<li>Rather than scattering files all over the disk (configuration files in /etc, binaries in /usr/bin or/usr/local/bin or is it /bin), components are stored in isolation in the <em>Nix store</em> (/nix/store) not interfering with each other. This may seem less relevant in the context of Docker, but wait for the “one more thing” at the very end.</li>
<li>Nix has excellent support for modularization.</li>
</ul>
<p>While Nix itself is “just” a package manager, there are tools built on top of it, including the <a href="http://nixos.org/nixos/" target="_blank">NixOS</a> Linux distribution called. Based on a single Nix configuration file, Nix can derive and entire system, which can be deployed locally, or remotely via <a href="https://github.com/NixOS/nixops" target="_blank">NixOps</a>.</p>
<p>In NixOS, all services run using <a href="http://www.freedesktop.org/wiki/Software/systemd/" target="_blank">systemd</a>, kernels are deployed and a bunch of utility processes are running at all times. As a result, a minimal NixOS closure quickly becomes hundreds of megabytes big and too heavy-weight for a Docker container.</p>
<p>Regardless, NixOS configurations are kind of nice and clean and would make a great way of provisioning Docker images as well. For instance, here’s how to run a simple Apache server serving static files from./www directory:</p>
<pre>{ config, pkgs, ... }:<br>{<br>services.httpd = {<br>enable = true;<br>documentRoot = ./www;<br>adminAddr = "zef.hemel@logicblox.com";<br>};<br>}</pre>
<p>The ./www there refers to the path ./www local to the system configuration file. When the system configuration is built, the contents of ./www is automatically copied into the Nix store and becomes part of the dependencies of the system configuration. So this idea of “first I copy all my web files to /var/www, and then I point Apache to it” goes away.</p>
<p>To bring this awesomeness to Docker, I’ve been hacking on a project called <a href="https://github.com/zefhemel/nix-docker" target="_blank">nix-docker</a>, which allows you to quickly and efficiently build Docker images using NixOS modules. In fact, the example I just gave can be built into a Docker image just great.</p>
<h3>Introducing <a href="https://github.com/zefhemel/nix-docker" target="_blank">nix-docker</a>
</h3>
<p>Rather than using systemd to run services inside the container (which is tricky to get to work inside of a Docker container and has a slew of dependencies of its own), I opted for using <a href="http://supervisord.org/" target="_blank">supervisord</a>, which appears to be the de-facto standard for running multiple services at once in a Docker container. A simple application running a node.js server can be defined as follows:</p>
<pre>{ config, pkgs, ... }:<br>{<br>supervisord.services.nodeApp = {<br>command = "${pkgs.nodejs}/bin/node ${./app}/server.js";<br>};</pre>
<pre>docker.ports = [ 8080 ];<br>}</pre>
<p>This assumes you have an app/ directory in the same directory as the configuration file with a server.jsin it that runs a server on port 8080. The docker.ports configuration ensures that port 8080 is exposed to the outside world (the equivalent of EXPOSE in a Dockerfile).</p>
<p>Now let’s say you named this file configuration.nix. You can now build it into a Docker image as follows:</p>
<pre># nix-docker -b -t zefhemel/myapp configuration.nix</pre>
<p>We’ll get to the -b at the very end, the -t option is used to name the image (zefhemel/myapp in this case) and configuration.nix is the file name of the config to build.</p>
<p>And that’s it. In case you need Redis for your application, that can be enabled easily, because there’s a reusable <a href="https://github.com/zefhemel/nix-docker/blob/master/nix-docker/all-modules.nix" target="_blank">Redis module already available</a>:</p>
<pre>{ config, pkgs, ... }:<br>{<br>supervisord.services.nodeApp = {<br>command = "${pkgs.nodejs}/bin/node ${./app}/server.js";<br>};</pre>
<pre>services.redis.enable = true;</pre>
<pre>docker.ports = [ 8080 ];<br>}</pre>
<p>The first thing nix-docker will do is build the system configuration and all its dependencies, in this case including:</p>
<ul>
<li>supervisord to run the services</li>
<li>node.js</li>
<li>Redis</li>
<li>The configuration file for supervisord</li>
<li>The configuration file for redis</li>
<li>A build script to be run during the docker build</li>
<li>A run script that executes when you boot the container</li>
</ul>
<p>and various other things. Note that building may sound heavier than it is. Nix can fetch prebuilt binaries for most packages, and only ever rebuilds something if it’s both not already available in the local nix store, or downloadable from a binary cache. So generally the process when iterating is very quick.</p>
<p>Once the build completes, it copies the closure to a bare busybox-based Docker image, sets some meta information (like the exposed ports, volumes etc.) and it’s done. You can now push your image to a Docker registry and run it anywhere where Docker runs.</p>
<p>To reduce the per-image size even more, it’s possible to use base images, nix-docker is clever enough to check what /nix/store paths are available in the base image already and not to copy those again for the new image thereby greatly reducing image sizes. For instance, to base it on my <a href="https://index.docker.io/u/zefhemel/base-nix/" target="_blank">zefhemel/base-nix</a> image:</p>
<pre># nix-docker -b -t zefhemel/myapp --from zefhemel/base-nix configuration.nix</pre>
<p>And the resulting image will be much smaller, because it won’t have to copy many of the common things (like supervisord etc.).</p>
<h3>One more thing</h3>
<p>While nix-docker is a pragmatic solution, many Nix hackers won’t like the way I just described it to work. They’ll say “hey, Nix already has perfect support for isolated installations of software, why would you need to copy all that stuff into a container and ship it around?” And they’d be kind of right. A more Nix-native thing to do would be to ship a Nix closure for the application you want to run to the server where you want to run it, run that in an essentially empty Docker container where you bind-mount the host’s Nix store into the container. And guess what…</p>
<p>nix-docker supports this too!</p>
<p>This feature enables a second way of distributing Docker containers without the use of Docker registries. All it requires is to have Nix installed on the host machine.</p>
<p>To use this feature, simply leave out the -b option (note: in this mode you can even use nix-dockerwithout having Docker installed on the building machine):</p>
<pre>$ nix-docker -t my-app configuration.nix</pre>
<p>This will not build a Docker container. Instead, it’ll build a Nix package that you can ship to the target server via SSH (using nix-copy-closure) and then run the docker-run script that it comes with. What this script will do is build a very minimal Docker image on-demand containing only some meta data (like EXPOSEand VOLUME, RUN commands in a Dockerfile) and mounting in the host’s Nix store into the container via -v /nix/store:/nix/store.</p>
<p>There’s a few reasons you would do this:</p>
<ol>
<li>This allows you to avoid Docker registries altogether. It enables you to distribute a Docker application to any server via SSH.</li>
<li>It’s more disk-space efficient. No Nix store paths are every duplicated on the same machine.</li>
<li>Build times are <em>much</em> faster, since Nix builds are fully incremental, only things that have not been build before will be built.</li>
</ol>
<p>The only drawback is that Nix (not NixOS) needs to be installed on the target machine, thereby reducing portability somewhat. In practice I often use this mode during development and then use the -b option to build a “proper” Docker image when all is set up right.</p>
<h3>How to try it out</h3>
<p>For convenience, the <a href="https://github.com/zefhemel/nix-docker" target="_blank">nix-docker repo</a> includes a Vagrantfile. Which makes it easy to get started if you have <a href="http://vagrantup.com/" target="_blank">Vagrant</a> installed, and also allows you to play when you’re on Mac OS X or even Windows. Vagrant will automatically install Docker, Nix and nix-docker so you can get started immediately. The repo contains some sample configurations for you to try.</p>
<p>To learn more, have a look at the code and <a href="http://nixos.org/" target="_blank">learn more about Nix in general</a>. In the end, it’s just Nix all the way down. In fact, the only part of nix-docker that’s not written in Nix is <a href="https://github.com/zefhemel/nix-docker/blob/master/nix-docker/bin/nix-docker" target="_blank">the 85 line nix-docker Python script</a> that ties everything together.</p>
<h3>Current state</h3>
<p>It’s still early days for nix-docker. Currently I’ve built and enabled <a href="https://github.com/zefhemel/nix-docker/blob/master/nix-docker/all-modules.nix" target="_blank">only a few modules</a> including:</p>
<ul>
<li>A <a href="https://github.com/zefhemel/nix-docker/blob/master/nix-docker/modules/config/docker.nix" target="_blank">docker module</a> for exposing ports, creating volumes and extending the build and run scripts.</li>
<li>A <a href="https://github.com/zefhemel/nix-docker/blob/master/nix-docker/modules/config/user-groups.nix" target="_blank">module for creating Unix users and groups</a>.</li>
<li>A <a href="https://github.com/zefhemel/nix-docker/blob/master/nix-docker/modules/servers/supervisord.nix" target="_blank">supervisord module</a>,</li>
<li>A <a href="https://github.com/zefhemel/nix-docker/blob/master/nix-docker/modules/shim/systemd.nix" target="_blank">systemd service shim</a> that attempts to translate existing systemd service configs to supervisord configs.</li>
<li>Various servers: apache, mysql, redis</li>
</ul>
<p>Many more existing NixOS modules should work but have to be tested first.</p>
<p><strong>Update:</strong> <a href="http://zef.me/6079/deploying-wordpress-using-nix-docker" target="_blank">Here’s a post describing how to provision a Docker container with Wordpress using nix-docker</a>.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>114</wp:post_id>
		<wp:post_date>2013-11-07 16:20:39</wp:post_date>
		<wp:post_date_gmt>2013-11-07 15:20:39</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>declaratively-provision-docker-images-using-nix</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="nix"><![CDATA[Nix]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Who Needs Git When You Got ZFS?</title>
		<link>http://zef.me/2013/08/20/who-needs-git-when-you-got-zfs/</link>
		<pubDate>Tue, 20 Aug 2013 15:02:26 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2013/08/20/who-needs-git-when-you-got-zfs/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p><em>This post is also available in </em><a href="http://postd.cc/who-needs-git-when-you-got-zfs/" target="_blank"><em>Japanese</em></a><em>.</em></p>
<p>I’ve been playing a little bit with <a href="http://en.wikipedia.org/wiki/ZFS" target="_blank">ZFS</a>, Oracle’s (previously Sun’s) next-generation file system. Originally developed for Solaris, but since it’s open source also ported to Linux (as of 0.6.1 <a href="https://groups.google.com/a/zfsonlinux.org/forum/?fromgroups=#!topic/zfs-announce/ZXADhyOwFfA" target="_blank">considered stable for production use</a>) and <a href="https://openzfsonosx.org" target="_blank">Mac</a>. While called a file system, ZFS is also a volume manager, so also takes over the job of partitioning your disk as well. Why is ZFS cool? It includes protection against data corruption, built-in support for RAID, snapshots and copy-on-write clones, and flexible and efficient ways of transferring data, e.g. for backups. To show what’s possible and push the limits somewhat, I’ll show how we get implement various features of Git, the version control system (or any version control system, for that matter) using ZFS. Of course, I’m not seriously suggesting you’d ditch a “proper” version control system, but it gives a good sense of what’s possible at the file system level.</p>
<p>Installing ZFS is not hard: on Mac go to the <a href="https://openzfsonosx.org/" target="_blank">OpenZFS On OS X site</a> and install the package. On Ubuntu Linux:</p>
<pre>$ sudo apt-add-repository ppa:zfs-native/stable<br>$ sudo apt-get update<br>$ sudo apt-get install ubuntu-zfs</pre>
<h4>Pools and file systems</h4>
<p>Now you’re able to create new ZFS storage pools and file systems. If you have a drive available you can use that, or, if you don’t and just want to play around a little bit, you can create one or more files to represent the disks. For instance, to create a 10G file you can use dd:</p>
<pre>$ dd if=/dev/zero of=/tmp/disk1.img bs=1024 count=10485760</pre>
<p>If you want to test out a RAID setup, create a second one with a different name than disk1.img. The next step is to create a storage pool, for this we’ll use zpool create If you have one or more disks available you can use their drive label (e.g. /dev/sda or /dev/sdb) or better yet: by id (/dev/disk/by-id/…), in our case we’ll use absolute paths to our regular files.</p>
<p>We can create various types of pools, for instance to create a mirror raid:</p>
<pre>$ sudo zpool create mypool mirror /tmp/disk1.img /tmp/disk2.img</pre>
<p>This will create a pool named “mypool” that mirrors across the two “devices” and mount it under /mypool (on Linux, or /Volumes/mypool on Mac). To see how much space we have available use zfs list:</p>
<pre>$ sudo zfs list<br>NAME         USED   AVAIL   REFER  MOUNTPOINT<br>mypool      433Ki  9,78Gi   370Ki  /Volumes/mypool</pre>
<p>Alternatively, we can pool up the space from all devices and treat it as one big drive. If you created mypool already, destroy it first:</p>
<pre>$ sudo zpool destroy mypool</pre>
<p>Then, to create the non-mirrored pool:</p>
<pre>$ sudo zpool create mypool /tmp/disk1.img /tmp/disk2.img<br>$ sudo zfs list<br>NAME         USED   AVAIL   REFER  MOUNTPOINT<br>mypool      439Ki  19,6Gi   370Ki  /Volumes/mypool</pre>
<p>Now we have a total of about 20G available.</p>
<p>There’s <a href="http://docs.oracle.com/cd/E19253-01/819-5461/gavwn/index.html" target="_blank">much more you can do with storage pools</a>, like adding disks on the fly, replacing them on the fly etc. But let’s stick to this simple setup for now.</p>
<p>While we can now start writing files to the /Volumes/mypool or /mypool mount, this is not the recommended way of using ZFS. Instead, we will create separate file systems in the pool. For each of these file systems we can then set various properties, such as whether to enable encryption, compression or quotas. We can also take snapshots of each file system individually, or share the file systems via Samba or NFS, or transfer file system snapshots to other pools, possibly on other servers.</p>
<p>So… file systems are kind of the shit.</p>
<p>ZFS filesystems are managed using the zfs command line tool (as opposed to zpool used for pools).</p>
<pre>$ sudo zfs create mypool/test</pre>
<p>This will create and mount a new filesystem under /mypool/test (or /Volumes/mypool/test on Mac). Incidentally, we can mount file systems (and pools) anywhere we like by passing in the -m switch, or, even more fun: by changing the mountpoint on the fly:</p>
<pre>$ sudo zfs set mountpoint=/test mypool/test</pre>
<p>which remounts the filesystem under /test. To see all properties of the filesystem, use zfs get all:</p>
<pre>$ sudo zfs get all mypool/test<br>NAME         PROPERTY              VALUE                 SOURCE<br>mypool/test  type                  filesystem            -<br>mypool/test  creation              di aug 20 14:47 2013  -<br>mypool/test  used                  442Ki                 -<br>mypool/test  available             9,78Gi                -<br>mypool/test  referenced            442Ki                 -<br>mypool/test  compressratio         1.00x                 -<br>mypool/test  mounted               yes                   -<br>mypool/test  quota                 none                  default<br>mypool/test  reservation           none                  default<br>mypool/test  recordsize            128Ki                 default<br>mypool/test  mountpoint            /test                 local<br>mypool/test  checksum              on                    default<br>mypool/test  compression           off                   default<br>mypool/test  atime                 on                    default<br>mypool/test  devices               on                    default<br>mypool/test  exec                  on                    default<br>mypool/test  setuid                on                    default<br>mypool/test  readonly              off                   default<br>mypool/test  snapdir               hidden                default<br>mypool/test  canmount              on                    default<br>mypool/test  copies                1                     default<br>mypool/test  version               5                     -<br>mypool/test  utf8only              on                    -<br>mypool/test  normalization         formD                 -<br>mypool/test  casesensitivity       sensitive             -<br>mypool/test  refquota              none                  default<br>mypool/test  refreservation        none                  default<br>mypool/test  primarycache          all                   default<br>mypool/test  secondarycache        all                   default<br>mypool/test  usedbysnapshots       0                     -<br>mypool/test  usedbydataset         442Ki                 -<br>mypool/test  usedbychildren        0                     -<br>mypool/test  usedbyrefreservation  0                     -<br>mypool/test  logbias               latency               default<br>mypool/test  sync                  standard              default</pre>
<p>There’s a bunch of useful stuff here, for instance, let’s enable compression:</p>
<pre>$ sudo zfs set compression=on mypool/test</pre>
<p>Anything we write to this filesystem from <em>this point onwards</em> will be compressed.</p>
<h4>Who needs Git?</h4>
<p>Using ZFS as a replacement of Git for is probably not a good idea, but just to give you a sense of what ZFS supports at the file system level, let me go through a few typical git-like operations:</p>
<ul>
<li>Creating a repository</li>
<li>Committing or tagging a version</li>
<li>Branching</li>
<li>Pushing and pulling changes from other storage pools, possibly on other machines</li>
</ul>
<p>Notably missing is support for <em>merging</em>, which ZFS does not have direct support for as far as I’m aware.</p>
<p><strong>Creating a repository</strong></p>
<p>First, let’s create a filesystem for our projects, with a specific nested filesystem for our project, which we’ll call “zfsgit”. Ues, you can nest filesystems as deep as you like. And then we’ll chown the root of the filesystem to our current user so that we don’t have to sudo for creating, editing and removing files.</p>
<pre>$ sudo zfs create mypool/projects<br>$ sudo zfs create mypool/projects/zfsgit<br>$ sudo chown $(whoami) /Volumes/mypool/projects/zfsgit<br>$ cd /Volumes/mypool/projects/zfsgit</pre>
<p>Alright, we now have the equivalent of a repository, or checkout thereof.</p>
<p>Let’s create a file and put some content in it:</p>
<pre>$ echo "Hello" &gt; file.txt</pre>
<p><strong>“Committing” and “Tagging”</strong></p>
<p>In order to create a “commit” or “tag”, i.e. something that is kept in our project’s history and you can revert to, you can use a ZFS <em>snapshot</em>. ZFS snapshots have to be explicitly named. Let’s create our first one “firstcommit”. We do this by adding @ and the snapshot name to our filesystem name.</p>
<pre>$ sudo zfs snapshot mypool/projects/zfsgit@firstcommit</pre>
<p>Now, let’s change our file slightly:</p>
<pre>$ echo "world" &gt;&gt; file.txt</pre>
<p>Let’s see what changed:</p>
<pre>$ sudo zfs diff mypool/projects/zfsgit@firstcommit<br>M	/Volumes/mypool/projects/zfsgit/file.txt</pre>
<p>Sadly it won’t really get to see a textual diff, but at least it indicates which file changed. We can now create a new commit:</p>
<pre>$ sudo zfs snapshot mypool/projects/zfsgit@secondcommit</pre>
<p>To list our current snapshots:</p>
<pre>$ sudo zfs list -t snapshot<br>NAME                                   USED   AVAIL   REFER  MOUNTPOINT<br>mypool/projects/zfsgit@firstcommit    146Ki       -   370Ki  -<br>mypool/projects/zfsgit@secondcommit       0       -   386Ki  -</pre>
<p>Now, let’s make another change:</p>
<pre>$ echo "ladies..." &gt;&gt; file.txt</pre>
<p>That was a bad idea, let’s roll back to our previous snapshot:</p>
<pre>$ sudo zfs rollback mypool/projects/zfsgit@secondcommit<br>$ cat file.txt<br>Hello<br>world</pre>
<p>And now we got our previous version back.</p>
<p><strong>Branching</strong></p>
<p>Functionality similar to branching can be achieved using zfs clone, which allows you to clone a filesystem based on a particular snapshot:</p>
<pre>$ sudo zfs clone mypool/projects/zfsgit@firstcommit mypool/projects/zfsgit_branch</pre>
<p>This creates a new copy-on-write filesystem, mounted under mypool/projects/zfsgit_branch which is a very light-weight operation because no copying is involved, and initially barely any extra diskspace is consumed.</p>
<p><strong>Pushing and pulling repositories</strong></p>
<p>You can send filesystems, even incrementally to other storage pools, both local and remote. To demonstrate, let’s say we created another storage pool called “mypool2” locally. We can now “push” any snapshot to our the other storage pool as follows (as root):</p>
<pre>$ zfs send mypool/projects/zfsgit@firstcommit | zfs receive mypool2/zfsgit</pre>
<p>You can imagine, this works just as well via SSH, for instance:</p>
<pre>$ zfs send mypool/projects/zfsgit@firstcommit | ssh root@myserver zfs receive mypool/zfsgit</pre>
<p>This pushes the entire filesystem as it looked at the time of the snapshot. Alternatively, if we already pushed a previous snapshot before, we can also just push the difference between the previous snapshot and the current one using the -i option:</p>
<pre>$ zfs send -i mypool/projects/zfsgit@firstcommit mypool/projects/zfsgit@secondcommit | zfs receive mypool2/zfsgit</pre>
<p>This is useful for incrementally backing up large file systems. Of course, this is just using Unix pipes, so we can also write the result of zfs send to a file and upload it to S3, for instance:</p>
<pre>$ zfs send mypool/projects/zfsgit@firstcommit &gt; backup.dump</pre>
<p>To pull a filesystem, instead of pushing it, you’d do the reverse, over SSH that could look something like this:</p>
<pre>ssh root@myserver zfs send mypool/zfsgit@secondcommit | zfs receive mypool/zfsgit</pre>
<p><strong>Should you use ZFS?</strong></p>
<p>ZFS is pretty cool and pretty stable, at least on Solaris and Linux. I’m not sure of the stability on Mac at this time. Using ZFS as a root file system on Linux is still slightly problematic at this moment, but those issues will likely be resolved soon. I don’t have extensive experience with its reliability and performance myself, but the Internets has good things to say.</p>
<p>However, ZFS is not the only game in town. There’s also <a href="http://en.wikipedia.org/wiki/Btrfs" target="_blank">Linux’ Btrfs</a>, which offers many similar features. However, Btrfs is newer and less mature, it may not be as stable yet. Either way, these file systems are a lot of fun to play with. To learn more about ZFS, I’d recommend reading through <a href="http://docs.oracle.com/cd/E19253-01/819-5461/index.html" target="_blank">Oracle’s ZFS Administration Guide</a>, which is pretty readable and much of it applies to Linux and Mac as well.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>118</wp:post_id>
		<wp:post_date>2013-08-20 17:02:26</wp:post_date>
		<wp:post_date_gmt>2013-08-20 15:02:26</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>who-needs-git-when-you-got-zfs</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="best-of"><![CDATA[Best Of]]></category>
		<category domain="post_tag" nicename="file-system"><![CDATA[File System]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="zfs"><![CDATA[Zfs]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Deploying a Simple Node.js Application with NixOps</title>
		<link>http://zef.me/2013/05/31/deploying-a-simple-node-js-application-with-nixops/</link>
		<pubDate>Fri, 31 May 2013 17:48:17 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2013/05/31/deploying-a-simple-node-js-application-with-nixops/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>In a <a href="http://zef.me/5966/setting-up-development-environments-with-nix" target="_blank">previous post I described how Nix could be used to easily set up a development environment</a> without the use of virtual machines alternatives like <a href="http://www.vagrantup.com" target="_blank">Vagrant</a> require. As an example I used setting up a development environment for a simple “Hello world” <a href="http://nodejs.org" target="_blank">node.js</a> application. At the very end I teased that the work we did could easily be reused to actually deploy our node.js application:</p>
<blockquote>Because we’re essentially unifying development environments and deployment environments, we have now also specified a lot of information that NixOps needs to actually deploy this application to a server. We’ll get into that in a future post.</blockquote>
<p>It’s time to make good on that promise. Let’s see how we can deploy our awesome hello world application to a newly created VirtualBox VM. Then, when we convinced ourselves this works correctly, let’s reuse the same <a href="http://nixos.org" target="_blank">Nix</a> configuraton to deploy to <a href="http://aws.amazon.com" target="_blank">EC2</a>.</p>
<p>Let’s reconsider the default.nix Nix expression I outlined in the previous post. Since that post, node 0.10.8 came out, so <a href="https://github.com/zefhemel/nodejs-nix/blob/master/default.nix" target="_blank">I tweaked it a little bit</a> and added some more documentation:</p>
<pre># This file defines a function that takes a single optional argument 'pkgs'<br># If pkgs is not set, it defaults to importing the nixpkgs found in NIX_PATH<br>{ pkgs ? <strong>import</strong> &lt;nixpkgs&gt; {} }:<br><strong>let</strong><br>   # Convenience alias for the standard environment<br>   stdenv = pkgs.stdenv;<br><strong>in rec</strong> {<br>  # Defines our node.js package<br>  nodejs = stdenv.mkDerivation {<br>    name = "nodejs-0.10.7";<br>    # Where to download sources from<br>    src = pkgs.fetchurl {<br>      url = <a href="http://nodejs.org/dist/v0.10.8/node-v0.10.8.tar.gz;" target="_blank">http://nodejs.org/dist/v0.10.8/node-v0.10.8.tar.gz;</a><br>      sha256 = "0m43y7ipd6d89dl97nvrwkx1zss3fdb9835509dyziycr1kggxpd";<br>    };<br>    # Dependencies for building node.js (Python and utillinux on Linux, just Python on Mac)<br>    buildInputs = [ pkgs.python ] ++ stdenv.lib.optional stdenv.isLinux pkgs.utillinux;<br>    # Hack to make it build on Mac<br>    preConfigure = stdenv.lib.optionalString stdenv.isDarwin ''export PATH=/usr/bin:/usr/sbin:$PATH'';<br>  };<br>  # Defines our application package<br>  app = stdenv.mkDerivation {<br>    name = "application";<br>    # The source code is stored in our 'app' directory<br>    src = ./app;<br>    # Our package depends on the nodejs package defined above<br>    buildInputs = [ nodejs ];<br>    # This is useful for using this package with --run-env: the PORT environment variable<br>    PORT = "8888";<br>    # Our application has no ./configure script nor Makefile, installing simply involves<br>    # copying files from the source directory (set as cwd) to the designated output directory ($out).<br>    installPhase = ''<br>      mkdir -p $out<br>      cp -r * $out/<br>    '';<br>  };<br>}</pre>
<p>We can, just like before still use it for development purposes:</p>
<pre>$ nix-build -A app --run-env</pre>
<p>If you previously checked the older version of the application still relying on node.js 0.10.7, updating to latest version and executing the above command will first download and compile the latest and greatest node.js version ensuring you’re running exactly the same version of all dependencies as everybody else.</p>
<p>As a next step, let’s see how we can actually deploy this application to “the cloud.” We’ll start with a local cloud taking shape of a VirtualBox machine. For this we need <a href="https://github.com/NixOS/nixops" target="_blank">NixOps</a> installed, the Nix tool for cloud deployment as well as <a href="https://www.virtualbox.org/" target="_blank">VirtualBox</a> itself. The <a href="http://hydra.nixos.org/build/5208487/download/2/nixops/manual.html" target="_blank">NixOps manual</a> has installation instructions, if you’re on a <a href="https://github.com/zefhemel/nixops-mac-setup" target="_blank">Mac, I recommend you use my script so install both Nix and NixOps in one go</a>.</p>
<p>To define our deployment we need to create two extra Nix expressions: one describing the “network” that our application will run in, and a second that describes the “physical” infrastructure that our application will run at, where each server from our network is mapped to a resource, e.g. an EC2 instance or a virtualbox VM.</p>
<p>Let’s start with our network definition file, <a href="https://github.com/zefhemel/nodejs-nix/blob/master/network.nix" target="_blank">network.nix</a>:</p>
<pre>{<br>  # Name of our deployment<br>  network.description = "HelloWorld";<br>  # Enable rolling back to previous versions of our infrastructure<br>  network.enableRollback = true;</pre>
<pre># It consists of a single server named 'helloserver'<br>  helloserver =<br>    # Every server gets passed a few arguments, including a reference<br>    # to nixpkgs (pkgs)<br>    { config, pkgs, ... }:<br><strong>let</strong><br>      # We import our custom packages from ./default passing pkgs as argument<br>      packages = <strong>import</strong> ./default.nix { pkgs = pkgs; };<br>      # This is the nodejs version specified in default.nix<br>      nodejs   = packages.nodejs;<br>      # And this is the application we'd like to deploy<br>      app      = packages.app;<br><strong>in</strong><br>    {<br>      # We'll be running our application on port 8080, because a regular<br>      # user cannot bind to port 80<br>      # Then, using some iptables magic we'll forward traffic designated to port 80 to 8080<br>      networking.firewall.enable = true;<br>      # We will open up port 22 (SSH) as well otherwise we're locking ourselves out<br>      networking.firewall.allowedTCPPorts = [ 80 8080 22 ];<br>      networking.firewall.allowPing = true;</pre>
<pre># Port forwarding using iptables<br>      networking.firewall.extraCommands = ''<br>        iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-port 8080<br>      '';</pre>
<pre># To run our node.js program we're going to use a systemd service<br>      # We can configure the service to automatically start on boot and to restart<br>      # the process in case it crashes<br>      systemd.services.helloserver = {<br>        description = "Hello world application";<br>        # Start the service after the network is available<br>        after = [ "network.target" ];<br>        # We're going to run it on port 8080 in production<br>        environment = { PORT = "8080"; };<br>        serviceConfig = {<br>          # The actual command to run<br>          ExecStart = "${nodejs}/bin/node ${app}/server.js";<br>          # For security reasons we'll run this process as a special 'nodejs' user<br>          User = "nodejs";<br>          Restart = "always";<br>        };<br>      };</pre>
<pre># And lastly we ensure the user we run our application as is created<br>      users.extraUsers = {<br>        nodejs = { };<br>      };<br>    };<br>}</pre>
<p>This is not the shortest network definition one could write, but it does a few nifty things. What it does (as you can see from the comments) is define a network of just one machine named ‘helloserver’, this server will be configured as follows:</p>
<ol>
<li>Its firewall is switched on, blocking all ports but three: 80 (where we’d like to access our application on), 8080 (the port the application listens to) and 22 (to still allow SSH access for deployment purposes).</li>
<li>A firewall rule is setup to forward all traffic to port 80 to port 8080.</li>
<li>A <a href="http://en.wikipedia.org/wiki/Systemd" target="_blank">systemd</a> service starts our application on boot and ensures it keeps running (i.e. restarts it if it crashes). The application will be run as Unix user ‘nodejs’</li>
<li>An extra user ‘nodejs’ is defined.</li>
</ol>
<p>The last piece of the puzzle is a Nix expression mapping each server from our network (in our case just ‘helloserver’) to a resource. We will write two such mappings, one to VirtualBox VMs, and another to EC2. So we can use the VirtualBox one for testing purposes and when we’re ready to push our application live, we can use the EC2 one. Here’s the one for VirtualBox named <a href="https://github.com/zefhemel/nodejs-nix/blob/master/infrastructure-vbox.nix" target="_blank">infrastructure-vbox.nix</a>, it should be pretty self-explanatory:</p>
<pre>{<br>  helloserver =<br>    { deployment.targetEnv = "virtualbox";<br>      deployment.virtualbox.memorySize = 1024;<br>    };<br>}</pre>
<p>All that’s left is to create our deployment:</p>
<pre>$ nixops create network.nix infrastructure-vbox --name node-vbox</pre>
<p>And then deploy it:</p>
<pre>$ nixops deploy -d node-vbox</pre>
<p>What will happen when you execute deploy is the following:</p>
<ul>
<li>All virtual machines will be created if they don’t already exist</li>
<li>The entire system configuration (based on <a href="http://nixos.org/nixos/" target="_blank">NixOS</a>) will be prepared either locally (if you’re running 64-bit Linux) or on one of the VMs (and downloaded to the local Nix store afterwards)</li>
<li>The system configuration for each system will be pushed to each system (incrementally, so only the parts that the machine doesn’t already contain)</li>
<li>Once all configurations are present on all machines, they are simultaneously activated everywhere.</li>
</ul>
<p>After a while, a VirtualBox instance should be running with your application.</p>
<p>To see where the application is running:</p>
<pre>$ nixops info -d node-vbox</pre>
<p>Which, among other things shows and IP that should now be accessible. If we’d like to ssh into our newly created VM:</p>
<pre>$ nixops ssh -d node-vbox helloserver</pre>
<p>If we would like we can destroy the VM easily too:</p>
<pre>$ nixops destroy -d node-vbox</pre>
<p>Next, let’s deploy for realzies. Let’s deploy to EC2 to allow the whole world to enjoy our amazing application.</p>
<p>For this you need an <a href="http://aws.amazon.com/" target="_blank">AWS account</a>. Before we start you need to do only one thing <a href="https://console.aws.amazon.com/ec2/home?region=us-east-1#s=SecurityGroups" target="_blank">via the console</a>, as far as I’m aware NixOps cannot (yet) do this by itself: setup a security group that allows access from anywhere on port 22 and port 80:</p>
<p>Then, we define a mapping from our existing network.nix machines to EC <a href="https://github.com/zefhemel/nodejs-nix/blob/master/infrastructure-ec2.nix" target="_blank">as follows</a>:</p>
<pre><strong>let</strong><br>  # Insert your AWS access key here<br>  accessKey = "yourkey";<br><strong>in</strong> {<br>  # Mapping of our 'helloserver' machine<br>  helloserver = { resources, ... }:<br>    { deployment.targetEnv = "ec2";<br>      # We'll be deploying a micro instance to Virginia<br>      deployment.ec2.region = "us-east-1";<br>      deployment.ec2.instanceType = "t1.micro";<br>      deployment.ec2.accessKeyId = accessKey;<br>      # We'll let NixOps generate a keypair automatically<br>      deployment.ec2.keyPair = resources.ec2KeyPairs.helloapp-kp.name;<br>      # This should be the security group we just created<br>      deployment.ec2.securityGroups = [ "zef-test" ];<br>    };</pre>
<pre># Here we create a keypair in the same region as our deployment<br>  resources.ec2KeyPairs.helloapp-kp = {<br>    region = "us-east-1";<br>    accessKeyId = accessKey;<br>  };<br>}</pre>
<p>In the above expression, no AWS secret key is provided, you need to put that in your ~/.ec2-keys file where each line specifies a access key, followed by the secret key, e.g.:</p>
<pre>youraccesskey yoursecretkey</pre>
<p>Then, the process to deploy is much the same as to VirtualBox:</p>
<pre>$ nixops create network.nix infrastructure-ec2.nix --name node-ec2<br>$ nixops deploy -d node-ec2</pre>
<p>This process may take a bit longer, as a lot of files will have to be uploaded the first time. Subsequent deployments should be very quick, though. After deployment finishes you can see where it’s running:</p>
<pre>$ nixops info -d node-ec2<br>Network name: node-ec2<br>Network UUID: c7b994c2-ca91-11e2-b9f7-14109fe17209<br>Network description: HelloWorld<br>Nix expressions: /Users/zef/git/nodejs-nix/network.nix /Users/zef/git/nodejs-nix/infrastructure-ec2.nix</pre>
<pre>+-------------+-----------------+----------------------------+---------------------------------------------------------+----------------+<br>| Name        |      Status     | Type                       | Resource Id                                             | IP address     |<br>+-------------+-----------------+----------------------------+---------------------------------------------------------+----------------+<br>| helloserver | Up / Up-to-date | ec2 [us-east-1c; t1.micro] | i-4cdfa526                                              | 54.224.155.207 |<br>| helloapp-kp | Up / Up-to-date | ec2-keypair [us-east-1]    | charon-c7b994c2-ca91-11e2-b9f7-14109fe17209-helloapp-kp |                |<br>+-------------+-----------------+----------------------------+---------------------------------------------------------+----------------+</pre>
<p>After you make some changes to your application, updating to the new version is quick and easy. Just run deploy again. If you like, you can deploy to virtualbox first for testing:</p>
<pre>$ nixops deploy -d node-vbox</pre>
<p>and then deploy to EC2:</p>
<pre>$ nixops deploy -d node-ec2</pre>
<p>As Nix’ deployments are very incremental, only components that changed are uploaded. One cool feature of Nix (and with that NixOS and NixOps) is the ability rollback an entire deployment. Let’s say you didn’t test your software well enough and have introduced a very serious bug. Or, you made a complex change to your VM setup that didn’t work out well. With NixOps you can instantly roll back to the previous version of your deployment (across machines). We enabled this with the network.enableRollback = true setting in our network.nix. To see the past list of “generations” (previous versions of our deployment), let’s run:</p>
<pre>$ nixops list-generations -d node-ec2 # or node-vbox<br>   1   2013-06-02 10:09:50<br>   2   2013-06-02 10:12:06   (current)</pre>
<p>This will return previous versions and the time they were deployed, as well, which one is current. To roll back to the first generation, we now use the rollback command:</p>
<pre>$ nixops rollback -d node-ec2 1</pre>
<p>And within seconds your old version will be running again. This is made possible by the feature of Nix that <a href="http://zef.me/5966/setting-up-development-environments-with-nix" target="_blank">I described in my previous post</a>: the ability to keep multiple versions of software installed side by side. When we deployed a new version, the old version never left the building, it was still there. Switching back to the old version is therefore as simple as switching a symlink.</p>
<p>In a future post I’ll show how to deploy more complex applications with Nix, such as a load-balanced node.js application with some npm dependencies, talking to a Redis database.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>147</wp:post_id>
		<wp:post_date>2013-05-31 19:48:17</wp:post_date>
		<wp:post_date_gmt>2013-05-31 17:48:17</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>deploying-a-simple-node-js-application-with-nixops</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="nix"><![CDATA[Nix]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>The March Towards Go</title>
		<link>http://zef.me/2014/07/04/the-march-towards-go/</link>
		<pubDate>Fri, 04 Jul 2014 07:45:05 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2014/07/04/the-march-towards-go/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Today, <a href="https://twitter.com/tjholowaychuk" target="_blank">TJ Holowaychuk</a>, one of node.js’ most prolific module writers (express, jade, mocha, koa) <a href="https://medium.com/code-adventures/farewell-node-js-4ba9e7f3e52b" target="_blank">has announced he’s leaving node.js for Go</a>:</p>
<blockquote><em>I’ve been fighting with Node.js long enough in production now that I don’t enjoy working with it anymore unfortunately, so at least for now this my formal farewell!</em></blockquote>
<blockquote><em>[…]</em></blockquote>
<blockquote><em>Node does some things well, but ultimately it’s not the right tool for the type of software I’m interested in these days. I still plan on using Node for web sites.</em></blockquote>
<blockquote><em>[…]</em></blockquote>
<blockquote>
<em>The more I’ve been working with distributed systems, the more I’m frustrated by Node’s direction, which favors performance over usability and robustness. In the past week I’ve rewritten a relatively large distributed system in Go, and it’s robust, performs better, it’s easier to maintain, and has better test coverage since synchronous code is generally nicer and simpler to work with. TJ is not the first high-profile “noder” to leave for Go. A year and a half ago, </em><a href="https://twitter.com/felixge/status/275320642059001857" target="_blank"><em>Felix Geisendoerfer (author of node-mysql and node-formidable, among other well-known npm modules) tweeted</em></a><em>: bye #nodejs, hello #golang and #golang is technically better in almost every conceivable aspect Some visible node.js-based start-ups are also making the switch, such as </em><a href="http://www.quora.com/Node-js/Why-did-Koding-switch-from-Node-js-to-Go" target="_blank"><em>Koding</em></a><em> (which provides a web-based development environment): We’re not trying to say nodejs is bad in general. for some use cases it may be awesome. we didn’t feel any of its shortcomings when our codebase was small, when our userbase was smaller than 1000 users. it became bad for us when we had hundred thousand users, and we moved away as quickly as we could.</em>
</blockquote>
<blockquote><em>Go is amazingly stable and awesome. I can’t begin to list why everything about it is just great.</em></blockquote>
<blockquote><em>[…]</em></blockquote>
<blockquote><em>I wrote my first server with it in 2010, when it didn’t even have a proper database library. I wrote Koding’s first command execution server using it’s OS library, it processed at least a billion system commands much better than anything else that was out there.</em></blockquote>
<p>And <a href="http://thenewstack.io/from-node-js-to-go-why-one-startup-made-the-switch/" target="_blank">PopTip</a>:</p>
<blockquote><em>PopTip’s problems with Node started about two years ago. Falter said she knew how to write JavaScript and thought she could use that background to learn Node. The speed of development made it easy for the company to get started with Node.</em></blockquote>
<blockquote><em>[…]</em></blockquote>
<blockquote><em>PopTip helps companies provide a statistical breakdown on public consensus. Its clients include CNN, L’Oreal, Spotify, and a host of others. The size of these customers required PopTip to scale its code. Its service depends on machine learning and streaming data. As the company scaled, the task of administration became increasingly complex, due to “call-back soup”, a common complaint with Node.js.</em></blockquote>
<blockquote><em>[…]</em></blockquote>
<blockquote><em>The switch came when one of PopTip’s engineers spent a weekend replicating the core processing structure with Go. Text processing increased 64 percent just by moving from Node to Go. PopTip formally evaluated Go,and it passed the scorecard test: it had the runtime speed, the cost to administer was minimal, the talent pool was excellent, and competing frameworks were not vying for the attention of the developers.</em></blockquote>
<p>It’s not just node.js users making the switch. Others are too. One of Python’s most visible users, <a href="http://www.dropbox.com/" target="_blank">Dropbox</a> — who also employs Python’s creator Guido van Rossum — <a href="https://tech.dropbox.com/2014/07/open-sourcing-our-go-libraries/" target="_blank">recently announced it has migrated major parts of its back-end infrastructure from Python to Go</a>:</p>
<blockquote><em>Dropbox owes a large share of its success to Python, a language that enabled us to iterate and develop quickly. However, as our infrastructure matures to support our ever growing user base, we started exploring ways to scale our systems in a more efficient manner. About a year ago, we decided to migrate our performance-critical backends from Python to Go to leverage better concurrency support and faster execution speed. This was a massive effort–around 200,000 lines of Go code–undertaken by a small team of engineers. At this point, we have successfully moved major parts of our infrastructure to Go.</em></blockquote>
<p>And, less surprisingly, <a href="http://talks.golang.org/2013/oscon-dl.slide#1" target="_blank">Google is also switching projects over</a>:</p>
<blockquote>dl.google.com serves Googles downloads [Chrome, Android SDK, Earth, etc.]</blockquote>
<blockquote>Was written in C++</blockquote>
<blockquote>Now in Go</blockquote>
<blockquote>Now much better [more maintainable]</blockquote>
<p>Naturally, it’s not just <em>existing</em> projects making the switch. New high-profile projects are also <em>started</em> using Go. Most well-known is probably <a href="http://docker.io/" target="_blank">Docker</a>. Many project using Docker under the hood are also written in Go, such as <a href="https://flynn.io/" target="_blank">Flynn</a>, a Docker-based PaaS. <a href="http://blog.golang.org/go-version-1-is-released" target="_blank">Go 1.0 was only released 2 years ago</a>. Clearly there’s a lot of momentum to use it for building high-performance web servers now. It’s fast, easy to distribute (because it produces a single statically linked binary) and has good async features without “callback hell.”</p>
<p>Not looking at Go yet? <a href="http://www.golang.org/" target="_blank">It may be a good time to do so now</a> — everybody else is.</p>
<p>Discussion on <a href="http://www.reddit.com/r/programming/comments/29t8wm/the_march_towards_go/" target="_blank">Reddit</a> and <a href="https://news.ycombinator.com/item?id=7987805" target="_blank">Hacker News</a>.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>167</wp:post_id>
		<wp:post_date>2014-07-04 09:45:05</wp:post_date>
		<wp:post_date_gmt>2014-07-04 07:45:05</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-march-towards-go</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="golang"><![CDATA[Golang]]></category>
		<category domain="post_tag" nicename="programming"><![CDATA[Programming]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Getting Shit Done</title>
		<link>http://zef.me/2015/10/09/getting-shit-done/</link>
		<pubDate>Fri, 09 Oct 2015 19:56:51 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2015/10/09/getting-shit-done/</guid>
		<description></description>
		<content:encoded><![CDATA[

<figure>

<img data-width="1000" data-height="1313" src="https://cdn-images-1.medium.com/max/800/1*0yPPWYOQfZp7FCI4k-a1Hg.jpeg">
</figure><p>People often come to me, and ask: “How do you get so much shit done? Why doesn’t anything fall through the cracks? Why don’t you ever seem to be bored? How can I be more like you?”</p>
<p>The answer is simple. It’s all thanks to my very own system that I call “Getting Shit Done.” It’s a lot like the <a href="http://www.amazon.com/Getting-Things-Done-Stress-Free-Productivity/dp/0142000280" target="_blank">“Getting Things Done”</a> system, except simpler, plus it has “Shit” in the name, because I’ve worked hard to build up sufficient street cred to use edgy words like that. Yo.</p>
<p>Let me explain how it works.</p>
<h4>The Basics</h4>
<p>The key idea of the GSD system is to <em>keep a list of shit to do, ordered by priority</em>. At all times you keep the list ordered in such a way that whenever you have some time, you can pick the top task, get it done and remove it from the list.</p>
<p>What are tasks? Anything that needs to get done, but ideally one task should take <em>at most a few hours</em>. For your own sake, it’s better to be able to cross off multiple tasks per day to get that trademarked <em>got shit done today™</em> feeling.</p>
<p>What to do with tasks that take much longer? You can usually split them in smaller sub-tasks.</p>
<p><em>#protip</em> If a task has a due date, it’s useful to write that down as well.</p>
<p>You should go through the list <em>regularly</em> to verify the order is still appropriate, and all tasks are still relevant to complete. Prune and reorder as required. Of course, if you have due dates that are coming up, move those items closer to the top of the list. This list cleaning and updating is an important part. If you find yourself not doing this regularly (at the very least once per week), just set a recurring reminder on your phone or in your calendar.</p>
<p>Essentially, that’s the core GSD system. But, there are some <strong>power tools</strong> that I like as well.</p>
<h4>Bonus lists</h4>
<p>I keep two more lists:</p>
<ol>
<li>A “Waiting for” list — whenever I ask somebody for something and I don’t get an answer or result immediately, I add it to my “Waiting for” list, so that I do not forget to follow up. When I get my answer, I remove it from the list. This list allows me to make sure all the stuff I asked about will eventually be answered, and all the shit I ask others to do for me, eventually gets done. And because I like to keep my “Waiting for” list short, it encourages me to constantly nag the people I still have outstanding requests for.</li>
<li>An “Inbox” note or list — whenever I’m meeting with somebody or some group and some shit that needs to get done comes up, I first write it down on this note or list. Later on, when I have more time, I either perform the task immediately (if it takes 10 minutes or less), or I add it as a task in my task list and prioritize it appropriately.</li>
</ol>
<h4>Daily commitment</h4>
<p>In the morning I look at my calendar to see how much non-meeting time I have. Based on this, I make a guesstimate of which tasks (from the top of the list, obviously) I will try to get done today. So effectively I split the list in two: Today and Later. This pushes me to actually commit to some amount work to be done, and when I actually do, I get an even stronger <em>got shit done today™</em> feeling.</p>
<p>And that’s really it.</p>
<h4>Implementation</h4>
<p>So, how can this system be implemented? Well, there’s many possible ways. Here’s just four.</p>
<h3>1. The Unix nerd way</h3>
<figure>

<img data-width="690" data-height="579" src="https://cdn-images-1.medium.com/max/800/1*5GD7Ek81wCKp3ezqpv4MMg.png">
</figure><p>You can create a file on your computer that you call “tasks.txt”, you edit it with vim (though not emacs). Every line contains a task. If you want to implement the Today/Later part, just add an empty line as a divider (or add fancy headers like I did in the screenshot). If you want to keep a “Waiting for list” add that one to the top, or in a separate file “waiting_for.txt”. The “Inbox” you can keep in yet another file called “inbox.txt”</p>
<h3>2. The Hipster way</h3>
<figure>

<img data-width="1280" data-height="904" src="https://cdn-images-1.medium.com/max/800/1*e0rEcuon9R22D_IGCnSSNQ.jpeg">
</figure><p>You write all the tasks you need to do in your moleskine notebook. I don’t own such a notebook, so I took some random Google Image result for “moleskine” and inserted it here.</p>
<p><strong>Implementation note</strong>: please write down all tasks in the correct order at the very beginning and don’t add anything later. Reordering is very hard to implement on a piece of paper, especially something as precious as moleskine paper.</p>
<h3>3. <a href="https://www.wunderlist.com/" target="_blank">Wunderlist</a> (or any of the other 10,000 task apps)</h3>
<figure>

<img data-width="589" data-height="637" src="https://cdn-images-1.medium.com/max/800/1*BPrjFxAzuiIAQPArqZzqtA.png">
</figure><p>Wunderlist already comes with an “Inbox” list, so you don’t have to create that. Just create another “Tasks” list to keep track of your task list. If you want to do the who “Today” and “Later” thing, you can <em>star</em> tasks due for today (or set their due date to today). You can also create a “Waiting for” list if you like that sort of thing. You can drag tasks between the lists easily.</p>
<h3>4. <a href="http://www.asana.com/" target="_blank">Asana</a>
</h3>
<figure>

<img data-width="900" data-height="404" src="https://cdn-images-1.medium.com/max/800/1*ftyo1216ZTey1VuoQU-NLw.png">
</figure><p>This is what I use today, but it’s pretty much overkill unless you work in a team. In Asana you have an Inbox already (My tasks). In “My Tasks” you can also mark tasks for “Today” which will result in a special “Today” list. I also have a “Zef’s random tasks” list (private) that I use for my own task. Since we’re using Asana in a group setting, we also have projects for all running projects we manage, but this is out of scope for GSD.</p>
<p>Good luck getting shit done!</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>181</wp:post_id>
		<wp:post_date>2015-10-09 21:56:51</wp:post_date>
		<wp:post_date_gmt>2015-10-09 19:56:51</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>getting-shit-done</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="gtd"><![CDATA[Gtd]]></category>
		<category domain="post_tag" nicename="productivity"><![CDATA[Productivity]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Firefox OS: It’s All About the Apps</title>
		<link>http://zef.me/2013/04/23/firefox-os-its-all-about-the-apps/</link>
		<pubDate>Tue, 23 Apr 2013 11:14:08 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false"></guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Today <a href="http://www.geeksphone.com" target="_blank">Geeksphone</a> has started selling its first Firefox OS phones: the Keon and the Peak. As the <a href="http://shop.geeksphone.com" target="_blank">online store</a> opened its virtual doors, I was first in line. Not because I believe that the €119 Keon or €194 Peak will be the ultimate replacement for my €750 iPhone 5, but because I’m buying into a vision: the web has to become a first class citizen on mobile. It just <em>has</em> to happen.</p>
<p><a href="http://www.mozilla.org/en-US/firefox/partners/" target="_blank">Firefox OS</a> is Mozilla’s entry into the mobile device market. It is an operating system built entirely on a web stack: all applications and widgets are built using HTML, CSS and JavaScript. You can view it as ChromeOS for phones, but it’s even more hard-core than that: everything, including the <a href="https://github.com/mozilla-b2g/gaia/tree/master/apps/browser" target="_blank">browser UI</a> and even the <a href="https://github.com/mozilla-b2g/gaia/blob/master/apps/system/js/battery_manager.js" target="_blank">battery widget</a> at the top-right of the screen and the <a href="https://hacks.mozilla.org/2013/03/adding-cursor-swipe-to-the-firefox-os-keyboard/" target="_blank">software keyboard</a> is built using web technology.</p>
<figure>

<img data-width="640" data-height="320" src="http://zefsmusings.files.wordpress.com/2013/04/31422-08fxdnor_m98xnebg.png">
</figure><p>I have not <a href="http://zef.me/5536/firefoxos-beyond-idealism" target="_blank">always been a big Firefox OS believer</a>. When I first heard about Mozilla’s <em>Boot2Gecko</em> project (the code name for Firefox OS), I was put off by its nerdy angle. “Let’s staple our Gecko browser rendering engine [the engine powering Firefox] onto a Linux kernel and take over the world!” This, combined with rhetoric about openness and open source, does not a great consumer story make. If Mozilla loses sight of the end-user in its crusade for open source and the open web, it would be a missed opportunity. Of course, all of this assumes that people actually <em>care about</em> or notice operating systems. Do they?</p>
<p>Perhaps, not so much. As I observed my own smartphone usage over the past weeks, I concluded that I may have overvalued the operating system and the applications it comes with. I barely use any of Apple’s preinstalled applications anymore. I use <a href="http://www.mailboxapp.com/" target="_blank">Mailbox</a> for email, <a href="http://tapbots.com/software/tweetbot/" target="_blank">Tweetbot</a> for Twitter, <a href="http://vemedio.com/products/instacast3" target="_blank">Instacast</a> for podcasts, <a href="http://www.google.com/chrome" target="_blank">Chrome</a> for browsing. The time that iOS’ most important feature was its beautiful and consistent widget set and touch interactions has long gone. Today, many iOS applications use completely custom colors and widgets. iOS developers are inventing new touch interactions left and right. This has not led to a worse iOS experience for me — it has led to great innovation. Of course, there needs to be an operating systems, the infrastructure has to be there: you need system support for notifications, task management, a good software keyboard, solid power management, but beyond that, you’re good to go.</p>
<p>Assuming Firefox OS gets the fundamentals right — and after playing a bit with the emulator and skimming its documentation: the fundaments look good — “all” it needs are applications.</p>
<p>Creating an application ecosystem is the big challenge for any new mobile platform. Today, a smartphone is not interesting if you can’t play Angry Birds on it, if you can’t check Twitter and Facebook. The previous attempt at web technology-based platform, <a href="http://en.wikipedia.org/wiki/WebOS" target="_blank">WebOS</a>, used its web stack to lure developers in: “You already know HTML, CSS and JavaScript, so you can build applications for WebOS.” This was true, existing knowledge could be leveraged, but the result would be applications for WebOS specifically. Investing in platform-specific applications is only worth it if enough people have these phones in their pockets.</p>
<p>This is exactly where Firefox OS is different: Mozilla is not asking you to develop Firefox OS applications, it is asking you to build mobile web applications. Applications that don’t only run great on Firefox OS, but also on Android, iOS or any other platform with a decent web browser. You can enhance these applications using <a href="https://wiki.mozilla.org/WebAPI" target="_blank">APIs</a> currently unique to Firefox OS, for instance to access the camera, contacts and the photo library, but you don’t have to. As Mozilla is working to standardize these APIs, they should appear on other platforms as well. Some already have.</p>
<p>“But I’ve tried mobile web applications on my mobile phone, and they suck compared to native apps!”</p>
<p>You may think so, but the general population apparently doesn’t agree telling from Facebook’s mobile usage. Here’s a slide from <a href="http://www.infoq.com/presentations/Social-HTML5-Mobile" target="_blank">a talk from Facebook’s James Pearce</a> (QCon SF, 2012):</p>
<figure>

<img data-width="640" data-height="459" src="http://zefsmusings.files.wordpress.com/2013/04/b2019-0jt5z6xp6o_pqvef4.png">
</figure><p>Indeed, more people use Facebook’s mobile website than the iOS and Android applications combined. Even if <em>you</em> consider the experience worse than native, apparently it’s good enough for most.</p>
<p>But does a web experience have to be worse? A week or two ago I discovered <a href="http://forecast.io/" target="_blank">forecast.io</a> (be sure to open that URL in your iPhone browser). Forecast.io is the first mobile web app that I’ve seen whose experience is indistinguishable from a native application. On my iPhone 5 everything works super fast, and I’ve switched to using it for all my weather forecasting needs — which are extensive — replacing the iPhone’s native weather app.</p>
<p>There is only one issue with forecast.io: whenever I task-switch to it, it reloads the application. While Apple added application pause and resuming when switching between applications years ago, this is not supported for web applications added to the home screen. When will Apple add this functionality? That’s unclear, but my guess is it’s not a feature high on Apple’s priority list. The reality is that on today’s mobile platforms, web <em>applications</em> are second-class citizen, and there’s little incentive to improve this while Apple and Google benefit from their AppStores and Play Stores.</p>
<p>This is why we need a mobile platform that takes the web seriously. One that makes web applications first-class. Hello, Firefox OS.</p>
<p>However, let’s not forget building a new platform is hard. My prediction is that the first Firefox OS phones that ship will not compare favorably to iPhones and high-end Androids. This is forgivable because it’s a 1.0, and because you can buy about six Firefox OS devices for the price of a single iPhone — hello part of the world that doesn’t swim in money. Putting out a phone at feature parity from day one is pretty tough. There’s a lot to catch up on. It will need time to get there.</p>
<p>The bigger picture is that the groundwork done by the Firefox OS team, <a href="https://wiki.mozilla.org/WebAPI" target="_blank">standardizing new APIs</a> to make mobile web applications more capable than they are today, is making significant strides in moving the mobile web forward, as Firefox did for the “desktop web” before it. Therefore, even if Firefox OS doesn’t “win,” but is ultimately beat by Google’s web-based phone (ChromePhone?), or Microsoft’s version (Web4Win?), the <em>mobile web</em> still wins.</p>
<p>So, I’m voting with my wallet and buying a Firefox OS phone. Also: I like new gadgets to play with.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>205</wp:post_id>
		<wp:post_date>2013-04-23 13:14:08</wp:post_date>
		<wp:post_date_gmt>2013-04-23 11:14:08</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>firefox-os-its-all-about-the-apps</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="firefoxos"><![CDATA[Firefoxos]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="mobile"><![CDATA[Mobile]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Firefox OS at its Peak: Upgrading Gaia on Your Geeksphone</title>
		<link>http://zef.me/2013/05/06/firefox-os-at-its-peak-upgrading-gaia-on-your-geeksphone/</link>
		<pubDate>Mon, 06 May 2013 14:45:35 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2013/05/06/firefox-os-at-its-peak-upgrading-gaia-on-your-geeksphone/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>I received my <a href="http://www.geeksphone.com/" target="_blank">Geeksphone</a> Peak <a href="http://zef.me/5919/firefox-os-its-all-about-the-apps" target="_blank">Firefox OS</a> Developer device today. Firefox OS consists of two core parts:</p>
<ol>
<li>
<a href="https://github.com/mozilla-b2g/B2G" target="_blank">Boot2Gecko</a>, which is essentially a Gecko rendering engine stapled on top of the Linux (Android) kernel</li>
<li>
<a href="https://github.com/mozilla-b2g/gaia" target="_blank">Gaia</a>, which is the HTML/JS/CSS front-end</li>
</ol>
<p>The Geeksphones are aimed at developers, so you’ll want to live on the bleeding edge (and in this case: you really should). Out of the box the Geeksphones come with Gaia 1.0.1 installed, which is pretty old. There’s some significant improvement going on for 1.1. Here’s how you upgrade to the latest and greatest version of Gaia. I tested this on a Mac, I assume on Linux and perhaps Windows it works similarly. I own the Peak phone myself, but for the other models the steps should be the same (other than the HIDPI thing, which I’ll note later).</p>
<p><strong>Requirements:</strong></p>
<ul>
<li>Up-to-date B2G firmware, see <a href="https://gist.github.com/janjongboom/5500846" target="_blank">here for instructions on how to upgrade</a>.</li>
<li><a href="http://git-scm.com/" target="_blank">git</a></li>
<li>
<a href="http://developer.android.com/sdk/index.html" target="_blank">Android SDK</a> (yes there’s a bit of Android under the covers)</li>
</ul>
<p><strong>Steps:</strong></p>
<p>Make sure the Android SDK’s platform tools are on your path:</p>
<pre>export PATH=&lt;android-sdk-path&gt;/sdk/platform-tools:$PATH</pre>
<p>Then, enable remote debugging on your Firefox OS device:</p>
<p><em>Settings &gt; Device information &gt; More information &gt; Developer &gt; Enable “Remote debugging”</em></p>
<p>To verify this worked, in a terminal type:</p>
<pre>adb devices</pre>
<p>You should see something like this (at least one device):</p>
<pre>List of devices attached<br>06af7088f488 device</pre>
<p>In my case this worked fine, but steps failed. To be very sure that everything is ok, enter:</p>
<pre>adb shell</pre>
<p>You should now get a prompt that you can exit out of with Ctrl-D. If the prompt doesn’t load, try reconnecting the phone or rebooting it, then try again.</p>
<p>Next up: clone <a href="https://github.com/mozilla-b2g/gaia" target="_blank">Gaia</a></p>
<pre>git clone git://github.com/mozilla-b2g/gaia.git</pre>
<p>If you have a Peak (which has a HiDPI screen), you may want to build Gaia in HiDPI mode (it’s also fun not to do this, you’ll get a lot more content on your screen that way):</p>
<pre>export HIDPI=1</pre>
<p>Then, to build and install (and reset your profile, which means your device is reset) — you don’t have to do this every time, but it’s a good idea to do this after a big upgrade:</p>
<pre>make reset-gaia</pre>
<p>For minor upgrades you can just:</p>
<pre>make install-gaia</pre>
<p>At this point your phone will ideally reboot by itself. In my case the whole system locked up, the only way to fix it was to pull the battery to restart it.</p>
<p>Done! You should now be running the latest and greatest bleeding edge Gaia (version 1.1 at the time of this writing).</p>
<p><strong>Revert, revert!</strong></p>
<p>In case stuff breaks, you can easily revert to an older version of Gaia. It’s just git, so: checkout an older branch, e.g.:</p>
<pre>git checkout v1.0.1</pre>
<p>and run make reset-gaia again.</p>
<p>I’m still working on upgrading the Boot2Gecko build on the phone, if I succeed I’ll post on how to do that later.</p>
<p>Thanks to <a href="http://sergimansilla.com" target="_blank">Sergi Mansilla</a> for his help with this.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>209</wp:post_id>
		<wp:post_date>2013-05-06 16:45:35</wp:post_date>
		<wp:post_date_gmt>2013-05-06 14:45:35</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>firefox-os-at-its-peak-upgrading-gaia-on-your-geeksphone</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="firefoxos"><![CDATA[Firefoxos]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Parenthesical Culture and ParEdit</title>
		<link>http://zef.me/2013/07/25/parenthesical-culture-and-paredit/</link>
		<pubDate>Thu, 25 Jul 2013 08:55:05 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2013/07/25/parenthesical-culture-and-paredit/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>After a few years of doing zero <a href="http://clojure.org" target="_blank">Clojure</a> hacking, recently I’ve picked up a side project in Clojure again. Rather than using my usual editors to edit Clojure code, I chose to go the all-in hardcore Lisp route: Emacs with Paredit (I followed <a href="http://clojure-doc.org/articles/tutorials/emacs.html" target="_blank">these instructions to set it up</a>). And during that time I developed a theory of why people feel like they drown in the parentheses in Lisps and why the Lisp community fails to be bothered by this issue. Hint: <a href="http://www.emacswiki.org/emacs/ParEdit" target="_blank">ParEdit</a>.</p>
<p>I know, Emacs: <em>ancient</em> tool, who uses that anymore? As it turns out, in fact, quite a few people do. Granted, primarily people that did programming before Textmate and Sublime existed. Unsurprisingly, Emacs’ Lisp support is state-of-the art — possibly this has something to do with the fact that the whole thing was written in its own Lisp dialect named Elisp.</p>
<p>While everybody heard of Emacs, you may not have heard of ParEdit yet. The first time you enter it, you think you’ve gone bananas: basic things no longer work. For instance, you cannot delete parentheses most of the time. What’s up with that?</p>
<p>The goal of ParEdit is to make it easier to keep your parentheses balanced, whether they’re of the round, square or squigly kind. It does so, and many other editors do this, by immediately inserting a closing parenthesis whenever you open one. However, it goes further than that, by disallowing you to remove non-empty parenthesis pairs. Instead, it offers way to do structural editing of your parentheses referred to as slurping and barfing. Here’s a little YouTube feature that show this in action (I suggest you fast forward to the 1 minute mark, to skip over the rather toe curling intro):</p>
<a href="https://www.youtube.com/embed/D6h5dFyyUX0?rel=0">https://www.youtube.com/embed/D6h5dFyyUX0?rel=0</a><p>Beside offering keyboard shortcuts to manipulate your parenthesized lists (named s-expressions), there are also shortcuts to navigate them, for instance to jump to the next branch of the current expression, taking nesting into account.</p>
<p>Once you go passed the initial tearing-your-hair out phase of using ParEdit, you start to appreciate it and appreciate that it’s in fact a simple form of structural editing: <strong>you are no longer editing plain text, you are editing code structurally as trees</strong>. An idea recently reinvented by <a href="http://www.jetbrains.com/mps/" target="_blank">JetBrain’s MPS</a>.</p>
<p>So, let me get to my observation about parenthesis use in Lisps. Or Lisp’s parenthesical culture, if you will.</p>
<p>Parentheses are not unique to Lisp. In fact, a Lisp like Clojure barely uses more parentheses than for instance a Java, or JavaScript does. So where does the complaining come from? I think there’s two sources: the first is that traditional Lisps (like common lisp and Scheme) <em>do</em> use more parentheses, and they use they use the same type of parenthesis for about everything: they overload the meaning of the parenthesis. That’s indeed bad and was fixed in Clojure. The second is about parenthesis placement.</p>
<p>Let me illustrate with an example: Here’s a completely non-sensical JavaScript fragment:</p>
<pre><strong>function</strong> doStuff() {<br><strong>while</strong>(true) {<br><strong>var</strong> result1 = callSomeFunction();<br><strong>var</strong> result2 = callOtherFunction(result1);<br><strong>if</strong>(result2 === <strong>null</strong>) {<br>         console.log("Got null");<br>      }<br>   }<br>}</pre>
<p>The Clojure equivalent to this would be the following:</p>
<pre>(<strong>defn</strong> do-stuff []<br>   (<strong>while</strong> true<br>      (<strong>let</strong> [result1 (call-some-function)<br>            result2 (call-other-function result1)]<br>         (<strong>when</strong> (= result2 <strong>nil</strong>)<br>            (println "Got null")))))</pre>
<p>The scary part about the Clojure code is the end there: ))))). That’s five, yes <em>five</em> parentheses. OMG! Lisp, that’s so typical of you!</p>
<p>The thing is, you may also notice that the Clojure code is a few lines shorter: 3 to be exact. How come? Well, the last three lines of the JavaScript are all spent closing brackets. We can shorten it, though — no worries:</p>
<pre><strong>function</strong> doStuff() {<br><strong>while</strong>(true) {<br><strong>var</strong> result1 = callSomeFunction();<br><strong>var</strong> result2 = callOtherFunction(result1);<br><strong>if</strong>(result2 === <strong>null</strong>) {<br>         console.log("Got null");}}}</pre>
<p>Tada! Same length. But oh no! 4 parentheses at the end (note that it’s 4 not five because Clojure’s let scoping mechanism introducing 1 extra one, yes Clojure has lexical scopes — insanity). Four! Clearly this proofs that <a href="https://brendaneich.com/2008/04/popularity/" target="_blank">JavaScript is just a Java-like syntax on Scheme</a>, right?!</p>
<p>However, similarly, we could also write our Clojure code this way:</p>
<pre>(<strong>defn</strong> do-stuff []<br>   (<strong>while</strong> true<br>      (<strong>let</strong> [result1 (call-some-function)<br>            result2 (call-other-function result1)]<br>         (<strong>when</strong> (= result2 <strong>nil</strong>)<br>            (println "Got null")<br>         )<br>      )<br>   )<br>)</pre>
<p>How do you like them apples?</p>
<p>My guess is that the latter code fragment looks slightly less frightening to the non-trained Lisper’s eye than the first version. It’s also more practical, it’s much easier to add a new statement right after the when, because you don’t have to count which parenthesis to insert stuff in front of.</p>
<p>So why don’t Lispers write their code this way? My theory is that there are two reasons:</p>
<ol>
<li>Having lines with just parentheses on them is a waste of screen space (same is true for other languages, but that hasn’t bothered anybody, apparently).</li>
<li>You don’t have to count parentheses with a tool like ParEdit that much.</li>
</ol>
<p>So, how would ParEdit help here? Here’s what I’d do in Emacs’ ParEdit mode if I’d like to add something just behind the when. First I’d position my cursor somewhere before the when, for instance like this:</p>
<pre>(<strong>defn</strong> do-stuff []<br>   (<strong>while</strong> true<br>      (<strong>let</strong> [result1 (call-some-function)<br>            result2 (call-other-function result2)]<br><strong>|</strong>      (<strong>when</strong> (= result2 <strong>nil</strong>)<br>            (println "Got null")))))</pre>
<p>Next, I’d press Ctrl-Meta-f to move to the next branch at the same level, which moves the cursor here:</p>
<pre>(<strong>defn</strong> do-stuff []<br>   (<strong>while</strong> true<br>      (<strong>let</strong> [result1 (call-some-function)<br>            result2 (call-other-function result1)]<br>        (<strong>when</strong> (= result2 <strong>nil</strong>)<br>            (println "Got null"))<strong>|</strong>)))</pre>
<p>Then I press return, and voila:</p>
<pre>(<strong>defn</strong> do-stuff []<br>   (<strong>while</strong> true<br>      (<strong>let</strong> [result1 (call-some-function)<br>            result2 (call-other-function result1)]<br>        (<strong>when</strong> (= result2 <strong>nil</strong>)<br>            (println "Got null"))<br><strong>|</strong>)))</pre>
<p>Tools like ParEdit really change the way you manipulate your (Lisp) code.</p>
<p>If you write Clojure, some other Lisp or sometimes dabble with them, be sure to give Paredit a try, there are implementations for other editors as well, for instance for <a href="https://github.com/vim-scripts/paredit.vim" target="_blank">Vim</a> and <a href="https://github.com/odyssomay/paredit" target="_blank">Sublime</a>.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>219</wp:post_id>
		<wp:post_date>2013-07-25 10:55:05</wp:post_date>
		<wp:post_date_gmt>2013-07-25 08:55:05</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>parenthesical-culture-and-paredit</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="clojure"><![CDATA[Clojure]]></category>
		<category domain="post_tag" nicename="emacs"><![CDATA[Emacs]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="lisp"><![CDATA[Lisp]]></category>
		<category domain="post_tag" nicename="paredit"><![CDATA[Paredit]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>On My Own</title>
		<link>http://zef.me/2014/06/16/on-my-own/</link>
		<pubDate>Mon, 16 Jun 2014 12:26:07 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2014/06/16/on-my-own/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>I just realized I never posted about <a href="http://zedapp.org/2014/04/zed-the-next-phase/" target="_blank">the “life changing event” that occurred April 1st</a> on this blog. To quickly recap: as of April 2014 I became CEO, Sole Proprietor and Sanitary Manager of <em>Caelum</em>, a software product company that produces <a href="http://zedapp.org" target="_blank">Zed</a>. The business model that I cooked up is experimental: everything is open source, but I ask users to pay without getting anything back other than the fact that they contribute to the cause of Zed development. It’s been 2.5 months, time for a small update.</p>
<p>So, how is it going? Over the past 2.5 months I’ve received around $1,000 in total through <a href="http://gittip.com/zefhemel" target="_blank">Gittip</a> and one-time donations. $1,000 seems like quite some money for an open source project, and it is — but not if it’s supposed to be your main income. Sure, I live in Poland and the cost of living here is low. But not _that_ low.</p>
<p>Now there are many possible reasons why I’m not a millionaire yet. From the top of my head:</p>
<p>1. People don’t want to pay for something they can just as easily (actually, more easily) get for free (that is: Zed).<br>2. Not enough people use Zed to make it profitable (it will always be a low percentage of users that actually pay).<br>3. People don’t like Zed enough to pay for it.<br>4. Dude, you started this 2.5 months ago, don’t expect miracles.</p>
<p>Reason 1 and 4 are my biggest worries, the others are easier (but not easy) to fix.</p>
<p>I suspect most people expect something tangible in return when they pay money for something. More specifically: they expect to get something _more_ than when they’re _not_ paying anything. Even more specific, many people probably expect that if they pay something that _they_ get something more than everybody else who’s _not_ paying — _they’re_ the one that should profit from their purchase, not others — this isn’t _charity_… is it?</p>
<p>During a family vacation in the Swiss mountains we found a small cabin with a table full of food: sausage, bread, cheeses. There was a note with the price list and a box to put the money in. There was nobody around to check if you paid for what you used. If you wanted you could take all the food for free. But of course, we didn’t — we paid the full amount, perhaps a little more because we wanted to support such trusting people.</p>
<p>Zed’s business model is similar to this. Will I hunt you down if you don’t pay? I won’t — unless I pivot my business to the software license hit man realm. However, value of software is perceived differently than bread. For bread you need ingredients that need to be grown, processed, baked etc. For every bread you produce, you have to repeat this process, whereas the same is not true for software. You just have to write software once and virtually unlimited people can use it at practically no extra cost. If you eat a bread and don’t pay for it, nobody else will pay for that bread. If you use Zed and don’t pay for it, well, nothing lost — it didn’t cost anything to produce that once copy anyway. Right?</p>
<p>Which brings me to reason 4: it’s only been 2.5 months. That’s not a long time. Maybe. However, I don’t have infinite money nor a multi-million VC investment that can keep me going for years. I promised my wife I’d be trying this for 6 months and if it wouldn’t work, I’d go back to a “regular job.” That means we’re almost mid way. At this rate, things aren’t looking great. I never specified exactly what I expect my income to be, but about 10x what the project is bringing in today would be desirable — and even that’s not half of what I made before.</p>
<p>So yeah. It’s tough. It’s not just tough to try out a new business model, it’s also tough to do it by yourself, without a co-founder or employees. I have to make all my own decisions. Nobody calls me on silly idea. I once read that the start-up incubator [Y Combinator](http://ycombinator.com) does not or rarely accepts single-founder companies and I now understand why: making the right choices without another person just as involved as you is _tough_ — dare I say close to impossible — for a person without a track record in this area.</p>
<p>For instance, here’s an elemental question: what should I do today? Some options:</p>
<p>1. Build headliner features. Features that make great headlines on TechCruch, the Next Web and so on, potentially attracting a slew of new users (and with that paying users).<br>2. Fix bugs.<br>3. Write user documentation.<br>4. Write code documentation.<br>5. Make small iterative tweaks.<br>6. Refactor ugly code.<br>7. Write blog posts with Zed-related topics.<br>8. Build alternative for-pay versions/features trying to increase revenue.</p>
<p>In a team of people you’d assign people to one or two of these tasks. You can emulate the same with a single person, but very quickly you start to get spread really thin and the user-visible progress is super small. And the overhead of constantly switching context between these is huge.</p>
<p>So yeah. This isn’t a walk in the park. But life isn’t supposed to be.</p>
<p>Or so I hear.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>220</wp:post_id>
		<wp:post_date>2014-06-16 14:26:07</wp:post_date>
		<wp:post_date_gmt>2014-06-16 12:26:07</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>on-my-own</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="personal"><![CDATA[Personal]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Zed Update</title>
		<link>http://zef.me/2013/09/02/zed-update/</link>
		<pubDate>Mon, 02 Sep 2013 15:20:43 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2013/09/02/zed-update/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>It’s been quiet around the <a href="http://zef.me/tag/zed" target="_blank">Zed editor project</a> for a while, but over the past days I’ve put some time into it again. As it turns out, I ended using it less and less over time. The reason is simple: it was too much hassle to get started editing files. The procedure always consisted of cloning the Zed repository on the remote server where I wanted to edit files, cd ing into the right directory and then firing up a Python script to start the WebFS server. Then figuring out if the server want to edit files on is directly accessible from the Zed editor over HTTP or I have to open up some ports on a firewall. Bleh. Too much hassle.</p>
<p>Last week I figured out a way to improve this situation while reading a <a href="http://zeromq.org/" target="_blank">ZeroMQ</a> book. Even though I did not end up using ZeroMQ (which is <em>amazing</em> by the way) to keep dependencies low, it did lead me onto the idea of a proxy solution. But before I get into the technical nitty gritty, let’s have a look at what the flow looks like now.</p>
<p>Back to instructions on how to use this.</p>
<p>As Google has now enabled publishing packaged apps in the Chrome Web Store, you can now install Zed from <a href="https://chrome.google.com/webstore/detail/zed/pfmjnmeipppmcebplngmhfkleiinphhp" target="_blank">the Chrome Web Store</a>. Right now you launch it from the New tab screen, but in future versions of Chrome (try Chrome Canary for a preview) these applications will have a proper application icon in the dock (on Mac).</p>
<p>After you’ve installed the application and launched it, a text entry box will appear asking for a URL. So, what URL should you enter in here? That brings us to the second part of the puzzle: the Zed client. On the machine where you want to edit files, cd into the directory to edit. Then, to download the Zed client, simply run the following command:</p>
<pre>curl <a href="http://get.zedapp.org" target="_blank">http://get.zedapp.org</a> | sh</pre>
<p>This will download a zed client binary for your platform (Linux, FreeBSD and Mac) into the current directory. A <a href="http://get.zedapp.org/caelum.exe" target="_blank">Windows binary</a> is also available. Ideally, you run or copy this binary into a directory in your PATH, but you don’t have to.</p>
<p>Then, you run the client:</p>
<pre>$ ./zed<br>Editing /somepath/to/somedir<br>In the Zed Chrome application copy and paste following URL to edit:<br><br><a href="http://server.zedapp.org:7337/fs/a7a437ba10f84dc08256ff20e771c9de" target="_blank">http://server.zedapp.org:7337/fs/a7a437ba10f84dc08256ff20e771c9de</a><br><br>Press Ctrl-c to quit.</pre>
<p>And there it is: the URL we need to drop into the Zed project URL box. Copy and paste the URL into the input box and press Enter. If all went well, a Zed editor will now open exposing the files in the directory you ran the ./zed command from. Use Cmd-E/Ctrl-E or Alt-T to explore files, to open them, and edit them as you like. When you’re done, close the Zed editor and Ctrl-C in the console where the Zed client is running.</p>
<p>That’s it.</p>
<p>So, how does this work? Let’s start with some terminology:</p>
<ul>
<li>Zed app: the Chrome application</li>
<li>Zed client: the program we just ran from the command line</li>
<li>Zed server: a server program (same program we just ran, but with the — server flag) that <em>proxies</em> requests from the app to the client</li>
</ul>
<p>The idea is that the Zed server is the stable part of this infrastructure. You can run your own, or you can use the default one I’m running on <a href="http://server.zedapp.org:7337" target="_blank">http://server.zedapp.org:7337</a> (as you can see in the URL the Zed client returned). The Zed server is the stable part of this infrastructure in the sense that it’s always running, and it’s directly accessible from the Internet (or at least: from wherever you run the Zed app and client).</p>
<pre>Chrome app &lt;-&gt; Zed server &lt;-&gt; Zed client(s)</pre>
<p>Clients can run anywhere and connect to a server, assigning themselves a GUID. Once the URL (containing both the Zed server and the client’s GUID) is entered into the app, the server will proxy any HTTP (WebFS) request received from the app to associated client, and proxy back the result as well. Therefore clients don’t need to run on public IPs nor do they need public ports open, as long as an outbound connection can be made to the Zed server it works.</p>
<p>To run a Zed server, you can use:</p>
<pre>./zed --server</pre>
<p>And the launch the client with a -u ws://ip:port flag to connect to your new Zed server instead of the default.</p>
<p>There’s also a <a href="http://zedapp.org/blog/2013/09/04/local-mode/" target="_blank">local mode for editing local files more easily</a>.</p>
<p>The Zed client/server program is written in <a href="http://golang.org" target="_blank">Go</a>. The reason to use Go are twofold:</p>
<ol>
<li>The Go compiler produces a statically linked binary without any dependencies making deployment easy (which is why it can be installed using the single curl | sh command I gave earlier).</li>
<li>I wanted to use Go for something.</li>
</ol>
<p>Currently this new system works and performs quite well. There may still be a bit of a memory/goroutine leak in the Zed server, which I have to look into. For the rest there’s still a <a href="https://github.com/zedapp/zed/blob/master/TODO" target="_blank">lot of hacking and improving of the app, client and server</a> to be done.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>226</wp:post_id>
		<wp:post_date>2013-09-02 17:20:43</wp:post_date>
		<wp:post_date_gmt>2013-09-02 15:20:43</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>zed-update</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="caelum"><![CDATA[Caelum]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="zed"><![CDATA[Zed]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>The Wolfram Language is here</title>
		<link>http://zef.me/2014/06/25/the-wolfram-language-is-here/</link>
		<pubDate>Wed, 25 Jun 2014 11:42:08 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2014/06/25/the-wolfram-language-is-here/</guid>
		<description></description>
		<content:encoded><![CDATA[

<figure><img src="https://cdn-images-1.medium.com/fit/t/NaN/NaN/gradv/29/81/55/1*pD_4sKodOqK50ruukgHBcQ.png"></figure>
<br>

<h4>Now what?</h4>


<p>Wolfram just <a href="http://blog.wolfram.com/2014/06/23/wolfram-programming-cloud-is-live/" target="_blank">launched Wolfram Cloud</a>, a development and deployment environment for building applications using the <em>Wolfram Language</em>. The <a href="http://www.wolfram.com/broadcast/video.php?channel=362&amp;video=1643" target="_blank">Wolfram Language introduction video</a> (that I recommend you watch before reading on) went viral in programmer circles — people got really excited about this.</p>
<p>As a programmer watching the demo video of the Wolfram Language you are immediately overwhelmed with the sense that this is the<em> future</em>. <em>This</em> is the programming language we’ve all been waiting for. One language to rule them all. <em>Finally</em>. Mission accomplished.</p>
<p>Now that the Wolfram Cloud is live and <a href="https://programming.wolframcloud.com/app/" target="_blank">you can actually play with it</a> (for free in limited form) — I can confirm, indeed, it’s very impressive. Following the tutorials and examples you combine all kinds of data sources with each other easily, and do super complicated computations quickly and present them in impressive ways.</p>
<p>But then you think step back and think…</p>
<blockquote>How can I use this in my daily work or life?</blockquote>
<p>And then you draw a blank.</p>
<p>I had a similar situation with <a href="http://www.wolframalpha.com/" target="_blank">Wolfram Alpha</a>, Wolfram’s “search engine” launched a few years ago. It’s an impressive service that allows you to search impressive quantities of data with natural language. But after asking what the temperature was of your day of birth in your birthplace (22C for me, if you were wondering) divided by the number of earthquakes in Sudan between 1950 and 1990 — you’re kind of done. What else do you want to know?</p>
<p>The Wolfram Language has the same problem. I can imagine you’re a data scientist or mathematician and you have all kinds of uses for this. But I’m not. So after trying a few examples, I’m done playing.</p>
<p>As I’m a web developer, possibly I could use the Wolfram language to build a cool web app. It seems to have tools to build interactive UIs. Turning formulas into web services is built-in and also easy to do. But is that a good idea? The Wolfram Language — beside being cool, and, well, “the future of programming” — is also the <em>world’s most proprietary language</em>.</p>
<blockquote>The Wolfram Language is the world’s most proprietary language</blockquote>
<p>You can deploy services to the Wolfram Cloud for free in limited capacity (you get some free computation time), but beyond that you have to start coughing up dough. You can host your own Wolfram Cloud, but that isn’t exactly free either. Once you’re committed to building stuff in the Wolfram Language you’re completely locked in. There’s no way out. No migration path, no open source implementation — and there will likely never be. The Wolfram Language isn’t something you build an alternative compiler for, because really, the <em>language</em> is just a relatively tiny aspect — the real investment is the gajillion petabyte of data that Wolfram has gathered over the past decades — and they’re not going to upload that to Github.</p>
<p>Nevertheless, there’s a lot of inspiration that can be drawn from the Wolfram Language and its development environment. Of particular interest to me is its “Notebook” style of development, which is really a beefed up REPL.</p>
<p>Many languages offer a REPL (<strong>R</strong>ead-<strong>E</strong>val-<strong>P</strong>rint <strong>L</strong>oop) that allows you to quickly test out a few lines of code. However, in practice “real” applications are developed in a text editor editing text files, not inside a REPL. In the Wolfram Language, your Notebook (REPL session) <em>is</em> your application. After you define a function, it persists between sessions. You can do everything from a notebook, even deploy services to the Wolfram Cloud.</p>
<figure class="wp-caption">

<img data-width="1304" data-height="768" src="https://cdn-images-1.medium.com/max/800/1*kdJIWzAbGrJpwRihkkmw4w.png">

<figcaption class="wp-caption-text">A snippet of a notebook (REPL) session where the “langflag” function (defined at the top) is tested and eventually deployed to the cloud</figcaption></figure><p>I’m fascinated by this idea — the idea of making whatever you do in the REPL persistent, and the idea of deploying your application from there as well with a single function call — talk about an <em>Integrated</em> Development Environment.</p>
<p>However, if a REPL is going to be your development environment then you need a UI that’s more sophisticated than your average terminal-based Python, Ruby or Clojure REPL.</p>
<p>In a sense, the <a href="https://developer.logicblox.com/content/docs4/tutorial/repl/section/split.html" target="_blank">LogicBlox REPL</a> that we built is one step in this direction. Rather than giving you a “dumb” input line you enter commands in an advanced <a href="http://ace.c9.io/" target="_blank">ACE-based</a> editor — which means you get features like syntax highlighting, code completion and potentially errors and warnings while you type. While the effects of commands you enter don’t persist between sessions (because we create an empty workspace every time) you can download your work, and upload it later allowing you to continue. However, like with most software development platforms — its purpose is primarily to play and test things, not build real apps.</p>
<p>Apple has recently also adopted the idea of a REPL with <a href="https://developer.apple.com/swift/" target="_blank">Playgrounds for its new Swift language</a>. However, it, too, is like most REPLs in use today: a tool for playing and exploration, not development. That’s a valuable thing, don’t get me wrong, but I think the idea of using the REPL (or Notebook) as a your main development environment for applications is something worth exploring. Something worth exploring <em>outside</em> of an extremely proprietary environment.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>260</wp:post_id>
		<wp:post_date>2014-06-25 13:42:08</wp:post_date>
		<wp:post_date_gmt>2014-06-25 11:42:08</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-wolfram-language-is-here</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Opening the LogicBlox Gates</title>
		<link>http://zef.me/2013/11/05/opening-the-logicblox-gates/</link>
		<pubDate>Tue, 05 Nov 2013 11:16:26 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2013/11/05/opening-the-logicblox-gates/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>As you may remember, I <a href="http://zef.me/4659/declare-everything" target="_blank">changed jobs at the beginning of the year</a> and now work at LogicBlox, a very exciting company that aims to change the way software is developed by making it much more declarative using the LogicBlox smart database. Until last week, only customers and academic collaborators could have a peek to see what LogicBlox is all about, but, finally, this is now changing step by step. I’m personally extremely happy about this, because it’s just not as much fun to work on something that you can’t share with the outside world (at least for me).</p>
<p>LogicBlox is programmed using LogiQL, which is a variant of the <a href="http://zef.me/tag/datalog" target="_blank">Datalog</a> language. While we position LogicBlox as a database, it’s a smart one, it can do much more than your regular old data-dump data store. For instance, you can define web services inside the database, it has machine learning and many other fancy features. Currently we’re also working on the front-end of the story, allowing data to easily be presented and analyzed using pivot tables.</p>
<p>Stage #1 of our “coming out”, was <a href="http://splashcon.org/2013/program/keynotes/821-tba" target="_blank">announced</a> at the SPLASH conference last week by Molham Aref. It consists of a few things:</p>
<ol>
<li>A new corporate website: <a href="http://www.logicblox.com/" target="_blank">LogicBlox.com</a>
</li>
<li>Opening up of our developer site: <a href="http://developer.logicblox.com/" target="_blank">LogicBlox Developer</a> with all of its manual and developer-focussed information.</li>
<li>Moving our private Q&amp;A site to <a href="http://stackoverflow.com/questions/tagged/logiql+or+logicblox?sort=newest&amp;pageSize=15" target="_blank">StackOverflow</a>.</li>
<li>The availability of the <a href="https://repl.logicblox.com/" target="_blank">LogicBlox playground (REPL)</a>, developed by our friends at <a href="http://c9.io" target="_blank">Cloud9 IDE</a>.</li>
<li>A <a href="https://developer.logicblox.com/content/docs4/tutorial/repl/section/split.html" target="_blank">“LogiQL in 30 minutes”</a> tutorial (written by me).</li>
</ol>
<p>While the general public can still not download the LogicBlox software itself, we’re working on ways to let people play with it more. The playground is a first step, but there’s only so much you can do through a REPL.</p>
<p>Therefore, <a href="https://developer.logicblox.com/ide/" target="_blank">you can already sign up for stage #2</a>: a cloud-based LogicBlox IDE. This will allow you, without having to install anything locally, to develop and deploy LogicBlox-based applications. The first version will be basic, but over time we should get to something pretty nice.</p>
<p>Here’s what was demoed at SPLASH last week (click to enlarge):</p>
<p>As you can probably tell from the top right of the screenshot, this IDE is based on <a href="http://c9.io" target="_blank">Cloud9 IDE</a>, which means it’s not just a great IDE for LogicBlox development, but also for the front-end aspect of your application, by offering a top-notch JavaScript development environment.</p>
<p>Interested in trying it out? <a href="https://developer.logicblox.com/ide/" target="_blank">Sign up for our beta now</a>. It’s free (of course)! And we’ll start letting people in gradually soon.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>267</wp:post_id>
		<wp:post_date>2013-11-05 12:16:26</wp:post_date>
		<wp:post_date_gmt>2013-11-05 11:16:26</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>opening-the-logicblox-gates</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="logicblox"><![CDATA[Logicblox]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Callback-Free Harmonious Node.js</title>
		<link>http://zef.me/2013/12/11/callback-free-harmonious-node-js/</link>
		<pubDate>Wed, 11 Dec 2013 13:25:45 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2013/12/11/callback-free-harmonious-node-js/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>For a long time, JavaScript has been my go-to language. Of course, in the browser, but on the <a href="http://nodejs.org" target="_blank">server too</a>. When I started with JavaScript I spent a lot of time finding ways to reduce “callback hell”, but eventually I just gave in: code generators and systems that require a patched JavaScript engine are just not the way forward — they’re not “native” JavaScript solutions.</p>
<p>So, for years I wrote callbacks like everybody else until I they became part of my muscle memory. They’re manageable, but you have to do a little more work.</p>
<p>A few weeks ago I did some work with Python, after a long Python break, and: Wow — Python code is succinct. You can actually do stuff like this:</p>
<pre>output = subprocess.checked_call(["ls", "-l"])</pre>
<p>and `output` would contain the output of running `ls -l`. If it would fail, it would _raise an exception_. Insanity! I had gotten so used to the node.js way that it seemed it was the only way to do it:</p>
<pre>subprocess.exec("ls -l", function(err, output) {<br>  if(err) {<br>    return callback(err);<br>  }<br>  …<br>});</pre>
<p>Believe it or not, in Python you can perform IO inside of a _regular for-loop_, something that is not generally recommended in JavaScript. Did I suffer from JavaScript callback <a href="http://en.wikipedia.org/wiki/Stockholm_syndrome" target="_blank">Stockholm Syndrome</a> all this time?</p>
<p>Then, after seeing some reference to the upcoming EcmaScript 6 (next version of JavaScript) generator feature, I found <a href="http://howtonode.org/generators-vs-fibers" target="_blank">Tim’s post about generators vs fibers</a>. Now, I don’t find fibers all that interesting, but the generators captured my interest, especially since you can enable support for them in node.js 0.11.x already using the ` — harmony` flag. Then I found TJ Holowaychuk <a href="https://github.com/visionmedia/co" target="_blank">co module</a> and I knew:</p>
<blockquote>There is a callback-free node.js future in sight.</blockquote>
<p>Perhaps not fully callback-free — and that’s perfectly fine — but with significantly fewer callback functions to write.</p>
<p>For dramatic effect, let’s start with some async JavaScript code “old style” and then rewrite it to use `co` and generators. The code does three things:</p>
<p>1. Read a file to fetch a number of URLs<br>2. Fetch the contents of the URLs<br>3. Concatenate all contents together (for some unknown reason)</p>
<p>Here’s what my first take at it usually looks like:</p>
<pre>function readUrlsFetchConcat(path, callback) {<br>   fs.readFile(path, “utf8”, function(err, contents) {<br>      if (err) {<br>        return callback(err);<br>      }<br>      var urls = contents.trim().split(“n”);<br>      var conc = “”;<br>      async.forEach(urls, function(url, next) {<br>        request(url, function(err, resp, body) {<br>           if (err) {<br>             return next(err);<br>           }<br>           conc += body;<br>           next();<br>        });<br>      }, function() {<br>         // Done!<br>         callback(null, conc);<br>     });<br>   });<br> } </pre>
<p>Afterwards I sometimes refactor it a bit more into separate functions with quasi-descriptive names:</p>
<pre><br> function readUrlsFetchConcat(path, callback) {<br>   var conc = “”;<br><br>   function fetchUrlConcat(err, next) {<br>     request(url, function(err, resp, body) {<br>        if (err) {<br>          return next(err);<br>        }<br>        conc += body;<br>        next();<br>     });<br> }<br><br> function fetchUrlsConcat(err, contents) {<br>    if (err) {<br>       return callback(err);<br>    }<br>    var urls = contents.trim().split(“n”);<br>    async.forEach(urls, fetchUrlConcat, function() {<br>       // Done!<br>       callback(null, conc);<br>     });<br> }<br><br> fs.readFile(path, “utf8”, fetchUrlsConcat);<br> }</pre>
<p>A cool thing is that you can make this code fetch the URLs in parallel by using a parallel implementation of `async.forEach` very easily, without having to do complicated threading stuff.</p>
<p>Alright, now let’s have a look how this code could be written using the `co`, `co-fs` and `co-request` modules — I’ll add the `require` lines to make this clear:</p>
<pre>var fs = require(‘co-fs’);<br>var request = require(‘co-request’);<br><br>function* readUrlsFetchConcat(path) {<br>  var contents = yield fs.readFile(path, “utf8”);<br>  var urls = contents.trim().split(“n”);<br>  var conc = “”;<br>  for(var i = 0; i &lt; urls.length; i++) {<br>     conc += yield request(url);<br>  }<br>  return conc;<br>}</pre>
<p>Pretty short and sweet right? And it will be executed “just as asynchronously” as the previous code. The magic is in the `function*` as opposed to just `function` and use of the new `yield` expression.</p>
<p>To execute this function, we have to run it inside of a `co` context:</p>
<pre>co(function*() {<br> console.log(yield readUrlsFetchConcat(“urls.txt”));<br>})();</pre>
<p>To make the URL fetching happen in parallel rather than sequential we can rewrite our function to:</p>
<pre>function* readUrlsFetchConcat(path) {<br>  var contents = yield fs.readFile(path, “utf8”);<br>  var urls = contents.trim().split(“n”);<br>  var yieldables = [];<br>  for(var i = 0; i &lt; urls.length; i++) {<br>    yieldables.push(request(url));<br>  }<br>  var allContents = yield yieldables;<br>  return allContents.join(“”);<br>}</pre>
<p>The difference here is where the `yield`ing happens: rather than `yield`ing each request call individually, they’re now all saved up in an array and then the array is `yield`ed in one go. This will execute all requests in parallel and return the responses as elements of a new array. In fact, you can write this slightly more concise if we’d want to:</p>
<pre>function* readUrlsFetchConcat(path) {<br>  var contents = yield fs.readFile(path, “utf8”);<br>  var urls = contents.trim().split(“n”);<br>  var allContents = yield urls.map(request);<br>  return allContents.join(“”);<br>}</pre>
<h3>Why it works</h3>
<p>I won’t get into the nitty gritty details of how [co is implemented, although it’s not all that complicated](https://github.com/visionmedia/co/blob/master/index.js), but I will try to give you some intuition for how this works.</p>
<p>The JavaScript feature that this is all based on is _generator functions_, a new feature in the upcoming EcmaScript 6. JavaScript generator functions are very similar to generator functions in Python. Here’s an example that shows how they operate:</p>
<pre>function* interview() {<br> var answer;<br> console.log(“Going to ask question #1”);<br> answer = yield “What’s your name?”;<br> console.log(“Got answer:”, answer);<br> console.log(“Going to ask question #2”);<br> answer = yield “How old are you?”;<br> console.log(“Age”, answer);<br> return “Thanks!”;<br> }</pre>
<pre>var interviewer = interview();<br> console.log(“Starting the interview!”);<br> var result = interviewer.next();<br> console.log(“Question 1:”, result.value, “done?”, result.done);<br> result = interviewer.next(“Zef”);<br> console.log(“Question 2:”, result.value, “done?”, result.done);<br> var result = interviewer.next(30);<br> console.log(“Final note:”, result.value, “done?”, result.done);</pre>
<p>When run in a Harmony (the code name for ES6) enabled JavaScript engine (like when you run node 0.11.x with the ` — harmony` flag), this outputs:</p>
<p>Starting the interview!<br> Going to ask question #1<br> Question 1: What’s your name? done? false<br> Got answer: Zef<br> Going to ask question #2<br> Question 2: How old are you? done? false<br> Age 30<br> Final note: Thanks! done? true</p>
<p>Execution of the `interview` generator function suspends immediately after invocation. To start it you call the `next()` method on the object it returns. The function will then run as usual until it hits a `yield` statement. Once it hits `yield` it will suspend execution again and pass the value that’s yielded to the caller of `next()`, which then resumes execution potentially calling `next()` again with a return value for the `yield`, and so on and so forth until the function returns. Using generators you can implement a nice co-operative play between the generator and its consumer that enables some powerful things.</p>
<p>There are various use cases for generator functions. Some will bring up [fibonacci as an appealing example](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators), but where it gets interesting to me is using it in conjunction with asynchronous execution.</p>
<p>If, hypothetically, we could write a function that drives a generator that once in a while yields a function value that needs to be executed asynchronously, and be resumed with `.next()` when the result becomes available, we’d be almost there. As it turns out, this exactly what the `co` module does and a bit more.</p>
<p>But what value should you yield for `co` to be able to perform this IO for you? You can’t really use standard node.js async APIs because they don’t return a useful value. `co` supports two options:</p>
<p>1. [Promises](http://howtonode.org/promises)<br>2. Thunks</p>
<p>A “thunk” is basically a partially evaluated function with just the callback argument left over to be filled in. For instance, here’s how you could wrap node.js’ `fs.readFile` method to have a thunk API:</p>
<pre>function readFile(path) {<br> return function(callback) {<br> fs.readFile(path, callback);<br> };<br> }</pre>
<p>In principle, this changes how you call this function only slightly. Instead of:</p>
<pre>readFile(path, function(err, result) { … });</pre>
<p>You now call:</p>
<pre>readFile(path)(function(err, result) { … });</pre>
<p>However, to `co` this makes a world of difference, because this:</p>
<pre>var contents = yield readFile(path);</pre>
<p>will now yield a function that it can execute asynchronously, and once it receives its result, it can call `.next(result)` to resume execution, or `.throw(err)` if an error occurred (resulting in an exception being thrown inside of the generator that you can catch with try-catch).</p>
<p>So, how do you thunkify node.js APIs? The [co wiki](https://github.com/visionmedia/co/wiki) lists a bunch of modules that are “co ready”, these include wrapper modules like co-express, co-request, co-fs, but also libraries that support both regular callbacks and thunks. In fact, what I’ve been doing since knowing about co, is make my APIs support both calling conventions:</p>
<pre>function asyncFn(arg1, arg2, callback) {<br> if(typeof callback !== “function”) {<br> return function(callback) {<br> asyncFn(arg1, arg2, callback);<br> };<br> }<br> // proceed as usual<br> }</pre>
<p>or, if you’re using [underscore](http://underscorejs.org/) or [lodash](http://lodash.com/) like me:</p>
<pre>function asyncFn(arg1, arg2, callback) {<br> if(!_.isFunction(callback)) {<br> return _.partial(asyncFn, arg1, arg2);<br> }<br> // proceed as usual<br> }</pre>
<p>Now your async API can be used in the traditional callback style, or using co. There’s also the [thunkify](https://github.com/visionmedia/node-thunkify) module to “thunkify” any existing traditional callback-style APIs.</p>
<p>While you can wait until EcmaScript 6 is done to use this, you don’t have to. Generators are available today in node &gt;= 0.11.3 using the ` — harmony` flag. It makes many types of node.js code so much nicer to write and interoperates fairly well with existing asynchronous code. Performance overhead of using generators is negligible. So try it out!</p>
<p>And if you’re authoring npm modules: consider supporting the thunk-based calling convention as well as classic callbacks, it isn’t that hard, and the co-users of the future will love you for it.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>269</wp:post_id>
		<wp:post_date>2013-12-11 14:25:45</wp:post_date>
		<wp:post_date_gmt>2013-12-11 13:25:45</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>callback-free-harmonious-node-js</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="javascript"><![CDATA[JavaScript]]></category>
		<category domain="post_tag" nicename="programming"><![CDATA[Programming]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>A Criticism of the World’s First Website</title>
		<link>http://zef.me/2013/04/30/a-criticism-of-the-worlds-first-website/</link>
		<pubDate>Tue, 30 Apr 2013 14:29:47 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2013/04/30/a-criticism-of-the-worlds-first-website/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>The Verge <a href="http://www.theverge.com/2013/4/30/4285164/first-ever-website-brought-back-to-life" target="_blank">reports that the first ever website has been brought back to life at its original URL</a>:</p>
<blockquote>April 30th may seem as ordinary as any other date, but in 1993 it marked an important milestone in the development of global communications: it was on that day that the World Wide Web entered the public domain. CERN, the same research group that’s presently busy smashing protons together using the Large Hadron Collider, made World Wide Web technologies available to everyone on a royalty-free basis. Without that enlightened decision, backed by web inventor Sir Tim Berners-Lee, we might never have enjoyed the glories of GIFs, ubiquitous social networking, and instant music streaming.</blockquote>
<blockquote>In a celebration of the web’s proud history, the CERN team has started up a new project to revive the very first website at <a href="http://info.cern.ch/hypertext/WWW/TheProject.html" target="_blank">its original URL</a>.</blockquote>
<p>So, let’s <a href="http://info.cern.ch/hypertext/WWW/TheProject.html" target="_blank">have a looksie</a>. It’s pretty spartan, yes, but that’s not the thing that bothers me. This is what bothers <em>me</em>:</p>
<p>What’s up with the hyperlinking of that space there? Apparently Timothy wasn’t much of a perfectionist. But it gets worse:</p>
<p>Spaces before the comma, spaces around the comma. Sure, let’s just insert random spaces and be super inconsistent. Perhaps this is due to the way the HTML is layed out?</p>
<p>Let’s have a look at the HTML:</p>
<p>What happened here? Is this generated by FrontPage ’93, or what? Name attributes without quotes, weirdly wrapped lines — wrapped in the middle of tags. And the comma-space party cannot be blamed on the use of HTML tags either, look at line 18. There’s no reason the spaces had to be there around the comma.</p>
<p>In many ways I’m not a perfectionist, but this kind of stuff can drive me up the wall…</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>379</wp:post_id>
		<wp:post_date>2013-04-30 16:29:47</wp:post_date>
		<wp:post_date_gmt>2013-04-30 14:29:47</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>a-criticism-of-the-worlds-first-website</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="because-i-care"><![CDATA[Because I Care]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Hello Again, Linux</title>
		<link>http://zef.me/2014/09/24/hello-again-linux/</link>
		<pubDate>Wed, 24 Sep 2014 09:03:47 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2014/09/24/hello-again-linux/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>It’s about 8 years ago that I decided to buy my first Mac. At the time I was using PCs with Windows and Linux. My first Mac was an iBook G4, a 1Ghz PowerPC. I loved it. Everything was so fresh and new. Since then I’ve always used Mac laptops.</p>
<p>October 1st I’m starting a new job at a Python company called <a href="http://www.stxnext.com/" target="_blank">STX Next</a> here in Poznań. For the past half a year, I’ve been working on <a href="http://zedapp.org/" target="_blank">Zed</a>close to full-time. I enjoyed it, but I decided I wanted a change: I wanted to be surrounded by colleagues rather than sitting in an office by myself with my nearest colleague 1000km away. Over the past three years I never experienced that longer than a few weeks — I always worked remote. That’s going to change now.</p>
<p>STX Next is not a Mac company. They do a bit of iOS development, but not much. Everybody’s using Linux, essentially. I decided I wanted to fit in, and was ready for a change anyway, so decided to buy a PC laptop. I forgot what it was like to decide on a PC to buy. The amount of choice is insane, and the trade-offs you have to make are very tricky. This one has a faster processor, that one has more memory, that one has a better screen, and the other one has a better trackpad. Also, will everything work under Linux? In the Apple world things are simple. If you decide on a laptop you have roughly two choices with some minor configuration possible. In the PC laptop world… you have a dozen brands each with seemingly dozens of models with unpronounceable names.</p>
<p>After a lot of research I decided on a Lenovo Thinkpad t440s (catchy name, huh?). Tada:</p>
<figure>

<img data-width="537" data-height="326" src="https://cdn-images-1.medium.com/max/800/0*oE3KdQsZRkPz_VT7.jpg">
</figure><p>I’ve been using it full-time for the past two weeks, running Ubuntu GNOME 14.04 and I’m pretty happy with it. A lot of stuff I expected to cause trouble just worked. Hardware-wise basically every part of my Thinkpad is supported, although the fingerprint scanner software crashes a lot. When I plug in my iPhone it is automatically detected and I can access music and import pictures.</p>
<p>Over the past years I haven’t used Linux much for anything else other than servers. I hadn’t really kept up with how desktop Linux evolved at all. Similar to the hardware story, there’s an insane amount of choice in the Linux world: there are many distribution, and within a Linux distribution you have to choose a desktop environment to use. After using Ubuntu’s default “Unity” for a while, I switched to GNOME 3, and a week and a half in — I’m pretty happy.</p>
<p>My theory, as a long-time smug Mac user was that Linux had always been about copying and design-by-comittee (or design-by-community), which seemed inherent to the open source development model with lots of parties involved. Implying: much in the Linux space is a giant compromise with little original thought, especially on the desktop. And while in many ways that’s true, there are some exceptions. GNOME 3 is surprisingly daring and different. It borrows many elements from existing environments (including OS X), but it feels pretty different.</p>
<p>With some tweaking — but not that much — here’s what I’m looking at now:</p>
<p>(Indeed, winter is coming.)</p>
<p>What I like is that the amount of space used by the environment itself is pretty minimal. By default it’s just the bar along the top, I enabled the window list at the bottom myself (although I’m still not sure I’ll keep it). So how do you launch applications? You hit the Windows key (yep — I got one of those now). When you do that, this happens:</p>
<p>This is a mix of OS X’s Expose, the dock (on the left) as well as a quick launcher. To launch an application, simply start typing its name. Want to activate another open window? Click it. Launch one of your favorite applications? Click it on the dock. All behind the Windows key. Pretty good idea, IMHO. Did I mention that you can set Alt-Tab to switch between all windows, not just applications? Finally.</p>
<p>Desktop application-wise Linux doesn’t compare very favorably with Mac and Windows. The choice is much more limited, desktop apps are often (but not always) of poor quality, more difficult to use and ugly. Big vendor applications typically lag behind their Windows and Mac counterparts (e.g. Skype and Spotify). My solution is to use web and Chrome apps for mostly everything.</p>
<ul>
<li>Code editor — <a href="http://zedapp.org/" target="_blank">Zed</a> (Chrome App version) — duh</li>
<li>Email — <a href="http://gmail.com/" target="_blank">Gmail</a>
</li>
<li>Calendar — <a href="https://www.sunrise.am/" target="_blank">Sunrise</a> (Chrome App)</li>
<li>IRC client — <a href="http://www.irccloud.com/" target="_blank">IRC Cloud</a>
</li>
<li>Twitter — <a href="http://www.twitter.com/" target="_blank">twitter.com</a> (not super with it, though)</li>
<li>Todo manager — <a href="https://www.wunderlist.com/" target="_blank">Wunderlist</a> (web app).</li>
</ul>
<p>Is this ideal? No, but it’s workable. Also, it means that a move to ChromeOS wouldn’t be a giant leap. Although this may appear risky — as a file system I opted for <a href="http://en.wikipedia.org/wiki/Btrfs" target="_blank">btrfs</a>. Btrfs is Linux’ next-generation file system, on par in many ways <a href="http://zef.me/6023/who-needs-git-when-you-got-zfs" target="_blank">with ZFS</a>. The big advantage I get from it is an efficient way to do back-ups. I have an external 2TB hard drive also with btrfs, and use <a href="http://marc.merlins.org/perso/btrfs/post_2014-03-22_Btrfs-Tips_-Doing-Fast-Incremental-Backups-With-Btrfs-Send-and-Receive.html" target="_blank">a simple bash script</a> running as a daily cronjob, that takes snapshots of the filesystem, and only transfers the diffs to my backup drive. This is <em>way</em> more efficient than using backup software that scans your whole drive for changes and transfers changed fles. Of course there’s the risk of using btrfs on two places, I’m thinking how to do offsite backups safely too.</p>
<p>So far so good.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>390</wp:post_id>
		<wp:post_date>2014-09-24 11:03:47</wp:post_date>
		<wp:post_date_gmt>2014-09-24 09:03:47</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>hello-again-linux</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="linux"><![CDATA[Linux]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>What are you going to do about it?</title>
		<link>http://zef.me/2015/10/09/what-are-you-going-to-do-about-it/</link>
		<pubDate>Fri, 09 Oct 2015 19:59:15 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2015/10/09/what-are-you-going-to-do-about-it/</guid>
		<description></description>
		<content:encoded><![CDATA[

<figure>

<img data-width="1024" data-height="768" src="https://cdn-images-1.medium.com/max/800/1*0eU7KN_y_sRxH5s4DX_TLg.jpeg">
</figure><p>About three years ago my boss asked me a question that changed the way I approach problems today. In a sense it’s super obvious, but somehow we don’t ask it often enough.</p>
<p>It was about three years ago. I just moved up to the VP of Engineering position at <a href="http://c9.io/" target="_blank">Cloud9 IDE</a>, and we were having a rough time with keeping the site running. Sometimes a few nights a week I would get a 2 a.m. call because the system was down and needed to be fixed. I spent many sleepless nights under high pressure, and I found it immensely frustrating. I felt victimized, and often felt others in the company didn’t feel the same responsibility I did to stick around and fix problems until completion.</p>
<p>At some point I sent an elaborate complaining email to everybody in the company. <em>This</em> was wrong, and <em>that</em>, and <em>that</em>, and I hadn’t slept in <em>weeks</em>, why did nobody else <em>care</em>?</p>
<p>A few hours after sending the email I got a call from the CEO. He told me he was surprised about my email. He understood that I didn’t feel too happy, but he was wondering what I hoped to accomplish with the email. Did I think this would magically make the system more stable, or make people feel more responsible about keeping the system up? Obviously, that wasn’t a likely outcome. “If anybody can do anything about it, it’s <em>you</em> — you’re the VP of Engineering.” and there it was: “So, what are you going to do about it?”</p>
<p>He was so right. Both my complaints (stability problems and the attitude of people) were 100% my responsibility. If I couldn’t fix them, I was in the wrong position. What really happened here is that I faced a problem and chose to <em>complain about it, rather than figure out a way to fix it</em>.</p>
<p>Of course, not every problem is created equal. Some problems simply aren’t worth fixing. When I say “worth” I don’t mean they don’t matter, but potentially that the investment in fixing them may not be proportional to the improvement fixing them will bring. For instance, if it annoys you that some user interface element doesn’t span the full height of the screen, that’s potentially worth adjusting. However, if it turns out that doing so will require rewriting loads of code and implementing the fix make take a week — is it still worth it? The trick is to <em>estimate the effort</em>required and balancing that against the <em>value it brings</em> before making a decision.</p>
<p>After crossing all non-worthy problems from the list, what’s left are problems that are worth fixing. You can categorize these into two groups:</p>
<ol>
<li>
<strong>Ones you cannot do much about</strong>, realistically. World hunger. Politics. The weather. Bugs in Windows. You could argue that sure, you can make <em>some</em> difference. You can travel the world handing out food. You can become a politician and fix democracy. You can become a weather man. You can go work at Microsoft. But realistically — you won’t.</li>
<li>
<strong>Ones within your “sphere of influence”</strong>, that is: those you have the power to fix directly yourself, or indirectly by influencing others.</li>
</ol>
<h2>Do not underestimate your own influence — chances are you can fix more problems than you think.</h2>
<p>While many problems fall into the second category, in practice we tend to dismiss or ignore that fact and complain about them instead. Sometimes it’s because we don’t <em>realize</em> we can actually solve them, or even we’re the ones <em>responsible</em> for solving them. Sometimes it’s because complaining is just so much easier.</p>
<p>As I’ve grown aware of this, I see this pattern pop all over the place. For instance, have you ever heard developers complain about performance, or quality of their code base? Or QA people who complain about the volatility or lack of tests? When you think of it — it’s rather hilarious, but it happens a lot. It’s like a cook complaining about the taste of his own food. Dude, <em>you made it.</em></p>
<p>Often, the source of the problem is a lack of responsibility. This is especially strong when people take over other people’s work, like inheriting a code base. Everything is blamed on the predecessor. That’s defensible for a little while, but it’s an argument with an expiry date. Face it: you own this stuff now, if you don’t fix it, nobody will.</p>
<h2>What are you going to do about it?</h2>
<p>So… you’re figured out <em>you’re</em> going to do something about it. That’s great. Congratulations. Now, how do you do that?</p>
<p>Pretty simple, really:</p>
<ol>
<li>
<strong>Understand the problem.</strong> Sometimes you sense something is wrong, but you don’t really know what. Get to the root of the problem. Use techniques like the <a href="http://en.wikipedia.org/wiki/5_Whys" target="_blank">5 whys</a> as required.</li>
<li>
<strong>“Vision” the outcome</strong>. In an ideal world, how would things be? Be more specific than “stuff wouldn’t be shit.”</li>
<li>
<strong>Create a step-by-step plan</strong> of how to get from today’s situation to the world where things are as they should be. Don’t say it’s not possible. Everything is possible. <a href="https://www.youtube.com/watch?v=eAM2-hg7xJs" target="_blank">When you believe</a>.</li>
<li>
<strong>Execute</strong> the plan.</li>
</ol>
<p>Sounds obvious? It is.</p>
<p>Why do so many complain rather than actively working towards making things better? Why do we always hope or assume somebody else is going to fix it for us? Or worse: why do we believe that the problem simply isn’t fixable?</p>
<p>Complaining is easy, and perhaps even fun — <em>doing something about it</em> is actually valuable.</p>
<p>So next time, when you’re about to complain about something, ask yourself: Can I do something about this myself, is this problem within my sphere of influence? (Most likely answer: yes.) And if so: shouldn’t I actually act on the problem rather than complain about it? (Most likely answer: yes.)</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>394</wp:post_id>
		<wp:post_date>2015-10-09 21:59:15</wp:post_date>
		<wp:post_date_gmt>2015-10-09 19:59:15</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>what-are-you-going-to-do-about-it</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="attitude"><![CDATA[Attitude]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="software-development"><![CDATA[Software Development]]></category>
		<category domain="post_tag" nicename="thinking"><![CDATA[Thinking]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Navigating the Docker Ecosystem</title>
		<link>http://zef.me/2015/11/03/navigating-the-docker-ecosystem/</link>
		<pubDate>Tue, 03 Nov 2015 10:05:19 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2015/11/03/navigating-the-docker-ecosystem/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p><em>This article is based on part of the talk I gave at </em><a href="http://pl.pycon.org/" target="_blank"><em>Pycon PL</em></a><em> October 15th 2015. All graphics in this presentation were originally slides in my slide deck of that talk. Don’t let the apparent length of this post scare you off — it’s mostly pictures.</em></p>
<p>Today, I’d like to talk about something close to my heart.</p>
<figure>

<img data-width="1024" data-height="768" src="https://cdn-images-1.medium.com/max/800/1*3HM7RTDG1yma4zUaTgs6OA.png">
</figure><p>That’s right: me.</p>
<p>Unless you’re Dutch or just familiar with Dutch names, you may not realize that my name — Zef Hemel — is not a very common one, even in The Netherlands. My last name, which means “sky” or “heaven” (yes, hilarious, I know) is very uncommon, and my first name is as well. My first name, in fact, is the first case in my family where a common first name in our family “Jan-Jozef” is <em>officially </em>shortened its informal shortened version: Zef.</p>
<p>Due to my fairly unique name, I was unchallenged on the Internet for a long time, even at a first-name level. This is how I was able to get domains like <a href="http://zef.me/" target="_blank">zef.me</a>, and my <a href="http://twitter.com/zef" target="_blank">@zef</a> twitter handle.</p>
<p>However, as Bob Dylan famously said: <a href="https://www.youtube.com/watch?v=e7qQ6_RV4VQ" target="_blank">the times, they’re a changin’</a>. This is what you see when you Google my name today:</p>
<figure>

<img data-width="1024" data-height="768" src="https://cdn-images-1.medium.com/max/800/1*kW6EUPmKR0GwvU0O-CM7EA.png">
</figure><p>That’s right. There’s another one. Another “Zef Hemel.” So, who is this other dude? Well, as it turns out, he’s my uncle, and he’s online now too. And guess whose website is ranked at the top? That’s right. My uncle’s. Those pictures? My uncle.</p>
<p>What is going on? Why is this other “Zef Hemel” so Google famous now?</p>
<p>As it turns out, he’s a professor. A <a href="http://www.uva.nl/en/about-the-uva/organisation/staff-members/content/h/e/j.j.m.hemel/j.j.m.hemel.html" target="_blank">professor of Urban Planning at the University of Amsterdam</a>. And supposedly he’s a big deal. And here I sit with my insignificant little <a href="http://zef.me/blog/4006/dr-zef" target="_blank">PhD</a>.</p>
<p>For those that aren’t familiar with the Urban Planning field, here’s how <a href="https://en.wikipedia.org/wiki/Urban_planning" target="_blank">Wikipedia defines it</a>:</p>
<blockquote>“Urban planning is a technical and political process concerned with the use of land, protection and use of the environment, public welfare, and the design of the urban environment, including air, water, and the infrastructure passing into and out of urban areas such as transportation, communications, and distribution networks.”</blockquote>
<p>Cool stuff.</p>
<p>So, I’ve been thinking. What can I do to beat this guy? What can I do to get myself up there again? Up in the Googles?</p>
<p>After some thought and soul searching, I figured it out: I’m going to beat this guy at his own game.</p>
<h3>I’m going to reinvent urban planning.</h3>
<p>And I shall call it…</p>
<figure>

<img data-width="1024" data-height="768" src="https://cdn-images-1.medium.com/max/800/1*sw5R4DCvJoKAArLRJJhZxA.png">
</figure><p>That’s right, y’all.</p>
<blockquote>Urban planning 2.0.</blockquote>
<p>What is Urban Planning 2.0? I will tell you in a minute — or more realistically in about 10 — but first I want to give you some back story, because I’m sure that by now you’re not at all like “where the hell is this going?”</p>
<p>I briefly alluded to my PhD. I got this PhD in Delft, a city in The Netherlands that lies in between The Hague and Rotterdam:</p>
<figure>

<img data-width="1024" data-height="768" src="https://cdn-images-1.medium.com/max/800/1*A0W5962rLwiP1rlMxr2f6Q.png">
</figure><p>The university where I wrote it (<a href="http://tudelft.com/" target="_blank">Delft University of Technology</a>) has a campus that looks as shown on the map below. I spent four years of my life in building marked with a red circle.</p>
<figure>

<img data-width="1024" data-height="768" src="https://cdn-images-1.medium.com/max/800/1*TwgQPAv84BVQHo3ykyVfTA.png">
</figure><p>Here’s how that building looks from the side, I had an office on the 8th floor:</p>
<figure>

<img data-width="1024" data-height="768" src="https://cdn-images-1.medium.com/max/800/1*bo4MEiOvGgMXypTdWROvLA.png">
</figure><p>“Cool story bro’,” you’ll say, “how is any of this relevant to UP2.0?”</p>
<p>Good question! From my window I had a view on some other buildings, circled in red here:</p>
<figure>

<img data-width="1024" data-height="768" src="https://cdn-images-1.medium.com/max/800/1*ovqrcQByWlZOmmDHOQspcw.png">
</figure><p>And this is where the story starts. This is what those building looked (and still look) like:</p>
<figure>

<img data-width="1024" data-height="768" src="https://cdn-images-1.medium.com/max/800/1*1QONpmbTgagComInKmBSfA.png">
</figure><p>That’s right. They’re a bunch of stacked <strong>containers</strong>.</p>
<p>Why is that? Why have these containers sit on a university campus? What are they for?</p>
<p>For that we have to enter a second level of background information, this time on the student housing issue that many universities in The Netherlands face yearly, which is in fact pretty simple to summarize: there’s not enough of it. Well, eventually there is, but when the academic year starts in September, the dust hasn’t settled. Not all students have found places yet, and it takes a month or two, three for this to resolve itself.</p>
<p>So what happened, for instance at a university close to where I grew up is that students stayed in tents on campings for weeks or even months.</p>
<figure>

<img data-width="1024" data-height="768" src="https://cdn-images-1.medium.com/max/800/1*ogXheVpIMegv-91hV58ZIA.png">
</figure><p>But sadly, this is not what those tent camps look like.</p>
<p>They look more like this:</p>
<figure>

<img data-width="1024" data-height="768" src="https://cdn-images-1.medium.com/max/800/1*bZPdY5LzkN2ve28buhhv3g.png">
</figure><p>And, let’s face it. That’s just sad.</p>
<p>So, the government, or universities, or whoever, came up with this clever idea of housing containers.</p>
<p>Cool right?</p>
<p>Here’s how such containers are organized, more or less:</p>
<figure>

<img data-width="1024" data-height="768" src="https://cdn-images-1.medium.com/max/800/1*c90zkvL6ePunNr1nbyg0lw.png">
</figure><p>As you can tell, you got more or less everything you need in there: a bedroom with a bed, a cupboard, shower, little kitchen and living room. It’s not fancy, but it’s practical.</p>
<p>Very practical, in fact.</p>
<figure>

<img data-width="1024" data-height="768" src="https://cdn-images-1.medium.com/max/800/1*0tQag1FLlhLCVVnkrlkKTw.png">
</figure><p>Moving these containers is relatively easy and it’s easy to respond to changes in demand. If more students need housing, you simple stack up more of those containers. If there’s too many, you can just load them on a truck and get rid of them again. Transportation is relatively simple. In fact, containers are super, super practical:</p>
<ul>
<li>Uniform: easy to stack &amp; place</li>
<li>Cheap to build</li>
<li>Cheap to distribute</li>
</ul>
<p>I like it.</p>
<p>Can we push this idea further?</p>
<p>Yes we can. As it turns out, a lot of grunt work has already been done. If you look for it, many structures have already been reinvented in container form. For instance, restaurants:</p>
<figure>

<img data-width="1024" data-height="768" src="https://cdn-images-1.medium.com/max/800/1*1HwvHh5RNBqBB95aP4o-ww.png">
</figure><p>In fact, even in the town where I live now — Poznań — has an art gallery — <a href="http://www.kontenerart.pl/" target="_blank">kontenerART</a> — built entirely from containers:</p>
<figure>

<img data-width="1024" data-height="768" src="https://cdn-images-1.medium.com/max/800/1*cT2jASsawjajiWbZBtcvzg.png">
</figure><p>But there’s more. There are also shopping centers built entirely from containers:</p>
<figure>

<img data-width="1024" data-height="768" src="https://cdn-images-1.medium.com/max/800/1*7ttNbTPqmbxUO7QZiAVQdA.png">
</figure><p>And there you have it.</p>
<p><strong>Urban Planning 2.0</strong></p>
<figure>

<img data-width="1024" data-height="768" src="https://cdn-images-1.medium.com/max/800/1*APj-pG9gGaXUendaiEMXEA.png">
</figure><p>So… what’s next? Let’s iron out some minor details.</p>
<ul>
<li>Infrastructure</li>
<li>Composition</li>
<li>Maintenance</li>
<li>Scaling</li>
<li>Distribution</li>
<li>Manufacturing</li>
</ul>
<h3>Infrastructure</h3>
<p>What if instead of this:</p>
<figure>

<img data-width="1024" data-height="768" src="https://cdn-images-1.medium.com/max/800/1*lxJkpggBEL1NpAhi0PkTpQ.png">
</figure><p>That is: a bunch of infrastructure, tied up with buildings, and then some small area for containers — we wipe the slate clean. We build areas with just the bare minimum infrastructure:</p>
<ul>
<li>Roads</li>
<li>Water</li>
<li>Electricity</li>
<li>Sanitary</li>
</ul>
<p>And the rest: containers.</p>
<p>So, instead we would get something like this:</p>
<figure>

<img data-width="1024" data-height="768" src="https://cdn-images-1.medium.com/max/800/1*SJJJ8YgNz3PBjs2ZUp00MQ.png">
</figure><p>We can go more radical. What if certain companies buy up large quantities of land, put in the infrastructure and start selling it. Or better yet: renting it out, piece by piece?</p>
<figure>

<img data-width="1024" data-height="768" src="https://cdn-images-1.medium.com/max/800/1*SQAlArUuTKJh4uScSfFGWg.png">
</figure><p>So, here’s how that would work: Let’s say you want to start or expand your company’s offices. Rather than paying or renting an office building, you design the office you need as a set of containers (we’ll get to the design part later on), e.g. with one office per container. Then, you pay one of these providers for hosting, say 20 slots to install those containers. You can easily get rid of your containers if you no longer need them, or rent more space if you temporarily need more of it.</p>
<p>Simple, right?</p>
<p>This brings up the topic of best practices for the design of such containers.</p>
<h3>Composition</h3>
<p>How do you decide what to put in a container? Do you put everything into one, or split things up? Your initial intuition may be to do something like this:</p>
<figure>

<img data-width="1024" data-height="768" src="https://cdn-images-1.medium.com/max/800/1*HAquhS0H8yV-yeIYmyy0nQ.png">
</figure><p>That is: put everything into one space. Home, work, entertainment, shopping. A bit tight, but practical right? Why not? Makes it easy to replicate, too. What more do you need?</p>
<p>But what if the shop part no longer fulfills needs, either it falls in disrepair or is too small? Can you easily “scale it up”? Not really. Therefore, it proves more effective to put each of these things in separate containers that are interconnected (e.g. with roads):</p>
<figure>

<img data-width="1024" data-height="768" src="https://cdn-images-1.medium.com/max/800/1*Z_00bVvzBRUHk2x67sDkEg.png">
</figure><p>This idea kind of reminds me of my playing of Sim City back in the day.</p>
<p>Sure, I’ve played some of the newer versions of Sim City, but I childhood memories to Simcity 1.</p>
<figure>

<img data-width="1024" data-height="768" src="https://cdn-images-1.medium.com/max/800/1*SacuxeKzZPW8WxyHCmbg2A.png">
</figure><p>Here’s roughly what my Sim City strategy looked like: figure out the right combination of number of housing blocks, a power plant, shopping areas and factories and other required facilities. One that keeps everybody happy. Then replicate that setup over and over again.</p>
<p>Sadly, in Sim City this was pretty much hand work, but I’m tools can be built to do similar things in real life, so we can set up these types of “container compositions,” if you will, easily.</p>
<figure>

<img data-width="1024" data-height="768" src="https://cdn-images-1.medium.com/max/800/1*ncTGM54afgNHs5X9XeBiMw.png">
</figure><h3>Maintenance</h3>
<figure>

<img data-width="1024" data-height="768" src="https://cdn-images-1.medium.com/max/800/1*QeaJ6eVyH8F2_JMxZFj9xA.png">
</figure><p>On to real-world issues. What if one of your containers — a Porchetta restaurant, let’s say — is getting outdated. It sells pasta, while the world has moved on to pizza now. Or, it just got dirty and old and need to be replaced. How do we handle that scenario?</p>
<p><strong>Step 1:</strong> we build another container with the new and improved version next door, for instance this awesome Resto restaurant:</p>
<figure>

<img data-width="1024" data-height="768" src="https://cdn-images-1.medium.com/max/800/1*_rfcXT8l5U8V3LfvagcHJw.png">
</figure><p><strong>Step 2:</strong> we walk into the old <em>Porchetta</em> restaurant and kindly, but urgently, ask people to move to the new and improved <em>Resto</em> restaurant next door.</p>
<p><strong>Step 3: </strong>After everybody took their plates and moved over, we<em> set the place on fire.</em></p>
<p>Boom.</p>
<p>We dust out the ashes, and use the area for some other container in the future.</p>
<p>Dun, dun, done.</p>
<h3>Scaling</h3>
<p>So, what if our restaurant gets too popular and it can no longer fit all customers? Easy, we build more of them! Then, we set up fencing in front to enforce some sort of queue that encourages people to spread across all our restaurant containers.</p>
<figure>

<img data-width="1024" data-height="768" src="https://cdn-images-1.medium.com/max/800/1*1Ku2AP7FVcJi4OnamiFSRQ.png">
</figure><p>Got even more customers? Add more replicas.</p>
<p>Get less? Burn those suckers down!</p>
<h3>Distribution</h3>
<p>Imagine this. You’re a small company, or even individual, and you have some idea of something you want to build into a container. Perhaps a new type of studio apartment that’s really just a bedroom, or a restaurant with just one giant table. Whatever. What if you can have this built quite cheaply, have a few of them constructed and have them stored somewhere on some strategically located location, with free guided tours so that people can check them out. From here, anybody interested in your container idea can just buy one, have it shipped, and try it out.</p>
<figure>

<img data-width="1024" data-height="768" src="https://cdn-images-1.medium.com/max/800/1*8Az3076UZIeShvNU0SCI8Q.png">
</figure><p>If you have a few of these hubs strategically distributed across the globe. Probably near big ports. Transportation is relatively cheap, and everybody will have access to your containers.</p>
<p>However, for some institutions, such a public hub may be too risky. They want some other, more private, place. Of course, this is an option too. Companies may offer, or just create their own private areas on existing ports, or even private ports where such containers can be stored.</p>
<figure>

<img data-width="1024" data-height="768" src="https://cdn-images-1.medium.com/max/800/1*3TNAURTImLzJ70suoR9KoQ.png">
</figure><p>From one of these hubs, whether public or private, containers can be transport either by truck or by ship:</p>
<figure>

<img data-width="1024" data-height="768" src="https://cdn-images-1.medium.com/max/800/1*Rtshy0FvD9FRMLaT0F1Ung.png">
</figure><p>Meh. No, let’s assume this type of ship:</p>
<figure>

<img data-width="1024" data-height="768" src="https://cdn-images-1.medium.com/max/800/1*A6IOhiybBeroY0oEM3ORpg.png">
</figure><p>Again, you see the practicality of the container idea here: highly stackable, and if this is enough of an industry, you can custom build ships that are purpose built just to do that one thing: transport containers.</p>
<h3>Manufacturing</h3>
<p>So, this leaves just one aspect: how do you design and construct these things cheaply and efficiently?</p>
<p>The answer here, too, is simple:</p>
<ol>
<li>come up with an idea</li>
<li>design how it should look and work</li>
<li>prepare instructions on how to build one from scratch</li>
<li>have ’em built</li>
</ol>
<figure>

<img data-width="1024" data-height="768" src="https://cdn-images-1.medium.com/max/800/1*4QAIOucS7beodcjuDzmVBg.png">
</figure><p>All that’s left is the place to actually build these things. This is what the discipline of manufacturing was invented for: tell factories what to build, and they can produce lots of replicas cheaply.</p>
<figure>

<img data-width="1024" data-height="768" src="https://cdn-images-1.medium.com/max/800/1*yW857eeBVhf-3LHL--5hkA.png">
</figure><p>But in this day and age, let’s dream a little bit. What about 3D printers?</p>
<figure>

<img data-width="1024" data-height="768" src="https://cdn-images-1.medium.com/max/800/1*pkRIYX-pMDbpj6war215lw.png">
</figure><p>At this point you may think, “but Zef, I was with you this far, but now you’re talking crazy! Build a container fully automatically using a 3D printer?”</p>
<p>Not that crazy at all, as it turns out. <a href="http://3dprintcanalhouse.com/" target="_blank">These guys in Amsterdam are 3D printing an Amsterdam Canal house</a>.</p>
<figure>

<img data-width="1024" data-height="768" src="https://cdn-images-1.medium.com/max/800/1*GfuvI0L8BRq2BoS87qO-tw.png">
</figure><p>But then again. Dutch people. They’re crazy.</p>
<p>So there you have it. <strong>Urban Planning 2.0</strong>. It’s the future, I’m telling ya.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1778</wp:post_id>
		<wp:post_date>2015-11-03 11:05:19</wp:post_date>
		<wp:post_date_gmt>2015-11-03 10:05:19</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>navigating-the-docker-ecosystem</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="cloud-computing"><![CDATA[Cloud Computing]]></category>
		<category domain="post_tag" nicename="docker"><![CDATA[Docker]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="urban-planning"><![CDATA[Urban Planning]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Satya Nadella and a CEO’s job</title>
		<link>http://zef.me/2015/10/17/satya-nadella-and-a-ceos-job/</link>
		<pubDate>Sat, 17 Oct 2015 07:48:00 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2015/10/17/satya-nadella-and-a-ceos-job/</guid>
		<description></description>
		<content:encoded><![CDATA[

<figure>

<img data-width="1731" data-height="1503" src="https://cdn-images-1.medium.com/max/800/1*ssnyvVNwAu81T1V29OcwbA.jpeg">
</figure><p>I just watched a 10 minute interview with Satya Nadella (CEO of Microsoft — have you heard of it?) on The Verge, I suggest you watch it too:</p>
[embed]http://www.theverge.com/video/2015/10/7/9473677/microsoft-windows-10-device-event-satya-nadella-interview[/embed]
<p>When Satya started a year and a half ago I got the sense Microsofts is changing. And it has; quite a bit. This video gives some hints as to what it means for a company to get a new CEO. The impact it can have.</p>
<p>Nilay Patel (of the Verge) asks Satya “Why does Microsoft exist?” <a href="https://zefhemel.com/why-we-are-attracted-to-medium-fa44aaf2d52f" target="_blank">I like the WHY question</a>. Satya answers (and I’m paraphrasing): Microsoft exists to build tools that allow other people to do their work — to innovate, to move ahead. Yes, this can be perceived as wishy washy vague language — and these WHYs need to be turned into concrete HOWs and WHATs — but it’s good to hear Microsoft still has a purpose <a href="http://www.zdnet.com/article/microsofts-new-mission-statement-no-more-computer-on-every-desk/" target="_blank">now that there’s a computer on every desk</a>. And this purpose is different that e.g. Apple’s purpose, so we can expect different results (although it’s pretty obvious Microsoft is borrowing a lot from Apple lately. Microsoft stores anybody?).</p>
<p>Satya is also asked what his job as a CEO really means. Satya says his job is to “curate the culture” and “set the tone of the company.” I think he’s exactly right. He decides, or at least influences the direction, the culture and focus. One thing he mentioned he changed is a switch of focus in metrics. Microsoft today focuses less on the revenue metric and more on the NPS (<a href="https://en.wikipedia.org/wiki/Net_Promoter" target="_blank">Net Promoter Score</a> — a metric to measure customer satistfaction, “would you buy again, would you recommend?”) and such ostensibly small changes can make a huge difference.</p>
<p>Anyway, I said this before and I still say this today: Microsoft is not a done deal. Microsoft will rise again.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1780</wp:post_id>
		<wp:post_date>2015-10-17 09:48:00</wp:post_date>
		<wp:post_date_gmt>2015-10-17 07:48:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>satya-nadella-and-a-ceos-job</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="microsoft"><![CDATA[Microsoft]]></category>
		<category domain="post_tag" nicename="purpose"><![CDATA[Purpose]]></category>
		<category domain="post_tag" nicename="tech"><![CDATA[Tech]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_b9778adae5865bf591f0e5b159bcc54c</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Micro Services on the Client?</title>
		<link>http://zef.me/2016/09/09/micro-services-on-the-client/</link>
		<pubDate>Fri, 09 Sep 2016 14:24:28 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2016/09/09/micro-services-on-the-client/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p><span>T</span>he Micro Service Architecture is all about splitting up your application’s (or group of applications’) functionality into separate services that communicate with each other in some standardized way, e.g. JSON over HTTP. While this approach is rapidly gaining adoption in cloud environments, I wonder: is there also a case to be made for micro services on the <em>client</em>? Does it make any sense to apply this pattern in browser-based applications, and native (or less native) desktop applications?</p>
<p>To answer this question, let’s take a step back and consider the reasons to implement micro services in general:</p>
<p>Micro services…</p>
<ul>
<li>
<strong>Decrease coupling</strong> — by making all dependencies and calls very explicit, it’s relatively expensive to expose and call another service (as opposed to write and calling a method on some library), encouraging the grouping of related logic and more strictly separating components at the service level.</li>
<li>Encourage <strong>continuous refactoring and rewriting</strong> — by enforcing stricter decoupling, it becomes easier to internally refactor or rewrite a service as long as it doesn’t impact its API in a backwards incompatible manner.</li>
<li>
<strong>Lower dependency on a single technology</strong> — if services communicate over some technology independent medium (like HTTP or ZeroMQ), it doesn’t matter what technologies are used to implement a service internally. This opens up the ability for teams to pick their own technologies and play with new ones.</li>
<li>
<strong>Scale Independently</strong> — if one service is receiving too much load to handle, it can be scaled up independently from the rest of the infrastructure.</li>
<li>
<strong>Localize failures</strong> — if one service crashes, for whatever reason, it doesn’t take down the rest of the system (when built with resilience in mind, see next point). Independent monitoring of services also can make it easier to localize problems and bugs.</li>
<li>
<strong>Are designed for failure</strong> — because services may live far away across a network, a whole new set of new failure scenarios opens up, forcing <a href="http://zef.me/blog/2016/9/resilience-thinking-in-the-micro-service-architecture" target="_blank">“resilience thinking”</a> . Services that depend on other services therefore have to be resilient to such failures.</li>
<li>
<strong>Can be released on independent release cycles</strong> — rather than having a combined release cycle of the whole system, teams can release their own services as frequently as they like.</li>
<li>
<strong>Require zero-downtime deployment</strong> — not strictly related to micro services, but especially important with independent release cycles, you don’t want to introduce down-time whenever somebody updates a service.</li>
</ul>
<p>As we moved from thin clients (basic “HTML 1.0” web pages) to thick-clients with a lot of logic running on the client (whether native on the desktop, in the browser, or some hybrid like Electron) — do any of the listed properties of micro services make sense in the context of the client too?</p>
<ul>
<li>Decrease coupling — sure</li>
<li>Encourage continuous refactoring and rewriting — yep</li>
<li>Lower dependency on a single technology — on the desktop this can be valuable (part written in C++, part in Python, part in Objective C), in the browser perhaps to some extent, although interoperability is probably easier because everything is JS in the end (although it may simplify things like some WebAssembly component communicating with an Elm codebase)</li>
<li>Scale Independently — this doesn’t make much sense in the client, probably</li>
<li>Localize failures — yep, if your C++ service segfaults, it doesn’t have to take down the whole system. In the context of a browser: when your web worker (assuming services are deployed as independent web workers) crashes, or blocks its event loop, it doesn’t impact all other services.</li>
<li>Are designed for failure — yep.</li>
<li>Can be released on independent release cycles — can make sense, perhaps you iterate certain parts of the systems more often, and updates can be shipped just for one service.</li>
<li>Require zero-downtime deployment — probably less of an issue on the desktop, but for applications that are long running and always in use, it may be favorable to not have to restart an app for every software update. Also, by being to actively push updates, you avoid the problems of having to support legacy client versions.</li>
</ul>
<p>So, how could this work in practice?</p>
<p>Let’s look at two contexts:</p>
<ol>
<li>a native desktop app written in C++ and Python; and</li>
<li>a browser-based app built using JavaScript</li>
</ol>
<p><strong>Native desktop</strong></p>
<p><em>Service implementation:</em> services can run as separate OS-level processes.</p>
<p><em>Communication:</em> ZeroMQ, or even HTTP can be used, messages can be sent encoded in JSON,<a href="http://msgpack.org/" target="_blank">msgpack</a>, <a href="https://developers.google.com/protocol-buffers/" target="_blank">protobufs</a> or <a href="https://thrift.apache.org/" target="_blank">thrift</a>. Both Python and C++ have excellent support for all of these.</p>
<p><em>Service manager</em>: A single “parent” process has the job of managing the lifetimes and discovery of all services in the system.</p>
<p><strong>Browser</strong></p>
<p><em>Service implementation:</em> services run as separate Web Workers</p>
<p><em>Communication</em>: <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage" target="_blank">postMessage</a> message passing between <a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers" target="_blank">web workers</a> and the main browser thread.</p>
<p><em>Service manager:</em> The main browser thread manages the lifetimes and message passing between all services in the system.</p>
<p>So what would this <em>service manager</em> do?</p>
<ul>
<li>It manages <strong>service discovery</strong> — either by performing DNS-like service discovery, letting services know how to talk to other services, or using some sort of simple service bus, itself relaying messages between services.</li>
<li>It manages <strong>service life times</strong> — when the system starts, it boots up all services, restarts them when they crash, it also performs health checks and restarts if they stop responding.</li>
<li>It manages <strong>service updates</strong> — polling some update server to see if there are any updates available, if so, downloading them transparently. Spawning a new version of a service, waiting for it to come up, then gracefully shutting down the old version once all ongoing requests to it have ended.</li>
</ul>
<p>That sounds cool. Everything comes at a cost, though. Here’s the issues I see:</p>
<ul>
<li>
<strong>Added communication overhead</strong> — rather than making method calls, now you send messages between process, which is obviously much more expensive — even on light-weight protocols like ZeroMQ and fast message encodings like protobufs — this is going to be much slower. If the volume of these messages, or the payload of these messages is high this may become a bottleneck.</li>
<li>
<strong>Added memory overhead</strong> — rather than having one process run, you now boot up a whole slew of processes with possibly their own copies of libraries.</li>
<li>
<strong>Extra complexity</strong> — what was calling a method, or some function, now involves sending an RPC call.</li>
<li>
<strong>What about UI?</strong> Client apps are often UI heavy, how to support micro services there? The<a href="http://shop.oreilly.com/product/0636920033158.do" target="_blank">”Building Microservices” book</a> has some good ideas on how to handle this though.</li>
</ul>
<p>So, is anybody doing this today? <a href="http://zef.me/blog/2016/9/micro-services-on-the-client#" target="_blank">On twitter</a>, people pointed me to <a href="https://openfin.co/openfin-runtime-introduction/" target="_blank">OpenFin</a>, which is a toolset to build desktop apps for the financial industry. It seems to be based on small, independently deployable services as well, all built on HTML/JS on top of Electron.</p>
<p>Know of any other examples? <a href="mailto:zefhemel@gmail.com" target="_blank">Let me know</a>.</p>
<p>What about <a href="https://www.egnyte.com/" target="_blank">Egnyte</a>? The whole reason of me thinking and writing about this, is that we are talking about this in the context of future versions of our desktop applications. Sounds interesting? <a href="http://www.egnyte.com/jobs/#eng" target="_blank">We’re hiring</a>.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>66</wp:post_id>
		<wp:post_date>2016-09-09 16:24:28</wp:post_date>
		<wp:post_date_gmt>2016-09-09 14:24:28</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>micro-services-on-the-client</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="cloud-computing"><![CDATA[Cloud Computing]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="microservices"><![CDATA[Microservices]]></category>
		<category domain="post_tag" nicename="software-development"><![CDATA[Software Development]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Making a Super Team</title>
		<link>http://zef.me/2016/10/17/making-a-super-team/</link>
		<pubDate>Mon, 17 Oct 2016 17:38:29 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2016/10/17/making-a-super-team/</guid>
		<description></description>
		<content:encoded><![CDATA[

<h4>Turning “programmers” into “product engineers”</h4>
<figure>

<img data-width="1200" data-height="600" src="https://cdn-images-1.medium.com/max/1200/1*mF3QkP7XCEOjTJn0U6e3_w.png">
</figure>

<p><span>F</span>or the last couple of months we had a <a href="https://en.wikipedia.org/wiki/DevOps" target="_blank">DevOps</a> guy in our team. This is still unusual in our organization, most DevOps aren’t assigned to specific teams, they just work in a separate DevOps department that does work for various projects. The approach we took — which I think worked out really well— is that the DevOps guy <em>did not</em> handle all operational issues and deployments. Instead, the main thing he did was <em>build the infrastructure and tools</em> to have developers do this <em>themselves</em>.</p>
<p>Part of everybody’s on-boarding in this team (including mine) was setting up SSH keys and <a href="https://www.ansible.com/" target="_blank">Ansible</a> to run deployments yourself, and becoming familiar with the documentation describing how it all works. The result is that everybody in the team can, and does, deploy new versions. Developers deploy, QAs deploy, even <em>I</em> deploy stuff from time to time.</p>
<p>This has some nice side effects:</p>
<ol>
<li>Because the team doesn’t only write the code, but also operates their own products — the sense of <strong>ownership</strong> is very high. Other teams may have a “throw it over the fence” culture — <em>we</em> write the code, <em>you</em> keep it running. <em>This</em> team certainly does not.</li>
<li>The <strong>versatility</strong> of everybody in the team is increased. Beside their own expertise, everybody knows at least the basics about infrastructure, deployment and debugging production issues.</li>
</ol>
<p>This versatility has the added advantage of subconsciously influencing the code developers write. For example, if you know multiple instances of an app will be deployed on different servers for HA purposes, you will handle state differently. Similarly, if you know you will have to debug issues on production, you will take good care of good log messages.</p>
<p>The role of DevOps in the team is to <em>share knowledge, build infrastructure and tools</em> for the team to deploy and operate the services by themselves, and maintain company standards. Company standards could be e.g. standards about security, back-up policies, high-availability requirements, software choice (DB engines to support) etc.</p>
<p>As an aside, this approach has the added benefit of taking a job that’s plagued by exclusively negative connotations (“this broke, that doesn’t work”) to a focus on <em>positive</em> contribution and appreciation by the team, with an aside of heroic savior (“thanks for helping bring system back up, we had no idea how it broke!”).</p>
<h4>Product</h4>
<p>I think this <em>knowledge and tools</em> idea is very much in line with the Agile idea of pushing more <em>product knowledge</em> to the team as well. Rather than a product owner pushing a low-level “to do list” to specific people in the team: “you have to write method <em>A</em> with these inputs and those outputs,” requirements are shared with the entire team at a higher level, with heavy focus on the <em>Why</em> in the shape of user flows, explaining what the user is trying to achieve. Here too, the product owner is very open to suggestions for tweaks that may make things much cheaper to implement, and prioritization based on estimates.</p>
<p>This has some nice side effects:</p>
<ol>
<li>Having deeper understanding of the product users and requirements allow the developer to <strong>make many decisions themselves</strong>. In fact, the more the development team knows about the roadmap, the better choices they can make at the code level. For instance, if something they’re going to work on today is going to be the basis for many more features over the next year, they know to spend more time architecting it thoroughly.</li>
<li>
<strong>Product investment</strong> is higher, and as a result <strong>motivation</strong> is higher. We all want to work on stuff we understand and care about. If we’re involved in this creation process and understand why we do what we do, that goes a long way. Especially if we have at some level of influence on what’s developed.</li>
<li>Like the DevOps example before, understanding another domain in addition to the domain of programming, adds to the development team’s <strong>versatility</strong> and as a result, better code.</li>
</ol>
<p>The role of a product owner (or product manager) is to interact with users, and make decision on where to take the product next. The PO then works with the team to provide them the “tools” to make this vision a reality. Tools in this context include user requirements, usage data and a prioritized product roadmap.</p>
<p>Like other roles, POs are part of a larger company-wide product organization that aligns on product strategy, best practices etc.</p>
<h4>Quality</h4>
<p>Since the team is involved in product aspects as well as operational aspects, the other obvious next candidate is quality. In a sense this one comes for free — if you are the one to push stuff to production and the one getting the call when stuff breaks, you will implicitly start to care about quality more. You’d assume, anyway.</p>
<p>In many companies, including ours, teams have QAs part of the team. So, what do QAs do? In many companies QA is a fancy word for <em>tester</em>, they:</p>
<ol>
<li>Maintain test plans and perform manual tests to ensure everything works as specified.</li>
<li>Run manual regression tests before every release to ensure nothing broke during a development cycle.</li>
</ol>
<p>But I don’t like this model. Why? Because it’s boring, slow and prone to failure. Who wants to perform the same repetitive task over and over again, again and again? In some teams regression cycles take two weeks, that’s way too slow of a feedback cycle. And are you sure you didn’t miss anything during two weeks of full-time manual testing?</p>
<p>The alternative is automation. So, in many more modern companies, QAs now write automated tests. But when QAs are responsible for writing tests there’s still a split responsibility within the team. It may lead to a mini-“throw it over the fence” culture between developers and QAs. A developer writes some code, and the QA covers it with tests and finds bugs.</p>
<p>It’s healthier if developers <em>also</em> take responsibility of writing their own tests, and the QA focusing on sharing <strong>best practices and building infrastructure and tools</strong> for developers to use to make this easier.</p>
<p>This has some nice side effects:</p>
<ol>
<li>If developers have to write their own tests, they will automatically write their code in a <strong>more testable way</strong>. As a result, code quality improves.</li>
<li>Because developers will be the ones maintaining test suites, there’s high motivation to find a good <strong>balance</strong> between unit, integration, functional and user acceptance tests.</li>
<li>Because a QA can dedicate most of his or her time to creating infrastructure, the barrier to writing the first test (which is always a challenge) can be lowered significantly, and new ways of writing tests can be experimented with.</li>
</ol>
<p>So, similar to DevOps — rather than doing the (automated) testing work, it’s the QA’s job to whip the team into shape in terms of quality. The QA builds the infrastructure and tools, and acts as a consultant suggesting additional tests to write, e.g. by participating in code reviews and making suggestions how unit tests or integration tests could be written.</p>
<p>Like for DevOps and product, it still makes sense to have a bigger QA department in the company that sets standards, e.g. regarding environments to be used for testing, how to setup continuous integration, testing frameworks to standardize on, and possibly metrics (e.g. code coverage) to hit.</p>
<blockquote>I believe that the best developers are developers that have the full picture — they get the product, they get the context in which it has to operate, and they understand the importance of quality assurance.</blockquote>
<p>Yes, this a lot to worry about for an individual, or group of individuals. But that’s what modern software development is all about.</p>
<p>In this model, specialized roles like DevOps, PMs and QAs exist to support the development team to deal with this complexity, and making it an as smooth ride as possible.</p>
<h4>What else?</h4>
<p>In my teams this hasn’t become relevant yet, but perhaps the <em>tools and knowledge, rather than doing the work</em> model could work for other roles too — designers perhaps (focusing on developing base pallet of reusable controls, rather than ad-hoc design), UX, perhaps other roles I don’t even know exist.</p>
<blockquote>What does “programmer” even mean anymore?</blockquote>
<p>Considering all this, the term “programmer” almost sounds derogatory. When working in an environment where you have <em>this</em> unique perspective and responsibility: a combination of product, operations, quality, combined with the traditional writing of the codez — perhaps we should start calling this role differently.</p>
<p>Product engineer?</p>

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>71</wp:post_id>
		<wp:post_date>2016-10-17 19:38:29</wp:post_date>
		<wp:post_date_gmt>2016-10-17 17:38:29</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>making-a-super-team</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="agile"><![CDATA[Agile]]></category>
		<category domain="post_tag" nicename="devops"><![CDATA[DevOps]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="quality-assurance"><![CDATA[Quality Assurance]]></category>
		<category domain="post_tag" nicename="software-development"><![CDATA[Software Development]]></category>
		<category domain="post_tag" nicename="teamwork"><![CDATA[Teamwork]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Note to self: Things to Consider When Switching Back from Android to iOS</title>
		<link>http://zef.me/2016/09/07/note-to-self-things-to-consider-when-switching-back-from-android-to-ios/</link>
		<pubDate>Wed, 07 Sep 2016 14:32:18 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2016/09/07/note-to-self-things-to-consider-when-switching-back-from-android-to-ios/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Dear Zef,</p>
<p>We both know you will read this note one day — perhaps sooner than later. You being you, you will decide once more that Apple is much cooler than Google, and it’s time to go all-in on Apple products again. More specifically it’s time to buy and iPhone once more and get rid of your current Android phone (Nexus 6P at the time of this writing). I’m writing this letter to you now, so you’ll remember what you’ll be giving up on when this day will come. Just in case I will write and publish this before the September 7th Apple iPhone event.</p>
<p>First, let’s remember how you got where you are today. Your first “real” smart phone was an iPhone 3GS, you then upgraded to an iPhone 4S, then iPhone 5 and later an iPhone 6. Somewhere in between you had a short encounters with a Nexus One (long time ago), and the Samsung Galaxy S2, but it didn’t last long. Then, in May 2016 you decided to once again take the Android plunge — just to see what it’s like some years later.</p>
<p>As I’m writing this, it is September 2016 and life with Android is good. To remind you, here are the reasons you think the Android ecosystem is better than iOS right now (at this time iOS 9 is out, 10 is about to be launched — but doesn’t seem like a huge leap forward):</p>
<p>1.<strong> Notifications on Android are more useful.</strong> On iOS you only really used them as “in your face” notifications on your lock screen. Once you unlocked your phone they were effectively gone (yes, they were still listed on the notifications list somewhere, but you never looked at those). On Android you’re using notifications like an actual inbox of things to take care of. Notifications don’t disappear unless you either swipe them away, or the app sending them has decided they’ve become irrelevant. Notifications are an inbox you can act on, not just a list of “while you were away” transient messages. Notifications on Android are also richer, there’s more information in them, sometimes with photos, audio/video controls, even for third-party apps. You like this a lot.</p>
<p>2. Like it or not, <strong>you live in the Google ecosystem, and Google apps are better on Android</strong> — Gmail and Calendar are what you use both for work and personal use. Google’s applications for both of these are much better, and better integrated in the OS than on iOS. On iOS you never found a system to sync your calendars as reliable and instant as you have on Android today. On iOS you used Outlook for email, which was good, but Gmail on Android works great too. And stuff just syncs in the background, always. On iOS you always felt you had to open up each app from time to time, just to make sure stuff synced. On Android you don’t have that urge. You know it will just happen.</p>
<p>4. <strong>Google understands cloud</strong>. Photos on iOS is pretty good, but it’s not Google Photos in terms of features, performance, cost and transparency. Using Google Photos on iOS was always problematic because things wouldn’t reliably sync without opening up the app, also you now had two collections of photos to manage — your Apple photo library and your Google Photos one. On Android you have no such problem — Google Photos is the default, and it just works, it just syncs when it should. Minor drawback: no native Mac app for viewing and editing and having a local copy of your photos. Second case in point for “Google understands cloud”, consider this: you opened up a couple of .epub ebooks from various locations on your Android phone, it opened it up in “Play Books” (or whatever that Google app) is called, it instantly uploaded the .epubs to your Google account and now they’re available from anywhere and syncs reading position everywhere, including the web. On iOS you just imported these into iBooks, but iBooks didn’t upload them or anything, it just kept a copy in there, treating them as second-rate citizen next to the books bought from Apple’s iBook store.</p>
<p>5. <strong>The Android ecosystem (Chromecast, Pebble) is affordable, feature rich and reliable</strong>. You watched all your video content on your TV on AppleTV before, pushed there through your iPhone with AirPlay. It worked, but not always reliably — sometimes unreliable to the point of frustrating and reverting to watch things on your Macbook Pro, like an animal. You also owned an Apple Watch, which you liked but you only used a small set of its features. Now, on Android you bought a super cheap Chromecast that’s just never failed. It just works, both from your wife’s iOS phone (for most purposes) and your Android phone. It’s so seamless your wife is using the TV to play music from Spotify from time to time, it’s so much easier to get to work than connecting her phone via bluetooth to your good speaker set. You also bought a Pebble watch which costed a fraction of the Apple Watch, has a 10 day battery life, always-on display and does only the things you expect it to do: tell time, set timers, show notifications, calendar, weather and Wunderlist shopping list. Both Pebble and Chromecast work on iOS, but support is much more limited for Pebble (due to iOS being being more locked).</p>
<p>6. <strong>You can set different default apps</strong> for certain things, for instance rather than launching Skype to call your parents, you just use the native phone app, which directs the call via some VoIP transparently based on the fact that it’s a foreign phone number. Also, you used Firefox as your main browser for a while, by now you switched back to Chrome, but it was perfectly possible to for most intents and purposes completely switch to a different browser.</p>
<p>7. <strong>Google’s Play Store is better and smarter</strong> than the Apple App Store. It gives better recommendations and is better organized. Also: automatic app updating just works, you don’t have to have the “Updates” tab open in the app store every few days to make sure updates flow in reliably — because you’re the kind of person that needs every update on day #1.</p>
<p>8. Talking about stores — since Google is less strict about payments, <strong>your Kindle and Audible apps actually allow you to buy Kindle and audible books from within the application</strong>, without going through the browser like on iOS (because of Apple’s rules). Now when you send yourself a preview of a book, you can actually buy it in-app when you like it. You like this, and unless Apple changes its policies, this won’t happen on iOS.</p>
<p>9. <strong>Usability niceties</strong> — your Nexus 6P has a huge screens, but I bet now that you decided to switch back to in iPhone you will get the “plus” one. Big screens are cool. Except… when back buttons are appear on the top-left like on iOS. Yes, there’s the swipe from the left on iOS but it doesn’t work in all apps. Android has a persistent back-button at the bottom left of the screen that is always reachable. No “reachability” double tap home button nonsense required. Also, switching between two apps on Android (N) is just double tap of the “home” (circle) button away, accessing the multitask screen (square button) just requires a single tap. Sometimes having more (physical or not) buttons is just a bit better. Another small thing: when you wake up before your alarm goes off, there’s a notification allowing to dismiss it early without turning it off altogether. On iOS what you ended up doing is keep your phone in your hand until the alarm went off, and dismissed it ASAP not to wake up the family — again, like an animal.</p>
<p>10. <strong>You’re naive enough to be willing to trade privacy for quality of life</strong>, as a result you enabled all the “location broadcasting” features that your Android phone gave you. As a result, your phone now knows where you parked your car, tells you to leave for your next appointment, or warns you about traffic to your son’s school even though you never told it where that is. Google Now just knows, and it’s helpful. You launched the “Google” app on iOS a couple of times, but it never seemed to give you much help on iOS, although your wife told you that her Google Maps on iOS did seem to include more “Now” features recently. Apple is trying to catch up on “intelligence”, but its “on your device only because privacy” stance will never reach the same level as Google’s cloud approach.</p>
<p>11. <strong>On-screen keyboards are better</strong> — you played with both Swiftkey and Google’s own keyboard. Both support swiping, which you’ve decided is a faster way to enter text. What you like about Swiftkey is that it support mixing languages, which you happen to do a lot. Google’s own keyboard has better predictive text and gives you better alternatives after “swiping” text. Custom keyboards on iOS always seems flimsy and not very useful, so you always stuck to Apple’s native keyboard.</p>
<p>But to be fair, you see faults in Android too:</p>
<p>1. You miss <strong>Apple’s attention to detail</strong> on Android. Sometimes you scroll a window, and text overlaps weirdly with the top bar, or you switch to the home screen and the keyboard disappears a second or two too late — all things that would never happen on iOS.</p>
<p>2. <strong>Hardware is worse</strong> — the Nexus 6P is reasonable, but it’s definitely not an iPhone. The build quality is not the same, the feel is not the same, a colleague has a Samsung Galaxy 7 Edge which feels much nicer hardware-wise, but its software… yeah. Also the camera is decent, but again: not as instant and good as an iPhone.</p>
<p>3. <strong>Battery life is acceptable, but not awesome</strong>. Even with the Nexus’ larger battery not the strong suit of Android phones it seems. Not that iPhones are so great — it seems to be a smartphone problem in general. Your colleague recently bought a cheap Chinese Android phone that seems to last 5 days on a charge, that must be a fluke.</p>
<p>4. <strong>You don’t have the Apple apps</strong>: iMessage, Facetime — both of these you used to communicate with your parents and “Apple friends”. You replaced these partially with WhatsApp, but your parents still haven’t figured out you only read iMessages on your Mac.</p>
<p>5. <strong>Audio quality on VoIP apps is bad for some reason</strong>. Not sure why, but people complain about your audio quality when you call them on Skype or some other VoIP application.</p>
<p>6. <strong>You wouldn’t give an Android phone to your wife just yet</strong>. It was hard enough to convince her that all the advantages of iOS were a reasonable trade-off to make for no longer having the physical keyboard on her blackberry. Then, it was a tough sell to have the 4.7" screen on the iPhone 6 screen versus the 4" on her previous iPhone 5 — “it’s just too big!”. She gets frustrated with unpredictable behavior or accidental taps quickly, all of which seem to affect Android more than iOS — but I may be wrong.</p>
<p>7. <strong>Third-software appears to be in a “worse” state than iOS.</strong> First-party (Google) apps, as discussed, are great, but many third applications you use seem to be in a worse state (uglier, slower, fewer features, fewer updates) than their iOS counter parts. Sometimes the difference is minimal, in cases (see the note about Audible and Kindle) they have features that their iOS version don’t have. But generally Android seems to be a second priority for the authors of the apps you use. I would still the difference is small enough for it not to matter too much, but most of the third-party cool new stuff comes to iOS first and Android second (note: third-party, this is not the case for e.g. Google).</p>
<p>8. This is a nerdy one — you feel that <strong>the “Android way” to solve performance problems is to just throw more cores and more memory at the problem</strong> (combined with bigger batteries). Based on the raw horse power and memory that Android devices have, you would expect more actual performance. You feel it may have to do with the whole Java and garbage collection thing. You feel that Apple made the right call going with the more close-to-the-metal (no pun intended) C/Objective-C/Swift platform here, which seems and feels more efficient, requiring less memory and a less powerful quad-core CPU to power basic things like scrolling a list.</p>
<p>So yes, there are trade-offs, but all things considered you’re still a fan of Android. Please consider all these points before hitting that “Purchase” button on the Apple online store for the iPhone 7, 7S or 8.</p>
<p>Good luck.</p>
<p>Love,</p>
<p>Zef</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>81</wp:post_id>
		<wp:post_date>2016-09-07 16:32:18</wp:post_date>
		<wp:post_date_gmt>2016-09-07 14:32:18</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>note-to-self-things-to-consider-when-switching-back-from-android-to-ios</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="android"><![CDATA[Android]]></category>
		<category domain="post_tag" nicename="apple"><![CDATA[Apple]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Judgment is a Silent Killer</title>
		<link>http://zef.me/2016/09/28/judgment-is-a-silent-killer/</link>
		<pubDate>Wed, 28 Sep 2016 09:33:05 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2016/09/28/judgment-is-a-silent-killer/</guid>
		<description></description>
		<content:encoded><![CDATA[


<figure>

<img data-width="1100" data-height="731" src="https://cdn-images-1.medium.com/max/1200/1*oh5WBtc4SYNHnpWnTKp3Lw.png">
</figure>

<p><span>T</span>he hardest part of my job is not technical — it’s communication, specifically: giving feedback. I fail at this over and over, and I see other people having trouble as well. In fact, I fear that giving effective feedback is so hard that people are too scared to do it. That’s a loss, because giving feedback, in my view, is an essential mechanism to improve. And I like to believe that everybody wants to improve.</p>
<p>So, it’s time to finally figure this feedback thing out once and for all.</p>
<p>In October 2012 I bought a book called <a href="http://www.amazon.com/Nonviolent-Communication-A-Language-Life/dp/1892005034" target="_blank">“Nonviolent Communication,”</a> but I never read it. The funny thing is that I have recommended the book to at least three people, purely based on the title. Some people are so obviously violent in their communication that it was hard not to recommend this book, regardless of my utter ignorance about its contents.</p>
<p>But then, about two months ago I started to read. This is what I concluded:</p>
<p>Judgement is a silent killer</p>
<p>I connected the dots after a call with a client, in which I shared feedback based on our cooperation thus far — all intended as very constructive. However, I made a mistake: I slipped in one piece of judgement, and that ended up being the only thing being heard by the client.</p>
<p>What did I say? I mentioned I felt that certain issues with a team were <em>exaggerated</em>. I did explain this was a natural result of the way things were communicated between our organizations (there was a lot of “escalation communication” going on) and that this was the <em>real</em> issue to be addressed, but already during the call I sensed that that part wasn’t heard at all. And indeed, after receiving a summary email about the call, it appeared they primarily heard “exaggerated,” the rest was just noise.</p>
<p>Whenever there’s judgement in your communication, people will fail to hear anything else.</p>
<p>So, my lesson learned is to avoid any type of judgement in communication. Terms like:</p>
<ul>
<li>exaggerated</li>
<li>bad, sucks, terrible</li>
<li>insensitive</li>
<li>selfish</li>
<li>lazy</li>
<li>not capable</li>
<li>unresponsive</li>
<li>manipulated</li>
<li>just (e.g. “just 5 tests”)</li>
</ul>
<p>Are all out. All judgmental. After using a judgmental word, you’re stuck, and the path the constructive conversation is blocked.</p>
<p>So, what should we do instead?</p>
<p>Here’s the essence of Nonviolent Communication summarized in 4 points: the NVC way of structuring a piece of feedback:</p>
<ol>
<li>
<strong>Observation</strong>: what do you observe, without evaluation (=judgement).</li>
<li>
<strong>Feelings</strong>: the fuzzy stuff — how does the observation make you feel?</li>
<li>
<strong>Needs</strong>: what are your needs regarding these observations and feelings?</li>
<li>
<strong>Request</strong>: what do you want from the other person.</li>
</ol>
<p>In essence, that’s it. Saved you from reading a 200 page book! (Not really — read the book.)</p>
<p>Let’s apply this in a developer context.</p>
<p>Let’s say you feel that one of your fellow developers is too careless with code and doesn’t care about quality at all. So, you share feedback YOLO-style:</p>
<blockquote>Hey Joe, your code is of terrible quality. Do you not care at all?</blockquote>
<p>Pretty concisely formulated! <em>Pats on back</em> Yet, somehow it doesn’t have the desired effect. Joe is angry and stops speaking to you. Worse: nothing improves at all.</p>
<p>What went wrong?</p>
<p>There are two pieces of judgement in there:</p>
<ol>
<li>“Terrible quality” is a judgement, not an observation. What specifically do you observe about the code that resulted in this judgement? Perhaps not all edge cases are taken into account, as displayed by limited or no unit tests — that’s an objective observation. Perhaps indentation doesn’t follow the guidelines — another observation (but not: “your code is poorly indented,” because poorly is another evaluation.)</li>
<li>“Not care” is also a judgement. You don’t know if Joe doesn’t care, that’s just your guess. Perhaps Joe is doing his very best, but just has never been made aware of all issues (because he never received good feedback before). Suggestion: leave this part out altogether.</li>
</ol>
<p>So, how to do this NVC-style?</p>
<p>Let’s say the real issue is about lack of unit coverage with sufficient eye for edge cases.</p>
<p>Let’s start with the <strong>observation</strong>:</p>
<blockquote>Hey Joe, I see that your code’s test cases do not cover all edge cases that need to be covered, specifically: A, B and C.</blockquote>
<p>Moving on to associated <strong>feelings</strong> — just because we developers love to talk about those:</p>
<blockquote>This makes me feel fearful that the code does not work as specified.</blockquote>
<p>Moving on to <strong>needs</strong>:</p>
<blockquote>This is because I have the need for important code (such as this) to be fully unit tested to ensure it works today and will not break in the future.</blockquote>
<p>And a <strong>request</strong>:</p>
<blockquote>Could you please add additional unit tests that cover all mentioned edge cases?</blockquote>
<p>Do you think Joe get angry when you tell him this? I doubt it. Will he improve? Well, that’s up to Joe.</p>
<p>Easier said than done, though. This stuff is hard. Really damn hard. Not judging is hard. Surfacing your associated feelings and needs is hard. I’m trying daily, and still get things wrong all the time. Yet, I believe this is important stuff. So important that I’m convinced the world would be a significantly better place if <a href="http://www.inquiringmind.com/Articles/Peacemaker.html" target="_blank">everybody communicated this way</a>.</p>
<p>Interested? I do recommend you read the <a href="http://www.amazon.com/Nonviolent-Communication-A-Language-Life/dp/1892005034" target="_blank">NVC</a> book. If you don’t feel like reading, <a href="https://www.youtube.com/results?search_query=marshall+rosenberg" target="_blank">watching the workshops</a> also helps, many versions have been posted on YouTube. I should warn you, though. About 10 minutes in, Marshall pulls out a guitar and sings. Later he’s playing puppets. It supports the purpose, but prepare yourself.</p>
<p>I’ll end this with an inspirational quote, because, you know, we’re talking about soft stuff like feelings and needs anyway, so why go all the way and attempt to inspire:</p>
<blockquote>“The ability to observe without evaluating is the highest form of intelligence.” — Jiddu Krishnamurti</blockquote>
<p>You’re welcome.</p>

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>83</wp:post_id>
		<wp:post_date>2016-09-28 11:33:05</wp:post_date>
		<wp:post_date_gmt>2016-09-28 09:33:05</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>judgment-is-a-silent-killer</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="best-of"><![CDATA[Best Of]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="nonviolent-communication"><![CDATA[Nonviolent Communication]]></category>
		<category domain="post_tag" nicename="software-development"><![CDATA[Software Development]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>“Don’t You Miss Programming?”</title>
		<link>http://zef.me/2016/10/05/dont-you-miss-programming/</link>
		<pubDate>Wed, 05 Oct 2016 17:55:42 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2016/10/05/dont-you-miss-programming/</guid>
		<description></description>
		<content:encoded><![CDATA[

<h4>Why I wouldn’t want to go back being a developer</h4>
<figure class="wp-caption">

<img data-width="2650" data-height="1756" src="https://cdn-images-1.medium.com/max/1200/1*oWQIiIxUJCdDnNWZjRTGoQ.png">

<figcaption class="wp-caption-text">Look at me — I’m a manager!</figcaption></figure>

<p>It’s the first thing people ask me when they find out that I used to be <em>one of them</em>. “Don’t you miss it? I hear you were pretty good, why did you switch to management, did they force you?”</p>
<p>Good question. Here’s my story.</p>
<h4>How did you get here?</h4>
<p>I started programming when I was 9. At the time of this writing that is 24 years ago. By the time I got my first “real” job, I already had a fair share of programming experience under my belt.</p>
<p>Then, after my PhD I was lucky enough to get my first industrial job at <a href="https://c9.io" target="_blank">Cloud9 IDE</a>, where I developed the language intelligence features of the IDE (in practice: parsing JavaScript, semantically analyzing, providing accurate code completion etc.) Pretty hardcore technical stuff. I did that for a few months, but got discouraged.</p>
<p>I was building super cool things (in my highly subjective opinion), but the IDE as a whole was very unstable. It crashed constantly. You can build the most amazing refactoring support in your IDE, but if you cannot rely on the system being up — would you use those features?</p>
<p>So, what did I do? I complained. And what happens when you complain in a start-up? They ask you to fix it.</p>
<p>So, I became responsible to stabilize the back-end.</p>
<p>But how?</p>
<p><strong>Approach #1<br></strong>By working really, really hard. By learning node.js. By learning Redis. By learning how to do cloud, and operations. By being on call all the time. By debugging issues in the middle of the night.</p>
<p>It took a while to realize that if I kept going this way, I would burn out quickly. I needed to change my approach to be more coordinating and less hands-on.</p>
<p><strong>Approach #2<br></strong>I wouldn’t say that a PhD in designing programming languages and implementing compilers is the best preparation for work that primarily involves talking to people. Nevertheless, I got into it. I started to read, and read, and read some more on the topic. I was very lucky to <a href="https://www.linkedin.com/in/adecaux" target="_blank">have a very good personal coach</a> at the time, who supported me immensely.</p>
<blockquote>I started to see that if I wanted to scale up my impact, I had to focus on leadership.</blockquote>
<p>One person can only do so much, if you have the ability to convince other people to join you, you can make a <em>real</em> difference. And as your team grows, this naturally leads to you doing less of the low-level stuff, and more of the high-level. And guess what, I found that to be just fine for me. Very interesting, in fact. I moved from programming computers to “programming humans.”</p>
<p>So, over the next months that’s what I started to learn doing. I became responsible for a team of about 15 engineers at Cloud9, as VP of Engineering.</p>
<p>To replace me working on the language intelligence features, I managed to recruit my former PhD colleague — <a href="https://www.linkedin.com/in/lennartkats" target="_blank">today he is Cloud9’s CTO</a>. Soon thereafter, I also hired an amazing DevOps guy, who later moved on to become <a href="https://www.linkedin.com/in/lucacipriani" target="_blank">CIO at Arduino</a>. Hiring good people is hard, and I was off to a good start.</p>
<p>And that’s how it all began.</p>
<h4>Cool story bro’, but I asked if you miss programming…</h4>
<p>Honestly, not really because I never <em>really</em> stopped. I still fiddle. I still occasionally implement an extra story in a sprint. I still play with stuff in my spare time. I still read a lot of highly technical stuff about new technologies and play with them. I still spend time doing code reviews, and found doing this in one C++ and another Objective-C project, taught me a lot about those environments — also, it gives me a lot of information about people’s habits, standards and skills.</p>
<p>Honestly, I believe keeping up with this stuff makes me more effective at my job as a manager. Rhetorically, people tend to listen more to people they perceive as <em>one of them</em>, and while I’m no longer really one of them, I’m working hard to keep up the “manager we respect because he actually seems to know his tech shit” thing going.</p>
<h4>Making a difference</h4>
<p>But yeah, I do spend the majority of my time in email and in meetings, and to be honest with you — I love what I do. Sadly it’s become much harder to measure my impact — since there’s no feature I can point to that I developed anymore.</p>
<p>Nevertheless, I get enough signs that indicate I’m making a difference in people’s working life and possibly their careers.</p>
<p>And boy, that makes me happier than any piece of code I wrote ever did.</p>
<p>Some nuggets:</p>
<ol>
<li>The atmosphere and attitude of the first team I led at my previous job was probably the best in the department — and the reason really wasn’t that our project was the most technically challenging. We made the best out of it and continued to raise the bar given our constraints.</li>
<li>The person who succeeded me as a team lead in that team wasn’t exactly perceived a born leader, but during my mentoring really blossomed, and the atmosphere and attitude of the team remains great — last I’ve heard.</li>
<li>In one project in my current job, people felt meetings they had were a massive waste of time, and just existed to satisfy “management.” I volunteered to try things my way, and in a recent retrospective multiple people shared they felt meetings had become much more valuable for <em>them</em>.</li>
<li>One person told me privately that he was about to quit, but decided to stay after starting to work with me.</li>
</ol>
<blockquote>Today, I feel I far exceeded the impact I could have had if I would “just” write code.</blockquote>
<p>A week or two ago our QA pointed out that since I stopped writing code in his project, he no longer had to spend extra time covering my code with tests, because everybody else was doing this themselves already. Yes, we raised quality bar to the extent that <em>I</em> was the one not keeping up.</p>
<p>So, do I miss programming? I’m OK. Don’t worry about me.</p>

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>89</wp:post_id>
		<wp:post_date>2016-10-05 19:55:42</wp:post_date>
		<wp:post_date_gmt>2016-10-05 17:55:42</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>dont-you-miss-programming</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="engineering-mangement"><![CDATA[Engineering Mangement]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="management"><![CDATA[Management]]></category>
		<category domain="post_tag" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="software-development"><![CDATA[Software Development]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Need for Speed: One-Week Sprints</title>
		<link>http://zef.me/2016/03/10/need-for-speed-one-week-sprints/</link>
		<pubDate>Thu, 10 Mar 2016 08:08:02 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2016/03/10/need-for-speed-one-week-sprints/</guid>
		<description></description>
		<content:encoded><![CDATA[


<figure>

<img data-width="2272" data-height="1280" src="https://cdn-images-1.medium.com/max/2560/1*r4LySydzWvTbW6t1xysUjA.jpeg">
</figure>

<p>A project I participated in recently ran one-week development sprints. It’s the first time that I worked in such short cycles, and I like it for similar reasons that I like Twitter with its 140 character limit: strong constraints force you to make tough decisions, to get to the core of things quickly, and to surface problems early.</p>
<p>On twitter, there’s no space for babble, for color, for flowery language: you have to get to the point quickly. One-week sprints are similar. In a one-week sprint, where you spend about half a day to a day altogether in all sorts of ceremonies (dailies, planning, sprint review, retrospective), so you effectively have 4 days left. If you assume to have 6 effective hours of work per day that allows for 24 effective hours to do “real work.”</p>
<p>Imagine a giant clock on the wall (time-bomb style) that is ticking down from 24h to 0h (there should be some TV drama based on that concept!).</p>
<p>Tick tock tick tock.</p>
<p>Now you really get the sense of urgency, we have to get going!</p>
<p>If you’re <em>that</em> constrained on time, what will you decide to spend your time on?</p>
<p>Do you just start to write code (or as some people call it: “real work”), or spend an hour or two planning the work with other developers? Of course, every hour you spend meeting in a five-developer team (like ours), costs you five hours total. Is that a good use of time?</p>
<p>It’s very easy to just jump into a sprint without much planning, and only then figure out that in order for you to start your task, Jimmy has to finish his, which in turn relies on an answer from the client to some ambiguous requirement.</p>
<p>As counter-intuitive as it may seem to some, sometimes it really pays off to spend an hour or two of collective time in a meeting to ensure that 5 people can work as independently as possible without blocking each other. What I see in practice is that how quickly you get to the desired end-result often depends on how well the work was planned in advance. Yet, many developers still consider time spent in a planning meeting as time wasted — as time “not doing work.” I don’t get this myself. Our job is to run towards the finish line as effectively as possible. That involves many things, only one of which is typing code into a text box.</p>
<p>But I digress.</p>
<p>On the other hand, what many developer <em>do</em> like is sit together and discuss technical issues: What framework shall we use? Shall we deploy this using Docker? Will this scale up to 5 million users? That’s the stuff we like to talk about. Sadly, the clock is ticking five times as fast whenever we sit altogether discussing such things too.</p>
<p>So the questions we have to ask ourselves constantly whenever there is something to talk about are these:</p>
<ol>
<li>
<strong>Is this important?</strong> If we have two possible directions and we’d flip a coin, would the decision be significantly worse? You’d be surprised about how often interesting topics are actually not important at all.</li>
<li>
<strong>Is it valuable to discuss this altogether?</strong> If it’s not important to discuss this with the whole team (expensive!) perhaps we can limit the group something smaller.</li>
<li>
<strong>Is it urgent?</strong> For instance: will we deploy this in a Docker container? That’s important, but not relevant until we go to production which is one or two months. We don’t have to worry about it now, let’s worry about it when it becomes more urgent.</li>
</ol>
<p>Forcing your mind to switch to “urgency mode” you really change your perspective on what matters, and what does not. Jack Bauer (let’s use this name as a placeholder for my hypothetical TV drama idea) is always in a hurry, he is always doing important stuff and forced decisions. The same applies to all of us. We should all be like Jack. Time optimization is always an important thing to keep an eye on, but if you have 3 weeks to deliver something, who cares if we waste another few hours talking about irrelevant things, right?</p>
<p>For this reason I like one week sprints. It’s a good exercise that will help everybody focus on what really matters. Perhaps we should try one-day sprints next?</p>

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>113</wp:post_id>
		<wp:post_date>2016-03-10 09:08:02</wp:post_date>
		<wp:post_date_gmt>2016-03-10 08:08:02</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>need-for-speed-one-week-sprints</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="agile"><![CDATA[Agile]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="scrum"><![CDATA[Scrum]]></category>
		<category domain="post_tag" nicename="software-development"><![CDATA[Software Development]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Brilliant, But Stuck</title>
		<link>http://zef.me/2016/09/02/brilliant-but-stuck/</link>
		<pubDate>Fri, 02 Sep 2016 12:47:16 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2016/09/02/brilliant-but-stuck/</guid>
		<description></description>
		<content:encoded><![CDATA[


<figure>

<img data-width="1920" data-height="1080" src="https://cdn-images-1.medium.com/max/1200/1*OqYAMOqRsXTZR17GjYwr-g.png">
</figure>

<p><span>Y</span>ou’re one of <em>them</em> — one of those 10x developers. The cream of the crop. You know how to build things, and build them well. Technical challenges don’t scare you — you got a track record of getting them done. People like working with you, because they know they will learn from you. In fact, people join whichever company you work for, <em>just</em> to be able to work with you. Recruitment loves you.</p>
<p>Yet, not all is perfect.</p>
<p>Your company doesn’t <em>appreciate</em> you fully. Sure, they like the stuff you build. But you know you don’t live in a vacuum. You work with other teams from time to time, with management, product management, sometimes even top management. Whenever you have a significant idea, or point out problems outside the realm of your own code base, somehow things <em>don’t happen</em>.</p>
<p>You feel slightly ignored. Initially, they listen, but somehow any initiative you take dies out. Somehow achieving something bigger in the company doesn’t happen. You’re stuck. Stuck in the group of people you hand picked to work with you.</p>
<p>Why?</p>
<p>Well, <em>obviously</em> because other people don’t see how good your ideas are, or they’re afraid of change, or just don’t care. Or perhaps it’s their culture. Also, other people are incompetent and probably simply stupid.</p>
<p>Yet, reflecting back on your career thus far, this has been a recurring issue.</p>
<p>You worked for many companies, and every time you and your team were the only competent ones. The powers that be, and other teams, didn’t get you, didn’t listen, didn’t do anything with your suggestions.</p>
<p>Hmm…</p>
<p>Maybe… just maybe, is it <em>not them</em>? Perhaps, <em>possibly</em>, is there any chance this may have to do something with <em>you</em>?</p>
<p>If so — <em>hypothetically — </em>what could the problem be? Intimidation through brilliance?</p>
<p>Let me ask you this: are you somebody who <em>tells it like it is</em>? Are you a <em>“truth teller”</em>, if you will? If so, looking back at all the time you “gave feedback” or made suggestions outside your direct realm of influence (your team) — did things die out practically immediately after telling people what you thought?</p>
<p>If so, your problem may be communication.</p>
<p>No, sorry, let me rephrase that: your problem for sure, without a doubt, <strong>is communication</strong>.</p>
<p><em>*Shudder*</em></p>
<p>Communication — that’s what managers do, right? Meetings and shit? You’re an engineer, your job is to <em>write the codez</em>.</p>
<p>You may think that, and continue living with that assumption, but here’s what I found:</p>
<p>You can be the smartest person the world, have the best ideas in the world, make the best observations in the world — if you cannot share them in a nonviolent way, <em>they’re worthless</em>.<em>You may as well not have them</em>.</p>
<p>If you cannot share good ideas or changes to make in a constructive, nonviolent way, the only way to make any of them happen is within the small group within your direct control, which self-selected (that’s a fancy way of saying: people left when they couldn’t take it anymore, or only joined after accepting a job after you berated them). You cannot “scale” if you cannot communicate nonviolently.</p>
<p>What do I mean when I say “violent”?</p>
<p>Some examples:</p>
<ul>
<li>“The way use your editor is pretty stupid, use split views and keyboard shortcuts dude.”</li>
<li>“Your code quality is pretty bad.”</li>
<li>“Your code reviews are a joke.”</li>
<li>“You’re doing ‘hero programming,’ not <em>real</em> software development.”</li>
<li>“You’re wasting our time with your meetings.”</li>
<li>“You’re doing it all wrong.”</li>
</ul>
<p>This is language that <em>judges</em> (unfavorably).</p>
<p>Here’s a quick way to detect such language — think about how you would feel (<em>*shudder*</em>) when somebody says this to you (not the awesome you that you are, but a slightly less superior you). Would you feel good or bad? If bad — it’s probably violent communication.</p>
<p>You may say — “I’m just telling people the truth, they should be able to handle that. And if they can’t — tough cookies. Grow a pair.”</p>
<p>Of course, you may be right. But reality is this: this is the belief that brought you where you are today. How’s it working out for you?</p>
<p>Of course, the world <em>should</em> work differently, attitude shouldn’t matter, just skills and ideas, and<em>sure</em>, you can wait for this to change. <em>Any day now!</em> Maybe in your <em>next</em> job things will be different.</p>
<p>You may find, however, that the group of people that respond well to violent communication is shockingly small. Some may accept it, but most people will just consider you an arrogant dick, and ignore you as much as possible.</p>
<p>So what’s the alternative? Keep your mouth shut? No, of course not.</p>
<h3>Nonviolent Communication</h3>
<p><a href="https://zef.me/judgment-is-a-silent-killer-ca547e128598#.l9jn2689v" target="_blank">I’ve written about nonviolent communication before</a>, but the essence to me is this:</p>
<blockquote><strong>Stop mixing observation with judgement, in fact, <em>stop judging altogether</em>. Focus on constructive ways to move ahead.</strong></blockquote>
<p>Which raises the question: what’s the difference between <em>observation</em> and <em>judgement</em>? Observations are objective (nobody can disagree with them), judgments are subjective (some people may disagree, most likely: your audience).</p>
<p>Let me give some examples (most important phrases are marked in italics):</p>
<p><strong>Judgement:</strong> The way use your editor is <em>pretty stupid</em>, use split views and keyboard shortcuts, dude.<br><strong>Observation with constructive feedback:</strong> I <em>noticed</em> that you keep switching between windows in your editor with your mouse, have you considered using split views and keyboard shortcuts to switch between them?<br><strong>Side-note:</strong> fluffing up judgmental terms like “stupid” with adjectives like “a little”, or “pretty” doesn’t change the fact that you’re judging.</p>
<p><strong>Judgement:</strong> Your code quality is <em>pretty bad</em>.<br><strong>Observation with constructive feedback:</strong> I <em>noticed</em> you have a lot of uninitialized variables. <em>The risk of those is that it may lead to undefined behavior.</em> Have you considered using tool <em>X </em>that can mark those and help you to quickly get rid of them?</p>
<p><strong>Judgement:</strong> Your code reviews <em>are a joke</em>.<br><strong>Observation with constructive feedback:</strong> I’ve <em>noticed</em> that the focus of code reviews is a lot on indentation and variable naming. I think <em>there may be</em> more value in focusing on architectural issues. Perhaps we can come up with a way to work those into the code review process?<br><strong>Side-note #1:</strong> something being “a joke” is not an observation — we all have different senses of humor, and what your team does during a code review may differ from others, and <em>that’s not necessarily bad</em> (“bad” — look at me using judgmental words).<br><strong>Side-note #2:</strong> “there may be more value” sounds like overly soft language, but it opens up the chance that, at the end of a constructive conversation, you may be proven wrong. Even though you think you’re infallible, there’s a chance (however small) that you’re not, and there may be other valid points of view. Being careful with definite statements like “there is more value” is sensitive to that.</p>
<p><strong>Judgement:</strong> You’re doing “<em>hero programming</em>,” not real software development.<br><strong>Observation with constructive feedback:</strong> Whereas the number of features you finish is impressive, I also <em>see</em> that many of them don’t have any unit or functional tests associated with them. This makes me worried about future maintenance, and edge cases not being handled. Have you considered requiring some sort automated testing for all new features?</p>
<p><strong>Judgement:</strong> You’re <em>wasting</em> our time with your meetings.<br><strong>Observation with constructive feedback:</strong> <em>We have</em> a daily meeting every day, but it <em>appears</em>we are sharing things that everybody already knows. Is there anything we can do to make this meeting either more valuable, and if not, at least reduce its frequency or remove the meeting altogether?</p>
<blockquote><strong>When you use judgmental language, people will only hear the judgment and nothing else — any valuable advice or idea around it becomes white noise.</strong></blockquote>
<p>When you judge, you piss people off — whether or not they tell you, or show it. Pissed off people are remarkably uncooperative. For sure, they’re not going to help you, or take your ideas seriously.</p>
<p>And there you have it.</p>
<p>Communication, it really matters — we all wish it were different, but that’s life. Consider giving it some serious thought. As a starting point, read my <a href="http://zef.me/blog/2016/4/judgement-is-a-silent-killer" target="_blank">previous article on NVC</a>.</p>

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>154</wp:post_id>
		<wp:post_date>2016-09-02 14:47:16</wp:post_date>
		<wp:post_date_gmt>2016-09-02 12:47:16</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>brilliant-but-stuck</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="best-of"><![CDATA[Best Of]]></category>
		<category domain="post_tag" nicename="communication"><![CDATA[Communication]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="software-development"><![CDATA[Software Development]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Reading For Busy People</title>
		<link>http://zef.me/2016/03/21/reading-for-busy-people/</link>
		<pubDate>Mon, 21 Mar 2016 19:10:21 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2016/03/21/reading-for-busy-people/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p><span>I</span> don’t consider myself a big reader in the traditional sense — I don’t read <em>any</em> fiction, for example. What I do read is work and career related, because that’s my passion. But, reading has been getting harder as my life got more busy (think: wife, job, son), and therefore over the past years I changed my reading habits to account for having trouble “allocating” longer stretches of time for reading.</p>
<p>Here’s my system.</p>
<h4>What</h4>
<p>I get stuff to read from various sources:</p>
<ol>
<li>Recommendations from colleagues (for books, articles)</li>
<li>Twitter, Medium</li>
<li>References in other articles and books</li>
</ol>
<p>To organize my reading “backlog” I have two systems. For anything shorter than a book, I just add it to <a href="https://getpocket.com/a/queue/" target="_blank">Pocket</a>, for which I have browser extensions, a desktop app and mobile app installed. Pocket is an OK app, but one thing I’m missing is a feature that allows me to <em>reorder items to reflect reading priorities</em>. This is minor, though.</p>
<p>For books I have a <a href="http://www.trello.com" target="_blank">Trello</a> board: here it its current state:</p>
<figure><img src="https://cdn-images-1.medium.com/max/800/1*D5oDbl56S0PyygvQz8hEnA.png"></figure><p>I’ve become kind of a <a href="https://en.wikipedia.org/wiki/Kanban" target="_blank">Kanban</a> nut recently, which translates into me even tracking the books to read this way. I’m considering also mixing in articles in Pocket here, but I haven’t considered the extra overhead worth it yet.</p>
<p>On the left is the <strong>“To Read”</strong> column with all books I’d like to read, ordered by priority. If there’s an audiobook version available on Audible, it’s labeled with a light green label. If I feel I have to re-read something, I mark it with a black label.</p>
<p>The <strong>“Reading”</strong> column shows the books I’m currently reading. I put a Kanban constraint on this column for 2 items. I’ve too often run into the problem of reading too many books at once and that leads to frustration and lack of <em>reading throughput</em>. Ideally I have 1 “regular” book here, and 1 audiobook (more on this later).</p>
<p><strong>“Completed”</strong> is the column with the books I read. This is the list of books I read since I started using this Kanban system. The nice thing about having this column rather than deleting items from the board is the <em>sense of achievement</em>. Look at that, I read 5 books of the past <em>x</em> months (not sure what <em>x</em> is, I should check that).</p>
<p><strong>Improvement idea:</strong> add pictures of the book covers here. The more visual, the better.</p>
<h4>How</h4>
<p>I read in two ways:</p>
<p><strong>Audiobooks</strong><br>I read audiobooks during travel, shopping and walks. I walk my kid to kindergarten daily, which gives me perhaps 15–20 minutes of “reading” time on the way back. When I go shopping, I listen. When I travel, I listen.</p>
<p><strong>Kindle books</strong><br>I never buy physical books. All my books are Kindle books (or in rare cases PDFs). <em>I read them all on my iPhone.</em></p>
<p>I do own a traditional Kindle, but it has the same problem that our good camera has: I never have it with me when I need it. Reading on an iPhone is fine for me. I own an iPhone 6 right now, with a 4.7” screen, but I’m considering a 5.5” iPhone 7 plus when it comes out, because of the amount of reading I do. Would I read in multi-hour stretches, it may be less pleasant, but I don’t do so often, so it’s ok.</p>
<h4>When</h4>
<p>I read a bit in bed before sleeping, I read sometimes during a lunch break, I read standing in queue in a store, it’s possible I read on the toilet, but I’ll never admit to that. 5 minutes here, 10 minutes there, it adds up. The best time, obviously, is when I travel alone. I don’t have a commute, unfortunately (I live literally 200m from my office).</p>
<h4>More!</h4>
<p>But that’s not all. I also listen to a lot of podcasts, for whenever I need some lighter content. I also subscribe to <a href="http://www.economist.com/" target="_blank">The Economist</a> (again, on my phone). These two result in a prioritization issue. When should I listen to a podcast and when to an audiobook? When a kindle book, when The Economist. Choices!</p>
<p>Using this system I get a fair amount of reading done. I do sometimes worry if being “always on” won’t have some sort of bad effect on my brain. So far all seems ok.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>157</wp:post_id>
		<wp:post_date>2016-03-21 20:10:21</wp:post_date>
		<wp:post_date_gmt>2016-03-21 19:10:21</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>reading-for-busy-people</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="books"><![CDATA[Books]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="reading"><![CDATA[Reading]]></category>
		<category domain="post_tag" nicename="readinglist"><![CDATA[Readinglist]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Tech Radar October 2016</title>
		<link>http://zef.me/2016/10/26/tech-radar-october-2016/</link>
		<pubDate>Wed, 26 Oct 2016 17:55:04 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2016/10/26/tech-radar-october-2016/</guid>
		<description></description>
		<content:encoded><![CDATA[

<figure><img src="https://cdn-images-1.medium.com/max/800/1*o71b-e87bL1yPOIBDRgYkA.png"></figure><p>The technologies I keep an eye on and find interesting evolve over time. I thought it could be interesting to share the things I’m currently seeing, thinking about, and playing with. The things on my technological radar, if you will.</p>
<p>Here’s my list for this month. Previous editions <a href="https://zef.me/tagged/techradar" target="_blank">can be found here</a>.</p>
<h4>Next.js</h4>
<p>One of the big issues I have with JavaScript these days — but I suppose it’s been like this for a decade — is that there’s too much setup time, and too much choice. This is one of the things that attracted me to Dart initially — having the foundations locked down, so we don’t have to debate the fundamentals over and over again (on an unrelated note — <a href="https://techcrunch.com/2016/10/26/googles-dart-programming-language-returns-to-the-spotlight/" target="_blank">Dart is in the news again</a>).</p>
<p>I don’t develop stuff day-to-day anymore. I only have time to prototype some things from time to time. If I have an evening from some JS hacking, in effect I end up spending it setting up webpack with babel with React with …</p>
<p><a href="https://github.com/zeit/next.js" target="_blank">Next.js</a> makes opinionated choices and hides the whole build, rebuild, production build process, handles server-side rendering and routing. Next time I have some time, this is for sure the library/framework/environment (not sure what to call it) I’d start-off with.</p>
<p>Let’s see if this gets some adoption, would be good. It comes from the great people of <a href="http://zeit.co" target="_blank">Zeit</a>, creators of other interesting tools like <a href="https://zeit.co/now/" target="_blank">now</a> and <a href="https://hyper.is" target="_blank">HyperTerm</a>.</p>
<h4>The Beauty of Ugliness</h4>
<p>I didn’t realize this, but Slack is yet another company that is <a href="https://slack.engineering/taking-php-seriously-cf7a60065329#.a0294px5i" target="_blank">heavily invested in PHP</a>. Somehow I had the sense that PHP was really a thing of the past. Sure, Facebook is heavily invested in it too, but I assumed this was legacy. Perhaps not so much. Keith Adams at Slack has a nicely <a href="https://slack.engineering/taking-php-seriously-cf7a60065329#.a0294px5i" target="_blank">balanced post about the benefits and costs of building with PHP today</a>.</p>
<p>As it turns out, if enough companies (or even just one significant one) become so reliant on a technology that has fundamental flaws — they <em>really can be overcome</em>. PHP is one example of this, with Facebook making it fast with <a href="http://hhvm.com" target="_blank">HHVM</a>, and more safe and friendly using <a href="http://hacklang.org" target="_blank">Hack</a>.</p>
<figure><img src="https://cdn-images-1.medium.com/max/800/1*9oWl-JVuXY2lCmFk_gpuiw.png"></figure><p>One other example of this is JavaScript. JavaScript isn’t all beauty. But if you throw enough committee time at it, and invest enough raw engineering time into it, you <a href="http://www.ecma-international.org/ecma-262/6.0/" target="_blank">can fix most issues</a> and make it <a href="https://developers.google.com/v8/" target="_blank">pretty damn fast</a>.</p>
<p><em>Anything</em> can be fixed if you put your mind — or rather many thousands of incredible minds — to it.</p>
<h4>Ops in a Serverless World</h4>
<p>In <a href="https://zef.me/zefs-tech-radar-for-september-2016-41feaf78244e#.se4sj84yl" target="_blank">last month’s tech radar</a> I wrote about Serverless web apps. If the future of servers is no (visible) servers, then… will Ops people still have a job?</p>
<p>Susan Fowler writes about this <a href="http://www.susanjfowler.com/blog/2016/10/13/the-ops-identity-crisis" target="_blank">Ops Identity Crisis</a>:</p>
<blockquote>A big theme in the keynotes and conversation during Velocity Conf in NYC a few weeks ago was the role of ops in an “ops-less” and “server-less” world. It’s also been a big feature in discussions on twitter and in conversations I’ve had with coworkers and friends in the industry. There are several things that stand out to me in these conversations: first, that some ops engineers (sysadmins, techops, devops, and SREs) are worried that they will be phased out if developers and software engineers are responsible for the operational tasks in their systems; second, that developers and software engineers do not have the skills needed to take over responsibility for operational tasks; and third, that building reliable systems is impossible without an operations organization.</blockquote>
<p>From my perspective: serverless is a cool concept, but it will probably take a decade or more to go mainstream. It requires quite a drastic shift in how we build software systems from what we’re used to.</p>
<figure><img src="https://cdn-images-1.medium.com/max/800/1*sditx7QiGJPVRP9hNxKaig.png"></figure><p>I suspect that there will be plenty of “ops related” work left — work that’s more interesting than “pure ops” work like “I’m getting an alert the disk of server A is full, let’s clean up some logs.” Somewhat related is <a href="https://zef.me/making-a-super-team-2d31725a3a3#.sqdqk9nbu" target="_blank">my article about creating a super team</a>, where the role of DevOps is to build tools rather than doing the operational work (which should be automated and done by the team). This idea is inspired by a book I discovered this month: <a href="http://shop.oreilly.com/product/0636920041528.do" target="_blank">“Site Reliability Engineering”</a> Currently I’m 15% in. Good stuff so far. Definitely recommended if you care about the Ops/DevOps/SRE stuff (as I do).</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>232</wp:post_id>
		<wp:post_date>2016-10-26 19:55:04</wp:post_date>
		<wp:post_date_gmt>2016-10-26 17:55:04</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>tech-radar-october-2016</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="devops"><![CDATA[DevOps]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="software-development"><![CDATA[Software Development]]></category>
		<category domain="post_tag" nicename="techradar"><![CDATA[Techradar]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>“Resilience Thinking” in the Micro-Service Architecture</title>
		<link>http://zef.me/2016/09/02/resilience-thinking-in-the-micro-service-architecture/</link>
		<pubDate>Fri, 02 Sep 2016 13:20:18 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2016/09/02/resilience-thinking-in-the-micro-service-architecture/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p><span>M</span>icro services — the idea of splitting up your “monolith” software architecture into dozens, even hundreds of small services — pops up all over the place these days. At <a href="https://www.egnyte.com" target="_blank">Egnyte</a> we are also regularly discussing this topic, and investigating how to move towards this model more and more.</p>
<p><em>Resilience</em> is a hot topic in this area. Resilience is all about gracefully handling failures — which will inevitably happen at increasing rates as your system becomes more distributed (a natural consequence of the micro-service architecture).</p>
<p>As you tear more and more of your software apart and move them to separate services, the number of possible points of failure increases.</p>
<p>Before, you just called method “b” on object “a” and it always “just worked™.” But now, you send message “b” to service “a” and you have to take into account the network may be down, that “a” is not reachable, overloaded, down, may crash while processing, or is a different “a” than you talked to 5 seconds ago.</p>
<p>For sure, this adds complexity, but what I like about it is that it surfaces risks that <strong>have always existed,</strong> but may not yet have been part of a developer’s mental model.</p>
<p>It was <strong>always the case</strong> that calling method “b” on “a” could fail, but you never saw that happen in practice, so <em>whatever</em>. Now that method “b” lives elsewhere on the network, you <em>have to</em> assume it will fail and figure out how to deal with it.</p>
<p>Will you automatically retry? If so, how often, with exponential back-off or not? How do you make sure that “b” didn’t silently crash somewhere without you noticing? How do you debug that?</p>
<p>You’re <strong>forced to think</strong> about these issues (I hope — if not, good luck with that) whereas before resilience could be more realistically dealt with in a more reactive fashion: “Hey, writing this file fails once every day, perhaps we should put a try-catch around that, so it no longer crashes the whole thread.”</p>
<p>At an infinite timescale, software will crash at every single line of your code base (even if it’s because some random electron shoots through your hardware causing a crash — please don’t comment that this is not actually possible, I don’t know much about physics). Again, micro services just throw the “unexpected failure” problem in developers’ faces more visibly, so that they can no longer ignore it.</p>
<p>My point is this: the micro service architecture comes with many costs, but the end result will be that “resilience thinking” will have to become part of every developer’s life. And in my view, that’s a good thing.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>239</wp:post_id>
		<wp:post_date>2016-09-02 15:20:18</wp:post_date>
		<wp:post_date_gmt>2016-09-02 13:20:18</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>resilience-thinking-in-the-micro-service-architecture</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="microservices"><![CDATA[Microservices]]></category>
		<category domain="post_tag" nicename="resilience"><![CDATA[Resilience]]></category>
		<category domain="post_tag" nicename="software-development"><![CDATA[Software Development]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Zef’s Tech Radar for September 2016</title>
		<link>http://zef.me/2016/09/30/zefs-tech-radar-for-september-2016/</link>
		<pubDate>Fri, 30 Sep 2016 16:39:16 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2016/09/30/zefs-tech-radar-for-september-2016/</guid>
		<description></description>
		<content:encoded><![CDATA[

<figure>

<img data-width="1000" data-height="667" src="https://cdn-images-1.medium.com/max/800/1*Ht_pc7mXuolerpNkrCMspQ.png">
</figure><p>The technologies I keep an eye on and find interesting evolve over time. I thought it could be interesting to start sharing the things I’m currently seeing, thinking about, and playing with. The things on my technological radar, if you will.</p>
<p>Here’s my list for this month.</p>
<h3>1. Post-GC era programming languages</h3>
<p>Given my background, I keep being intrigued by new programming languages, and my current interest is (systems) languages that work without a garbage collector.</p>
<p>For the longest time I assumed GC (garbage collection) was the way of the future when it comes to memory management, but with the emergence of mobile devices and IoT where memory and CPU cycles are relatively scarce, a GC becomes too costly and too unpredictable. Both <a href="https://www.rust-lang.org" target="_blank">Rust</a> and <a href="https://swift.org/" target="_blank">Swift</a> are modern, high-level programming languages that attack this problem from different angles.</p>
<p>Swift inherited Objective-C’s automatic reference counting. Rust does automatic memory management through <a href="https://doc.rust-lang.org/book/ownership.html" target="_blank">its ownership model</a>. Of the two, Rust is probably the more academically interesting one. I see Swift as the more pragmatic, about-to-become-huge one, especially now that Apple <a href="https://swift.org/download/" target="_blank">released a Linux version</a> of Swift and people are experimenting with it <a href="http://www.kitura.io/" target="_blank">on the server</a>. Full stack development with a single language is a dream mobile developers have too, as it turns out. And who uses JavaScript anymore these days…</p>
<h3>2. Bots</h3>
<p>When chat bots became a thing, my first response was: whatever, AI blah blah, not something for me to be that interested in from a development perspective, because I’m not really a machine learning, natural language processing kind of guy.</p>
<p>However, over the past few weeks I’ve been thinking and reading a bit more about them, and I increasingly feel they are worth exploring.</p>
<p>Honestly I’m not convinced that bots are the future of human-computer interaction, but they may have their uses. Again, is worth exploring and playing with.</p>
<p>What I like about chat bots:</p>
<ol>
<li>Nothing to install for users, so low barrier to try them out. I played with a few FB messenger bots, and it’s really low friction to start using — you just send a message, and go.</li>
<li>No GUI design required — this great for me, because I’m really bad at this. I can write, though, so textual interfaces may be easier to design for me.</li>
<li>Push — in most apps, push is secondary, in a chat bot it’s expected. You can do request-response, but pushing notifications is a super obvious thing in messengers and a great way to make bots useful. The trick is to not overdo it, of course, I’ve disabled many bots because they flooded me with news updates and what not. And just like friends on messenger that get too chatty — I blocked their ass.</li>
<li>Easy to do cross platform — largely this is all text, with some images and bells and whistles, but there are already a bunch of frameworks that allow you to build bots that operate on multiple messengers, which in turn operate on many different mobile and desktop platforms, so it’s pretty easy to reach your audience wherever they are.</li>
</ol>
<h3>3. Micro services</h3>
<p>I still try to figure it to what extent micro services are primarily a technical advancement or about scaling large systems across many teams in a sane way. Probably a mix.</p>
<p>At Egnyte I’m responsible for the Partner Integrations team, which operates about a dozen small independent services. Technically they’re pretty micro, but they are independent to the end extent that they don’t talk to each other at all, just to the Egnyte public API. Another team here is actively looking at splitting more of the “monolith” into smaller services and hopefully improve team ownership. Yet another is <a href="https://zef.me/micro-services-on-the-client-4631977e363c?source=latest" target="_blank">investigating micro services on the client</a>. Anyway, the topic is on my mind a lot.</p>
<h3>4. Serverless web apps</h3>
<p>I remember the first time I was able to host an interactive web app somewhere (it was on a free web host called hypermart that supported Perl through CGI). It was great, but I didn’t have much freedom to install new stuff.</p>
<p>Later I progressed to running my stuff on my own VPS with root access. It was awesome.</p>
<p>Then operating a big sure on servers with root access became my job, then I learned it was really hard.</p>
<p>So, now I’m super excited about the chance that the next big thing may be serverless web apps, where apps are just a bunch of tiny functions that are scaled and operated autostart by companies that know how to do that stuff, like Amazon with <a href="http://docs.aws.amazon.com/lambda/latest/dg/welcome.html" target="_blank">AWS Lambda</a> or Google with <a href="https://cloud.google.com/functions/" target="_blank">Google Functions</a>.</p>
<p>I’m eager to see where this will all go and what the scope of this approach will be. <a href="https://github.com/claudiajs/claudia-bot-builder" target="_blank">One use case for sure are chat bots.</a></p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>253</wp:post_id>
		<wp:post_date>2016-09-30 18:39:16</wp:post_date>
		<wp:post_date_gmt>2016-09-30 16:39:16</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>zefs-tech-radar-for-september-2016</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="bots"><![CDATA[Bots]]></category>
		<category domain="post_tag" nicename="chatbots"><![CDATA[Chatbots]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="messaging"><![CDATA[Messaging]]></category>
		<category domain="post_tag" nicename="techradar"><![CDATA[Techradar]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>How to Abandon Open Source</title>
		<link>http://zef.me/2016/09/28/how-to-abandon-open-source/</link>
		<pubDate>Wed, 28 Sep 2016 10:13:10 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2016/09/28/how-to-abandon-open-source/</guid>
		<description></description>
		<content:encoded><![CDATA[


<figure>

<img data-width="1280" data-height="800" src="https://cdn-images-1.medium.com/max/1200/1*cRFdXGqB911Bb_6LL9caTw.png">
</figure>

<p><span>I</span> have a character flaw that I’ve been aware of for a while, but am not sure how to address: I’m great at prototyping new projects, open sourcing and pitching them in blog posts, but when I stop using them or when the interesting bit is done, I lose interest and have a hard time supporting and maintaining them. In many cases this goes unnoticed, but a number of times my enthusiasm has resulted in people actually using my stuff (oh my) and that’s when trouble starts.</p>
<p>Some examples:</p>
<ul>
<li>mobl: a programming language I built during my PhD for rapidly developing mobile web applications. Very cool project, but I had no time for it after I finished my PhD. The plan was that the research project would take over, and it seemed that a student there did some work on it for a little while. But after that student finished his master’s thesis the project went completely dead. A big shame, because there were users, including one company that was quite far developing a commercial product using it.</li>
<li>
<a href="https://github.com/coresmart/persistencejs" target="_blank">persistence.js</a>: persistence.js is an ORM library written in JavaScript, developed originally to be used with WebSQL, but later also extended to work with MySQL and a few other databases using node.js. I developed it because I needed a library like this for mobl, and it really took off. Of the three, this is by far the most popular project and it’s quite widely used. However, WebSQL is essentially obsolete and I don’t use myself anymore. I transferred the project to somebody else, but he never did any work on it either.</li>
<li>
<a href="https://github.com/zefhemel/nix-docker" target="_blank">nix-docker</a>: I developed this while at LogicBlox, who is the corporate sponsor of the <a href="http://www.nixos.org/" target="_blank">nix</a>package manager, NixOS and so on. At the time Docker just became a thing, so I decided to develop a prototype of what the combination of the two would look like. <a href="http://zef.me/blog/6049/nix-docker" target="_blank">As it turns out it looks pretty cool</a>. But: for me it was mostly a prototype, I never used it much beyond that. NixOS developed further and eventually nix-docker broke. I get emails and tweets about it this from time to time.</li>
<li>
<a href="http://zedapp.org" target="_blank">Zed</a>: I developed this editor pretty heavily for 2–3 years, but now that I do very little programming, I just don’t have much use for it. As a result, I haven’t worked on it for a long, long time.</li>
</ul>
<p>So what to do about it? I have mixed feelings.</p>
<p>On one hand, there’s the theoretical idea that “it’s open source, anybody can fix it!” In practice, as easy as Github makes this, it doesn’t happen in any serious way. I do get pull requests, and usually if it’s reasonably sized I code review and merge them. Whenever it takes much more time than answering an email or merging a pull request, I’m having a tough time getting myself to it. Partially this is due to a lack of time, I do have a full-time job and a family. But honestly, even if I had the time I no longer have any interest.</p>
<blockquote><em>The only reason I would do anything is out of guilt.</em></blockquote>
<p>Ideally, I would find new maintainers for projects that get some traction, but in practice that’s really hard.</p>
<p>As a result, I’m thinking if I shouldn’t be more cautious with my enthusiasm about stuff I build, or at least put giant disclaimers on things. As it turns out, when you open source a project, you implicitly promise to support and maintain it until eternity, or until the last user switches away from it. That’s quite a commitment. Of course, these rules are in no way written, still I sometimes get this feeling as disappointed emails keep coming in.</p>
<p>For now, I’m just putting giant disclaimers in the README about the state of existing projects, to at least be more upfront about it.</p>
<p>Anybody got experience with this? Any solutions?</p>

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>264</wp:post_id>
		<wp:post_date>2016-09-28 12:13:10</wp:post_date>
		<wp:post_date_gmt>2016-09-28 10:13:10</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>how-to-abandon-open-source</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="open-source"><![CDATA[Open Source]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Bye Bye Chrome Apps</title>
		<link>http://zef.me/2016/10/10/bye-bye-chrome-apps/</link>
		<pubDate>Mon, 10 Oct 2016 17:43:23 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2016/10/10/bye-bye-chrome-apps/</guid>
		<description></description>
		<content:encoded><![CDATA[

<figure>

<img data-width="1280" data-height="854" src="https://cdn-images-1.medium.com/max/800/1*w-p8sKorymp4RaEScou8Dg.jpeg">
</figure><p>A few years ago I made a big bet on Chrome Apps by developing <a href="http://zedapp.org" target="_blank">Zed</a>, my editor project, <a href="https://zef.me/the-chrome-route-83bb2ebccb97#.6t88kxifx" target="_blank">exclusively as Chrome App</a>.</p>
<p>Today I received the official announcement that Chrome Apps are effectively dead:</p>
<blockquote>Dear Developer,</blockquote>
<blockquote>We’re reaching out to you because you’re registered as a Chrome App developer in the Chrome Web Store. As you might have seen recently, we announced that we will be increasing our focus on the Web and open standards by removing support for Chrome packaged apps and hosted apps on Windows, Mac, and Linux over the next two years. Chrome apps will remain supported and maintained on Chrome OS for the foreseeable future. Chrome extensions will also continue to be supported on all platforms.</blockquote>
<blockquote>Starting in late 2016, newly published Chrome apps will only be available to users on Chrome OS. Existing Chrome apps will remain accessible on all platforms, and you can continue to update them.</blockquote>
<blockquote>In the second half of 2017, the Chrome Web Store will no longer show Chrome apps on Windows, Mac, and Linux, but will continue to surface extensions and themes. In early 2018, users on these platforms will no longer be able to load Chrome apps.</blockquote>
<blockquote>We encourage you to migrate your Chrome app to the open web, and we’ve written a transition guide to help you with this process. If the web platform can’t provide the functionality you need, please let us know why. You can also consider using a Chrome extension or an alternate app platform such as Electron or NW.js.</blockquote>
<blockquote>Best,</blockquote>
<blockquote>The Chrome Web Store and Apps Team,</blockquote>
<blockquote>Google Inc. 1600 Amphitheatre Parkway, Mountain View, CA 94043</blockquote>
<blockquote>MSA Consumer: You’ve received this mandatory service announcement email to update you on important changes related to the Chrome Web Store and Apps Platform.</blockquote>
<p>Zed is also available as strand-alone, but at one point had over 40,000 Chrome app users.</p>
<p>Oh well.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>265</wp:post_id>
		<wp:post_date>2016-10-10 19:43:23</wp:post_date>
		<wp:post_date_gmt>2016-10-10 17:43:23</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>bye-bye-chrome-apps</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Breaking the Cycle, Retro-Style</title>
		<link>http://zef.me/2016/10/20/breaking-the-cycle-retro-style/</link>
		<pubDate>Thu, 20 Oct 2016 17:59:55 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2016/10/20/breaking-the-cycle-retro-style/</guid>
		<description></description>
		<content:encoded><![CDATA[

<figure><img src="https://cdn-images-1.medium.com/max/800/1*x_5reSbQeElD8ahLpdHazQ.png"></figure><p>Once upon a time, a team got into a cycle of putting out fires that escalated to a point where productivity practically grind to a halt. When one issue was fixed, another popped up. It was like a game of whack-a-mole. It never stopped. This team had been in this cycle for so long that people consider it normal.</p>
<p>“That’s life, it happens.”</p>
<p>But this <em>doesn’t</em> have to be life. This doesn’t have to “happen.”</p>
<p>There’s a way out.</p>
<p>No no, not <em>that</em> radical way out…</p>
<p>Let’s look at a couple of examples of this type of issue, and then at ways to break out.</p>
<h4>1. Manual QA Regression Cycles</h4>
<p>Let’s say one of your products requires a two-week manual regression cycle before a release. Over the years a huge suite of manual tests has accumulated in order to detect regressions. Obviously, such regression cycles are very expensive, slow, and far from inspirational for those who perform them. In an attempt to address this, your company replaced manual testers with QAs that can automate these tests. Good idea!</p>
<p>However, due to escalations and constant maintenance releases, the newly hired automation QAs never get to actually write any automation test. Instead, they spend all their time manual testing in order not to block releases from happening.</p>
<p>Every time they finish, so many new issues have been escalated by customers and fixed by developers, that the QAs have a full-time job manually verifying the fixes, followed by yet another regression cycle.</p>
<p>Then, everybody keeps their fingers crossed, hoping that <em>this time</em> they will get some time to actually automate stuff.</p>
<p>Yah—doesn’t happen. After half a year, barely any real progress is made. The result: people hired to do automation, do manual testing, under utilizing their skill set — to put it mildly.</p>
<h4>2. Escalation Cycle of Doom</h4>
<p>Cycle number two: you have a very exciting product roadmap, but then trouble hits. For some reason your last maintenance release introduced some serious new bugs. Customers <em>en masse</em> are reporting serious problems.</p>
<p>So, all hands on deck! All developers are reallocated to work on fixing escalated bugs. For weeks, rather than making progress on the roadmap, developer spend fixing all the things.</p>
<p>Unfortunately, after this new release, new — different—issues appear and the cycle playing whack-a-mole continues.</p>
<p>Not only is no progress made on the product roadmap, developers get very demotivated from always be putting out fires.</p>
<h4>3. Fire as the Status Quo</h4>
<figure><img src="https://cdn-images-1.medium.com/max/800/1*hEgcdNfn19-fuYYjoRnP-Q.png"></figure><p>Welcome to Ops. Things being on fire is normal. It’s part of the job. No reason to get upset. We put out a fire here, and another appears there.</p>
<p><em>It happens.</em></p>
<p>If this is what your Ops department looks like, it must be burning through people (no pun intended) rapidly. People can only take this sort of stress situation for so long, before they have to get out.</p>
<h3>Breaking the Cycle</h3>
<p>So what to do? Here’s how you can attempt to break such cycles:</p>
<ol>
<li>
<strong>Accept that you have a problem.</strong> This seems obvious, but in many cases, because cycles have been in place so long, people no longer recognize they’re <em>in one</em> — it has become the status quo.</li>
<li>
<strong>Decide that you have to <em>invest</em> in getting the problem fixed. </strong>This will cost you short term, but should quickly start repaying itself long term.</li>
<li>And now the real meat:<strong> have retrospectives.</strong> Have a meeting where the whole team brainstorms on how to break the cycle, how to avoid the same thing from occurring again and again. <strong>Learn</strong> from what happened. Take time to pause, step back, and think about what you’re doing. Ideas for improvement can be small, but should result in making meaningful progress. If brainstorming ideas results in nothing useful, consider inviting an outsider. <a href="https://zef.me/fresh-perspective-as-a-service-97342218115#.57i2e9l40" target="_blank">A fresh perspective can help</a>.</li>
<li>
<strong>Implement at least <em>one</em> small idea.</strong> Radical changes of strategy are often not realistic, or even wise. <a href="https://en.wikipedia.org/wiki/Kaizen" target="_blank">Focus on small steps</a>. Only if that doesn’t work, consider more radical approaches.</li>
</ol>
<p><em>Repeat.</em></p>
<p>Some examples of things that may be proposed during a retrospective.</p>
<h4>Addressing “QA regression cycles”</h4>
<ol>
<li>While counter-intuitive, one thing to consider may be to hire some additional <em>manual testers</em>. While these (cheaper) people do manual regression, the automation QAs can actually start automating part of the process. Perhaps the first cycle they manage to shave off an hour or two off the manual regression, eventually all or most of the regression cycle is automated and no, or little, manual testing is required.</li>
<li>If hiring more people is not an option, consider assigning a non-negotiable minimum automation budget, let’s say 25% of time, that should be spent on actual automation. You will have to accept that this will slow down releases initially.</li>
<li>Review all tests in the test scripts to see if they can be more efficiently (faster, more reliably) addressed with other types of testing. User acceptance testing (desktop automation, selenium) should generally be a last resort in finding bugs. Perhaps more aspects can be verified at lower levels, like integration testing or even unit testing.</li>
</ol>
<h4>Addressing “escalation cycles”</h4>
<p>Have release retrospectives in which you review all escalations addressed in that (and perhaps previous) releases, trying to find patterns:</p>
<ul>
<li>Is it always the <em>same piece</em> of the product that’s breaking? Perhaps it worth covering this part with more tests to more easily detect regressions. This will also make rewriting the whole thing easier later on.</li>
<li>Is it always some <em>other piece</em> of the product that’s breaking? Perhaps components are too intertwined resulting whack-a-mole problems. Consider extracting pieces and rearchitecting parts of the product, piece by piece.</li>
</ul>
<h4>Addressing “fire fighting in Ops”</h4>
<p>Do root-cause analyses using <a href="https://en.wikipedia.org/wiki/5_Whys" target="_blank">5 Whys</a>. This powerful technique, originally developed in Toyota Motors, is designed to get to the root of the problem, and then at every “why” come up with specific actions to ensure that the same issue <em>cannot reoccur again</em>.</p>
<figure>

<img data-width="200" data-height="252" src="https://cdn-images-1.medium.com/max/800/1*-nBeYuvvggVmF993YhOESQ.jpeg">
</figure><p>Some good resources on 5 whys:</p>
<ul>
<li><a href="https://open.buffer.com/5-whys-process/" target="_blank">The 5 Whys Process</a></li>
<li><a href="http://www.startuplessonslearned.com/2009/07/how-to-conduct-five-whys-root-cause.html" target="_blank">How to conduct a 5 why root cause root analysis</a></li>
<li><a href="https://wavelength.asana.com/workstyle-ask-5-whys-to-get-to-the-root-of-any-problem/#close" target="_blank">Ask 5 Whys to get to the root of any problem</a></li>
</ul>
<h4>TL;DR</h4>
<p>Don’t just sit there — retrospect and act. Break the cycle. Learn and improve.</p>
<blockquote>If you only ever have one type of meeting, have retrospectives. Seriously.</blockquote>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>268</wp:post_id>
		<wp:post_date>2016-10-20 19:59:55</wp:post_date>
		<wp:post_date_gmt>2016-10-20 17:59:55</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>breaking-the-cycle-retro-style</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="agile"><![CDATA[Agile]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="retrospectives"><![CDATA[Retrospectives]]></category>
		<category domain="post_tag" nicename="software-development"><![CDATA[Software Development]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>So yeah… ordered an iPhone 7</title>
		<link>http://zef.me/2016/09/28/so-yeah-ordered-an-iphone-7/</link>
		<pubDate>Wed, 28 Sep 2016 09:55:49 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2016/09/28/so-yeah-ordered-an-iphone-7/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>It took only two weeks since <a href="https://medium.com/zef-me/note-to-self-things-to-consider-when-switching-back-from-android-to-ios-e3ad791fe79c#.txx7i6wkw" target="_blank">writing the letter to myself trying to stop myself switching away from Android</a>. Guess what, it didn’t work. Last night I ordered a Jet Black iPhone 7 128GB.</p>
<p>So what happened?</p>
<p>It was all triggered by my twins being born. Congrats, yes, thanks. They’re healthy, great, and tiring. I spend a fair amount of time with a son in one arm, and a phone in the other. As I wrote in my previous post, I currently own a Nexus 6p, which is a 5.7", also known as: pretty darn big, heavy and not that comfortable to operate with one hand. That’s problem number one.</p>
<p>Number two is the camera. Practically all pictures taken off my first son were iPhone pictures, and they’re pretty decent. Not pro level, but good, made instantly, never had a complaint. The Nexus 6p has a reasonable camera, but not as nice as my old iPhone 6. Specifically, it sometimes takes 2 seconds to snap the picture which can mean I missed the moment.</p>
<p>Case in point:</p>
<p>Here’s my oldest son blowing out the candles during his third birthday last week:</p>
<figure>

<img data-width="1500" data-height="1125" src="https://cdn-images-1.medium.com/max/800/1*j2lkDj0fmut_kyousHNuzg.png">
</figure><p>Nice timing Nexus…</p>
<p>Yeah, that’s a shame. Don’t remember having such issues with an iPhone. You’re phone’s camera is a big deal, especially if you have kids growing up. And I do… an army of them.</p>
<p>So, <em>size, weight and camera</em> kicked off the doubts once more. The way my brains work, this then resulted in reevaluation of just about every pro and con, and guess what, things tipped over to the iPhone side again.</p>
<p>Here we go:</p>
<blockquote><strong>1. Notifications on Android are more useful</strong></blockquote>
<p>This is still true on iOS, but somehow I don’t consider this that big of a deal. I end up “clearing all” on Android anyway. Notifications have improved signifying in iOS 10.</p>
<blockquote>2. Like it or not, <strong>you live in the Google ecosystem, and Google apps are better on Android.</strong>
</blockquote>
<p>This is probably still true. However, one annoyance of Gmail on Android is the lack of “real” support for a combined inbox as a default view. Outlook on iOS does have that (on Android too, but I don’t like the Android version). Somehow I’ll see if I can sort the sync thing out on iOS.</p>
<blockquote>4. <strong>Google understands cloud</strong>
</blockquote>
<p>What can I say…</p>
<blockquote>5. <strong>The Android ecosystem (Chromecast, Pebble) is affordable, feature rich and reliable</strong>.</blockquote>
<p>I’ll probably stick to using the Chromecast and maybe even Pebble. Have to see how well it works with iOS.</p>
<blockquote>6. <strong>You can set different default apps</strong> for certain things, for instance rather than launching Skype to call your parents, you just use the native phone app, which directs the call via some VoIP transparently based on the fact that it’s a foreign phone number.</blockquote>
<p>The default app for calling and transparently calling through Skype is supported in iOS 10. Another browser as the default is nice, but in the end I don’t use this feature on Android either…</p>
<blockquote>7. <strong>Google’s Play Store is better and smarter</strong> than the Apple App Store.</blockquote>
<p>Still true. Not a deal breaker. I’m more into the Apple ecosystem, so I will hear about good apps through other routes.</p>
<blockquote>8. Talking about stores — since Google is less strict about payments, <strong>your Kindle and Audible apps actually allow you to buy Kindle and audible books from within the application</strong>, without going through the browser like on iOS (because of Apple’s rules).</blockquote>
<p>Yeah that’s an <em>inconvenience</em>.</p>
<blockquote>9. <strong>Usability niceties</strong>
</blockquote>
<p>This is a mixed bag. Android has some nice tricks and shortcuts, but my iPhone 7 will support some nice ones too through 3D touch swiping between apps, moving the cursor that way etc.</p>
<blockquote>10. <strong>You’re naive enough to be willing to trade privacy for quality of life</strong>, as a result you enabled all the “location broadcasting” features that your Android phone gave you. As a result, your phone now knows where you parked your car, tells you to leave for your next appointment, or warns you about traffic to your son’s school even though you never told it where that is.</blockquote>
<p>Yes, nice gimicky features. iOS 10 will also do the car parking thing. I don’t drive between appointments so… whatever. I’ll live.</p>
<blockquote>11. <strong>On-screen keyboards are better</strong>
</blockquote>
<p>Yeah well… I think I can take it.</p>
<p>So I’m eagerly awaiting my iPhone 7. See you again Android, perhaps in another couple of years…</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>279</wp:post_id>
		<wp:post_date>2016-09-28 11:55:49</wp:post_date>
		<wp:post_date_gmt>2016-09-28 09:55:49</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>so-yeah-ordered-an-iphone-7</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="android"><![CDATA[Android]]></category>
		<category domain="post_tag" nicename="apple"><![CDATA[Apple]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Video Call Essentials</title>
		<link>http://zef.me/2016/10/14/video-call-essentials/</link>
		<pubDate>Fri, 14 Oct 2016 07:43:35 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2016/10/14/video-call-essentials/</guid>
		<description></description>
		<content:encoded><![CDATA[

<figure>

<img data-width="910" data-height="480" src="https://cdn-images-1.medium.com/max/800/1*OQTGaxcC3RxFPi24umazww.png">
</figure><p><strong>TL;DR:</strong> Camera on. Microphone on. Go.</p>
<p>For my entire industrial career my work relied on effective video calls. I started working as a remote employee for three years, then as a “local” employee, but communicating a lot with remote customers on a day-to-day basis. Today, too, a lot of my time is spent communicating with a remote HQ.</p>
<p>Effective video conference calls are not rocket science, but they may require some setup. At its essence it boils down to this:</p>
<ol>
<li>All participants <em>have their camera on</em> all the time</li>
<li>All participants <em>have their mic on</em> (almost) all the time</li>
</ol>
<p>These may not be intuitive, or what you do today — so let me explain why this matters.</p>
<h4>1. Camera on</h4>
<p><strong>Reason #1: Non-verbal communication</strong></p>
<p>Shockingly, there’s a more to communication than just words. There’s facial expressions, there’s eye rolls, there’s “I’m on the call, but actually I just went to the toilet,” there’s nods in agreement. Missing these cues can result in anxiety of the speaker as a result missing any feedback about “how did what I just said land?”</p>
<p>Seeing people’s faces gives you some of the feedback you need.</p>
<p><strong>Reason #2: Work is all about relationships</strong></p>
<p>If you have a meeting where once in a while one of your team mates who’s usually in the office dials in from home — this is not that important. However, if you are having a meeting with somebody who you primarily work with in a remote fashion, seeing them is a big deal.</p>
<p>Why?</p>
<blockquote>The way the things you say are heard, interpreted, and valued depend highly on the relationship you have with that person.</blockquote>
<p>Let’s say you spent days researching a JavaScript framework to use for a new front-end project. You read blog posts, you read books, you watched conference videos. You made your decision.</p>
<p>Then, a colleague that you regard highly says: “just use React, I use that all the time, it’s rock solid.” What do you do? Chances are, you are going do what he or she says. Not because they’re your boss or “the decider,” but because you trust this person’s judgement, because of the relationship you have.</p>
<p>You don’t have this relationship with the random people on the internet that wrote those blog posts, you don’t have that relationship with the people who gave those conference talks you watched.</p>
<p>This is why celebrity endorsements work, you feel you have a relationship with this celebrity (although be aware, the reverse may not be the case). As a result, such endorsements mean more to you than some random dude you never heard of telling you to buy something.</p>
<blockquote>Like it or not, relationships matter.</blockquote>
<p><em>Seeing people</em> is important in creating and maintaining those relationships.</p>
<p>Which brings me to the second essential element of effective video calls.</p>
<h3>2. Microphone on</h3>
<p>A few months ago I gave a lecture about remote work to a class of students back the university where I did my PhD. I gave this lecture remotely, through Skype. I shared my screen with them, so I didn’t have any visual feedback. They had their microphone muted.</p>
<p>It was like talking to a wall for an hour.</p>
<p>Like you need non-verbal feedback, you also need some verbal or “noise” feedback. An “uhuh,” or “right!” goes a long way in getting enough feedback to give you confidence that people understand what you’re saying, or are listening at all. This is <em>especially</em> important if a camera is switched off, or there’s 10 people sitting behind one camera.</p>
<p>I’ve noticed that during my three years working remotely I’ve learned to at least once a minute make some noise that suggests whether I’m following along or not.</p>
<p>“Hmm”</p>
<p>“Uhuh”</p>
<p>“Ok”</p>
<p>“Makes sense”</p>
<p>“Right…”</p>
<p>There’s another reason for the unmute-by-default rule: the barrier to feedback and asking questions is higher when you’re muted. If I have a small remark to make, and I have to decide if it’s worth unmuting for, in many cases I’ll keep quiet.</p>
<p>Now there are exceptions to the mic rule. For instance, I have to take calls in the evening, from home. Recently I had two pretty noisy flat mates move in. If there’s serious background noise (like baby twins screaming like devils), temporarily mute your mic, it’s ok.</p>
<p>Still, by default: unmute.</p>
<h3>But I don’t have a camera, and my mic sucks</h3>
<p>Buy a camera, buy a good microphone or plug in a headset, if you have conference group calls — buy a good quality conference mic.</p>
<p>Seriously.</p>
<p>This is basic stuff and it makes a world of difference. If you regularly work with remote people, get the technical aspects sorted out.</p>
<p>Mic on. Camera on. Go.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>308</wp:post_id>
		<wp:post_date>2016-10-14 09:43:35</wp:post_date>
		<wp:post_date_gmt>2016-10-14 07:43:35</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>video-call-essentials</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="communication"><![CDATA[Communication]]></category>
		<category domain="post_tag" nicename="essentials"><![CDATA[Essentials]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="remote-working"><![CDATA[Remote Working]]></category>
		<category domain="post_tag" nicename="video-conferencing"><![CDATA[Video Conferencing]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>“Pick Your Battles” at PolyConf ‘16</title>
		<link>http://zef.me/2016/09/28/pick-your-battles-at-polyconf-16/</link>
		<pubDate>Wed, 28 Sep 2016 10:00:09 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2016/09/28/pick-your-battles-at-polyconf-16/</guid>
		<description></description>
		<content:encoded><![CDATA[

<figure>

<img data-width="1720" data-height="954" src="https://cdn-images-1.medium.com/max/800/1*agj-qS47HevUopmfChJ4CA.png">
</figure>[embed]https://www.youtube.com/watch?v=J_44tCwpChY[/embed]
<p>Had a good time, and the talk was received well. Loosely based on <a href="https://medium.com/zef-me/pick-your-battles-a5fa1025cb3e#.8fstzmlep" target="_blank">these</a> <a href="https://medium.com/zef-me/zefs-law-d8ef48b2d721#.2o6t6fvui" target="_blank">two</a> articles from a while back.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>364</wp:post_id>
		<wp:post_date>2016-09-28 12:00:09</wp:post_date>
		<wp:post_date_gmt>2016-09-28 10:00:09</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>pick-your-battles-at-polyconf-16</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="conference"><![CDATA[Conference]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="polyconf"><![CDATA[Polyconf]]></category>
		<category domain="post_tag" nicename="video"><![CDATA[Video]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>… or it doesn’t exist</title>
		<link>http://zef.me/2016/10/05/or-it-doesnt-exist/</link>
		<pubDate>Wed, 05 Oct 2016 07:58:49 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2016/10/05/or-it-doesnt-exist/</guid>
		<description></description>
		<content:encoded><![CDATA[

<figure>

<img data-width="250" data-height="257" src="https://cdn-images-1.medium.com/max/800/1*BwgmdUpRzc7KAd0DE21BSA.png">
</figure><p>A production application needs to be deployed to at least 2 servers <em>or it doesn’t exist</em>.</p>
<p>Application state need to be stored in at least 3 places <em>or it doesn’t exist</em>.</p>
<p>Code needs to have tests (unit, integration, automated acceptance) <em>or it doesn’t exist</em>.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>395</wp:post_id>
		<wp:post_date>2016-10-05 09:58:49</wp:post_date>
		<wp:post_date_gmt>2016-10-05 07:58:49</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>or-it-doesnt-exist</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="best-practices"><![CDATA[Best Practices]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="software-development"><![CDATA[Software Development]]></category>
		<category domain="post_tag" nicename="software-engineering"><![CDATA[Software Engineering]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Drowning in Tools</title>
		<link>http://zef.me/2016/03/15/drowning-in-tools/</link>
		<pubDate>Tue, 15 Mar 2016 15:49:41 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2016/03/15/drowning-in-tools/</guid>
		<description></description>
		<content:encoded><![CDATA[

<h4>Live from HR Tech World in London</h4>
<figure><img src="https://cdn-images-1.medium.com/max/800/1*yUhEOOBBdxWFEtt1Do4TMg.jpeg"></figure><p>I’m currently at HR Tech. I’m not a HR person, so this is largely an alien environment for me. What’s the Tech aspect of HR Tech? <em>Apps</em>. And lots of them.</p>
<p>There’s an app for everything: Recruitment. Supporting the whole document signing and background check workflow. Employee on-boarding. Personal development. Yearly reviews. Employee happiness. CV scraping. Org chart updating. Finding somebody to have lunch with. I haven’t seen exit interviews yet, but I’m sure there’s an app for that too (if not, there’s a gap their I’m sure).</p>
<p>The exhibition area is basically split in two: established, huge corporations that have full HR solutions, and… dozens of startups.</p>
<p>The big players offer everything in one package. Except, of course, not everything, and usually the package isn’t much to look at.</p>
<figure><img src="https://cdn-images-1.medium.com/max/800/1*4Uy7S0vmzfOes9uJrumSKQ.jpeg"></figure><p>On the other side, the startups do exactly what they’re supposed to do: find a niche, focus and execute. But as a potential “buyer,” I’m concerned. Are employees really going to have to get accounts and use 10 different apps for tiny things? And especially for things that, I’m afraid, are perceived by most employees as “non-core” job activity?</p>
<p>Also: as somebody in a relatively modestly sized company: what about costs? A few bucks per employee here, a few there and it adds up really, really quickly. Most of the talks I’ve attended here are from massive companies (40,000 people is now exception) — perhaps they’re the target market here.</p>
<h4>Can’t we have the best of both worlds?</h4>
<p>I see two ways out of this: either we wait for the big players to buy up the “good” startups, or… we build some common platform for HR apps. A single login system, billing system, white labeling system, and an open module marketplace where you can put together your own HR system with module by wide variety of startups and perhaps established players. But that idea has problems by itself. Who would build such a platform, how would you get buy in, etc.</p>
<p>Effectively we’d need a type of salesforce.com for HR. Or perhaps they’re already doing that.</p>
<p>Oh well. Innovation is a bitch. Until this is figure out we’ll have to stick to sub-par implementations of the things we need in-house, or use Google Forms. It’s sad, though. So much cool stuff is out there, but the value-add of each isn’t sufficient to cover the price and cost of adding yet another application to to our already big collection.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1777</wp:post_id>
		<wp:post_date>2016-03-15 16:49:41</wp:post_date>
		<wp:post_date_gmt>2016-03-15 15:49:41</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>drowning-in-tools</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>There Is No Such Thing as a “Maintenance Project”</title>
		<link>http://zef.me/2016/03/10/there-is-no-such-thing-as-a-maintenance-project/</link>
		<pubDate>Thu, 10 Mar 2016 08:31:11 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2016/03/10/there-is-no-such-thing-as-a-maintenance-project/</guid>
		<description></description>
		<content:encoded><![CDATA[

<figure>

<img data-width="800" data-height="430" src="https://cdn-images-1.medium.com/max/800/1*z-uDneLlHV-2F1av7r5nEg.jpeg">
</figure><p><span>R</span>ecently I joined one of the <a href="http://www.stxnext.com/" target="_blank">STX Next</a> projects as part of the development team. As many of our projects, it is not a greenfield project — there is an existing code base already (<a href="https://cloud.google.com/appengine/" target="_blank">Google App Engine</a> with <a href="http://ionicframework.com/" target="_blank">Ionic</a>, in this particular case) that we had to work with. I’ve looked through the code, and, let me put it this way: there was room for improvement (think 3 thousand lines in a single Python file, hundreds of lines in a single function, deeply structured messy data in a JSON property in the database). However, there was talk of a “grand rewrite,” we would have to support the old system, but at the same time work would be done on a completely new system that would be <em>much beterer</em> [<a href="https://en.wikipedia.org/wiki/Sic" target="_blank">sic</a>].</p>
<p>But then, disaster struck. We heard that the new system was out of scope for now. It was postponed until later. In our <a href="http://zef.me/blog/2016/3/the-one-week-sprint" target="_blank">weekly</a> retrospective meeting, this immediately bubbled to the top as a huge issue: the project turned out to be a maintenance project, they did a bait and switch (“build a new system — haha, no, just hack on the old one!”). We were tricked. Fail. Disappointment.</p>
<p>I don’t think the “this is maintenance only, nothing to do here” attitude is unique to this project. I’ve seen it in other projects too. Let’s face it — few projects in the world are greenfield (for long). There’s almost always a existing code base, and (seemingly) no time to rewrite all the things.</p>
<p>So here comes my controversial statement:</p>
<blockquote><strong>Greenfield is overrated.</strong></blockquote>
<p>Greenfield, to start a project from absolute scratch, is a dream for many. It’s just like a hobby project, you can pick the technology you like, create a clean repository and set up everything exactly how you like. You know, <em>how it should be done</em>. However, there’s a tragic part to such projects that quite often doesn’t surface in a hobby project (because they don’t last that long, or are not that big):</p>
<blockquote><strong>Greenfield is only greenfield for a few months, tops.</strong></blockquote>
<p>After a few months, the technical debt starts to drip in. Your old architecture starts to fail. Requirements are different than anticipated and no longer match your code, and large parts of the code base you wrote hugely misjudged reality.</p>
<p>And here’s the kicker — <em>this time you have nobody to blame but yourself.</em></p>
<p>In a project where you inherit a code base, you can laugh at your predecessors. Hah. Such an obvious architectural mistake. Such a dumb data model. <em>Idiots.</em></p>
<p>When you started it yourself, it becomes painfully clear who the idiot really is. Or, in fact, that anticipating the future and doing things right isn’t that easy after all.</p>
<p>You’re in a mess, so what do you do? Rewrite all the things!</p>
<p>It’s fun, but in business a complete rewrite is <a href="http://www.joelonsoftware.com/articles/fog0000000069.html" target="_blank">a shortcut to disaster</a>. I’ve seen many examples in previous jobs, the rewrites either were too big of a project, failed, were canceled, or in the case of a super patient company — took years longer than anticipated.</p>
<p>Is there an alternative?</p>
<p>Often, yes: iterative improvement. The scout rule — leave things better than you find them. Cut up the 200 line function into 10 functions. Layer cleaner interfaces on bad parts of the system, slowly swap out the bad parts, piece by piece. It’s still rewriting, but at a much smaller scale.</p>
<p>But… can you really spend time doing that? Don’t you need approval? Don’t you need special “refactor stories” (“As a code base, I would like the be cleaned up so that I’m not a huge mess”)?</p>
<p>I believe this is where skill comes in.</p>
<p>Every change you make is some sort of rewrite. Perhaps you’re just rewriting a line, or a function, but you still rewrite. Piece by piece, bit by bit. The skill is to create the opportunity to nudge things in the right direction in a meaningful way. A hundred nudges lead to a significant bump in quality, and that’s how software gets better. In my opinion, finding and creating those opportunities is what make good programmers great. <a href="https://en.wikipedia.org/wiki/Kaizen" target="_blank">Kaizen</a>, y’all!</p>
<p>My broader take-away is this:</p>
<blockquote><strong>There’s no such thing as a maintenance <em>project</em>, there’s only a maintenance <em>attitude</em>.</strong></blockquote>
<p>All software development involves maintenance. Unless you believe your project is technically perfect, and there is nothing to improve (hah!), there is always opportunity to clean, fix, and learn plenty of things as you go. Again, every edit you make is a small rewrite, and dozens, hundreds, thousands of tiny rewrites make a good system.</p>
<p>The skill is to see the opportunity to improve. To slip in the thing that will make things better, no matter the pressure to deliver.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1779</wp:post_id>
		<wp:post_date>2016-03-10 09:31:11</wp:post_date>
		<wp:post_date_gmt>2016-03-10 08:31:11</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>there-is-no-such-thing-as-a-maintenance-project</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="attitude"><![CDATA[Attitude]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="software-development"><![CDATA[Software Development]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Zef’s Management README</title>
		<link>http://zef.me/2018/06/15/zefs-management-readme/</link>
		<pubDate>Fri, 15 Jun 2018 14:05:57 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2018/06/15/zefs-management-readme/</guid>
		<description></description>
		<content:encoded><![CDATA[

<figure class="wp-caption">

<img data-width="800" data-height="400" src="https://cdn-images-1.medium.com/max/800/0*_1NRS3jCPE1bf3WU">

<figcaption class="wp-caption-text">Stylized version of me (except my hair looks different, also I have no beard, nor do I usually wear a suit.)</figcaption></figure><p>Hi, and welcome to my team, I’m happy you are here. Since every manager has a different view on what this job entails, I thought I’d write down my approach to the role, so you will have a better idea what to expect and what not to expect from me. I hope it is valuable to you. If anything is unclear, let me know.</p>
<h4>My Job</h4>
<p>It is my job to make you and the team productive. Since you’re here, you must have valuable talents (probably many). I’m here to make sure those talents are effectively used and developed, and to reduce distractions and other obstacles that stop you from getting your job done.</p>
<p>It is also my job to ensure you’re sufficiently challenged and growing. If you’re bored, tell me. There are always opportunities for change, either in my team, or in another; I will even support you if you feel you need to join another company in order to achieve your goals (my employers don’t always appreciate this).</p>
<p>It is <em>not</em> my job to tell you what to do. We have goals as a team, you will have your personal goals. I’m happy to participate in discussions on how to achieve those goals, but don’t expect me to micro manage you. I will (probably blindly) approve any vacation, work from home, going home earlier requests, and expenditures, because I trust you can decide these things on your own (in cooperation with the team if it affects them) — also refer to the <em>Principles</em> section below.</p>
<h4>Beyond management</h4>
<p>I’m deeply technical, probably more so than many other managers. This can be both an advantage and disadvantage for you. At times, I may overstep my boundaries, relapse and act as a tech lead — please tell me when I do. However, always expect me to challenge your ideas in the context of technology choices, architecture, scaling and operation of the systems that we build. Often, I won’t be shooting in the dark, I will speak from experience. Nevertheless I will rarely, probably never, veto your decisions — all I ask is consider my challenges carefully.</p>
<p>I write, and speak at conferences and other events occasionally. At times you may find I published an article, or mention an incident during a talk that you recognize — it may even seem to be about you, although I will not mention you by name. You will probably be right, most of writing and speaking topics are inspired by my day to day work and thinking. If you have issues with this, we can discuss.</p>
<h4>Principles</h4>
<p>Here are the most important principles and assumptions that guide my attitude to work, and life. You don’t have to agree with any of these, but if you’re ever surprised about my behavior, these can explain things.</p>
<p>In these, let’s assume that when I say <em>people</em> I refer to people in our company, I’m not ready to claim these apply to the entire world population.</p>
<ul>
<li>
<strong>People are good.</strong> Even it is sometimes hard to understand their thinking or actions, few people in the world are intentionally malicious.</li>
<li>
<strong>People can be trusted.</strong> Trust by default.</li>
<li>
<strong>People are not stupid.</strong> If I don’t understand people’s actions, it is most likely my lack of understanding of their context or thinking, not the action itself.</li>
<li>
<strong>Being wrong excites me.</strong> I like being challenged, and I’m open to the idea that I’m wrong.</li>
</ul>
<h4>Meetings</h4>
<p>Beside team meetings, and the occasional department meeting, we will have regular 1:1s. Just you and me, ideally every week for 30 minutes.</p>
<p>During this meeting we can do various things:</p>
<ul>
<li>If you have something you would like to discuss with me — great, let’s do it. This can range from frustrations at work (colleagues, noise level, concerns about our product direction), or things you really love at work, to your home situation, to your hopes and dreams. Whatever is on your mind. If you got any feedback for me, tell me.</li>
<li>Got nothing? Perhaps I will have some observations to share about you or the team in general.</li>
<li>Still nothing? I may bring up some topic that I’ve been struggling with myself to see if you have any thoughts on the topic.</li>
<li>
<em>Crickets?</em> This happens, there are slow weeks, let’s not sit and stare at the wall. Back to work!</li>
</ul>
<p>My opening question will almost always be: “How are you doing?” You should take this question the literal way, not in the American meaning of “Hello!” Tell me how you are <em>really</em> doing.</p>
<p>By the way, if during meetings I’m typing on my phone, I will 99% sure be taking notes or creating todos for myself. Don’t take it as disinterest.</p>
<h4>Availability</h4>
<p>At work I will spend a significant amount of time not sitting behind my desk. I may be in meetings, or be walking around, even be walking outside to think. In my calendar you can check if I’m in a meeting, if not and I’m not at my desk I will probably be reachable through Slack. If it’s urgent, just call me.</p>
<p>While I love my job, my family does come first. I have a family with three young children. It’s important to me to be home in time for dinner, and therefore I usually leave around 5pm. If you need to reach me afterwards I will most likely still be responsive on Slack and email until I go to bed.</p>
<p>That said, I am passionate about what I do. Therefore, I also spend much on my free time reading work related things, or thinking about work. You may get emails or Slack messages in the evening, extremely early morning or weekend. Feel free to answer at your leisure, I don’t expect you to answer immediately.</p>
<p>If there is something urgent and important, you can call me 24/7.</p>
<h4>Some random curiosities</h4>
<ul>
<li>I have a highly sarcastic sense of humor. I know that sometimes you may not understand if I’m purely joking or if there’s a deeper message, even pointed feedback buried in my comments. Honestly, it may be either, let’s just say that this is how I spice things up. In case of doubt, just ask me.</li>
<li>While I generally speak English at work, do realize I have been living in Poland for many years. I understand the language reasonably well. If you think you can talk about me in Polish because I won’t understand, you’ll probably be wrong.</li>
<li>I am very even-tempered, cooperative and nonviolent. This is not superficial, I’m not covering anything up, I won’t badmouth you when you’re not in the room, I don’t book an extra 10 minutes in the conference room after each of our 1:1s so I can punch a wall (although I’ll admit this is an oddly specific comment to make). This is my nature. What you see is what you get.</li>
<li>While I’m Dutch, ironically I’m allergic to cow milk, so I don’t eat cheese nor any other dairy products, nor peanuts. Don’t feel bad eating something milky and (to you) delicious in front of my face, it doesn’t affect me at all.</li>
<li>I don’t like puzzles, I don’t like designing algorithms. If you need help with these, look elsewhere.</li>
</ul>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>38</wp:post_id>
		<wp:post_date>2018-06-15 16:05:57</wp:post_date>
		<wp:post_date_gmt>2018-06-15 14:05:57</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>zefs-management-readme</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="best-of"><![CDATA[Best Of]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="management"><![CDATA[Management]]></category>
		<category domain="post_tag" nicename="readme"><![CDATA[Readme]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>I just reviewed 100+ LinkedIN profiles</title>
		<link>http://zef.me/2018/09/28/i-just-reviewed-100-linkedin-profiles/</link>
		<pubDate>Fri, 28 Sep 2018 12:49:41 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2018/09/28/i-just-reviewed-100-linkedin-profiles/</guid>
		<description></description>
		<content:encoded><![CDATA[

<h4>You won’t believe what I learned</h4>
<p>I just reviewed over a hundred LinkedIN profiles (yes, <a href="https://www.olxgroup.com/search/engineering/poland-poznan/all-brands" target="_blank">we’re hiring at OLX</a> — I reviewed Go developer profiles in this case).</p>
<p>People love listicles (at least the non testy ones), so here’s one summing up my key take-aways from this experience. There’s just 4:</p>
<ol>
<li>People who write a “Summary” of themselves — <strong>you are a blessing</strong>. I care a lot about what drives you, what you’re looking for, etc. I have picked out some the candidates purely on what they wrote in their summary. No relevant experience, but the summary told me they have the right mindset.</li>
<li>Pictures matter. People wearing tin foil hats, skiing, sitting at a swimming pool, mugshots, running over a finish line (I kid you not, I’ve seen all of these). Every time I have to wonder: <strong>WHAT ARE YOU TRYING TO TELL ME!?</strong>
</li>
<li>If you list a skill, but have no reference to that skill anywhere in your summary, or in any job description — it may as well not be on your skill list.</li>
<li><strong>HOW CAN YOU BE A SENIOR DEVELOPER IF THAT’S THE ONLY JOB YOU EVER HAD!?</strong></li>
</ol>
<p>That’s all. Have a good weekend.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>47</wp:post_id>
		<wp:post_date>2018-09-28 14:49:41</wp:post_date>
		<wp:post_date_gmt>2018-09-28 12:49:41</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>i-just-reviewed-100-linkedin-profiles</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="recruiting"><![CDATA[Recruiting]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>What’s your story?</title>
		<link>http://zef.me/2018/09/07/whats-your-story/</link>
		<pubDate>Fri, 07 Sep 2018 12:32:58 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2018/09/07/whats-your-story/</guid>
		<description></description>
		<content:encoded><![CDATA[

<h4>Ideas on deciding what to speak or write about</h4>
<p>Whenever I read an article, or watch a talk, I ask myself: why are <em>you</em> telling me this? Why not anybody else? What makes <em>you</em> the best person — ideally in the world — to tell the story that you’re telling?</p>
<p>In some cases the answer is clear: if you are a member of <a href="https://www.ecma-international.org/memento/tc39-rf-tg.htm" target="_blank">TC39</a>, you are the perfect person to speak about new features you just designed to be part of the next version of JavaScript. If you just came out of a failed start-up and have some lessons learned — you’re the perfect person to share them. They’re unique, they’re about what you do — nobody else is more qualified.</p>
<p>The key here is the relation between <strong>you</strong> and the <strong>topic</strong> you’re writing or speaking about.</p>
<p>I will be direct with you. I’m not very interested in reading article #423 on new features in Java 10, or a talk on new features in JavaScript that is effectively a summary of something <a href="https://developer.mozilla.org/bm/docs/Web/JavaScript" target="_blank">I could read on MDN</a>. Repeating a list of features, perhaps with some code examples doesn’t do it for me. If you ever wondered why your article about your favorite 3 new features of <code>insert language here</code> didn't change the world — there's your answer.</p>
<p>That is, <strong>unless</strong> you were able to offer a unique new perspective on them: why do they matter from <em>your</em> view? Do <em>you</em> have experience using those features worth sharing, some pitfalls to avoid?</p>
<blockquote>Where is the YOU in what you write or speak about?</blockquote>
<p>To be clear — I don’t mean this in a discouraging way. I’m not suggesting there’s nothing that makes you unique — in fact, for sure there is.</p>
<p>Trust me. I’m a doctor.</p>
<p>Here are some sources of uniqueness, ranked from easy to hard to discover:</p>
<ol>
<li>Your <strong>experience</strong> — I’m sure you worked on interesting technical challenges, large scale, start-ups, built a SOAP layer on top of COBOL. Everybody has a unique set of experiences (assuming you’ve actually done something during your career already), so you just have to explore what is relatively uncommon, and can help other people. You can also develop additional experience by having hobby projects, in case your job doesn’t give you much (if that’s the case — incidentally — I’m hiring).</li>
<li>Your <strong>style</strong> — perhaps you are a funny one, or perhaps you are great at story telling. Engaging your audience during a talk, or in an article is not easy, but it does have impact. Your content may be great, but if you cannot present it… Luckily, these are, at least to an extent, learnable skills. You can read books or take courses on how to tell stories, and how to be a better presenter. On being funny, perhaps too, but if you’re not a naturally-born-funny-person I wouldn’t invest into this too deeply.</li>
<li>Your <strong>why</strong> — people respond better to people with charisma, which is highly correlated to being driven; to having a higher purpose. Some people have this naturally, others have to dig — personally, I’m still digging. The <a href="https://www.ted.com/talks/simon_sinek_how_great_leaders_inspire_action?language=en" target="_blank">classic talk on this topic is from Simon Sinek</a>, who also <a href="https://startwithwhy.com/find-your-why/" target="_blank">wrote a book on how to find your “why”</a>.</li>
</ol>
<p>Note that this list is also ranked in terms of <em>impact</em>. If you have a unique experience to share — <strong>cool</strong>! If you can do so in a unique way — <strong>wow</strong>! If this experience is presented in an engaging way and is a part of some bigger mission — <strong>I will follow you</strong> (on twitter — don’t worry).</p>
<p>Anybody can put words on the Internets. Meet-ups and conference everywhere will give you a stage to say whatever you have to say. There is opportunity. So tell us…</p>
<p>What’s <em>your</em> story?</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>48</wp:post_id>
		<wp:post_date>2018-09-07 14:32:58</wp:post_date>
		<wp:post_date_gmt>2018-09-07 12:32:58</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>whats-your-story</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="public-speaking"><![CDATA[Public Speaking]]></category>
		<category domain="post_tag" nicename="purpose"><![CDATA[Purpose]]></category>
		<category domain="post_tag" nicename="why"><![CDATA[Why]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Making Mistakes Productive Using the Five Whys</title>
		<link>http://zef.me/2018/09/04/making-mistakes-productive-using-the-five-whys/</link>
		<pubDate>Tue, 04 Sep 2018 15:34:10 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2018/09/04/making-mistakes-productive-using-the-five-whys/</guid>
		<description></description>
		<content:encoded><![CDATA[

<figure class="wp-caption">

<img data-width="1920" data-height="1280" src="https://cdn-images-1.medium.com/max/800/1*K_h-o3lAb6nlBRkRp0Y72A.jpeg">

<figcaption class="wp-caption-text">Asking why — image taken from <a href="https://pixabay.com/en/house-painter-balloon-why-question-3062248/" target="_blank">https://pixabay.com/en/house-painter-balloon-why-question-3062248/</a></figcaption></figure><p>Most companies have some rules or guidelines in place for whenever an “incident” happens, be it an outage or something else that impacts customers. Some companies call them incident reports, others root cause analyses. Sadly, too often, producing these types of reports is seen as a chore — essentially punishment for standing somewhere close to a failing system. They end up writing reports that point just enough fingers in other directions to get away with it. “It’s bad enough that we had to work until 3am to fix it, now we have to write a report about it too?”</p>
<p>While this attitude towards incident analysis is very understandable at a human level, we believe it’s the wrong way to look at it. At OLX we focus heavily on <em>learning</em>. And by far the best opportunities to learn are right after the shit hits the proverbial fan.</p>
<p>At our company, incidents happen, as they do happen everywhere. We have people on call that can generally resolve issues quickly. Then, the next day, after the dust has settled, all people involved are tasked with answering four questions:</p>
<ol>
<li>What happened?</li>
<li>Why did it happen?</li>
<li>What can we learn from it?</li>
<li>What can we do to prevent such issues in the future?</li>
</ol>
<p>To achieve this we used various techniques over time. Recently, we’ve been moving more towards using Toyota’s “Five Whys” technique. Not all our packs are applying this yet — but we’re seeing a lot of value already.</p>
<p>The goals of a Five Whys session:</p>
<ol>
<li>
<strong>Identify the root cause of an incident</strong>. At first sight this root cause may seem obvious to everybody, but more often than not, a well-conducted five whys session leads to surprising results.</li>
<li>
<strong>Learn from mistakes</strong>. Incidents happen, and they should be treated as a learning moment.</li>
<li>
<strong>Share the learning</strong> by sharing the report widely.</li>
</ol>
<p>Notably, the goal of this session is <strong>not</strong> the report. Even in the hypothetical case where nobody were to read it, the method should have increased insight into deeper issues in the tech, product, sometimes even organizational culture and valuable action items.</p>
<p>The goal of the session is also <strong>not</strong> to point fingers. Yes, somewhere along the line people made mistakes, but this is bound to happen — our goal is to create an environment, a system, that minimizes the impact of such human mistakes.</p>
<p>Here is probably my favorite quote on this topic that perfectly captures what the goals is of the Five Whys:</p>
<blockquote>“Let’s plan for a future where we’re all as stupid as we are today.” — Dan Milstein</blockquote>
<p>Before we get to the recipe for conducting a five whys (which is, in a sense, shockingly unsurprising) let’s start with some basic rules.</p>
<ul>
<li>The meeting happens after every major incident, no exceptions. <strong>Especially</strong> if the incident happened before (or even even occurs regularly). “We don’t need a five whys, we know the root cause” is not a reason to skip.</li>
<li>All people involved are present in one room (real or virtual) discussing the issue <em>synchronously</em>.</li>
<li>The meeting happens <em>within a few days</em> of the incident. It can happen the same day, but there’s value in having it <em>after</em> the heat of the moment — allowing some time for reflection.</li>
<li>Action items must be SMART — specific, measurable, attainable, relevant, and time-based. Also, they should be assigned to a specific person (not a team).</li>
<li>Action items must be prioritized proportionally to the severity of the incident. For instance, if the incident was that some color of a button changed accidentally — prioritizing end-to-end tests that verify color of DOM elements is probably not proportional.</li>
</ul>
<h3>The (not so secret) recipe</h3>
<p>Here’s the basic formula:</p>
<ol>
<li>Start with the problem statement. Write it down on a whiteboard or Google Doc.</li>
<li>Ask the “why?” question. No productive “why?” question to ask? Really? <code>goto 5</code>.</li>
<li>Answer the “why” question.</li>
<li><code>goto 2</code></li>
<li>Done</li>
</ol>
<p>While traditionally the line of asking “why?” is linear, we have seen good results trying asking multiple different “why?” questions at each level.</p>
<p>So not plainly “why?” but various more specific whys, for instance:</p>
<ul>
<li>Why did this occur? (root cause)</li>
<li>Why did we only find out when people complained about it on twitter? (monitoring)</li>
<li>Why did it take us 5 hours to find the root cause? (mean-time-to-recovery)</li>
<li>Why did this problem have the impact that it had? (impact minimization)</li>
</ul>
<p>This approach tends to result in “why forests” — but that’s ok. It’s the job of the session facilitator to figure out which “branches” can lead to productive results.</p>
<p>You may wonder: what’s up with the <em>five</em> aspect of “five whys”? It originates from is the general heuristic that asking “why?” five times should get you to the root cause. If you ask it once or twice, you’re probably just scratching the surface of an issue. Beyond that you tend to get into deeper cultural, organizational or systems level problems — and this is where the big wins can be made.</p>
<p>To learn more about the five whys and best practices, here are three must-read articles:</p>
<ul>
<li><a href="http://www.startuplessonslearned.com/2008/11/five-whys.html" target="_blank">Eric Ries’ introduction on Five Whys and its history</a></li>
<li><a href="http://www.startuplessonslearned.com/2009/07/how-to-conduct-five-whys-root-cause.html" target="_blank">Eric Ries’ article on how to conduct successful Five Whys sessions</a></li>
<li><a href="https://product.hubspot.com/blog/bid/64771/post-mortems-at-hubspot-what-i-learned-from-250-whys" target="_blank">Dan Milstein on his lessons learned after conducting 250 Whys</a></li>
</ul>
<p>If you have a feeling that “stuff keeps breaking over and over” in your organization, have a serious look at the Five Whys. Find somebody internally who’s already familiar with them or passionate to learn, or hire a trained facilitator. Then, start building that improvement muscle. <strong>Mistakes will always be made, the best thing you can do is to make those mistakes productive.</strong></p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>49</wp:post_id>
		<wp:post_date>2018-09-04 17:34:10</wp:post_date>
		<wp:post_date_gmt>2018-09-04 15:34:10</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>making-mistakes-productive-using-the-five-whys</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="design"><![CDATA[Design]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="incident-management"><![CDATA[Incident Management]]></category>
		<category domain="post_tag" nicename="productivity"><![CDATA[Productivity]]></category>
		<category domain="post_tag" nicename="support"><![CDATA[Support]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Be Present</title>
		<link>http://zef.me/2018/08/27/be-present/</link>
		<pubDate>Mon, 27 Aug 2018 19:59:34 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2018/08/27/be-present/</guid>
		<description></description>
		<content:encoded><![CDATA[

<figure>

<img data-width="720" data-height="501" src="http://zefsmusings.files.wordpress.com/2018/08/346da-0qx6qbvgkxdhdhqjm.jpg">
</figure><p>If you’re afraid I’m about to get all “Mindful” on you — no worries. If you want to dive into that topic, talk to my brother. No, I’m about get all grandpa on you.</p>
<p><strong>Warning</strong>: Rant alert.</p>
<p>I’ve noticed something.</p>
<p>I noticed it again today at the playground, with my five year-old: a lot of parents are not looking at their kids, they’re looking down. Not at their feet — at their phones.</p>
<p>Yeah yeah, I hear you: modern age — blah blah. But this has been bothering me, not just as a parent, but at work too. Paying attention has become a precious resource. As a parent you should know — your kids <em>know that you’re not paying attention</em>, this is the whole reason they’re looking at you. Did daddy see what I just did? It’s not all that much to ask.</p>
<p>You don’t have to congratulate your kid on his achievement of sliding a slide, or swinging a swing. You don’t have to say “good job!” You just have to see. You just have to notice.</p>
<p>Now generally I’m quite cautious linking parenting to management, or any work related stuff. People at work are not kids — generally. People you manage are not your children — thank god. However, people at work are… well.. people. Just like children. So — similar needs.</p>
<p>People require attention. Attention requires presence.</p>
<p>So, here’s my question: why is half or more of the people on meetings I attend in various contexts, looking at their laptops, or phones? Are they paying attention? If I’m standing in front of a room, trying to do my best presenting some of my <em>objectively awesome ideas</em> and I look at the audience, and I see lit-up apples, facing me, and people looking down — I’m… discouraged to say the least. And I highly, highly doubt this is difference for other people.</p>
<p>Yeah yeah, some people will claim they <em>are</em> paying attention. But I’m ready to call bullshit on that. Perhaps I’m not millennial enough to possess the true skill of multi-tasking. Perhaps I’m still from the single-core age. But I doubt it. If you’re not looking at me — or my general direction — you’re not present.</p>
<p>I suspect people do this because they think they <em>need</em> to be multi-tasking, or perhaps this is a more efficient way of doing their work. Meetings they attend generally are <em>boring</em>, and this is a good way to compensate for that, and “get some real work done.”</p>
<p>IMO: wrong solution. Don’t join the meeting. Fix the meeting. Kill the meeting. Don’t multi-task a meeting. It’s offensive.</p>
<p>If you’re not present — you don’t care. And that’s fine. I can’t make you care. You don’t have to care.</p>
<p>Just please, please, please, don’t care elsewhere.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>50</wp:post_id>
		<wp:post_date>2018-08-27 21:59:34</wp:post_date>
		<wp:post_date_gmt>2018-08-27 19:59:34</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>be-present</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="100xengineer"><![CDATA[100xengineer]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="life-lessons"><![CDATA[Life Lessons]]></category>
		<category domain="post_tag" nicename="management"><![CDATA[Management]]></category>
		<category domain="post_tag" nicename="meetings"><![CDATA[Meetings]]></category>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[43999910166]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Serverless First</title>
		<link>http://zef.me/2018/08/21/serverless-first/</link>
		<pubDate>Tue, 21 Aug 2018 17:15:30 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2018/08/21/serverless-first/</guid>
		<description></description>
		<content:encoded><![CDATA[

<figure class="wp-caption"><img src="https://cdn-images-1.medium.com/max/800/1*_mGyj0R0h1p6oAustj5Jag.png">
<figcaption class="wp-caption-text">Ceci n’est pas une serveur</figcaption></figure><p>There’s two common “w” questions around <em>serverless</em>: the first one is “WHAT IS IT?” because, if you’re anything like me, your first response to this term was that it sounded more like link-bait than actual technology. I’ll get to my definition of serverless in a bit (because I’m sure what you’re really waiting for is definition #2323 of serverless) — but what I really want to get into in this article is the second “w” question: “Why!?” Or in fact, rather than asking “why?” I want to flip the question and have people ask themselves “why not?”</p>
<p>I think even today, for many companies, it’s very valid to make serverless the <em>default choice</em>, and only when there’s good reason, fall back to this ancient relic “serverful.” Ok, let’s not get too crazy — perhaps not actual physical servers, or even virtual machines. I think “container” is about has far as we need to fall back.</p>
<p>But, before I get there, let me give my long-awaited definition of what I think of when I refer to “serverless.” Some use the term as an architectural pattern, but I care less about that aspect. For now I primarily see serverless as deployment technology for your own code, and relying on software-as-service for core dependencies, such as databases.</p>
<p>In my mind, a service can be considered serverless when the following things are abstracted away:</p>
<ul>
<li>Physical or VM instances, or clusters thereof</li>
<li>Availability zones (and ideally regions, but we’re not there yet)</li>
<li>Scaling based on data size and traffic (e.g. operations/second)</li>
</ul>
<p>Let me clarify through some examples: <a href="https://aws.amazon.com/ec2/" target="_blank">EC2 instances</a> — definitely not serverless. No further explanation required, I hope.</p>
<p><a href="https://aws.amazon.com/rds/" target="_blank">RDS cluster</a>s (except the new <a href="https://aws.amazon.com/rds/aurora/serverless/" target="_blank">“Aurora serverless”</a>) — managed, but not serverless, because I have to choose instance types and cluster sizes, that is: I have to do some planning of the capacity I need.</p>
<p><a href="https://aws.amazon.com/dynamodb/" target="_blank">DynamoDB</a> — serverless, I don’t pick instance types, cluster sizes, my only knobs are read and write capacity, and even those I can <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/AutoScaling.html" target="_blank">auto scale</a> today. Whether there’s 1 or 10,000 instances powering my tables — I don’t care. I don’t have to worry if one of them fail. Probably instances powering DynamoDB fail all the time, but there’s no way I can tell.</p>
<p>And then, the example that created the serverless category: <a href="https://aws.amazon.com/lambda/" target="_blank">AWS Lambda</a>. First there was me manually FTPing into a server, and uploading my Perl files to cgi-bin. Then there were configuration management tools like Puppet, Chef and Ansible that automated this. Then came containers, and now we zip up our code, upload it to an S3 bucket, and let AWS figure out how it should run, where, and at what scale. Does it run on a giant-ass server with 64 CPUs, or on an iPhone? 1 running instance, even 0, or 1000? I have no idea, and I’m ok with that.</p>
<p>There are many opinions on this concept of Function-as-a-Service, which is the generalization of AWS Lambda. How much logic should one function contain? How should it deal with state, or not at all? Is a function the same as a microservice? Honestly, at this point — I don’t care. In projects we build at OLX, some functions contain a full API server, with a large scope, and some functions simply push a message into SQS, or a CloudWatch log message into <a href="https://logz.io/" target="_blank">logz.io</a>. Whatever works.</p>
<h4>Evolution</h4>
<p>Back to my “why not?” question. The way I see it, serverless is the next natural step after first manually managing physical servers in a rack, ensuring they have power, wire up the switches etc. Then we went to virtual machines followed by the concept of “the cloud”, which, in its first iteration, was primarily Infrastructure as a Service: you can instantly boot up VMs, without having to worry about capacity or the hardware behind the scenes.</p>
<p>In this transition, did everybody progress from managing physical servers to cloud computing? No. There’s use cases and a certain scale where it makes sense to manage servers yourself. Sometimes companies start out in the cloud and then move back to physical servers because the economics work out. <a href="https://techcrunch.com/2017/09/15/why-dropbox-decided-to-drop-aws-and-build-its-own-infrastructure-and-network/amp/" target="_blank">Dropbox did this a while ago</a>, for instance. But if you’re a startup today and you tell your potential investors that you want to spend the first 6 month and first $200k on buying and racking up a server infrastructure, you’ll be laughed out of the room. <strong>The cloud is the default choice today.</strong></p>
<p>I see serverless as the next transition, although technically still cloud computing, it raises the level of abstraction even further. No longer do you launch some VMs and run MySQL or Cassandra on them, now you just buy a pay-for-what-you-use database service. As a result, when building services and apps using this technology the amount of time spent on operations plummets dramatically. Scaling from 1 to a 1 million users with a small team becomes possible, but even apps that will never reach that scale will not have to spend much money on their infrastructure, because it’s become much more granular in terms of costs.</p>
<p>For example, if I would want to run a small web service with a database with some level of high availability before serverless, I basically would have to deploy at least 5 VMs. 3 to run a high-availability database cluster, and 2 for the web app itself. Even with no traffic this would cost me a hundred dollars per month or more. With serverless I’d probably pay a single digit dollar amount and it’d be purely for the provisioned throughout on DynamoDB. If nobody calls my service, I don’t pay anything (except perhaps for the storage of my function in S3, which may well set me back a tenth of a cent).</p>
<p>And cost is just one aspect. Do you know how much expertise it requires to build a high availability database cluster and debug production issues?</p>
<h4>Tooling and productivity</h4>
<p>Tooling and other building blocks in the serverless ecosystem are getting better rapidly. At OLX we’re all in on AWS, so any team can mix and match anything that AWS has to offer. In the project I’m working on now, we’re 100% in on serverless and are combining: lambda, API Gateway, SQS, SNS, S3, X-Ray, CloudWatch, and DynamoDB. We tie this all together using the <a href="https://serverless.com/" target="_blank">serverless framework</a> and CloudFormation. As a result with just 1–2 people spending time on the backend and infrastructure (none are “qualified” DevOps people), we have a stack that 5 years ago I wouldn’t dream of. But because it’s essentially free to run as we develop it, we spin up a separate instance of our entire infrastructure for every git branch in about 5 minutes, for running our end-to-end tests, for example, and the destroy it again. Because… why not?</p>
<h4>Yeah, yeah, but seriously, why not?</h4>
<p>Yes. We’re lucky in that we’re building a largely greenfield product, what about the rest of the world that needs to interact or extend existing legacy systems?</p>
<p>We have cases like this too, but until now it was fairly straight forward to build solutions that just require a small whiff of server to resolve the impediment. For instance, to be able to listen to events on RabbitMQ, we’re building a bridge which pushes events from Rabbit to SNS, for further processing with lambda. This bridge cannot reasonably be built using lambda (which isn’t built for long running processes), so we will write something in Go, and deploy it in a container, perhaps running on EC2, perhaps in <a href="https://aws.amazon.com/fargate/" target="_blank">AWS Fargate</a>.</p>
<p>Anyway, believe me, there are <strong>legacy system reasons </strong>that make serverless a slightly less friction free choice.</p>
<p>There are some other weaknesses as well.</p>
<p>If you have a very <strong>predictable amount of traffic or compute</strong>, serverless will be more expensive than serverful for sure. Generally, if you operate at massive scale, and have the engineering capacity, building and managing an infrastructure with the likes of what Facebook, Google, Netflix or Microsoft are running may make economical sense for you.</p>
<p>If you need to develop <strong>real-time interactivity</strong> via web sockets, for instance, that’s pretty hard to do with lambda, but I’m sure we’ll see solutions to this limitation soon, it’s not a fundamental one. And I’m sure there are more use cases like this that are not currently well supported, yet.</p>
<p>If you’re afraid of <strong>vendor lock-in</strong>, serverless is not a good place right now. Almost every single serverless service in e.g. AWS is pretty damn proprietary. There are cross-vendor solutions, but the amount of features you can get this way will be significantly less than when buying into just one provider.</p>
<p>So absolutely, there are reasons to still build serverful services in 2018, but I predict we will see the same thing happen as managing physical servers in a data center before: <strong>there are reasons to still do this, but it’s no longer the default choice.</strong> And as the serverless space gets more and more mature, the number of serverful use cases will steadily decrease.</p>
<p>When building the new, or replacing the old, the intuition will be <strong>serverless first</strong>.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>51</wp:post_id>
		<wp:post_date>2018-08-21 19:15:30</wp:post_date>
		<wp:post_date_gmt>2018-08-21 17:15:30</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>serverless-first</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="aws"><![CDATA[AWS]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="serverless"><![CDATA[Serverless]]></category>
		<category domain="post_tag" nicename="serverless-architecture"><![CDATA[Serverless Architecture]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Getting value out of “I quit!”</title>
		<link>http://zef.me/2018/03/06/getting-value-out-of-i-quit/</link>
		<pubDate>Tue, 06 Mar 2018 19:04:36 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2018/03/06/getting-value-out-of-i-quit/</guid>
		<description></description>
		<content:encoded><![CDATA[

<figure class="wp-caption">

<img data-width="900" data-height="450" src="http://zefsmusings.files.wordpress.com/2018/03/aad9f-1s7_q_i3bivdhvyvel5tklg.png">

<figcaption class="wp-caption-text">Artist rendering of reality</figcaption></figure><p>Contrary to popular belief, management isn’t all roses. At the top of my list of least favorite parts is <em>people quitting on me</em>. That’s right, this does happen. Luckily not a lot, but given enough time and scale, this will happen to every manager at some point.</p>
<p>This is tough, because, I <a href="https://zef.me/my-fault-by-default-20e359624237" target="_blank">choose to own things to an extreme</a>, therefore I’m all in on the <a href="http://bigthink.com/ideafeed/ceo-employees-dont-quit-their-job-they-quit-their-boss" target="_blank">“people don’t quit their job, they quit their boss” mantra</a>.</p>
<p>To be honest, in painful situations like resignations, it’s very attractive to activate primal defense mechanisms such as pointing the proverbial finger in every possible direction but your own, and usually the quitter is very helpful in this regard:</p>
<p>“It’s not you, it’s me.”</p>
<p>“They’re completely crazy and offer me all this money, I simply cannot refuse.”</p>
<p>“I’ve been here a long time, I’m young, I need to try out new things.”</p>
<p>I’ll nod in acknowledgement; we’ll have some smalltalk; we’ll shake hands. Then I’ll go back to my desk, and think:</p>
<blockquote>Where did things go wrong?</blockquote>
<p>A while back I decided to change my attitude. Rather than just being depressed when this happens, I decide to figure out how to turn this event into something constructive.</p>
<p>We use feedback every day to improve, and somebody quitting is the ultimate piece of feedback. Explaining it away—as we’re tempted to do—is highly wasteful.</p>
<p>However, for that to happen you have to listen very carefully. It is my impression that people aren’t always fully upfront about “the real reason” for their resignation—if such a thing even exists. Part of this may be hedging their bets (the city I live in is relatively small, the chances we’ll meet again somewhere are significant—so telling me <em>I suck</em> is unwise), but I believe part of it is also that people honestly <em>do not know</em> what was the tipping point for them. I myself have chosen to resign in the past, and it was always a struggle to properly articulate why, and how this happened.</p>
<p>My favorite piece of writing on this topic comes from Michael Lopp (currently VP Engineering at Slack), in his article <a href="http://randsinrepose.com/archives/shields-down/" target="_blank">Shields Down</a>:</p>
<blockquote>Resignations happen in a moment, and it’s not when you declare, “I’m resigning.” The moment happened a long time ago when you received a random email from a good friend who asked, “I know you’re really happy with your current gig because you’ve been raving about it for a year, but would you like to come visit Our Company? No commitment. Just coffee.”</blockquote>
<blockquote>Now, everyone involved in this conversation transaction is aware of what is going down. While there is certainly no commitment, there is a definitely an agenda. The reason they want you to visit The Company is because, of course, they want you there in the building because seeing a potential future is far more compelling than describing it.</blockquote>
<blockquote>Still, seeing it isn’t the moment of resignation. The moment happened the instant you decided, “What the hell? I haven’t seen Don in months and it’d be good to see him.”</blockquote>
<blockquote>Your shields are officially down.</blockquote>
<p>But, let’s say it happened—you didn’t catch it, and somebody decided to quit. Digging to find the cause is tough. Nevertheless, there are always hints, and it’s our job to pick up on them. Some are obvious—I’ve seen people going from super high energy to dirt cynical in a matter of weeks. Some less so — why is that person giving talks on meet-ups and conferences, but never about anything he’s doing at work?</p>
<p>Ultimately, I now try to establish a plausible theory of what really happened, and act on it. Was there a strong hint they were discouraged by the tech stack? Let’s see if we can use this as a kick to finally get things moving there, as we always planned, but somehow never go to. A resignation can function as leverage in escalating certain issues up the organizational chain to prioritize them as well.</p>
<p>I’m not claiming this is easy, but it’s worth the effort. For sure it’s preferable to the alternative, which is to sit, sob and do nothing.</p>
<p>In summary:</p>
<blockquote>A resignation is the strongest piece of feedback you are going to get; figure out a way to use it to your advantage.</blockquote>
<p>In life, there are no problems, just opportunities — they say. You <em>just</em> have to see them. Sadly, this is pretty hard when they punch you in the face.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>52</wp:post_id>
		<wp:post_date>2018-03-06 20:04:36</wp:post_date>
		<wp:post_date_gmt>2018-03-06 19:04:36</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>getting-value-out-of-i-quit</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="100xengineer"><![CDATA[100xengineer]]></category>
		<category domain="post_tag" nicename="best-of"><![CDATA[Best Of]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="management"><![CDATA[Management]]></category>
		<category domain="post_tag" nicename="management-and-leadership"><![CDATA[Management And Leadership]]></category>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[43999910254]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Kubernetes, make it so!</title>
		<link>http://zef.me/2017/05/08/kubernetes-make-it-so/</link>
		<pubDate>Mon, 08 May 2017 18:57:49 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2017/05/08/kubernetes-make-it-so/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>During my PhD I developed a deep appreciation of declarative programming. When I joined LogicBlox a few years back (two jobs ago, I’m not proud to say), I wrote an article about this: <a href="https://zef.me/declare-everything-164cb8688838" target="_blank">Declare Everything</a>:</p>
<blockquote>Don’t you want more of your programming time be spent declaring what you need rather than spelling out the steps to accomplish it every time?</blockquote>
<p>At LogicBlox I also did a lot of DevOps related work in the context of the <a href="http://nixos.org" target="_blank">Nix</a> project, where I worked with <a href="https://zef.me/deploying-a-simple-node-js-application-with-nixops-c290270612bf" target="_blank">NixOS and NixOps</a>. <a href="https://nixos.org/nixops/" target="_blank">NixOps</a> allowed you to define networks of machines and the software running on them by declaratively specifying what you wanted to run on them, rather than the steps to get the system there. Making changes then simply involved making some changes to the specification (written in the Nix language) and running “deploy.” NixOps would rebuild the system and figure out the changes to implement the new version of your specification.</p>
<p>NixOps was (and still is) cool, but it’s very <strong>static</strong>. That is, you have a bunch of text file that specifies the system you want to have, and that’s what it will build. The system doesn’t adapt to the environment automatically, e.g. when a node dies, it doesn’t detect that and fix it (without rerunning the deployment at least). There’s not much intelligent scheduling either. You can’t tell it “hey, here’s a service, I’d like 20 instances figure out where to deploy them — go make it so!”</p>
<p>And in Kubernetes you can.</p>
<blockquote>In Kubernetes you declaratively specify the ideal state of the system, and Kubernetes will make it so.</blockquote>
<p>If you tell it to run 50 instances of some container, it will attempt to do so. If you had already 100 instances running, it will kill half. If you didn’t have anything running yet, it will spin up 50. If one of your cluster’s nodes dies which happened to run 8 instances of your service, it will select other nodes to run those 8 instances on.</p>
<p>If you want to upgrade your service, you can specify a roll-out strategy, again, declaratively. This strategy specifies how Kubernetes should implement upgrades. For instance. Here’s an example Kubernetes “Deployment”:</p>
<pre>apiVersion: extensions/v1beta1<br>kind: Deployment<br>metadata:<br>  name: my-app<br>spec:<br>  replicas: 3<br>strategy:<br>  type: RollingUpdate<br>  rollingUpdate:<br>    maxSurge: 1<br>    maxUnavailable: 0<br>template:<br>  metadata:<br>    labels:<br>      app: my-app<br>  spec:<br>    containers:<br>    - name: my-app<br>      image: org/my-app:v1<br>      readinessProbe:<br>        httpGet:<br>           path: /health<br>           port: 8080<br>           initialDelaySeconds: 5<br>           periodSeconds: 5<br>           timeoutSeconds: 2<br>      livenessProbe:<br>           path: /health<br>           port: 8080<br>           initialDelaySeconds: 5<br>           periodSeconds: 5<br>           timeoutSeconds: 2<br>      ports:<br>      - containerPort: 8080</pre>
<p>This specifies a few things:</p>
<ul>
<li>A deployment that should always run 3 instances of “my-app.”</li>
<li>“my-app” consists of one container, for which both a readiness and live probes are specified that Kubernetes will use to see if the container is… well, ready, and still alive (if it’s not alive it’ll kill it and start a new instance).</li>
<li>The rollingUpdate strategy specifies that upon an upgrade (and I’ll mention how to perform upgrades later) it will first spin up 1 (maxSurge) instance of the new version, wait for it to be ready, and only then terminate one of the old containers. When that’s done it will move on to the next one, and so on. This ensures there’s always 3 healthy containers running (maxUnavailable: 0).</li>
</ul>
<p>How do you run this deployment? If you put the spec above in a “my-app-deployment.yml” you can simply run:</p>
<pre>kubectl apply -f my-app-deployment.yml</pre>
<p>Then, to deploy a new version, simply edit the file, change the “image” to e.g. “org/my-app:v2” and run the same command again. You can watch new containers being spun up, and as they become healthy, old ones being terminated, one by one.</p>
<p>Kubernetes makes it so. Coolio.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>59</wp:post_id>
		<wp:post_date>2017-05-08 20:57:49</wp:post_date>
		<wp:post_date_gmt>2017-05-08 18:57:49</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>kubernetes-make-it-so</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="docker"><![CDATA[Docker]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="kubernetes"><![CDATA[Kubernetes]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>The 100x Engineer</title>
		<link>http://zef.me/2017/12/28/the-100x-engineer/</link>
		<pubDate>Thu, 28 Dec 2017 13:02:29 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2017/12/28/the-100x-engineer/</guid>
		<description></description>
		<content:encoded><![CDATA[

<figure>

<img data-width="1600" data-height="628" src="https://cdn-images-1.medium.com/max/1200/0*EtvPzpcl8I-f-dBM.">
</figure>

<p>A few months ago a new engineer joined our team. As always I spent some time with him to better understand the type of person he is, what drives him. We usually talk about past experience, but more importantly: future goals. As it turned out, he had an interesting one:</p>
<blockquote>I want to be the best programmer in the world</blockquote>
<p>That’s quite ambitious.</p>
<p>I liked it.</p>
<p>However, this made me consider — what does that mean, actually, to be the “best programmer.” How does one measure that, how does one know he or she is <em>it</em>?</p>
<p>That reminded me of a paper from the 1960s written by Sackman, Erikson and Grant entitled “Exploratory Experimental Studies Comparing Online and Offline Programming Performance.” The goal of this study was to investigate the difference in programmer performance in various aspects of programming given whether the programmer had interactive access to a computer — mainframes at the time — or was effectively working with “pen and paper.” While the answer to this question has pretty much become obsolete — who programs on paper anymore—still there were a few findings that have lived on to this day:</p>
<ul>
<li>There is a <strong>20x</strong> difference in programming time to complete a programming exercise between the best and the worst programmer among the research participants.</li>
<li>There is a <strong>25x</strong> difference in debugging time.</li>
<li>There is a <strong>5x</strong> difference in the size of the programs produced.</li>
<li>There is a <strong>10x</strong> difference in the program execution speed.</li>
</ul>
<p>The research participants all had a few years of experience under their belt, in fact the years of experience did not seem to have a significant impact on these numbers. All in all, quite a significant difference, no?</p>
<blockquote>The 10x Programmer</blockquote>
<p>This paper is where the concept of the “10x programmer” originates. It has fascinated people for decades, and is highly controversial. <a href="https://www.google.pl/search?q=10x+programmer&amp;ie=UTF-8&amp;oe=UTF-8&amp;hl=en-us&amp;client=safari" target="_blank">Just Google the phrase.</a></p>
<p>To be fair, Sackman et al.’s numbers for sure were exaggerated, many have challenged their methods. Still, few dispute there are significant differences between poor and amazing programmers, even anecdotally everybody knows somebody who seems to build amazing pieces of software in shockingly little time.</p>
<blockquote>Who cares?</blockquote>
<p>“So… who cares?” You may be asking. Why are 10x programmers such a big deal?</p>
<p>Well, for one, at least ostensibly, 10x’ers are a good deal for employers. Conceptually they can do this:</p>
<ol>
<li>Fire 90% of the workforce</li>
<li>Hire 10x-ers for the remaining 10%</li>
<li>Pay them perhaps 2x</li>
<li>Profit</li>
</ol>
<p>Simple, right?</p>
<p>Reality, however, looks a bit different. First off, this assumes you are able to hire a team of 10x’ers, and… good luck with that. And since you probably won’t be able to do that, you have to integrate them into your existing <em>single-digit-x’er</em> team. As it turns out having somebody in your team who’s significantly, <strong>significantly</strong> more productive than you is not all that motivating.</p>
<p>But actually, I didn’t really want to dwell too much on the concept of 10x programmers, because from my perspective, there is a different “breed” whose impact far exceeds that of the 10x programmer.</p>
<p>Who?</p>
<p>For that let’s first have a closer look at the term “programmer.” In the Sackman research, they focused solely on programming ability. Exercises were highly algorithmic, of the type “given a grid representing a maze, write a program that finds a route to the exit.” And this is the type of work that good “programmers” are good at: programming challenge in; code out. Every programmer has their own queue of such tasks, and is knocking them out, one by one.</p>
<p>Typin’ the codez.</p>
<p>And if that’s what you like, I’m sure there are places where you can work that way.</p>
<p>However, this is not the programming reality in any place where I have ever worked. And to be frank — thank god. Long term, I think this gets really boring.</p>
<p>A role that I find much more interesting is the role of <strong>engineer</strong>. Engineers turn ideas into actual working products and thus have a much wider perspective. They have a whole slew of tools available to them to get the job done, and of course, <em>programming</em> is one of them.</p>
<p>But to be frank, and I think I can say this here, for a skill we tend to brag about so much, we’re pretty damn bad at it.</p>
<p><a href="https://www.mayerdan.com/ruby/2012/11/11/bugs-per-line-of-code-ratio" target="_blank">Statistics don’t lie:</a></p>
<blockquote>(a) Industry Average: “about 15–50 errors per 1000 lines of delivered code.” He further says this is usually representative of code that has some level of structured programming behind it, but probably includes a mix of coding techniques.</blockquote>
<blockquote>(b) Microsoft Applications: “about 10–20 defects per 1000 lines of code during in-house testing, and 0.5 defect per KLOC (KLOC IS CALLED AS 1000 lines of code) in released product (Moore 1992).” He attributes this to a combination of code-reading techniques and independent testing (discussed further in another chapter of his book).</blockquote>
<blockquote>(c) “Harlan Mills pioneered ‘cleanroom development’, a technique that has been able to achieve rates as low as 3 defects per 1000 lines of code during in-house testing and 0.1 defect per 1000 lines of code in released product (Cobb and Mills 1990). A few projects — for example, the space-shuttle software — have achieved a level of 0 defects in 500,000 lines of code using a system of format development methods, peer reviews, and statistical testing.”</blockquote>
<p>I say — we should avoid programming whenever we can and save the world from all those bugs we introduce every time we press a key in our IDE.</p>
<p>So yeah, the 10x programmer… cool idea. But I’d to set the bar a bit higher. It’s about to be 2018, the world has changed.</p>

<hr>

<h3>The 100x Engineer</h3>
<p>I like stretch goals. They often lead to taking a step back and to big shifts in thinking. And so does this one. If we want to be <em>100x</em> engineers — engineers who have 100x the impact of ye’ old 1x engineer—how do we accomplish that?</p>
<p>Being productive yourself is not enough — 10x you can possibly achieve by sheer programming talent, sure, but not 100x. <strong>In order to have a 100x impact, you have to multiply that productivity across your team and organization, and, ultimately, guide others to that same way of working.</strong></p>
<p>While 100x may sound extreme, I have worked with various people in my career that I consider to have the “100x mindset”, a particular way of thinking, talking, and acting.</p>
<p>What may be surprising to some people is that none of this has anything to do with programming ability, technologies, nor programming languages. The common cry is: “Why are we still using Java? If we could only use Scala, Clojure, Node, &lt;&lt;insert flavor of the day here&gt;&gt; we would be so much more productive!” The reality is a different programming language perhaps gets you to to 1.5–2x tops. That’s peanuts to 100x stuff. 100x is a different game altogether.</p>
<p>So, what is that “100x mindset” exactly? Let me discuss two aspects.</p>
<h4>1. Ownership</h4>
<p>100x’ers <strong>own</strong> what they do. They know the <em>why</em>, they know the <em>how</em>, and the <em>what</em> of what they do. In the book <a href="https://www.amazon.com/Extreme-Ownership-U-S-Navy-SEALs-ebook/dp/B00VE4Y0Z2" target="_blank">“Extreme Ownership”</a> two former navy seals explain their concept of <em>extreme ownership</em>. The core of the concept is exactly what I mean when I say “own things.” It means: accepting that you are accountable for everything you do.</p>
<p>Most importantly that means: <strong>no finger pointing</strong>. This doesn’t mean that everything is under your control, but it does mean you are responsible for how you react when things inevitably do go wrong. It means you are responsible for anticipating what could happen and have contingency plans. It means you learn from mistakes to get value even from them. <em>Own</em> every aspect of what you do.</p>
<p>I only know of one way to get to this level of ownership: by challenging things; by <em>productively challenging</em> everything that is asked of you <strong>and your team</strong>, so you understand and can own every single decision.</p>
<h4>2. Challenging the status quo</h4>
<p>The 100x engineer challenges things in three dimensions:</p>
<ol>
<li>
<em>What</em>? This is primarily about scope: what are we developing, and is this scoped well, is everything clear in terms of requirements, and are we sure that all of it is important and needs to be done (right now)?</li>
<li>
<em>How</em>? This is about being smart about how something is implemented, are there less-effort ways to get to the same result? But also about process: how do we get to the results we want and how can we improve?</li>
<li>
<em>Why</em>? This is about business context, about fully understanding why a feature need to be developed, and to check that the product manager’s approach is the right way to fill the user’s need.</li>
</ol>
<p>Let’s look at each in a bit more detail.</p>
<h4>What?</h4>
<p>The single best way to deliver a product faster is to cut its scope. What are the features it <em>needs</em> to have.</p>
<p>We can apply my “5 really’s” technique here:</p>
<blockquote>
<strong>PM:</strong> We need to have all these 10 features</blockquote>
<blockquote>
<strong>100x’er:</strong> Really?</blockquote>
<blockquote>
<strong>PM:</strong> Yes.</blockquote>
<blockquote>
<strong>100x’er:</strong> Really?</blockquote>
<blockquote>
<strong>PM:</strong> Well, ok, maybe not feature 7. But for the rest: yes.</blockquote>
<blockquote>
<strong>100x’er:</strong> Really?</blockquote>
<blockquote>
<strong>PM:</strong> Yes, well, I think so… Let me verify with the customer.</blockquote>
<blockquote>Ok, they may need 4 and 5, but we can do this later. The rest are all must-haves.</blockquote>
<blockquote>
<strong>100x’er:</strong> Really?</blockquote>
<blockquote>
<strong>PM:</strong> Yes.</blockquote>
<p>This may sound like a joke, but more often than not a product manager shows up with a long, long list of features that are all must-haves. Then, after hours, days, sometimes months of negotiation, you end up with a list that’s barely a quarter of the original one. This is only natural, coming up with new features to add is easier than to remove them.</p>
<p>Another way to reduce scope at a lower level is by using the “pareto principle,” the 80/20 rule. <a href="https://en.wikipedia.org/wiki/Pareto_principle" target="_blank">Wikipedia</a>:</p>
<blockquote>The Pareto principle (also known as the 80/20 rule, the law of the vital few, or the principle of factor sparsity) states that, for many events, roughly 80% of the effects come from 20% of the causes.</blockquote>
<p>This rule has many applications, and software development is one. Quite often there are ways to implement a feature that is significantly less effort (20%, say) but gives you most of the benefit (e.g. 80%). This is not only attractive because, well, it’s less work, but also because this allows you to cheaply test out features, and only fully develop them when they turn out to be valuable and used.</p>
<h4>How?</h4>
<p>Now that <em>what</em> needs to be developed is reduced to a minimal set, there’s still a lot of wiggle room and wins to be gained by challenging <em>how</em> things can be implemented. Generally there are many ways to implement a feature. In many teams as soon as the groups comes up with one approach, they’re satisfied. 100x’ers will always push to find alternative approaches, to evaluate all options based on their pros and cons.</p>
<p>The “how” can also be impacted by <em>technical debt</em>. Often there’s a “hacky” way to implement something quick and dirty, and a “proper” way that first involves cleaning up technical debt, and then implementing a feature cleanly. What is the best way? The 100x’er appreciates there’s not one true answer, and it really depends on the circumstances and cost of accumulated technical debt. A 100x’er can make the right call case-by-case, and negotiate with product to get the time to reduce technical debt when appropriate.</p>
<p>Another aspect of “how” is the process. What I like a lot about Scrum is that it effectively sets up a foundation that, when used properly, encourages 100x behavior:</p>
<ul>
<li>
<strong>Refinements</strong> are a great forum to discuss and challenge the <em>what</em>, the <em>how</em>, but also the <em>why</em>. The product owner presents new features to be developed, and the development teams challenges the <em>what</em> and the <em>why</em> to get the full context and challenging each other on <em>how</em> to implement it.</li>
<li>
<strong>Plannings</strong> beside deciding what to do the next sprint, the planning is also a means to “prime the mind”: to remember what needs to be done exactly and plan how the team will cooperate to deliver.</li>
<li>
<strong>Retrospectives</strong> is where the team gets better. Some things go wrong during a sprint cycle, some things go poorly. The retrospective is the time where the 100x’er challenges the team to improve and do things better next time. And here too: practice ownership. 100x’ers don’t complain unproductively. They don’t point fingers in any other direction than their own.</li>
</ul>
<h4>Why?</h4>
<p>Just last week I had a conversation with an engineer who just found out that he had spent 3 months full-time on implementing a feature, and then found out that the same value to the user could have been realized in 3 days of work. Obviously, it wouldn’t have been the same functionality, but it would achieved the same goal.</p>
<p>How can something like that happen?</p>
<p>This will happen unless engineers take a step back, zoom out and challenge the <em>why. Why </em>is this feature to be developed? What is the user trying to achieve? What is their need? Product managers tend come up with very specific feature requests, sometimes specified at a very low level. This is meant well, however, chances are that product managers are humans too, and miss things. Additionally, the risk is that engineers no longer challenge the much more fundamental question: why are we doing this, and isn’t there a different way to achieve the same result with less effort?</p>
<h3>But wait…</h3>
<p>All of this is easier said than done. And it should be, not anybody should be able to reach the ranks of the 100x engineer. Nevertheless, we can all aspire to, and figure out ways to get better.</p>
<p>Therefore, it is worth looking at the skillset of a 100x engineer. As you will notice, it is very, very different than of 10x programmers.</p>
<ul>
<li>
<strong>Communication</strong> — this one is almost too obvious to mention, but it’s an important one. 100x’ers have excellent communication skills. Communication is an essential part of having 100x impact.</li>
<li>
<strong>Creativity</strong> — obviously this is common with 10x programmers, but the creativity required is not about algorithms, nor clever class inheritance structures, rather it is about coming up with more effective ways of achieving goals.</li>
<li>
<strong>Empathy</strong>—somewhere buried in all this “challenge everything” talk, I mentioned “productive challenging.” So what did I mean by that? Let me explain using my oldest son as an example. He is 4 years old. What is the favorite question of a 4 year old? “Why!?” Does that mean my son is a 100x engineer? No. Why not? Because he asks “Why?” always. Whether it’s a good time or not, whether it makes sense or not, whether he makes his parents want to kill themselves or not. Having the empathy of knowing <em>what</em> to challenge, <em>how</em>, and <em>when</em> is an essential skill of the 100x engineer as well.</li>
<li>
<strong>Negotiation</strong>—good ideas are overrated. Everybody has them, but few manage to execute on them. An essential element of being able to implement ideas that you know need to be implemented is negotiation— negotiation with fellow developers, with product managers, and with other stakeholders. Explaining why the idea is good, and why time should be allowed to implement them. 100x’ers know how to do this, as a result everything seems possible when they’re around.</li>
<li>
<strong>Technical</strong>—last on this list, but still vital. While most skills mentioned are quite “soft,” this does not mean the 100x engineer needn’t be technical. In fact, it’s a prerequisite that he or she is technical top talent, for two reasons: (1) challenging things at the technical level yield big gains, and therefore require a deep level of technical understanding, and (2) <a href="https://en.wikipedia.org/wiki/Ethos" target="_blank">ethos</a> matters, 100x engineers wouldn’t be accepted by their peers if they weren’t strong technically, you have to be “one of us.”</li>
</ul>
<hr>

<p>A few months in, mister-“I want to be the best programmer in the world” is doing very well, as a programmer. He’s talented, works very hard, is productive and very smart. Will he be the best programmer in the world? I don’t know.</p>
<p>But secretly I hope that it won’t matter.</p>
<p>I hope that some day, not now, but maybe in a few years, he will want to do something <em>more.</em> That he will adjust his dream to not just be good at one narrow skill called “programming,” but will aspire to have the impact of a 100x engineer.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>65</wp:post_id>
		<wp:post_date>2017-12-28 14:02:29</wp:post_date>
		<wp:post_date_gmt>2017-12-28 13:02:29</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-100x-engineer</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="100xengineer"><![CDATA[100xengineer]]></category>
		<category domain="post_tag" nicename="best-of"><![CDATA[Best Of]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="software-development"><![CDATA[Software Development]]></category>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[43999910422]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Airpods — a head-turning product</title>
		<link>http://zef.me/2017/07/11/airpods-a-head-turning-product/</link>
		<pubDate>Tue, 11 Jul 2017 20:17:56 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2017/07/11/airpods-a-head-turning-product/</guid>
		<description></description>
		<content:encoded><![CDATA[

<h4>Look ma, no wires!</h4>
<p>A little while ago the wires of my lightning earbuds started to crack, so I decided to take the plunge and buy myself some AirPods. That’s right, the EarPods without the wires.</p>
<figure><img src="https://cdn-images-1.medium.com/max/800/1*t6d5g12Z3PLk020w8N7rlw.png"></figure><p>And I love them. Honestly, this is Apple at its best. They’re super easy to use (you can connect them to any Apple device by simply holding them next to them, and tapping a button). If you don’t wear them, you keep them in a little box, which also doubles as a charger. The box itself can in turn be charged through a lightning cable (of we already have plenty in the house). The sound quality is good. And did I mention there are no more wires? You have no idea how much frustration that saves no longer having to pull cords through under your shirt… like an animal.</p>
<p>There is only one issue. Just one.</p>
<figure><img src="https://cdn-images-1.medium.com/max/800/1*kx3A8bKFXAsn2uuPVEU9YA.jpeg"></figure><p>Wearing them, you look like a dork.</p>
<p>And that’s ok. Looking like a dork is relative. As long as everybody else looks like a dork, your relative dorkiness maintains sustainable levels. But where I live, I’ve only seen one other person wearing them. So my relative dorkiness is high. I notice this just about everywhere. Walking on the street. Sitting in a tram. People look at you thinking “what the hell did that dude do to his earphones?”</p>
<p>But I’m not going to give in. I will have to train this city of half a million people on how this is the future. That this is the new normal. That this is the new cool.</p>
<p>I’m just ahead of the curve.</p>
<p>Down on the slope of a steep, giant-ass curve.</p>
<p>(<a href="https://xkcd.com/37/" target="_blank">Not to be confused with a giant ass-curve</a>).</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>69</wp:post_id>
		<wp:post_date>2017-07-11 22:17:56</wp:post_date>
		<wp:post_date_gmt>2017-07-11 20:17:56</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>airpods-a-head-turning-product</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="apple"><![CDATA[Apple]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="wireless"><![CDATA[Wireless]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>My fault by default</title>
		<link>http://zef.me/2018/03/05/my-fault-by-default/</link>
		<pubDate>Mon, 05 Mar 2018 17:16:59 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2018/03/05/my-fault-by-default/</guid>
		<description></description>
		<content:encoded><![CDATA[

<h4>More on extreme ownership</h4>
<figure class="wp-caption">

<img data-width="783" data-height="613" src="http://zefsmusings.files.wordpress.com/2018/03/dcf92-1mux0y5i22o4wstnzczko0a.jpeg">

<figcaption class="wp-caption-text">This isn’t me, but I appreciate this dude’s ownership.</figcaption></figure><p>In <a href="https://zef.me/the-100x-engineer-6d50a690a866" target="_blank">the 100x engineer</a>, I touched on the topic of ownership. Here’s what I wrote:</p>
<blockquote>100x’ers own what they do. They know the <em>why</em>, they know the <em>how</em>, and the <em>what</em> of what they do. In the book <a href="https://www.amazon.com/Extreme-Ownership-U-S-Navy-SEALs-ebook/dp/B00VE4Y0Z2" target="_blank">“Extreme Ownership”</a> two former navy seals explain their concept of extreme ownership. The core of the concept is exactly what I mean when I say “own things.” It means: accepting that you are accountable for everything you do.</blockquote>
<blockquote>Most importantly that means: <strong>no finger pointing</strong>. This doesn’t mean that everything is under your control, but it does mean you are responsible for how you react when things inevitably do go wrong. It means you are responsible for anticipating what could happen and have contingency plans. It means you learn from mistakes to get value even from them. Own every aspect of what you do.</blockquote>
<p>I wanted to lift out these paragraphs into this separate article, because they are something I very deeply believe in. I try to apply the principle of total ownership to everything I do, as a manager, as an engineer, as a parent, and as a husband.</p>
<p>In the abstract that makes many things simpler. Something doesn’t work out as planned? Who’s to blame? By default: me.</p>
<p>In reality this is pretty tough, because there are so many things in life you feel you don’t have <strong>control</strong> over. And let’s be honest, this is perfectly valid, we don’t have control over everything. However, we do have <strong>influence</strong>. While influence doesn’t guarantee an outcome, it does give you the ability to at least nudge things in the right direction.</p>
<p>I have found that it is pretty rare that in case of an unexpected event, there’s nothing you can do, or could have done.</p>
<p>I always ask myself two questions:</p>
<ol>
<li>
<strong>Did I do</strong> everything in my power to prevent this from happening?</li>
<li>Is there anything in my power <strong>I can do</strong> to prevent this from happening again?</li>
</ol>
<p>Let’s take being late for a meeting as an example.</p>
<p>There’s always a “good reason” for this happening: traffic, tram broke down, dog ate my homework. But did you do everything in your power to be on time? Of course, realistically, the answer is always: no. You could have left an hour earlier, two hours earlier, a day earlier, just have stayed in the office overnight. It’s a choice to be on time, essentially, always. Of course there’s a trade-off between being on time, and you know, having a life. And there’s the second dimension to this whole thing: what are the trade-offs, and are they worth it? Staying overnight just to make a meeting? Probably excessive, taking an earlier tram? Perhaps worth it.</p>
<p>Then the second part: is there any lessons to be learned to prevent this in the future? I was late for a job interview once (somebody interviewing with me—don’t worry). It was scheduled at 9am, a time that I’m usually at the office for. Guess what, the tram broke down and I was 10 minutes late. Sorry! Rather than saying “tough cookies, what can I do?” I knew this was all on me. And I took measures to prevent it from happening again, so now I make sure I come 10–20 minutes earlier for such occasions. For the same reason you can probably find me 2–3 hours early at an airport.</p>
<p>This is a simple example, but the principle applies everywhere. In future articles I’ll cover some tougher cases. <strong>Next up</strong>: how to own somebody in your team quitting his job? Yikes.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>72</wp:post_id>
		<wp:post_date>2018-03-05 18:16:59</wp:post_date>
		<wp:post_date_gmt>2018-03-05 17:16:59</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>my-fault-by-default</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="100xengineer"><![CDATA[100xengineer]]></category>
		<category domain="post_tag" nicename="company-culture"><![CDATA[Company Culture]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="leadership"><![CDATA[Leadership]]></category>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[43999910306]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Nonviolent Meeting Scheduling</title>
		<link>http://zef.me/2016/12/27/nonviolent-meeting-scheduling/</link>
		<pubDate>Tue, 27 Dec 2016 17:44:15 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2016/12/27/nonviolent-meeting-scheduling/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Scheduling meetings with people, especially larger groups, by default is<strong> a hostile act</strong>. You come in and take away half an hour, an hour or more of people’s time—time they could otherwise have spent doing “real work.” On top of the meeting time itself, there’s additional overhead:</p>
<ul>
<li>Scheduling overhead — every participant has to check and decide if they’re available, and decide they should attend or not, talk to the organizer to negotiate any way to get out of it.</li>
<li>Preparation overhead—for organizer and participants.</li>
<li>Travel, coffee making overhead—you know this adds at least 5-10 minutes to every 30 minute meeting.</li>
<li>Task switching overhead.</li>
</ul>
<p>Multiply all this times the number of participants and you will start to see the true cost.</p>
<a href="https://twitter.com/philltopia/status/727190980726689792">https://twitter.com/philltopia/status/727190980726689792</a><p>So, the first thought when setting up a meeting should be: what alternatives do I have and, and <strong>is this the best possible use of time of every single person</strong> I’m inviting here?</p>
<p>But let’s assume that you decided: yes, a meeting is the most effective way to achieve the goal (I believe this is sometimes the case).</p>
<p>In that case, let’s agree on some ground rules for what I call “nonviolent meeting scheduling.” These aren’t rocket science, but still they’re broken all the time:</p>
<ol>
<li>
<strong>Check if people are actually available</strong> at the time of your meeting — if not, pick some other time where everybody is available; or, if this is not possible, consult the person in question <em>before</em> scheduling if they can change their plans.</li>
<li>
<strong>Attach an agenda</strong> as part of the invite, so people know what to expect.</li>
<li>Use the <strong>“optional” marker</strong> for those whose attendance is optional.</li>
</ol>
<p>In my humble opinion it should be company policy everywhere to make it perfectly acceptable (and expected) that breaking rules #1 and #2 are grounds for anybody to instantly reject a meeting invite without giving a reason.</p>
<blockquote>Received a meeting invite for a time you’re busy, without consultation? No agenda in invite? Insta-reject.</blockquote>
<p>Now that we got the basics out of the way, two more tips:</p>
<ul><li>I block out “family time” in my calendar. I work with a California-based company, that’s 9 hours of time difference. I also have three-month old twins, and a three-year old son that need bathing and be put to bed; I also have the need for my kids to recognize their father as they grow up. That’s why I have a recurring “meeting” in my calendar marking my unavailability. Anywhere outside there (within reason) I’m available. In terms of effectiveness of this measure — I have mixed results, not everybody follows rule #1. It definitely makes it easier to reject meetings though (“it’s marked in my calendar, please respect it.”)</li></ul>
<figure class="wp-caption">

<img data-width="697" data-height="143" src="https://cdn-images-1.medium.com/max/800/1*Ai6F_9495BjK3xBTmW3lqg.png">

<figcaption class="wp-caption-text">But as you can tell, not everybody respects my unavailability</figcaption></figure><ul><li>Batch up meetings to reduce the amount of time lost context switching. When I schedule a meeting, I always prefer to put it just before or after some other meeting the other person (people) already have. Such “meeting clusters” can be exhausting, but in my experience it’s better than 30 minutes of meeting, an hour of “actual work” and then another hour of meeting.</li></ul>
<p>Happy meeting scheduling!</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>80</wp:post_id>
		<wp:post_date>2016-12-27 18:44:15</wp:post_date>
		<wp:post_date_gmt>2016-12-27 17:44:15</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>nonviolent-meeting-scheduling</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="management"><![CDATA[Management]]></category>
		<category domain="post_tag" nicename="meetings"><![CDATA[Meetings]]></category>
		<category domain="post_tag" nicename="productivity"><![CDATA[Productivity]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Tech Radar May 2017</title>
		<link>http://zef.me/2017/05/10/tech-radar-may-2017/</link>
		<pubDate>Wed, 10 May 2017 18:23:23 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2017/05/10/tech-radar-may-2017/</guid>
		<description></description>
		<content:encoded><![CDATA[

<figure>

<img data-width="1000" data-height="667" src="https://cdn-images-1.medium.com/max/800/1*Ht_pc7mXuolerpNkrCMspQ.png">
</figure><p>The technologies I keep an eye on and find interesting evolve over time. I thought it could be interesting to share the things I’m currently seeing, thinking about, and playing with. The things on my technological radar, if you will.</p>
<p>Here’s my list for this month. Previous editions <a href="https://zef.me/tagged/techradar" target="_blank">can be found here</a>.</p>
<h3>Kubernetes</h3>
<p>Not new by a long shot, but very much on my radar right now, as you will have guessed based on the <a href="https://zef.me/getting-started-with-kubernetes-26cc10876c9f?source=collection_home---5------2-----------" target="_blank">past</a> <a href="https://zef.me/kubernetes-make-it-so-240b5d2dd36d?source=collection_home---5------1-----------" target="_blank">few days</a>.</p>
<p>Why I like it? It’s declarative, it’s understandable, and it’s infrastructure. I love infrastructure.</p>
<h3>Go</h3>
<p>Talking about infrastructure, we deployed a nice simple piece of infrastructure (to support on-prem log shipping into our Kafka+ELK logging stack) that I wrote a little while back to production. Seemed like a perfect fit for <a href="http://www.go-lang.org" target="_blank">Go</a>, which seems to be the de-facto standard in infra programming these days. So far: seems stable and plenty fast. Doing programming in a strongly typed language feels nice and safe.</p>
<h3>Alpine Linux</h3>
<p>For an on-prem product at work we’re preparing VM images for customers to deploy. For this we’re now using <a href="https://alpinelinux.org/" target="_blank">Alpine Linux</a>. In the <a href="https://www.docker.com" target="_blank">docker</a> community Alpine is generally used a base image, to achieve minimal docker image sizes. But Alpine can be deployed as a host OS as well, it is a full-blown (though minimal) Linux distrubtion. Our product runs entirely in docker, so we don’t need much from the host OS other than a recent kernel and up-to-date docker distribution — Alpine offers just that, and as a result our downloadable .ova comes down to barely 200MB.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>86</wp:post_id>
		<wp:post_date>2017-05-10 20:23:23</wp:post_date>
		<wp:post_date_gmt>2017-05-10 18:23:23</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>tech-radar-may-2017</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="devops"><![CDATA[DevOps]]></category>
		<category domain="post_tag" nicename="docker"><![CDATA[Docker]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="techradar"><![CDATA[Techradar]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Getting started with Kubernetes</title>
		<link>http://zef.me/2017/05/05/getting-started-with-kubernetes/</link>
		<pubDate>Fri, 05 May 2017 07:49:51 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2017/05/05/getting-started-with-kubernetes/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Over the past few days I’ve been reading up on, and experimenting with <a href="https://kubernetes.io" target="_blank">Kubernetes</a>. If you’re also interested to see what the hype is all about (and so far I have to say — the hype is warranted, if you care about DevOps at all), here are the resources I used to get started.</p>
<h3>Install minikube</h3>
<p><a href="https://kubernetes.io/docs/getting-started-guides/minikube/" target="_blank">Install minikube</a> to start experimenting locally. This boots up a local VM (e.g. Virtualbox VM) with Kubernetes installed, and sets up the kubectl command to connect to it. Alternatively, just set up a small cluster on <a href="https://cloud.google.com/container-engine/" target="_blank">Google Container Engine</a> (these can be as small as 1 VM), but… it’s not free.</p>
<h3>Read Kubernetes in Action</h3>
<p>Read <a href="https://www.manning.com/books/kubernetes-in-action" target="_blank">Kubernetes in Action</a> (still MEAP). At home I have little time to sit behind a computer and experiment, but I do find time here and there to read a few pages in a book to get familiar with the concepts. Kubernetes in Action (still in early access) was a great help here.</p>
<h3>Get a private docker repository</h3>
<p>Kubernetes always has to pull its images from some docker repository. If you work on random open source stuff, you can use the public Docker registry for this. However, if you want to experiment with more private stuff, you need a private docker repository. I use GCR (Google Container Registry) for this purpose. Setting this up basically involves:</p>
<ol>
<li>Creating a Google account (in the rare case you don’t have one)</li>
<li>
<a href="https://console.cloud.google.com" target="_blank">Create a Google Cloud Platform</a> project and attach billing to it</li>
</ol>
<p>Setup the <a href="https://cloud.google.com/sdk/downloads" target="_blank">gcloud tool</a> on your machine to start pushing your images to GCR. After you install this tool and set it up (gcloud init), you can now start pushing your images there (e.g. gcloud docker push gcr.io/yourproject/yourimage)</p>
<p>The next challenge is to pull these images in minikube. Here’s how I got this to work:</p>
<pre>$ gcloud auth application-default print-access-token</pre>
<pre># Then copy and paste the output<br># Next, we ssh into the minikube VM:</pre>
<pre>$ minikube ssh</pre>
<pre># Once in, we can login to the registry</pre>
<pre>$ docker login -u oauth2accesstoken -p "&lt;&lt;paste your access token here&gt;&gt;" <a href="https://gcr.io" target="_blank">https://gcr.io</a></pre>
<pre># And log back out</pre>
<pre>$ exit</pre>
<p>That should be it.</p>
<h3>Go higher level</h3>
<p>Once mastering the basics, it may become worth looking into higher-level abstractions built on to of Kubernetes. Like <a href="https://github.com/kubernetes/helm" target="_blank">Helm, a package manager</a>. This makes it easier to deploy some commonly used software to your cluster, e.g. a highly available MySQL, or some other database.</p>
<p>Enjoy!</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>88</wp:post_id>
		<wp:post_date>2017-05-05 09:49:51</wp:post_date>
		<wp:post_date_gmt>2017-05-05 07:49:51</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>getting-started-with-kubernetes</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="docker"><![CDATA[Docker]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="kubernetes"><![CDATA[Kubernetes]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Seek first to understand</title>
		<link>http://zef.me/2017/04/07/seek-first-to-understand/</link>
		<pubDate>Fri, 07 Apr 2017 08:16:00 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2017/04/07/seek-first-to-understand/</guid>
		<description></description>
		<content:encoded><![CDATA[

<h4>Or: why is nobody listening to me!?</h4>
<p>Does this sound familiar?</p>
<ul>
<li>
<em>“They</em> just do whatever they want.”</li>
<li>
<em>“They</em> don’t listen to our suggestions, whatever we try.”</li>
<li>“Whatever <em>they</em> say goes.”</li>
<li>
<em>“They</em> talk as we’re not even here.”</li>
<li>
<em>“They</em> micro manage us all the time, we get to make no decisions.”</li>
</ul>
<p>If this does sound familiar to you, at best this will result in anger and frustration. If it persists, in many cases it will result in something much worse: <strong>compliance</strong>. In compliance-mode, there is no more will to attempt anything anymore, just “accepting the things we cannot change.” And effectively it’s end of story.</p>
<p>That’s bad, and — in my experience — completely avoidable.</p>
<p>Of course, I don’t know the “<em>them</em>” in your organization or life, but I have worked in contexts with a “<em>them</em>” and have found that a different attitude and approach resolved/avoided this problem altogether.</p>
<p>The idea is simple, and it is best formulated as the <a href="https://www.stephencovey.com/7habits/7habits-habit5.php" target="_blank">fifth</a> of the <a href="https://www.stephencovey.com/7habits/7habits.php" target="_blank">“7 habits of highly effective people”</a> (although I implicitly already applied this before I knew it was one of “the habits”). Here it is:</p>
<blockquote>Seek first to understand, then to be understood.</blockquote>
<p><a href="https://en.wikipedia.org/wiki/The_7_Habits_of_Highly_Effective_People#Interdependence" target="_blank">Wikipedia summarizes</a> this habit as follows:</p>
<blockquote>Use empathic listening to genuinely understand a person, which compels them to reciprocate the listening and take an open mind to being influenced by you. This creates an atmosphere of caring, and positive problem solving.</blockquote>
<p>It’s that simple. Yet few people do it.</p>
<p>Here is most people’s approach to convincing other people: “here is what I think we should do and why.” Notably missing is a visible attempt in verifying you fully understand and appreciate the real problem (and person with the problem).</p>
<p>This approach probably works fine if there’s trust already, if you have a track record of getting things right, or because you’re the boss and everybody just does what you say anyway. However, if you do <em>not</em> have a track record, or you’re <em>not</em> the boss, it’s not so easy to convince people of your point of view without showing them that you understand <em>them </em>first.</p>
<blockquote>Many people have the assumption that asking questions shows weakness, but it does not. It’s just the opposite.</blockquote>
<p>In a previous job I was regularly involved in the sales part of the business. Yes, me, in sales, it’s hilarious, I know. Beyond my natural charm, I only had one sales tool at my disposal: my ability to ask the right questions. Questions that showed I was trying to understand — and eventually understood — their business and needs. When the potential customer felt understood, they were open to anything.</p>
<p>People are terrible at saying what they mean. That’s why you have to ask questions. You have to listen to what people mean, not what they say. That’s not always easy. The only way I know to do so, is to ask away.</p>
<p>This approach has yet to fail on me. It’s possible that I’m just lucky. It’s possible (and in fact very likely) that I’m just special (as my mother has always claimed). It’s also possible I’m completely delusional, but hey, what can I do.</p>
<p>Ask.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>92</wp:post_id>
		<wp:post_date>2017-04-07 10:16:00</wp:post_date>
		<wp:post_date_gmt>2017-04-07 08:16:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>seek-first-to-understand</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="100xengineer"><![CDATA[100xengineer]]></category>
		<category domain="post_tag" nicename="attitude"><![CDATA[Attitude]]></category>
		<category domain="post_tag" nicename="communication"><![CDATA[Communication]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="life-lessons"><![CDATA[Life Lessons]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[43999910485]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Swift on the Server</title>
		<link>http://zef.me/2016/10/27/swift-on-the-server/</link>
		<pubDate>Thu, 27 Oct 2016 17:20:14 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2016/10/27/swift-on-the-server/</guid>
		<description></description>
		<content:encoded><![CDATA[

<h4>It’s happening</h4>
<figure><img src="https://cdn-images-1.medium.com/max/800/1*35_QeZtZ20uVGOgJO6vbHQ.png"></figure><p>Ever since Swift was open sourced by Apple including a release for Linux, people speculated about why Apple would do this. The most popular theory was that Apple itself wanted to use Swift on the server. And these days, even for Apple — server equals Linux — hence the Linux release. As far as we know, much of Apple’s server infrastructure (at least the stores) is build on <a href="https://en.wikipedia.org/wiki/WebObjects" target="_blank">WebObjects</a> — a technology that is showing its age (to put it mildly). Swift, as a language fully under Apple’s control, could be an obvious foundation for replacing WebObjects within Apple.</p>
<p>But until yesterday there was no server story from Cupertino at all, so the community stepped in:</p>
<ul>
<li><a href="https://github.com/IBM-Swift/Kitura" target="_blank">IBM’s Kitura</a></li>
<li><a href="https://github.com/vapor/vapor" target="_blank">Vapor</a></li>
<li><a href="http://perfect.org" target="_blank">Perfect</a></li>
<li><a href="https://github.com/Zewo/Zewo" target="_blank">Zewo</a></li>
</ul>
<p>Diversity is good, but some standardization in the community doesn’t hurt.</p>
<p>Luckily, there’s now going to be an <a href="https://swift.org/server-apis/" target="_blank">official Server APIs project as part of Swift.org</a>:</p>
<blockquote>Swift has amazing potential on the server, and to be an even better language for server-side development Swift needs great low-level APIs common among server frameworks. The Server APIs project will provide core capabilities in areas such as networking and security so Swift programs no longer need to frequently rely on platform-specific C libraries to provide this functionality. As a result, developers will be able to create frameworks and server applications using pure-Swift code, without the need to also have systems programming skills and knowledge of multiple platforms</blockquote>
<h3>My take</h3>
<p>I played with Swift and read its spec. It’s a nice language. Especially if you’re coming from Objective-C, it’s a huge leap forward.</p>
<p>The question is — does <em>a leap forward compared to Objective-C</em> make it and interesting enough language to develop servers in, compared to the dozens of established alternatives? Or is the primary audience for it iOS Swift developers that can then do full-stack Swift development?</p>
<p>Of what I’ve seen of Swift, it’s a very nice, but <em>not a simple</em> language. I know Apple is pushing it as a “my first programming language” for education (with Swift Playgrounds on iPad) — it has good reasons to do so, but is it as simple as a language can be? No, because a certain amount of cruft needed to be introduced to make it interact seamlessly with “legacy” Cocoa and Objective-C code. And of course, that additional complexity is of zero help on the server.</p>
<p>Is that a big deal? I don’t know.</p>
<p>To be successful on the server, a <em>ginormous</em> amount of work is going to be required to bring the Swift server ecosystem up to par with its competition — Java, Ruby, Python, PHP, Node, Go, and even Rust.</p>
<p>There is already good support for Swift (through Objective-C) for many things, but much of it won’t work on the server, because of dependencies on Cocoa and the Objective-C runtime. As a result it’s actually pretty hard to find libraries today you can use with Swift on the server. <a href="https://developer.ibm.com/swift/the-ibm-swift-package-catalog/" target="_blank">IBM has a catalog.</a> What’s up with IBM’s obsession with Swift by the way.</p>
<h3>What will Swift’s edge be?</h3>
<p>But even if the ecosystem matures, what would be the win of Swift over its alternatives?</p>
<p>As I see it — this is what makes it interesting for server development:</p>
<ol>
<li>It compiles to native, highly optimized code and doesn’t require a VM to run — so it’s <em>fast</em> and cheap in terms of memory usage.</li>
<li>If you’re an iOS/Mac developer that already uses Swift for your iOS/Mac apps — you get to use the same language (although likely with different libraries) on the server and client. Full-stack Swift!</li>
<li>It’s a modern language, and has many modern features like type inference, option types, automatic memory management (<em>without a garbage collector</em>), generic programming, string interpolation, functions as first-class objects, solid unicode support, etc.</li>
</ol>
<p>However…</p>
<blockquote>What I’m missing is a <strong>compelling concurrency story</strong>.</blockquote>
<p>We live in <em>post thread-per-request world</em>. Node.js is fully asynchronous and can handle thousands of concurrent requests easily, Go has channels and go-routines multiplexing multiple go-routines on a thread. Rust is close to the OS so only supports threads, but it can actually statically verify that no race conditions and other concurrency bugs can occur. Which is pretty wild.</p>
<p>So what’s Swift’s story here? At a language level it has none for now. Is <a href="https://en.wikipedia.org/wiki/Grand_Central_Dispatch" target="_blank">Grand Central Dispatch</a> a competitive answer on the server?</p>
<p>I’d say “no.”</p>
<p>There are some user-land libraries emerging that implement things like co-routines and channels in Swift, like V<a href="https://github.com/Zewo/Venice" target="_blank">enice </a>and S<a href="https://github.com/tidwall/Safe" target="_blank">afe </a>— but these things typically don’t interact well with existing “synchronous” APIs. There’s much to be said to have language (VM) level support (or at least strong conventions, like Node) for this thing these days (like Go and Erlang have).</p>
<p>But anyway, Swift on server is getting enough excitement to become a real thing. Let’s see if it will pick up outside the world of Apple believers.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>98</wp:post_id>
		<wp:post_date>2016-10-27 19:20:14</wp:post_date>
		<wp:post_date_gmt>2016-10-27 17:20:14</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>swift-on-the-server</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="concurrency"><![CDATA[Concurrency]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="server"><![CDATA[Server]]></category>
		<category domain="post_tag" nicename="swift"><![CDATA[Swift]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Google on Management</title>
		<link>http://zef.me/2017/05/09/google-on-management/</link>
		<pubDate>Tue, 09 May 2017 11:20:37 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2017/05/09/google-on-management/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>I’m always interested to read how Google implements things, both technical and non-technical. You can just be sure they don’t just do something because “that’s how have always been done” they rethink a lot of things, and like to back all their decisions with data.</p>
<p>Recently I found an HBR article back from 2013 about how Google <a href="https://hbr.org/2013/12/how-google-sold-its-engineers-on-management" target="_blank">decided on having management and how to shape it</a>:</p>
<blockquote>A few years into the company’s life, founders Larry Page and Sergey Brin actually wondered whether Google needed any managers at all. In 2002 they experimented with a completely flat organization, eliminating engineering managers in an effort to break down barriers to rapid idea development and to replicate the collegial environment they’d enjoyed in graduate school. That experiment lasted only a few months: They relented when too many people went directly to Page with questions about expense reports, interpersonal conflicts, and other nitty-gritty issues. And as the company grew, the founders soon realized that managers contributed in many other, important ways — for instance, by communicating strategy, helping employees prioritize projects, facilitating collaboration, supporting career development, and ensuring that processes and systems aligned with company goals.</blockquote>
<p>Here’s the most interesting (and applicable) part: According to Google, a good manager…</p>
<ol>
<li>Is a good coach</li>
<li>Empowers the team and does not micromanage</li>
<li>Expresses interest in and concern for team members’ success and personal well-being</li>
<li>Is productive and results-oriented</li>
<li>Is a good communicator — listens and shares information</li>
<li>Helps with career development</li>
<li>Has a clear vision and strategy for the team</li>
<li>Has key technical skills that help him or her advise the team</li>
</ol>
<p>The <a href="https://hbr.org/2013/12/how-google-sold-its-engineers-on-management" target="_blank">whole article is worth a read</a> if you care about this sort of thing.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>105</wp:post_id>
		<wp:post_date>2017-05-09 13:20:37</wp:post_date>
		<wp:post_date_gmt>2017-05-09 11:20:37</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>google-on-management</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="google"><![CDATA[Google]]></category>
		<category domain="post_tag" nicename="management"><![CDATA[Management]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Disciplined Continuous Improvement</title>
		<link>http://zef.me/2016/12/23/disciplined-continuous-improvement/</link>
		<pubDate>Fri, 23 Dec 2016 10:09:50 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2016/12/23/disciplined-continuous-improvement/</guid>
		<description></description>
		<content:encoded><![CDATA[

<h4>Three techniques to constantly keep moving forward</h4>
<figure class="wp-caption">

<img data-width="820" data-height="460" src="http://zefsmusings.files.wordpress.com/2016/12/c45f1-1qpbreddrgqfqvggbrnyw6q.png">

<figcaption class="wp-caption-text">Most cheesy picture I could find Googling for “continuous improvement”</figcaption></figure><p>The best teams I’ve worked with in my career share one thing in common: they’re very disciplined about improving themselves (as people and as a team), how they work (process), and their environment (the other parts of the organization they work with).</p>
<p>For the last nine months at <a href="https://www.egnyte.com" target="_blank">Egnyte</a>, I’ve primarily worked with the partner integrations team. This team runs pretty well, and as a result the question arose whether there are any <em>best practices</em> to share with other teams — this got me to reflect a little.</p>
<p>My first reaction was: sure, there are specific things other teams could borrow. For instance:</p>
<ol>
<li>Our technical-debt day: one day in-between sprints where developers work on things they feel are important to address (often technical debt).</li>
<li>Our specific <em>definition of ready</em> and <em>definition of done</em>.</li>
<li>Our specific JIRA workflow and Scrum board layout.</li>
<li>Communication policies we’ve set up between other departments and ourselves.</li>
<li>Code review guidelines (expectations from pull request issuer, reviewer, what it means to “approve” a pull request etc.)</li>
<li>The dashboards we use to monitor our services.</li>
</ol>
<p>But then I realized: there may be <em>some</em> value there, but every team is different, even for this particular team these practices these aren’t static— they evolve over time as challenges, pressures and context change.</p>
<p>However, there is a more “meta level” practice that I believe will benefit <em>every</em> team —now, a decade from now; whether they’re dealing with greenfield or years worth of technical debt.</p>
<blockquote>None of our “best practices” fell out of the sky, they are all results of the mechanisms we put in place for disciplined continuous improvement.</blockquote>
<p>What do I mean with <em>disciplined continuous improvement</em>?</p>
<ul>
<li>
<strong>Disciplined</strong>: definition: “having or exhibiting discipline; rigorous.” You don’t do things when <em>it’s convenient;</em> you don’t do things <em>when you have time; </em>you do them<em> always</em>, <em>without exception</em>.</li>
<li>
<strong>Continuous</strong>: not in bursts, not during breaks, but: all the time (for some granularity of “time”), in small steps.</li>
<li>
<strong>Improvement</strong>: looking for things that are not (yet) awesome, and take (small) steps to get them to be.</li>
</ul>
<p>There are many ways to implement disciplined continuous improvement.</p>
<p>Here are just three things ways that I’ve applied (and have seen applied by others) successfully:</p>
<ol>
<li>Retrospectives</li>
<li>Root-cause analysis</li>
<li>1:1 with team members</li>
</ol>
<h4>1. Retrospectives</h4>
<p>Technically, this is a scrum thing, but <em>even if</em> you’re not a scrum fanboy (or fangirl) — <em>even if</em> the word makes you <em>puke</em>, please adopt just one thing: <a href="http://retrospectivewiki.org/index.php?title=Main_Page" target="_blank">retrospectives</a>.</p>
<p>A retrospective is a recurring team meeting (in scrum at the end of every sprint, so e.g. every two weeks), in which you look back and evaluate the last iteration of work: what went well, what didn’t go well, and most importantly: <em>what can we do to do better next time?</em></p>
<p>There are many formats for running retrospectives, and there’s a certain art to facilitating a successful one. The way I usually run retrospectives is pretty straight forward, it consists of five phases:</p>
<ol>
<li>
<strong>Follow-up</strong> on the action points from the last retrospective to verify we implemented all successfully (there’s no point in coming up with actions without follow-through).</li>
<li>
<strong>Brainstorming</strong>: everybody individually writes potential topics of discussion on sticky notes.</li>
<li>
<strong>Sharing and organizing</strong>: One by one, people put up their stickies (grouping them on-the-fly) in one of two sides of a white board (or wall): “Awesome” — space for praise and sharing happiness; and “Not yet awesome” — things we can still do better (or suck at).</li>
<li>
<strong>Dot voting</strong> — everybody gets to vote on things they would like to discuss further, by putting a big dot on the specific sticky.</li>
<li>
<strong>Discussion</strong> of top-voted items, writing down <strong>specific action points</strong> and assigning them to specific people during the discussion.</li>
</ol>
<p>An essential thing to note here is that action points don’t need to be wholesale solutions. The goal is not to solve the problem completely — that would be great, but it’s not required — the goal is to make progress, to take a step forward.</p>
<p>Taking a small step is better than nothing at all. Sometimes a small step is enough, sometimes the same issue bubbles to the top again in the next retrospective, and you come up with another solution. Experimentation is encouraged.</p>
<p>To give you some sense of what can come out of such sessions, some issues raised during retrospectives and steps towards solving them:</p>
<ul>
<li>“I get too much email and it takes me too much time to process!” — step: specific rules on what to cc the whole team, and what not to (to reduce the amount of irrelevant email), as well as markers in the email body like “FYI” or “Action required” (to make emails more skimmable).</li>
<li>“Tickets get stuck in the ‘verification’ step and as a result we don’t deliver anything!” — step: adopt the idea of <a href="http://scrumandkanban.co.uk/theory-of-constraints/" target="_blank">“constraints” from Kanban</a>, and if more than <em>x</em> tickets are waiting for verification, everybody (including developers) jump in to help verify tickets.</li>
<li>“Too much technical debt is accumulating!” — step: introduce a tech debt day during which everybody works to reduce technical debt.</li>
</ul>
<p>The last case is a good example of “sometimes a small step is good enough.” Honestly, when we came up with the tech-debt day concept, my assumption was it wouldn’t make a big difference. But after about 3–4 months of using this idea, we have a lot of improvement to show for it. <a href="https://en.wikipedia.org/wiki/Kaizen" target="_blank">Small steps are awesome</a>.</p>
<h4>2. Root-cause analyses (5 Whys)</h4>
<p>Sometimes disaster strikes. Disaster can many forms, ranging from a significant production outage, or (for pure development teams) not delivering an important feature.</p>
<p>In my career thus far I’ve applied (and have seen other apply) two approaches to handling disaster:</p>
<ol>
<li>Fix the problem, then keep your fingers crossed it won’t happen again.</li>
<li>Fix the problem, use it as a learning experience, and take all possible measures to ensure a similar disaster cannot happen again.</li>
</ol>
<p>I will admit that early in my career I opted for #1. It may sound ridiculous, and of course, nobody explicitly chooses the “keeping fingers crossed” part. However, fixing a production outage can be an achievement in itself, and often we dismiss the chances of it reoccurring: surely the same thing won’t happen <em>again</em> will it? Guess what — <a href="https://zef.me/zefs-law-d8ef48b2d721" target="_blank">it definitely will</a>, and sometimes sooner than you think. And, when it does happen, how dumb will you feel?</p>
<p>So, here’s my perspective on disasters today: yes, they suck — they’re stressful, they’re not fun. <strong>But</strong>, if you don’t take them as a learning experience, they are a pure waste of time. If you <em>do</em> take them as a learning experience, you may actually, one day, be happy they occurred.</p>
<p>So, how do you learn from disaster?</p>
<ol>
<li>Find the root cause through the <a href="https://en.wikipedia.org/wiki/5_Whys" target="_blank">5 Whys</a>.</li>
<li>Create action points to address the root cause in such a way it won’t be an issue again. Extra browny points for also separately addressing all <em>intermediate</em> causes as fallback mechanisms.</li>
</ol>
<p>In principle, conducting a “5 whys” session is simple — in a sense, the name says it all: ask “why?” 5 times, and find out the root cause. Boom.</p>
<p><a href="https://www.mindtools.com/pages/article/newTMC_5W.htm" target="_blank">What can be simpler</a>?</p>
<p>I’ve conducted about two dozen of such sessions, and here’s what I have found so far:</p>
<ol>
<li>It is sometimes surprisingly hard to steer the analysis in a productive direction. It’s quite common that the analysis branches out in too many directions, and it takes some skill to predict which ones lead to helpful results.</li>
<li>More often than not, the “5 whys” leads to <em>unexpected</em> root causes. Everybody has their assumptions before: “we don’t have to do 5 whys <em>this time,</em> I know the source of the issue!” However, more often than not, we end up with some interesting findings.</li>
</ol>
<p>And the last part is where the <em>discipline</em> part comes in. Don’t do these analyses just if you have time, or when it’s convenient, or if it’s a new issue. The disciple aspect is to do it <em>every single time</em>. <em>Especially</em> if an issue happened before, and you already did the 5 whys on this topic. In that case ask yourself: <strong>why the hell</strong> did it happen again? Clearly, your last analysis didn’t find the root cause, or you didn’t execute on your action points from last time (or they weren’t very good ones). Even <em>this</em> can be turned into a learning experience.</p>
<h4>3. Regular 1:1 meetings</h4>
<p>The previous two techniques can be introduced into any team by anybody. They’re obviously great ideas, so who would object? The third technique, the regular 1:1 (“one-on-one”) meeting, is more of a “manager thing.” If some random team member would start setting up weekly 30+ minute individual meetings with all other members, this may not be received well. This is one of the perks of the “manager” title. You get to organize whatever meeting you want, because that’s what managers do, right?</p>
<p>The way I conduct 1:1 meetings is primarily inspired by <a href="http://randsinrepose.com/archives/the-update-the-vent-and-the-disaster/" target="_blank">“The Update, The Vent, and The Disaster”</a> by Michael “Rands” Lopp — currently VP Engineering at Slack. Full disclosure:</p>
[embed]https://twitter.com/zef/status/712237471082352640[/embed]
<p>Everybody has their own way of conducting 1:1 meetings. I always start mine with the same question:</p>
<blockquote>“How are you doing?”</blockquote>
<p>As a result we may talk about how they sleep badly because of their newborn; about their attempts to study machine learning, so they can realize their billion dollar idea; about how specific people are super aggressive in their code reviews and this is demotivating; about how they think the product is taking a completely wrong direction; about how certain people are undisciplined and never arrive at work on time; about how they never felt better working only on front-end stuff, and now they know this is their calling in life; about how technical debt is killing us; about how he said this and that, and how stupid that is; about how the whole world is going to hell; about how he just broke up with his girlfriend.</p>
<blockquote>People often ask me how I became so smart (true story).</blockquote>
<p>The answer is simple: I massively-parallelized and outsourced my intelligence. Of course, I will not deny my own amazing intellect (they don’t hand out PhD titles with cartons of milk — at least not in my convenience store), but the real secret is that <em>I listen</em> to all people in my teams (and outside, for that matter). They see things I don’t; they think in ways that I don’t; they have concerns that don’t; they have ideas that I don’t. <em>Diversity, bitches!</em> All this input combined surfaces <em>yet more things to improve</em>.</p>
<p>Wouldn’t you get the same thing from a retrospective? That’s where everybody shares their concerns and ideas for improvement as well, right?</p>
<p>Theoretically: yes, but in practice: no. For two reasons:</p>
<ol>
<li>Not everybody has the same level of “presence” in meetings. The fact that people don’t speak up, doesn’t mean they don’t have something to say. I often hear new ideas or concerns in 1:1 meetings. Often we agree to bring them up in a retrospective to have the whole team discuss them — many of these ideas are eventually implemented.</li>
<li>1:1 meetings are a better place to discuss half-baked ideas and pre-escalation issues (problems before they become <strong>real</strong> problems). In a 1:1 setting, bouncing ideas off each other can be a more fruitful environment than a group setting.</li>
</ol>
<p>Like with retrospectives and 5 Whys — discipline is essential here too. 1:1s shouldn’t happen when we have nothing better to do, or scheduled for every other week, but canceled half of those times. <em>They should happen every single time. </em>Until it becomes unsustainable, I will have 1:1 meetings with everybody in my teams every single week, and only cancel in rare occasions (but to be honest, I can be more discipled here).</p>
<p>So there you have it: three techniques to implement <em>disciplined continuous improvement</em>. Let me know what you think — do you know of more techniques to continuously improve?</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>107</wp:post_id>
		<wp:post_date>2016-12-23 11:09:50</wp:post_date>
		<wp:post_date_gmt>2016-12-23 10:09:50</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>disciplined-continuous-improvement</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="100xengineer"><![CDATA[100xengineer]]></category>
		<category domain="post_tag" nicename="agile"><![CDATA[Agile]]></category>
		<category domain="post_tag" nicename="continuous-improvement"><![CDATA[Continuous Improvement]]></category>
		<category domain="post_tag" nicename="discipline"><![CDATA[Discipline]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="management"><![CDATA[Management]]></category>
		<wp:postmeta>
			<wp:meta_key>_oembed_32b8bf685c52908303da693b3ebc0264</wp:meta_key>
			<wp:meta_value><![CDATA[<div class="embed-twitter"><blockquote class="twitter-tweet" data-width="500" data-dnt="true"><p lang="en" dir="ltr">When I grow up I want to become <a href="https://twitter.com/rands?ref_src=twsrc%5Etfw">@rands</a>.</p>&mdash; Zef Hemel (@zef) <a href="https://twitter.com/zef/status/712237471082352640?ref_src=twsrc%5Etfw">March 22, 2016</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></div>]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_time_32b8bf685c52908303da693b3ebc0264</wp:meta_key>
			<wp:meta_value><![CDATA[1588403526]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_85eaf3dfc9a398eed6dc076c3c169060</wp:meta_key>
			<wp:meta_value><![CDATA[<div class="embed-twitter"><blockquote class="twitter-tweet" data-width="550" data-dnt="true"><p lang="en" dir="ltr">When I grow up I want to become <a href="https://twitter.com/rands?ref_src=twsrc%5Etfw">@rands</a>.</p>&mdash; Zef Hemel (@zef) <a href="https://twitter.com/zef/status/712237471082352640?ref_src=twsrc%5Etfw">March 22, 2016</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></div>]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_time_85eaf3dfc9a398eed6dc076c3c169060</wp:meta_key>
			<wp:meta_value><![CDATA[1588667544]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[43999910566]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>The Well-Considered Decision</title>
		<link>http://zef.me/2018/02/02/the-well-considered-decision/</link>
		<pubDate>Fri, 02 Feb 2018 15:28:42 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2018/02/02/the-well-considered-decision/</guid>
		<description></description>
		<content:encoded><![CDATA[

<h4>It’s all about the journey</h4>
<figure>

<img data-width="1600" data-height="1000" src="http://zefsmusings.files.wordpress.com/2018/02/55001-1wr3iisvzmz1n-5yc-aekpa.png">
</figure>

<p>I failed my first Math test in school. I failed it, even though most of my answers were correct. “How much is 1820 divided by 5?” “364” I answered. 1 point out of a possible 5.</p>
<p>Why?</p>
<p>I didn’t show my work.</p>
<p>In Math, as in many disciplines, most visibly in school, it’s about the journey, not the end result. How did you get to your answer? What were you <em>thinking</em>? What were the approaches you considered? Why did you pick this answer, and not the other one. That’s how you will be graded.</p>
<p>Once people leave school, they assume that the need for “journaling the journey” is over, and it’s only end-results that matter.</p>
<p>Perhaps sadly, that’s not the case.</p>
<p>“Show your work” is the essential part of communicating to others and your future self that your decisions are <em>well-considered</em>. While at this stage of your career there won’t be a teacher that requires this look-inside-the-mind to be able to grade you, there is a lot of value in taking this approach anyway.</p>
<p>For example:</p>
<ol>
<li>
<strong>It is documentation for the future.</strong> Documentation of software is a tough problem. We have mechanisms to document classes, and methods. We create architecture documents. However, <em>design decisions</em> are often poorly documented. As a result, in a year, five years, ten years somebody will look at a piece of code and will be like “what bozo came up with this crap?” There may have been good reasons, but they are nowhere to be found.</li>
<li>
<strong>It results in better decision making.</strong> For two reasons: (1) writing it down, and following a certain format (that I will describe later) forces you to more consciously do your due diligence, be sure you’re making the right call; and (2) writing it down, ideally <em>before</em> making the decision, makes it easy to get input from others, and get access to other points of view.</li>
<li>
<strong>It creates trust.</strong> This is valuable especially if you do not yet have a (good) reputation in your team or organization. If you show people how you think and how well you consider your decisions, they will more easily trust your future decisions. If you jump to conclusions directly, they will often not trust you’re making the right call without some deep digging and challenging, or even dismiss your decisions outright.</li>
</ol>
<p>Ironically, it is my experience that the more senior the engineer is, the more likely they are to solicit input on their “journey.” How? By showing their work and asking for input.</p>
<p>So, how do you document your decisions?</p>
<p>Here the four main parts I look for:</p>
<ol>
<li>
<strong>What is the problem?</strong> Decisions for the purpose of making a decision are pointless, there needs to be a problem to be solved that warrants a decision. You may assume the problem is obvious to everybody, but often time it is not — state it clearly.</li>
<li>
<strong>What solutions exist?</strong> A problem rarely only has one possible solution, in fact there is at least always one alternative to consider: do nothing. Describe all reasonable solutions.</li>
<li>
<strong>What are the trade-offs?</strong> No solution is perfect, there’s always costs and benefits. Trade offs can exist at various levels: purely technical, architectural, deployment/operational, scalability, and even product-level trade-offs have to be taken into account.</li>
<li>
<strong>What do you recommend we do?</strong> Now that all plusses and minuses are known, what do you recommend we do? Or even: what have you decided to do?</li>
</ol>
<p>Dun dun done.</p>
<p>Sounds easy? It’s not. But it’s worth the journey.</p>

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>149</wp:post_id>
		<wp:post_date>2018-02-02 16:28:42</wp:post_date>
		<wp:post_date_gmt>2018-02-02 15:28:42</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-well-considered-decision</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="100xengineer"><![CDATA[100xengineer]]></category>
		<category domain="post_tag" nicename="decision-making"><![CDATA[Decision Making]]></category>
		<category domain="post_tag" nicename="engineering"><![CDATA[Engineering]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[43999910356]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>From the Armchair</title>
		<link>http://zef.me/2018/03/29/from-the-armchair/</link>
		<pubDate>Thu, 29 Mar 2018 09:59:32 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2018/03/29/from-the-armchair/</guid>
		<description></description>
		<content:encoded><![CDATA[

<h4>The distance trap</h4>
<figure>

<img data-width="1024" data-height="683" src="http://zefsmusings.files.wordpress.com/2018/03/07f4e-1ywpuqazgtmz39mn-gm0xnw.jpeg">
</figure>

<p><em>“That sounds like something an automated test should have caught.”</em></p>
<p><em>“If you cannot catch a basic bug like this, then what the hell is QA doing?”</em></p>
<p><em>“If you would just add step X to your process, you wouldn’t have this issue.”</em></p>
<p>Distance simplifies things.</p>
<p>On the abstract, everything is easy; when you get down to the detail, hardly anything is.</p>
<p>I’ve been on both side of this issue. I’ve been the one on the outside being puzzled about how teams and people seem to struggle with seemingly basic things. I’ve also been up close, receiving “feedback” of the kind exemplified above.</p>
<p>As a result, I defined a <strong>basic assumption</strong> for myself whenever I feel tempted to do some “armchair” QA, development or project management.</p>
<p>Here goes:</p>
<blockquote>People are smart. If I think they’re missing basic things, it’s probably me missing information or complexity.</blockquote>
<p>Therefore, I set myself a <strong>basic rule</strong> whenever I’m tempted to make such comments.</p>
<p>Here goes:</p>
<blockquote>Whenever I’m tempted to “armchair” something; don’t.</blockquote>
<p>Why? There is <strong>no possible scenario</strong> that such comments will be perceived as constructive or helpful. However, if I really believe I have a unique perspective to offer, I usually offer help along the lines of “hey, I have some ideas on how to avoid such situations in the future, if you’re interested we can discuss them face to face.” Then it’s up to the other party to decide if they see value in that or not.</p>
<p>That is all.</p>

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>158</wp:post_id>
		<wp:post_date>2018-03-29 11:59:32</wp:post_date>
		<wp:post_date_gmt>2018-03-29 09:59:32</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>from-the-armchair</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="100xengineer"><![CDATA[100xengineer]]></category>
		<category domain="post_tag" nicename="best-of"><![CDATA[Best Of]]></category>
		<category domain="post_tag" nicename="communication"><![CDATA[Communication]]></category>
		<category domain="post_tag" nicename="communication-skills"><![CDATA[Communication Skills]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="nonviolent-communication"><![CDATA[Nonviolent Communication]]></category>
		<category domain="post_tag" nicename="software-development"><![CDATA[Software Development]]></category>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[43999910211]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>About</title>
		<link>http://zef.me/about/</link>
		<pubDate>Fri, 01 May 2020 20:30:47 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/?page_id=8</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:spacer {"height":20} -->
<div style="height:20px;" aria-hidden="true" class="wp-block-spacer"></div>
<!-- /wp:spacer -->

<!-- wp:group {"align":"full"} -->
<div class="wp-block-group alignfull"><div class="wp-block-group__inner-container"><!-- wp:jetpack/layout-grid {"column1DesktopSpan":3,"column1DesktopOffset":1,"column1TabletSpan":3,"column1MobileSpan":4,"column2DesktopSpan":6,"column2DesktopOffset":1,"column2TabletSpan":5,"column2MobileSpan":4,"column3DesktopOffset":3,"column3TabletOffset":1,"className":"column1-desktop-grid__span-3 column1-desktop-grid__start-2 column1-desktop-grid__row-1 column2-desktop-grid__span-6 column2-desktop-grid__start-6 column2-desktop-grid__row-1 column1-tablet-grid__span-3 column1-tablet-grid__row-1 column2-tablet-grid__span-5 column2-tablet-grid__start-4 column2-tablet-grid__row-1 column1-mobile-grid__span-4 column1-mobile-grid__row-1 column2-mobile-grid__span-4 column2-mobile-grid__row-2"} -->
<div class="wp-block-jetpack-layout-grid alignfull column1-desktop-grid__span-3 column1-desktop-grid__start-2 column1-desktop-grid__row-1 column2-desktop-grid__span-6 column2-desktop-grid__start-6 column2-desktop-grid__row-1 column1-tablet-grid__span-3 column1-tablet-grid__row-1 column2-tablet-grid__span-5 column2-tablet-grid__start-4 column2-tablet-grid__row-1 column1-mobile-grid__span-4 column1-mobile-grid__row-1 column2-mobile-grid__span-4 column2-mobile-grid__row-2"><!-- wp:jetpack/layout-grid-column -->
<div class="wp-block-jetpack-layout-grid-column wp-block-jetpack-layout-grid__padding-none"><!-- wp:image {"align":"center","id":1834,"sizeSlug":"large","className":"is-style-circle-mask is-style-default"} -->
<div class="wp-block-image is-style-circle-mask is-style-default"><figure class="aligncenter size-large"><img src="https://zefsmusings.files.wordpress.com/2020/05/zef.jpg?w=512" alt="" class="wp-image-1834" /></figure></div>
<!-- /wp:image --></div>
<!-- /wp:jetpack/layout-grid-column -->

<!-- wp:jetpack/layout-grid-column -->
<div class="wp-block-jetpack-layout-grid-column wp-block-jetpack-layout-grid__padding-none"><!-- wp:heading -->
<h2>My name is Zef Hemel.</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>I use writing as a tool to <strong>structure</strong> my thinking, to <strong>reflect</strong>, and <strong>adapt</strong> as a result. I’mtransparent by nature, and have found that sharing the things I’m reading and thinking about — generally around the topics of <strong>technology</strong>, <strong>management</strong> and <strong>leadership</strong> — is not only helpful for myself, it can helpful for others as well. And often, in response, people point me to things I wasn’t yet aware of, or challenge my ideas or conclusions. Now, that sounds like win-all around. Welcome to <em>Zef’s Musings</em>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If looking at a person's career is your way of learning more about them, <a href="https://www.linkedin.com/in/zefhemel/">you can check mine on LinkedIn</a>. If you're on Twitter, you <a href="https://twitter.com/zef">can follow me there</a> too.</p>
<!-- /wp:paragraph --></div>
<!-- /wp:jetpack/layout-grid-column --></div>
<!-- /wp:jetpack/layout-grid --></div></div>
<!-- /wp:group -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>8</wp:post_id>
		<wp:post_date>2020-05-01 20:30:47</wp:post_date>
		<wp:post_date_gmt>2020-05-01 20:30:47</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>about</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>sharing_disabled</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;N;}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>switch_like_status</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;N;}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_starter_page_template</wp:meta_key>
			<wp:meta_value><![CDATA[about-3]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_checklist_post_type</wp:meta_key>
			<wp:meta_value><![CDATA[_hs_extra]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>http://zef.me/2020/05/01/21/</link>
		<pubDate>Fri, 01 May 2020 20:35:51 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2020/05/01/21/</guid>
		<description></description>
		<content:encoded><![CDATA[ ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>21</wp:post_id>
		<wp:post_date>2020-05-01 20:35:51</wp:post_date>
		<wp:post_date_gmt>2020-05-01 20:35:51</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>21</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>4</wp:menu_order>
		<wp:post_type>nav_menu_item</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="nav_menu" nicename="primary"><![CDATA[Primary]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_type</wp:meta_key>
			<wp:meta_value><![CDATA[post_type]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_menu_item_parent</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object_id</wp:meta_key>
			<wp:meta_value><![CDATA[8]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object</wp:meta_key>
			<wp:meta_value><![CDATA[page]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_target</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_classes</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_xfn</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_url</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_content</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Zef’s Book Club: No More Feedback</title>
		<link>http://zef.me/2020/04/25/zefs-book-club-no-more-feedback/</link>
		<pubDate>Sat, 25 Apr 2020 07:40:23 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2020/04/25/zefs-book-club-no-more-feedback/</guid>
		<description></description>
		<content:encoded><![CDATA[<em>At OLX I send out a weekly update email every Friday. It is an attempt to be transparent about what I’ve been working on that week and helps me reflect. Sometimes I also muse a bit on more broader topics I’ve been thinking about, or books I’ve read. This is an excerpt of this Friday’s email, I thought it may be interesting for people outside of the company as well.</em>

Last weekend I read Carol Sanford’s <a href="https://amzn.to/2S2OZ2C" target="_blank">“No More Feedback”</a>. It’s an intriguing book, and resulted in a “falling of my faith” type of situation. She challenges many “core beliefs” that I hold (or have been taught to hold). As a means for me to process, and to perhaps prepare you a bit for what you’d find in this book if you were to decide to read it, here’s my summary of its ideas.

<strong>Disclaimer:</strong> It is likely that if you actually understand the summary below it will leave you in ambiguous and confused state, and this may not be personally beneficial to you. If you’re not up for that: stop reading, have a good weekend!

<strong>Disclaimer 2:</strong> These are the ideas described in the book, the fact I repeat them here do not mean this my or OLX’s official standpoint, nor that they’re particularly compatible with our current practices. Take them as ideas, part of my “challenge everything” philosophy. It’s good to sometimes re-evaluate your core beliefs.

Here we go.

The basic premise of the book is: <strong>feedback is toxic.</strong> Feedback mechanisms come from systems theory, and are perfectly valid there, the idea that this concept has any place in systems that involve <em>humans</em> is flawed, unless we feel that humans are yet another part of the “system” to control, whip into shape and optimize in terms of efficiency.

Feedback is based on the premise that we need <em>other people</em> to tell us if we are doing well (and what “well” means), because we cannot assess this successfully ourselves. And, as it turns out, other people are really bad at it: <a href="https://en.wikipedia.org/wiki/List_of_cognitive_biases" target="_blank">cognitive biases</a>, self interest, judgement with limited context, violent communication. It’s a mess. Think of your last performance review, did you feel it was fully fair and helpful? Chances are you at least have mixed feelings. Yes, we can work very hard to improve feedback, but it takes more and more of people’s time, lots of training and in the end people still feel bad and the results are questionable. The book describes a particular case of one company introducing performance reviews. Over a decade worth of iterations, more and more time was invested in it, up to 7% of <em>total time</em> of managers until they gave up, dropped the process, and saw no change in terms of performance. Let me repeat my disclaimer: this is what the book is saying, not a recommendation.

“So,” Sanford says, “feedback: bad.” No performance reviews, no peer feedback, no “good job”, no acknowledgements, no “look at this person, he/she’s an example for all.” All these things do more harm than good.

So, you will ask: what is the alternative? <strong>Self reflection.</strong> People are, or can learn to be, much better judges of their own performance than other people.

“But people can’t do this at all!” you’ll say. “Look at Trump!” No politics please, thank you.

Yes, Carol Sanford’s argument goes, because over the course of their lives people have learned to largely rely on external feedback to feel valuable. They’re used to be whipped into (predefined) shapes with feedback: good boy, bad boy, more of this, less of that. As a result, self direction drops, and we become dependent on other people’s opinions completely. If you’ve ever read a <a href="https://amzn.to/2KIpW17" target="_blank">parenting book by Jesper Juul</a>, this consistent with his message: children don’t look for a “good job” when they show you a drawing, they are looking for “I see what you did, tell me about it.” It’s only when you start to “good job” and sticker the crap out of them they lose intrinsic motivation, and just look for validation from their parents all the time.

But I digress. Let me not push my own parenting philosophy into this, except for to say: <em>everything is related!</em>&nbsp;:-)

Instead, if we learn (ourselves, supported by our organization) to get better at self reflection, we develop ourselves much more effectively, resulting in more impact on ourselves, teams, companies and the world in general. And Carol mentions a few companies that work this way, including such companies like Proctor and Gamble where many of these ideas originate and have been applied for decades.

There are three “core human capacities” that need to be developed to make this happen. And you’ll just love their accessible, academic names:
<ol>
 	<li>Locus of control</li>
 	<li>Scope of considering</li>
 	<li>Source of agency</li>
</ol><strong>Locus of control</strong> determines how much control we feel over our own lives. The low end of the spectrum (external locus of control) is “I have no control over my life, I’m a victim of my circumstances, everything that’s wrong in my life is because of external factors.” Although you may expect that the high end (internal locus of control) is feeling in control of every aspect of your life, this is of course not realistic. Instead, it’s about taking responsibility for <em>how you react to the things that happen</em> and your ability to use them as opportunities for self development. This is the part you <em>can</em> (learn to) control.

<strong>Scope of considering</strong> is about the scope we look at when we reflect on our own performance. The low end of the spectrum is considering just yourself (internal considering): me, me, me. The high end is the world or even universe (external considering). So, when you do things and try to reflect on your success or what you’re trying to impact do you consider mostly yourself, do you also consider what’s best for your neighbor, your team, your company, your country, the world?

I was reminded of this while reading an internal discussion on the topic of OLX’s TechRadar. Somebody there commented:

<em>“Although as a developer, I may actually benefit from not having any TechRadar at all, as I can then put on my CV all nice different tech from A to Z that I’ll use on every new project.”</em>

I’m taking this 100% out of context just to make a point, because it’s the ultimate example of internal considering: why pick technology X? It would look great on <em>my CV</em>. This begs the question: if everybody in the company would have the <em>level of considering</em> of at least what’s good for the company, would we need a TechRadar to <em>guide</em> decisions? Maybe not.

Example: What language should I choose for this project? Let’s see, well for me: I know PHP, Perl and Kotlin. Personally Perl is my favorite, but none of my colleagues seem very excited, so that’s out (neighbor, team level considering). Kotlin is more widely used in the company already (this would still be a good use of the TechRadar), so I can get support easily, also the talent market for hiring Kotlin engineers is good, so that even if I need to hand over this project at some point, the company should not have a problem finding replacements (company level considering).

Are these all the factors to take into account? No, so still you need <em>resources</em> (documentation or people) to provide sufficient business context to make such decision on your own, but the purpose of those resources is to provide the context, not to give you feedback or a decision.

<strong>Source of agency</strong> is about who we expect to take action on things. The low end of the spectrum here is the authoritarian view: we expect others to tell us exactly what to do, and we don’t do anything until told explicitly. The high end of the spectrum is personal agency where we don’t wait around for somebody to act, we view the world as ours to change and step up and take action.

“Cool stuff bro’,” you’ll say. “What do I do with this?” And I’ll be honest, I don’t have a ready answer for you. My challenge with the book is that for me it’s quite hard to put it into action immediately. It requires some processing, and I’m not sure if some sort of revolution is required to use any of its ideas, or there’s an incremental approach.

So what I’m doing with it now is I talk to people about these ideas, and I’m writing about it here. I’m also reading some of Sanford’s other books to get more sense of this. Some ideas are forming, and I’ll share them when I feel they start to make sense, for those interested.

<strong>PS:</strong> Please don’t “clap” or “like” this story. That’s feedback, and it’s toxic. Just sayin’.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>33</wp:post_id>
		<wp:post_date>2020-04-25 09:40:23</wp:post_date>
		<wp:post_date_gmt>2020-04-25 07:40:23</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>zefs-book-club-no-more-feedback</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="books"><![CDATA[Books]]></category>
		<category domain="post_tag" nicename="feedback"><![CDATA[Feedback]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="performance-management"><![CDATA[Performance Management]]></category>
		<category domain="post_tag" nicename="performance-reviews"><![CDATA[Performance Reviews]]></category>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[43746978340]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1424196]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Writing for Busy People</title>
		<link>http://zef.me/2019/12/02/writing-for-busy-people/</link>
		<pubDate>Mon, 02 Dec 2019 13:29:24 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2019/12/02/writing-for-busy-people/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>A few years ago I wrote <a href="https://zef.me/reading-for-busy-people-a37c1a4f8eb" target="_blank">Reading for Busy People</a>. Last week somebody asked if I cannot write something similar, but about <em>writing</em>. While it may not be visible online, I actually have been writing a lot recently, but most of it is internally focused (we use <a href="https://www.workplace.com/" target="_blank">Facebook’s Workplace</a>, where I have a space I use as an internal blog).</p>
<p>So, how does a “busy” person get time to write?</p>
<p>It all starts with the ultimate existential writing question: why do you want to write at all? What is in it for you? Does it just seem like a thing you should be doing, or does it serve a specific purpose?</p>
<p>Because, you know — perhaps the answer is just <em>don’t</em>. If you can make better use of your time than writing, just don’t write that blog, articles. And stop feeling bad about it.</p>
<p>Nevertheless, if you <em>do</em> have a clear goal you’d like to achieve through writing, then it all boils down to the basic matters of <em>priority</em> and <em>process</em>.</p>
<p>So, what are the reasons that I spend a good amount of my time writing?</p>
<ol>
<li>It helps me <strong>structure my thinking</strong>. I have many half baked ideas flying around in my head, writing them down and trying to turn them into a somewhat coherent story usually does the job of connecting the dots for me. Even if I’d delete the end-product, writing it down makes it worth my while.</li>
<li>
<strong>Scalable communication</strong>. I have about 60 people in my reporting line, and probably double or more in my “area of influence” — you cannot communicate with that many people in one-on-ones or group meetings. Yes, some of this communication can go hierarchically (I talk to my managers, they talk to their people), but that’s not always the best way to get a high-fidelity message out. And if you publish on the public Internets, your potential reach is virtually infinite. Beat that, megaphone.</li>
</ol>
<p>I have concluded that I cannot achieve my work goals without writing, or couldn’t achieve them as effectively. That’s why I decide to make time. Admittedly, it does help that I enjoy writing as an activity.</p>
<blockquote>What is the goal that <em>you</em> are trying to achieve by writing?</blockquote>
<p>Now, let’s assume that you you decided: yes, this is <em>worth</em> doing for me, and I <em>will</em> make the time. A few notes on process coming from my own experience:</p>
<ol>
<li>
<strong>Give it time</strong>. If it’s an important idea that I’m trying to communicate, it really needs more than a day. It requires iteration. The message always improves, sometimes even changes when being revisited a few times, ideally spread over a number of days. <a href="https://zef.me/the-making-of-my-most-brilliant-ideas-822e55b671aa" target="_blank">Bounce it off other people</a> to gather feedback and improve it.</li>
<li>
<strong>Don’t force it, wait for an inspiration streak</strong>. You’ve been struggling to make sense of an idea and write it down. You even booked time to get it done, but somehow… it doesn’t happen. You struggle. Then the inspirational moment happens and in a matter of an hour it just pours out. Use it. Embrace it. Wait for it. Showers, walks, conversations with other people are usually the things that trigger inspiration for me.</li>
<li>
<strong>The best writing tool is the one you have at hand</strong>. Use some tool that syncs your writing between your devices. You never know when inspiration is going to hit, and you want to have some means of using it. It’s like photography in that sense. I wrote the majority of <a href="https://zef.me/the-100x-engineer-6d50a690a866" target="_blank">The 100x Engineer</a> on my phone when inspiration hit while sitting in the middle of the night next to my son’s bed, waiting for him to go back to sleep.</li>
<li>
<strong>There’s no substitute for practice</strong>. To get better at writing, you just have to write more. No other way. Sorry.</li>
</ol>
<p>If all else fails, you can solve any problem by joining a facebook group. <a href="https://www.facebook.com/ChrisBrecheensWritingAboutWriting/" target="_blank">Writing about writing</a> is one I occasionally enjoy.</p>
<p>Good luck.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>34</wp:post_id>
		<wp:post_date>2019-12-02 14:29:24</wp:post_date>
		<wp:post_date_gmt>2019-12-02 13:29:24</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>writing-for-busy-people</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="100xengineer"><![CDATA[100xengineer]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="category" nicename="mindset"><![CDATA[Mindset]]></category>
		<category domain="post_tag" nicename="writing"><![CDATA[Writing]]></category>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1424196]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[43756863803]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>What does success look like?</title>
		<link>http://zef.me/2019/08/16/what-does-success-look-like/</link>
		<pubDate>Fri, 16 Aug 2019 09:26:22 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2019/08/16/what-does-success-look-like/</guid>
		<description></description>
		<content:encoded><![CDATA[<figure><img src="http://zefsmusings.files.wordpress.com/2019/08/b7473-0v1hnfswrxqhmkb87.jpg" data-width="765" data-height="600">

</figure>This happens too often:

Employee has an idea for a new initiative (e.g. feature, workshop, hackathon, event storming session, newsletter, offsite, recurring meeting).

Manager: “That’s great, we support initiatives, let’s do it!”

Initiative happens; people participate; success is declared: “Initiative happened, lots of people participated, it was a success!”

<strong><em>Was it</em>, though?</strong>

It’s quite often that we, as the initiator of some new idea, are so excited we are blind to its <em>uselessness</em>. In turn, our managers are so happy to hear new ideas from their people (as this can be rare), and they are so energized by our enthusiasm, that they support the idea by default, and will advocate for them practically blindly.

I fall victim to this myself, probably both as an initiator, manager of the initiator and beyond. I jokingly tell people <em>approving things</em> seems to be my most important role.

While I still feel a manager’s role should be to be an <strong>enabler</strong> more than a <strong>disabler</strong>, I’d like to add a bit of nuance to this. Some sanity checking, if you will.

How do we make sure we support the <em>right</em> initiative, and make sure they’re <strong>valuable</strong>?

I found asking three simple questions to be helpful:
<ol>
 	<li><strong>What <em>important</em> problem does this address?</strong> I use “important” purposely here: we have, perhaps sadly, an endless supply of problems we could we addressing, but are they important enough and <em>worth</em> addressing? In other words: given all problems that exist in our universe, is <em>this the one</em> to address, since there’s always <a href="https://en.wikipedia.org/wiki/Opportunity_cost" target="_blank">opportunity cost</a>?</li>
 	<li><strong>What does success look like?</strong> When can we claim victory? What is the expected outcome?</li>
 	<li><strong>Is the investment reasonable compared to the expected outcome?</strong> What’s the <a href="https://en.wikipedia.org/wiki/Return_on_investment" target="_blank">ROI</a>? In addition to having to select a worthy problem to address, we also have an unlimited number of possible initiatives to address those problems. Let’s assess, for instance, if taking one day worth of work away from a certain group of people going to help us enough to make the desired impact?</li>
</ol>If all these questions can be answered reasonably — let’s go. Otherwise… let’s think some more.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>35</wp:post_id>
		<wp:post_date>2019-08-16 11:26:22</wp:post_date>
		<wp:post_date_gmt>2019-08-16 09:26:22</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>what-does-success-look-like</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="100xengineer"><![CDATA[100xengineer]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="goal-setting"><![CDATA[Goal Setting]]></category>
		<category domain="post_tag" nicename="hog-hlight"><![CDATA[hog hlight]]></category>
		<category domain="post_tag" nicename="management"><![CDATA[Management]]></category>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[43999909898]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>On Paper</title>
		<link>http://zef.me/2019/08/05/on-paper/</link>
		<pubDate>Mon, 05 Aug 2019 07:44:26 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2019/08/05/on-paper/</guid>
		<description></description>
		<content:encoded><![CDATA[

<h4>Or: how <em>not</em> to look like a dick in meetings</h4>
<figure>

<img data-width="4004" data-height="2160" src="http://zefsmusings.files.wordpress.com/2019/08/51aec-1yx2zaq50zdcusg0jqizodw.jpeg">
</figure><p>I have <em>terrible</em> handwriting, always have. The moment I left school and managed to get away with either making notes and writing on either laptops, phones, or tablets I was a happy man. No more pens. No more paper. Hello 21st century.</p>
<p>But a few months ago, I dug deep in our storage and pulled out a notebook. I also dug up a pen. I put them in my backpack and ever since “Zef’s blue notebook” has become a thing in the company. The initial responses seeing this were in the vein of “am I in trouble?” Now people are no longer alarmed.</p>
<p>So what the hell happened?</p>
<p>A few months ago I got a bit frustrated at a meeting — a last drop if you will, after seeing about a third of participants sitting at the meeting with their laptops open. As a result, I wrote a mildly aggressive post on our intranet social network (we use Facebook’s “Workplace” internally). I just reread the contents and I won’t replicate it here, let me just quote the title:</p>
<blockquote><strong>Laptop open or phone in your hand during a meeting = I don’t give a shit about the people in this room.</strong></blockquote>
<p>It’s something I’ve seen in many companies: people coming to meetings with their laptops open or phone in hand. How can you truly pay attention that way? How can you be present? How can you contribute? How can you not look like a (excuse my French) <em>dick</em>?</p>
<p>I got myself into a habit of <strong>not</strong> bringing a laptop to a meeting a long time ago, unless there was a clear reason (having to do some screen sharing). However, this caused a problem, because as a result I also wasn’t making notes. And as I talk to a lot of people in the course of a day, and my short-term memory is… bad (my boss calls me <a href="https://disney.fandom.com/wiki/Dory" target="_blank">Dory</a>), how do I keep track of everything?</p>
<p>I tried different approaches: attempting to remember stuff and make notes <em>after</em> the meeting (but I couldn’t get into the habit of slotting 10 minutes of break in between meetings for this), or making notes on my phone, but this still made me feel like a dick (somebody’s talking to you, and you’re looking at your phone), and sometimes I saw notifications coming in pulling me into Slack so… not helpful.</p>
<p>And then I switched to pen and paper.</p>
<p>It’s distraction free. It’s portable. And to the other people in the meeting it <strong>communicates and emphasizes that I’m paying attention</strong> (unless I’d be visibly doodling — but I don’t). All the while I still keep a record of what is discussed, which I often refer to later in the day or week, or in the follow up meeting. It’s not as searchable or browsable as digital copy, but it’s acceptable. The free-form nature of paper also allows you to make more annotations later on, to highlight important stuff. Occasionally (even with my handwriting) notes can even look visually appealing, and finding a good type of pen (I settled on rollerball pens) makes a big difference in experience.</p>
<p>It’s retro. It somehow feels off, but it works for me. For now.</p>
<p>I presented my approach and rationale to somebody in my team. His comment:</p>
<blockquote>“Nice. So… how does it feel to kill all those trees?”</blockquote>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>36</wp:post_id>
		<wp:post_date>2019-08-05 09:44:26</wp:post_date>
		<wp:post_date_gmt>2019-08-05 07:44:26</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>on-paper</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="100xengineer"><![CDATA[100xengineer]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="productivity"><![CDATA[Productivity]]></category>
		<category domain="category" nicename="technique"><![CDATA[Technique]]></category>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1424196]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[43756867066]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Books that Changed Everything: “Thank You for Arguing”</title>
		<link>http://zef.me/2019/05/09/books-that-changed-everything-thank-you-for-arguing/</link>
		<pubDate>Thu, 09 May 2019 20:14:09 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2019/05/09/books-that-changed-everything-thank-you-for-arguing/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>There are a couple of books that I reread, every year or few years. I reread them, because they contain ideas that have had a huge impact on me. An impact either on my thinking, life and work philosophy, or ways to get things done.</p>
<p>As I write this, I’m on my way back from an internal OLX event. At this event I gave a talk (mixing some elements of the validated learning work we did, and some updated <a href="https://zef.me/the-100x-engineer-6d50a690a866" target="_blank">100x engineering</a> thinking). In preparation of this talk, OLX offered some preparation with a presentation coach. I’ve been speaking for a solid decade now, but I’m always open to learn something new. As part of the preparation session, the trainer (<a href="https://nl.linkedin.com/in/rutgermollee" target="_blank">Rutger Mollee</a>), showed the following 5 minute video of Obama:</p>
[embed]https://www.youtube.com/watch?v=BjA2nUUsGxw[/embed]
<p>While we didn’t discuss the rhetorical techniques Obama is employing here (and there are <strong>many</strong>), it once again reminded me what the power of rhetoric is. The story telling. The self deprecating humor. The timing. And even though Obama’s logic near the end (if one voice can change a room, it can change a city, if it can change a city it can change a nation etc.) doesn’t check out (there’s a logical fallacy) — it <em>works</em>. Goose bumps — but admittedly, I’m a sucker for this sort of stuff.</p>
<p>And this brought me back to the book <a href="https://www.amazon.com/Thank-You-Arguing-Third-Persuasion/dp/0804189935" target="_blank">“Thank you for arguing”</a> by Jay Heinrichs that I first read perhaps 6 years ago. As you can probably tell from the title, this is not a technical book, it’s not even a management book — it’s a book on communication. Communication using <em>rhetoric</em>. While this topic is not new by any stretch — indeed, the concepts of <em>ethos</em>, <em>pathos</em> and <em>logos</em> go back to the time of Aristotle — Heinrichs presents them in a way that’s both hilarious and educational. The sense of humor, the amount of examples from every day life, make it a truly entertaining read.</p>
<p>And so after watching the Obama video, I reread “Thank you for arguing” once more. And likely will continue to do this for many years to come. It has had huge impact on the way I speak and write. My job is more and more about communication, and to some extent, persuasion. This is tricky business, and I need all the help I can get. Rhetorical techniques described in this book, changed a lot for me, and I use many of them regularly.</p>
<p>If you have to convince people of something some times. And my bet is that you do. Give this book a shot. You won’t regret it. Also: <a href="https://www.youtube.com/watch?v=BjA2nUUsGxw" target="_blank">watch the Obama video</a> I linked up there. This dude is insanely great at what he does. Respect.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>37</wp:post_id>
		<wp:post_date>2019-05-09 22:14:09</wp:post_date>
		<wp:post_date_gmt>2019-05-09 20:14:09</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>books-that-changed-everything-thank-you-for-arguing</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="100xengineer"><![CDATA[100xengineer]]></category>
		<category domain="post_tag" nicename="books"><![CDATA[Books]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="rhetoric"><![CDATA[Rhetoric]]></category>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1424196]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[43756872203]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>The Making Of: My Most Brilliant Ideas</title>
		<link>http://zef.me/2019/01/24/the-making-of-my-most-brilliant-ideas/</link>
		<pubDate>Thu, 24 Jan 2019 21:31:42 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2019/01/24/the-making-of-my-most-brilliant-ideas/</guid>
		<description></description>
		<content:encoded><![CDATA[

<h4>The dump-engage-merge cycle</h4>
<p>It’s rare, but sometimes I struggle to find a good solution to a problem. However, I found a very simple technique to help me in such situations, and it’s very straightforward to execute. I usually apply it during 1:1s, but if you don’t have direct reports, I suppose you can do it around the water cooler, or coffee machine as well.</p>
<p>I call it the <em>dump-engage-merge</em> cycle, but let’s consider that name a work in progress. I’m open to better naming suggestions (there’s only two hard problems in computer science).</p>
<p>Here’s how it works.</p>
<p>During a 1:1 meeting, if there’s no obvious urgent topics to discuss, I dump the problem I have onto somebody.</p>
<p>“I’ve been thinking on how to improve sharing knowledge around the topic of X. my best idea thus far is to get people to set up a slot whenever they’re have an initial design of the X kind, and ask others (specifically those with more experience in X) to challenge them. What do you think?”</p>
<p>Note: the question at the end is the <em>engage</em>, a trigger to involve the other party and add some value.</p>
<p>“That sounds an awful lot like the weekly session Y that we already have in the calendar, perhaps we can expand the scope of that meeting and include this as well? That way we don’t fill up people’s calendars with all kinds of regular meetings.”</p>
<p>I do a mental <em>merge</em> of what I pushed and the result of engagement to get ready for the next cycle.</p>
<hr>

<p>1:1 with the next person.</p>
<p>“I’ve been thinking on how to improve sharing knowledge around the topic of X. I’ve discussed this idea with P, and our current idea is to expand the scope of meeting Y, during which we’d also have teams present initial designs of the X kind, and ask others (specifically those with more experience in X who will be in the audience anyway) to challenge them. What do you think?”</p>
<p>“I like the idea, but I’m afraid this will make meeting Y a mess, and too long. I agree with P that adding even more recurring meetings isn’t a good idea. So perhaps this should just be organized as hoc.”</p>
<p>Dumped. Engaged. Merged.</p>
<hr>

<p>1:1 with the next person.</p>
<p>“I’ve been thinking on how to improve sharing knowledge around the topic of X. I’ve discussed this idea with P and P2, and while we considered expanding the scope of meeting Y, by asking teams we’d also have teams present initial designs of the X kind, and ask others (specifically those with more experience in X who will be in the audience anyway) to challenge them. However, since this would pollute and prolong this meeting, now we’re considering an ad hoc meeting whenever there’s a need. What do you think?”“I like it, the risk is that organizing an ad hoc meeting is a hassle, but we can consider this an engineering manager’s job. Also, I’d be selective in inviting people. I’d just invite people you know who have something to contribute, but still let others know it’s happening and they can join if they want.”</p>
<hr>

<h4>The Announcement</h4>
<p>“Hello all, I have a brilliant idea…”</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>39</wp:post_id>
		<wp:post_date>2019-01-24 22:31:42</wp:post_date>
		<wp:post_date_gmt>2019-01-24 21:31:42</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-making-of-my-most-brilliant-ideas</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="100xengineer"><![CDATA[100xengineer]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="ideas"><![CDATA[Ideas]]></category>
		<category domain="post_tag" nicename="meetings"><![CDATA[Meetings]]></category>
		<category domain="category" nicename="technique"><![CDATA[Technique]]></category>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1424196]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[43756875147]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>The M-Word</title>
		<link>http://zef.me/2019/01/08/the-m-word/</link>
		<pubDate>Tue, 08 Jan 2019 19:28:47 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2019/01/08/the-m-word/</guid>
		<description></description>
		<content:encoded><![CDATA[

<figure>

<img data-width="1274" data-height="718" src="https://cdn-images-1.medium.com/max/800/0*0UDUA8XfuFoN8QcL.jpg">
</figure><p>I don’t like the term <em>manager</em>. It has connotations I really don’t identify with. Probably in part due to Dilbert and Office Space. In fact, when I looked it up, I found that it even the denotation is far from what I feel is the essence of the job. My job, at least. Here is the <a href="https://en.oxforddictionaries.com/definition/manager" target="_blank">dictionary definition</a>:</p>
<figure><img src="https://cdn-images-1.medium.com/max/800/1*GoDuhK5yNX3BIglayZxk7g.png"></figure><p><em>Controlling</em>. <em>Administering</em>. My two favorite things!</p>
<p>Building in that, phrases like “manage the situation” or “I’ll manage him” all give this sense of suppression — not letting things escalate. Keeping people calm. Working. Average. Without any major under, nor any major over performers.</p>
<p>No thank you.</p>
<p><a href="https://medium.com/@ppz12985/3-differences-between-managers-and-leaders-394996d0ac9d" target="_blank">Here’s an article by Paul Zhao</a> entitled <a href="https://medium.com/@ppz12985/3-differences-between-managers-and-leaders-394996d0ac9d" target="_blank">“3 differences between managers and leaders,”</a> some excerpts:</p>
<blockquote>Managers don’t want to make waves, so they want to ensure existing processes are respected. This isn’t to say that they are wrong, it is merely to state that managers are typically risk averse in that they prefer no to go outside the guide rails of established protocol or convention (even if the rules don’t make sense). Managers manage you the way that they want to please their superiors — that is, by following directions so that no surprises (good or bad) pop up.</blockquote>
<p>That is: they’re wave suppressors, flatten all the things! Everything is <em>fine</em>, nothing is great.</p>
<blockquote>It’s my personal opinion, though, that managers are actually just followers who have been promoted to a particular title and pay grade.</blockquote>
<p>They’re just puppets.</p>
<blockquote>Managers prioritize quantifying and measuring value. They often are obsessed with tracking results in order to report on specific targets.</blockquote>
<p>And just care about the numbers.</p>
<blockquote>Managers give you tasks and tell you (sometimes imply) the consequences of not completing them a certain way. They organize a team around penalties, either explicitly, or worse, by docking points under the table without bringing it to your attention (until it’s already too late).</blockquote>
<p>And get things done through the stick.</p>
<p>Of course, these statements are complete and utter bullshit (excuse my French), but they hurt not <em>just</em> because <em>I’m</em> somebody carrying the “manager” label, but also because I refused to accept the “manager” label in the past <em>exactly</em> because what Paul is describing in his article.</p>
<p>What Paul describes is what my generation has learned management is all about.</p>
<p>Thanks, <a href="https://dilbert.com/" target="_blank">Dilbert</a>. Thanks, <a href="https://www.imdb.com/title/tt0151804/" target="_blank">Office Space</a>.</p>
<p>But the premise of Paul’s article is that it’s an either… or… — you’re <em>either</em> a manager <em>or</em> a leader. But that’s like comparing oranges and… juice, or whatever.</p>
<p>Leadership is just a <em>technique</em> to achieve a certain goal. You can apply leadership (and be a leader while doing it) in a management role, or in any other role. If you need a group to move in a certain direction, a great way to do that is through leadership, whether you’re a toiler cleaner (putting up “please flush” signs and setting the right example — “did you hear what I did there, do you hear that noise?”), a developer (introducing TDD in your company by organizing a training), or manager (bringing together a group of people to tackle how you handle incident management).</p>
<p>The examples Paul gives of “typical” management behavior, are just… very, very poor implementations of stereotypical, Dilbert-esque management that I’ve never seen in real life (thank god). I bet it exists <em>somewhere</em>, but claim this as the definition of management… no.</p>
<p>At least not today.</p>
<p>You could dub the time I started to take management roles, about seven-ish years ago, as the “hippie time” of management. At least in the software engineering world. At the time, companies like Github had people traveling the world giving talks like “Fire all the managers”, <a href="https://www.inc.com/david-burkus/how-this-company-runs-without-managers.html" target="_blank">Valve proudly advertised</a> they didn’t have managers at all, and <a href="https://en.m.wikipedia.org/wiki/Holacracy" target="_blank">Holacracy</a> was up and coming, which is a crazy-ass self managing system without management… or something (a I bought a book on it, but it’s still on a shelf somewhere).</p>
<p>“Management is evil <em>man</em>! Peace!” Management was how we did things in the <em>past</em>. An outdated concept.</p>
<p>But the world has changed since then. <a href="https://github.com/holman/ama/issues/800" target="_blank">Github is now manager run</a>, Valve’s <a href="https://www.denofgeek.com/us/games/valve/274982/former-valve-employee-reveals-horrors-of-games-industry-corporate-culture" target="_blank">culture may not be what it seems</a>. I haven’t heard that much noise about Holacracy for a while (perhaps I wasn’t paying attention), except that <a href="https://link.medium.com/DiXjJu1iNR" target="_blank">Medium, which adopted it before, is now moving away from it</a>.</p>
<p>Management is back with a vengeance.</p>
<p>What led me to go in this direction myself was seeing <em>good</em> managers in action.</p>
<p>The best managers I know are great leaders, they make company-scale waves to move things ahead for all, they inspire you to do better, they break down walls, ditch protocols, and think very strategically and long term.</p>
<p>Terms like <em>control</em> and <em>administer</em> do barely appear in their vocabulary.</p>
<p>So <em>that</em> is what we need in this world. Not the controlling and administering and ass kissing and number obsessing and mediocring pointy haired bosses.</p>
<p>Can we please come up with a less tainted term?</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>40</wp:post_id>
		<wp:post_date>2019-01-08 20:28:47</wp:post_date>
		<wp:post_date_gmt>2019-01-08 19:28:47</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-m-word</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="leadership"><![CDATA[Leadership]]></category>
		<category domain="post_tag" nicename="management"><![CDATA[Management]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>So, You Want to be an Engineering Manager</title>
		<link>http://zef.me/2019/01/02/so-you-want-to-be-an-engineering-manager/</link>
		<pubDate>Wed, 02 Jan 2019 19:40:36 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2019/01/02/so-you-want-to-be-an-engineering-manager/</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading {"level":4} -->
<h4>For sure?</h4>
<!-- /wp:heading -->

<!-- wp:image -->
<figure class="wp-block-image"><img src="http://zefsmusings.files.wordpress.com/2019/01/c71be-0z43tupxccl_-rizq.jpg" alt="" /></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>If you would have told me 7 years ago I’d end up in management, I’m not sure I would have been happy with the prospect. I always considered myself a hardcore tech guy, perhaps not a nerd, but at least geeky. I started programming when I was 9, and did barely anything else for the next decade or two. How could that lead to something as boring as <em>management</em>, where your schedule is filled with <em>meetings</em> and you <em>barely write a line of code</em>?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>One of my favorite teachers at university used to say: “those who can <em>do</em>; those who can’t <em>teach</em>.” I believe many engineers would happily replace <em>teach</em> with <em>manage</em> in that saying.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Nevertheless, here I am are a decade or two later with various VP Engineering titles in my past and currently functioning as Head of Engineering. There’s no denying it. I’m a manager and I’m ok with it. Note I said “ok” not “proud,” but hey. Baby steps. I believe it’s the right choice for me. Not because I can’t <em>do</em> (or so I make myself believe), but because I believe I can make a heck <a href="https://sajigroup.com/law-of-explosive-growth/" target="_blank">more of an impact</a> in leadership roles than I can writing code myself. And that’s why I’m perfectly comfortable having picked this route, and I’m perfectly happy recommending it to you, <em>in principle</em>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>So, let’s talk about <em>you</em>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If you’ve been in the business for a while, and have reached the ranks of senior engineer, there should be this nagging question: <em>What’s next?</em></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Many companies — I’d boldly claim: the good ones — will have a career path split, usually after the senior engineer level: <em>technical</em> or <em>management</em> path. So which should you pick?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I think the most natural option — as in: nothing revolutionary will change if I pick this — is the technical path, usually progressing to tech lead, principal engineer, distinguished engineer and the like. So I won’t talk about that (boring stuff, really).</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Let’s talk about the other option: the management path, and see if that could be for you.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To give you a sense what the position of Engineering Manager is all about, I’m going to do the logical thing, I’m going to decompose the job into its linguistic components: “engineering” and “manager”. Let’s start with the less shocking part.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4>Engineering</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>In my view, to be a good engineering manager, you have to be a good engineer — which is where the whole “those who can <em>do</em>, those who can’t <em>manage</em>” falls flat immediately. There are two reasons for this:</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>It is your job to guide people in terms of <em>engineering practices</em>, and to do that, it’s pretty damn useful if you’re capable at doing it yourself at a solid level.</li><li>People tend to listen to people they <em>respect</em>, and this is much easier to achieve when you’re “one of them,” or can fake it enough to sound legit (“I remember building blockchains in a serverless Haskell fruppet-deployed cloud environment using stateless database like it was yesterday.”)</li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>When I say <em>engineering practices</em> here are some of the things I expect you to understand and have an opinion on:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>
<strong>Process</strong>: What are the steps to go from idea in a product manager’s head, to live product that people actually use? I’m talking everything from creating tickets in JIRA, to refinement, to planning, to writing code, to writing tests, to code reviews, to deployment to test environments, to release management, to roll outs, to monitoring, to maintenance, to removing of the feature (although the latter is too uncommon unfortunately).</li><li>
<strong>Quality</strong>: Unit tests, integration tests, end to end tests. How many of each? What coverage would we like to achieve? How do you measure if you’re doing well, improving, regressing?</li><li>
<strong>Code reviews</strong>: do we do them? Who should review? Do we enforce a certain number of approvals? What are the expectations of a code review, do we focus on style, correctness, architecture, documentation, or primarily on code indentation and variable naming? Are we getting any value out of them?</li><li>
<strong>Technology choices</strong>: are we using the same technology the company has always used, or are we introducing something new? If we’re using something new, have we evaluated the risks and benefits properly, or did we just pick whatever is trending at Hacker News that day? Do we need to check with anybody, or ask for input?</li><li>
<strong>Release management</strong>: how do we release? How often do we release? Can we automate everything? Do we want to automate everything? Should we automate everything? Do we do load tests first? Do we roll out gradually? What if all of this release was a giant-ass disaster, first if all: how do we find out before our customers do, and second: how do we roll back?</li><li>
<strong>Architecture</strong>: How do we find the right balance between delivering something in the short term, with having something maintainable long term? How do we design things so that it doesn’t blow up in production?</li><li>
<strong>Technical debt</strong>: how do we make sure our development pace doesn’t grind to a halt in time due to all our clever shortcuts? If we have a significant amount of technical debt, how do we handle it? Do we rewrite from scratch? Negotiate a part of the sprint to address it? How do we communicate the importance of this to other stake holders?</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>This is the part that probably many highly technical people are interested in naturally (except perhaps for the process aspects), once they reach a certain seniority level.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Note that while engineering managers may get their hands dirty with many of the things listed above, that’s <em>not essential</em> and really depends on the team. Sometimes it’s the best idea to get your hands dirty and write code, do code reviews, help with architecture, put your scrum master hat on; sometimes it is not. Either because of lack of time, or because you’re blocking the development of your team (more on this later).</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>So let’s move on to the part of the job that will be the biggest shock to everybody who takes this job. The <em>people</em> part. Yes, there’s <em>people</em> involved — didn’t realize? <code>goto technical-track</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4>Manager</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>As it turns out, the engineering part is the easy part (at least this is my experience). You think you understand computers — good for you — try getting some people to do “what they should.” Completely different job.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Let me repeat that: <strong>COMPLETELY DIFFERENT JOB.</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>A month or two into my first management job I remember thinking how shocking it was that nothing, absolutely nothing in my B.Sc., M.Sc. and PhD in computer science had me prepared for <em>any</em> of the work that you need to do as a manager.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>So, get ready to start from scratch once more.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Here are some of the management aspects of the job:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>
<strong>1x1s</strong>: Build a relationship with your people, understand how they think, if they’re happy or sad, frustrated or fulfilled, believe we’re heading for success or fantastic destruction.</li><li>
<strong>People development</strong>: Do you know your peoples’ hopes and dreams? What direction they want to develop themselves in? Do they see themselves on the technical track? Management track? Full stack? What are you doing to make this happen, or to change their mind?</li><li>
<strong>Conflict resolution</strong>: some people work together well, some fight. How do you ensure no serious conflict persist? Use any means. More common than internal conflicts? Cross department ones, how you go about resolving those?</li><li>
<strong>Feedback</strong>: Do your people know if they’re doing well? Do you give them regular positive feedback? Constructive negative feedback?</li><li>
<strong>Outward communication</strong>: your boss (hopefully) wants to know what you’re up to, so talk to him or her. There will also be occasional “why aren’t you guys delivering (on time)?” question, so managing expectations is important too, both towards your boss and all stakeholders. Keeping everybody in the loop is essential but needs to be balanced (somewhere between “we don’t care what you had for breakfast” and “who are you?”).</li><li>
<strong>Team composition</strong>: what people are in your team? Do you have the right skills there? Are they balanced properly? Do you have all juniors, or all seniors, a mix? Do you need QAs? Data scientists? Product analysts? DevOps? Frontend engineers? Backend engineers? Full stacks?</li><li>
<strong>Hiring</strong>: If you don’t have the perfect team already, it’s your job to fill the gaps. What are you doing to address this? Chances are you have recruiters in your company, are you working actively with them to find the right people for you? Do you participate in the interviews, do you sell candidates on your team’s mission?</li><li>
<strong>Firing</strong>: Are certain individuals underperforming? Why? Is this a case of the right person in the wrong place? If so, how about a transfer? Does the person know they’re underperforming? Have you spoken with HR about next steps? Ultimately, are you willing to let somebody go?</li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":4} -->
<h4>Putting it&nbsp;together</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Engineering management roles are an interesting mix of people and technology. Sometimes the tech aspects need more attention, sometimes it’s the people aspects. It’s interesting work, but you have to be good at the balancing act, and have to accept you cannot spend all your efforts on just one of them. In fact, as you “move up the chain” balancing priorities becomes a bigger and bigger part of the job, as scope increases and the amount of people that want something from you increases.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Nevertheless, when you do it right, you will start seeing results. Not as instant as engineering work, but results nonetheless. Somebody under your mentorship being promoted. Eliminating meetings so your team is less distracted and more productive. Making some great hires. Changing people’s attitude towards work for the better. Shipping a 1.0. Helping people get better insight in what the direction they want to go in their careers. Figuring out how to turn a project perceived as maintenace-only into a technological playground. Being able to take a vacation, coming back, and discovering that the team kept on improving the way they work as you were absent. People who you once hired, moving up to become a <a href="https://www.linkedin.com/in/lennartkats" target="_blank">CTO</a> or <a href="https://www.linkedin.com/in/lucacipriani" target="_blank">CIO elsewhere</a>. Some things will be invisible, many hard to take credit for, and some will be life altering.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Welcome to management.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>So, 1800 words later, do you think this is for you? Happy to hear it. I’ll collect suggested reading on a bunch of topics at some point, but until I do, I highly recommend two books to start:</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>
<a href="https://www.amazon.com/Managers-Path-Leaders-Navigating-Growth/dp/1491973897" target="_blank">The Manager’s Path</a> — This is the tech management book I wished existed when I started. It describes the career path from engineer, to tech lead, to engineering manager and beyond, clearly describing expectations at each level. A great read.</li><li>
<a href="https://www.amazon.com/Managing-Humans-Humorous-Software-Engineering/dp/1430243147" target="_blank">Managing Humans</a> — rands is my tech management idol. He offers good insight, he’s funny. Love this book. You can find most of this on the <a href="http://randsinrepose.com/" target="_blank">rands in repose blog</a> as well.</li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Good luck!</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>41</wp:post_id>
		<wp:post_date>2019-01-02 20:40:36</wp:post_date>
		<wp:post_date_gmt>2019-01-02 19:40:36</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>so-you-want-to-be-an-engineering-manager</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="100xengineer"><![CDATA[100xengineer]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="management"><![CDATA[Management]]></category>
		<category domain="post_tag" nicename="software-development"><![CDATA[Software Development]]></category>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[43786604481]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Ryder (PAW Patrol) Management Super Talent</title>
		<link>http://zef.me/2018/12/24/ryder-paw-patrol-management-super-talent/</link>
		<pubDate>Mon, 24 Dec 2018 07:20:58 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2018/12/24/ryder-paw-patrol-management-super-talent/</guid>
		<description></description>
		<content:encoded><![CDATA[

<figure>

<img data-width="620" data-height="372" src="https://cdn-images-1.medium.com/max/800/0*iwVkcDVMct8_MPVA">
</figure><p>Ever since PAW patrol launched on TVs world wide in 2013, the management world has been buzzing about Ryder, the human leader of five puppies responsible for saving various inhabitants of their local village. Ryder’s excellent attitude, swift decision making, and driver of the patrol’s creative culture, leaves many managers, including yours truly in awe. And while Ryder’s exact age is unknown, he appears to be in his early to mid-teens, which makes this the youngest management super talent today.</p>
<p>Let’s review some of Ryder’s management practices:</p>
<p><strong>Positive attitude</strong> — this is a must-have for any leader. Ryder is never complaining, lazy or negative and his crew always ready for action.</p>
<p>Great <strong>communication culture</strong> — I’ve seen many episodes and have yet to discover a single issue that arises due to poor communication. I’ve never been an organization this strong in terms of unambiguous communication.</p>
<p>After every mission, Ryder <strong>gives credit to his (canine) crew,</strong> no exceptions.</p>
<p>While Ryder is known to give <strong>immediate orders</strong>, this does not seem to have led to a complacent culture. In many cases, without Ryder present, his puppies expose the same <strong>cooperative style</strong> and success rate. It is clear that his input is appreciated and accepted, but the success of the team does not depend on him barking (hah) orders.</p>
<p><strong>Creative culture</strong> — the amount of creativity exposed by the team and the pace at which this happens is an incredible achievement. Either Ryder carefully cultivated this culture, or recruited for it. Either was, this is yet another impressive achievement.</p>
<p>The <strong>diversity of skill </strong>in his team is also astounding, some can fly, some have built in x-Ray scanners. The skill set is very broad and seem to perfectly complement in any situation.</p>
<p><strong>Celebrates success </strong>with (dog) cookies — enough said.</p>
<p><strong>Effective power point slides</strong>. Ryder manages to prepare an elaborate power point deck in a matter of a minute or two with very clear schematic visuals of the mission. He does this as his puppies are in the elevator to gear up. Although the visuals are sometimes clearly hand drawn and not always well proportioned, this seems to never lead to any real confusion.</p>
<p><strong>Reputation of getting things done</strong> — whatever happens in PAW patrol town, whether it’s a cat afraid to get out of a tree, or freight train heading towards a chipmunk sitting on the rails. Ryder is everybody’s first call. That’s the ultimate sign of a reputation of getting things done consistently (usually within 8 minutes).</p>
<p>I think everybody ought to aspire to be more like Ryder. Is that realistic? I’m not convinced, we just have to accept that some are just born with the innate management capability. If you haven’t seen Paw PATRO yet, be sure to check it out on Netflix.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>42</wp:post_id>
		<wp:post_date>2018-12-24 08:20:58</wp:post_date>
		<wp:post_date_gmt>2018-12-24 07:20:58</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ryder-paw-patrol-management-super-talent</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="leadership"><![CDATA[Leadership]]></category>
		<category domain="post_tag" nicename="management"><![CDATA[Management]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>The Silver Bullet Romantic</title>
		<link>http://zef.me/2018/12/17/the-silver-bullet-romantic/</link>
		<pubDate>Mon, 17 Dec 2018 18:37:48 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2018/12/17/the-silver-bullet-romantic/</guid>
		<description></description>
		<content:encoded><![CDATA[

<p>Here’s episode 244 of “Zef talking to himself,” in which I’m organizing my thinking by writing about it publicly — because why write something in private when you can publish it, and be killed for it in Reddit comments?</p>
<p>So here’s my secret:</p>
<blockquote>I’m a hopeless silver bullet romantic.</blockquote>
<p>I realize that from childhood on I was looking for my silver bullet: my one activity, skill, game, book, whatever that I would stick to for life and would fulfill me forever. My <strong>one thing.</strong> Even though, as it turns out, I’m the type that gets bored with things quite quickly, I never gave up, and it continues to this day.</p>
<p>In the context of technology this irrational seeking for a the silver bullet appears in many places: what is the ultimate programming language? What is the ultimate database? What is the ultimate infrastructure model? I constantly jump on the latest and greatest to figure out if this is <em>it</em>, and even though, rationally I know the answer is <em>no</em>, I cannot help myself from continuing the search.</p>
<p>Let’s consider it my one and only character flaw (I can hear my wife laughing already before hitting the <em>Publish</em> button on this one).</p>
<p>One recent example, to show you how my brain works: Kotlin. A few weeks ago, Kotlin started to bubble up my radar, if you will. I was aware of it, but never seriously looked into it. One of our teams will now be investing in it, so I thought I’d do some background reading. Here’s how I operate:</p>
<ol>
<li>I buy a book and think “hmm, interesting, some good ideas here.”</li>
<li>Then I think: could this be <em>it</em>?</li>
<li>I subscribe to podcasts to do more background listening (the reality of my life is I have more time listening to stuff than reading it).</li>
<li>I get more excited: could this be <em>it</em> for realzies?</li>
<li>I’m starting to think bigger: ok, Kotlin for Android is non-controversial, Kotlin for the back-end is cool too, so how about iOS, front-end and scripting?</li>
<li>OMG there’s <a href="https://kotlinlang.org/docs/reference/native-overview.html" target="_blank">Kotlin native</a>, OMG there’s a Kotlin REPL, OMG there’s a <a href="https://kotlinlang.org/docs/reference/js-overview.html" target="_blank">Kotlin compiler to JavaScript</a>.</li>
<li>Is this <em>it</em>?</li>
<li>…</li>
<li>No.</li>
</ol>
<p>This process usually lasts up to a week or two before reality kicks in. Nope, Kotlin isn’t the silver programming bullet either. Rationally, I knew it was going to end up this way, but hey — I can’t really control this, I’m a romantic.</p>
<p>The good thing is that I’m now able use this oddity of mine and hack it to something productive. As it turns out, it’s a great way to do insane deep dives into many technologies in a short amount of time. Some of my previous silver bullet programming language candidates: JavaScript (pretty close to silver bullet status), Clojure, Go, Rust. And not just programming languages, databases too: MySQL, Postgres, DynamoDB, Mongo, all in search of the ultimate database. Infrastructure: Nix, Puppet, Ansible, Terraform and now serverless (except of course, serverless <em>actually is</em> a silver bullet). Chances are that when you ask me about some random technology I can tell you a lot of in-depth stuff that seems random to you (including how the garbage collector works, because the memory model is on my list of stuff I decide to care about).</p>
<p>I consider myself a rational human being. Generally. Rationally, I know there will never be a silver bullet in any software development topic. In fact, the trend seems to be in the opposite direction: rather than converging on one language, one database, the trend, especially in database is to divergence: using a graph database for one aspect of your app, a key-value store for another, and so on. At some level this is driving me crazy, and deep inside I’m still in denial.</p>
<p>The whole micro services trend also significantly reduces the need for the “one language to rule them all.” This gets even more extreme with AWS Lambda and other FaaS solutions. You can now solve each aspect of your problem space with a different language if you want. This was impractical in the good-old monolith days. Somebody wrote a log shipper as a lambda function in Python even though the rest of our code is Go? Whatever, if it works it works!</p>
<p>Yes, there seem to be rough days ahead of me. But I’ll live.</p>
<p>Nevertheless there is, and always will be a glimmer of hope. A hope that if I keep digging, keep exploring, keep waiting, one day I’ll find it. My bullet, all shiny and polished.</p>
<p>And we’ll be happy ever after, my bullet and me.</p>
<p>You’ll see!</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>43</wp:post_id>
		<wp:post_date>2018-12-17 19:37:48</wp:post_date>
		<wp:post_date_gmt>2018-12-17 18:37:48</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-silver-bullet-romantic</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>I Hate Puzzles: 7 Years Later</title>
		<link>http://zef.me/2018/12/11/i-hate-puzzles-7-years-later/</link>
		<pubDate>Tue, 11 Dec 2018 19:40:10 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2018/12/11/i-hate-puzzles-7-years-later/</guid>
		<description></description>
		<content:encoded><![CDATA[

<figure><img src="https://cdn-images-1.medium.com/max/800/1*SkAqiIShA48IGX-PNbh9Lg.jpeg"></figure><p>Seven years ago I wrote <a href="https://zef.me/i-hate-puzzles-am-i-still-a-programmer-590607b53777" target="_blank">an article entitled “I hate puzzles: am I still a programmer?</a> This article resurfaced a few times over the years on Reddit and Hacker news. A year ago <a href="https://podtail.com/en/podcast/the-drawing-board-by-udacity/episode-2-all-about-puzzles/" target="_blank">I even appeared in a podcast because of it</a>. The premise was roughly the following: I’ve been programming most of my life (since I was 9), and at the time of that writing, started to look for my first full-time industrial job. Many of the tech giants interview primarily testing algorithmic puzzle solving skills — so I faced an identity crisis of sorts — am I really a programmer if I don’t like such things?</p>
<p>The popularity of the article made it clear that there are many more people “like me.” That was good to hear, of course.</p>
<blockquote>But the key question was: is not liking puzzles a <em>blocker for a successful career in software development</em>?</blockquote>
<p>For this reason, I thought I’d share a bit about what happened to me over the last 7 years, to see if things worked out after all, or if today I’m a giant-ass failure eating old crap out of a dumpster.</p>
<p>I suppose answering this all depends on your definition of <em>success</em>. Did I end up in one of the tech giants? I did not. Did I try? A little little bit.</p>
<p>About 4 years ago I thought: “screw it, I’m going to try to get into Google.” And you will never believe what happened next. Actually, you will, but that’s not the cliche headline.</p>
<p>So let me start there.</p>
<p>I decided to finally respond to one of those Google recruiter emails and apply for a job as a <em>Developer Advocate</em> in London, something I always considered close to my skill set and interests. But like any Google job in engineering, this role, too, includes the usual suspects of technical questions. I knew this, so way too late I started to work through parts of the <a href="https://www.amazon.com/Cracking-Coding-Interview-Programming-Questions/dp/098478280X" target="_blank">“Cracking the Code Interview”</a> book. I later found out others start preparing for their interviews many months in advance, I started about a week before or so. Doing the exercises in this book was like reliving the first two years of my studies, specifically the parts I did not like at all. But hey, it’s <em>Google</em>.</p>
<p>I had a phone screening, I passed, then was invited to the London office, then had 4–5h of interviews after a night of no sleep (they put me in an excellent hotel the night before, but for the first time in my life whatever I tried I couldn’t sleep). I think I did quite well with most parts of the interviews, but the “technical” questions were a struggle. I bet I signed something ensuring I won’t disclose what they asked, but (ironically) you can Google this stuff :-)</p>
<p>After a few days, I got a call saying that I was highly rated for most aspects, also I came highly recommended from the the people I know at Google, but I failed the technical part. So it was a “no.” Funny enough (for some definition of “funny”), about a week later later I got another call, because apparently there was some internal pushback, resulting in yet another tech-only phone screening, but the final decision was still a “no, please try again in a year.”</p>
<p>Giant slap in the face.</p>
<p>Too bad. Today, years later, I think it was for the best, considering what our life would have looked like in London (small kids, long commute), but it would have been interesting for sure.</p>
<p>So, what did I do instead?</p>
<p>Before the whole Google intermezzo, somewhat related to the PhD I was finishing 7 years ago, I got in touch with a startup called <a href="https://c9.io" target="_blank">Cloud9 IDE</a> (now acquired by AWS) that were newly funded, and needed a guy to build their IDE’s language tooling. They did not really interview me, because I demoed what I had been building during my PhD (a programming language that compiled to JS designed specifically for mobile web apps) and were already sold on my skills #interviewhack. I <a href="https://zef.me/post-phd-plans-cloud-9-ide-9e7d5dc50e93" target="_blank">joined as senior developer</a> and built the initial versions of their JavaScript tooling implementing <a href="https://www.infoq.com/presentations/Taming-JavaScript-with-Cloud9-IDE-a-Tale-of-Tree-Hugging" target="_blank">features such as semantic code completion and some basic refactoring</a>. While there’s definitely algorithms involved here, I managed just fine (they’re not really rocket science).</p>
<p>However, a few months in, I got my first glimpse of what my career would become.</p>
<p>At the time we had major stability, quality and reliability issues. Basically <a href="https://www.youtube.com/watch?v=J_44tCwpChY" target="_blank">the (node.js) backend</a> would crash constantly and basic functionality like loading and saving files in the IDE wasn’t reliable. My code completion was getting better by the day, but given I was building on a very unstable foundation — what was the point? So I “shared my observations” (= complained) with the CEO, and in a true startup style he said: “ok, go fix that.”</p>
<p>My first attempt was just to do this all myself — trying to fix things, scale the system, but this wasn’t sustainable. I needed to sign up the rest of the team. Long story short, within a few months I was promoted to VP Engineering and spent my time leading our development teams and spent little time coding. I fully understood most of what was happening in the system at a technical level, but no longer wrote the code myself.</p>
<p>I joined a later company, S<a href="https://stxnext.com/" target="_blank">TX Next </a>as a Python developer, observed a gap, was promoted to team lead, showed a different way to approach things, was promoted to VP Engineering responsible for around 100 engineers. Then, at E<a href="https://www.egnyte.com" target="_blank">gnyte,</a> started with a small, stable team as engineering manager, contributing code. Moved on to a team d<a href="https://helpdesk.egnyte.com/hc/en-us/articles/115000286631-Turbo-Overview" target="_blank">eveloping a new product,</a> got that close to launch the 1.0, saw an opportunity to take over the core teams that produces their main product and ran that. A<a href="https://zef.me/why-i-joined-olx-group-ee271f49d689?source=collection_home---4------1---------------------" target="_blank">t OLX </a>I also started a role that involved coding initially, but as my scope has increased — less so.</p>
<p>The original question was: do you need to like puzzles to be successful in software development? I’d dare say no. Except for this one interview at Google, I never felt my lack of puzzle solving skills were hindering me. In fact, the roles I’ve had over the last few years gave me a pretty broad perspective on the type of software projects that exist, and <em>very</em> few rely on such skills. As a result, I also make sure that none of the interviews we do with candidates rely heavily on testing such skills, I still think checking for this is silly and would result in many false negatives that we cannot afford.</p>
<p>The reason I decided to go into leadership roles was because I realized that they allow me to have a far greater impact than just me typing code really fast.</p>
<p>Looking back, I’m very satisfied with my career so far. The only path that my puzzle-hating personality blocked was Google, but looking back at that opportunity, I’m not sure I would have been able to grow at the pace that I have in other places. I wouldn’t have been able to make as much of an impact there.</p>
<p>At Google, I would have just been a tiny piece of an enormous puzzle. I bet I would just have <em>hated</em> that.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>44</wp:post_id>
		<wp:post_date>2018-12-11 20:40:10</wp:post_date>
		<wp:post_date_gmt>2018-12-11 19:40:10</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>i-hate-puzzles-7-years-later</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="best-of"><![CDATA[Best Of]]></category>
		<category domain="post_tag" nicename="career-advice"><![CDATA[Career Advice]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="puzzle"><![CDATA[Puzzle]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Everybody is in Sales</title>
		<link>http://zef.me/2018/12/04/everybody-is-in-sales/</link>
		<pubDate>Tue, 04 Dec 2018 19:34:01 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2018/12/04/everybody-is-in-sales/</guid>
		<description></description>
		<content:encoded><![CDATA[

<h4>My role in job interviews</h4>
<p>A year or two ago I had the opportunity to shadow somebody who did partner recruitment for the company I worked for at the time. After listening in on a few calls, he asked me if I had any feedback. I answered that I didn’t. I felt quite unqualified, “what you do really looks like a sales job.” “Heh,” he responded, “ultimately every job is a sales job.”</p>
<p>While my initial intuitive response was: cool story bro’, if you’re in sales, everybody else’s job looks like a sales job too — a <em>when you have a hammer</em> kind of thing — but this statement stuck with me.</p>
<p>I thought back on many aspects of the jobs I had, especially the management ones, and realized: boy he’s right: I’m constantly selling stuff. And I realized I like this part of the job a lot. I’m a salesman too.</p>
<p>While many consider sales tricking people into buying stuff they don’t necessarily need, I think the best sales people don’t do this. They will try to understand their customer (audience) as best as they can, and figure out how solve their problem. Ideally involving their product, but not always.</p>
<p>So what do I mean with “sales” in a management context?</p>
<p>Example: job interviews.</p>
<p>Over the past few weeks I’ve been involved in about 3–4 interviews per week. By now, I’m quite far from the daily reality of an engineer, realistically I haven’t coded anything significantly over the past few months. So the question is: what should <em>my</em> role be? For sure, there are other people more qualified to do technical interviews, so in general that’s not my part (although I’ve done some for Go engineers).</p>
<p>The part I generally handle is the “potential” interview, and my favorite part of that is — wait for it — <em>the selling part.</em></p>
<p>The product I’m selling is <em>the job and the environment</em>.</p>
<p>Some companies spend all their candidate’s time hammering and questioning, ending with “we have 2 minutes left, do you have any question for us?” “Yes, one: what do guys do here?”</p>
<p>In my view interviews ought to be a two-way streets. We’re not just checking <em>them</em>, the good ones are checking <em>us</em> too. Honestly, I think there’s a huge correlation between those asking <strong>us</strong> a ton of questions during interviews and our best hires.</p>
<p>For this reason I reserve the majority of my part of the interview for two things:</p>
<ol>
<li>Poke around in the candidate’s history, but especially in how they see their future. Why are they even talking to us? What do they not like in their current job? What are they missing or looking for? Basically, what are their hopes and dreams? (Understanding your audience.)</li>
<li>Figure out if this is the type of candidate that we want, and assuming yes, create a specialized story of what we’re doing at OLX. Note: this is not about bullshitting, this is about focusing on the aspects of the job they will love given what they said as part of #1. For instance, some people need autonomy, so then I tell them how we give teams autonomy. Some people care more about the scale, so I will give them some numbers and some of the scaling challenges we’ve faced recently. Some care about the product, so I focus on that part. Selling bullshit during recruitment is a terrible idea, they will find out the truth eventually, and at what cost…</li>
</ol>
<p>My goal is to make every candidate go home with the feeling of “wow, this is a place where I would love to work.” And they should :-) Both for the people we end up giving an offer, but also the ones we reject. The world is small. Especially in a relatively small city like Poznań, people talk.</p>
<p>Selling the job is essential in a competitive landscape.</p>
<p>My ideal scenario for a rejected candidate is that they still recommend interviewing with OLX when asked. “I didn’t get in, but it sure sound like an awesome place to work. Give it a shot!”</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>45</wp:post_id>
		<wp:post_date>2018-12-04 20:34:01</wp:post_date>
		<wp:post_date_gmt>2018-12-04 19:34:01</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>everybody-is-in-sales</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="hiring"><![CDATA[Hiring]]></category>
		<category domain="post_tag" nicename="recruiting"><![CDATA[Recruiting]]></category>
		<category domain="post_tag" nicename="sales"><![CDATA[Sales]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Why I joined OLX Group</title>
		<link>http://zef.me/2018/10/16/why-i-joined-olx-group/</link>
		<pubDate>Tue, 16 Oct 2018 18:23:58 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2018/10/16/why-i-joined-olx-group/</guid>
		<description></description>
		<content:encoded><![CDATA[


<figure class="wp-caption">

<img data-width="1399" data-height="784" src="https://cdn-images-1.medium.com/max/1200/1*a5JfpqVzq_UVPwLH9fpUFw.png">

<figcaption class="wp-caption-text">We have many inspirational quotes painted on the walls in our office. This is the one next to my desk.</figcaption></figure>

<p>It’s just about 5 months ago that I joined <a href="https://www.olxgroup.com" target="_blank">OLX Group</a>, a world-wide classifieds company. With over 5000 employees, it’s the biggest company I’ve ever worked at. Its focused is mostly on emerging markets, but there’s also properties in e.g. the US and UK (<a href="https://us.letgo.com/en" target="_blank">letgo</a>) that are doing fairly well. In Poland it’s most well-known for being the company behind <a href="https://www.olx.pl" target="_blank">OLX.pl</a> (general classifieds), <a href="https://www.otomoto.pl" target="_blank">Otomoto</a> (cars), and <a href="https://www.otodom.pl" target="_blank">Otodom</a> (real-estate).</p>
<p>Whenever I talk to people outside the company in Poland (I’m a man of the people), I notice two things:</p>
<ol>
<li>Everybody knows OLX, and uses our products. If you want to buy or sell a car — OLX, house — OLX, anything else (second hand) — OLX.</li>
<li>People (specifically engineers) have no idea there’s interesting engineering work to do here, it’s just a page with ad listings… right?</li>
</ol>
<p>So, I thought I’d explain a bit about what we’re doing — the phase of development we’re in, why I joined myself, and have thus far only found reasons to stay.</p>
<h4>It’s All Around</h4>
<p>As I mentioned, if you live in “western Europe,” or the US, you may never have heard of OLX Group, but if you live in Poland, Ukraine, Bulgaria, Romania, India, etc. OLX is everywhere. I see people with the OLX, Otomoto, and Otodom apps open in the tram nearly every day. We bought our car through Otomoto, our home through Otodom, and we’re constantly selling old baby toys, seats, and other unnecessary stuff through OLX (we also buy things occasionally).</p>
<p>In terms of usage and popularity, in Poland these products are in the same ball park as Google, Facebook, and even Bing.</p>
<h4>The Scale</h4>
<p>With this prevalence comes scale. Our products worldwide have more users than Twitter. I heard Otomoto (the car site) in Poland gets more traffic than all porn sites combined.</p>
<p>With scale come a lot of interesting engineering problems that few companies (<em>especially</em> in Poland) face. We are pushing many technologies to their limits.</p>
<p>The amount of users that we have also allows us to experiment very quickly. We constantly run A/B tests, <a href="https://en.wikipedia.org/wiki/Wizard_of_Oz_experiment" target="_blank">wizard of oz tests</a>, surveys and lots of other things to learn more about what features to build next. We have UX labs (with the one way mirror setup) where we regularly invite users to test new stuff we’re working on.</p>
<h4>The Transition</h4>
<p>Like many sites of its age, OLX was developed as a monolith that grew over time. Initially it was a pure PHP and MySQL app running on bare metal servers, but over time it evolved to use numerous other technologies including memcached, Redis, Solr, Riak and RabbitMQ. And a few months ago the majority of our sites have been migrated to AWS.</p>
<p>About a year ago, the choice was made to treat the monolith as legacy, to build new functionality as separate services (recently even forbidding the use of PHP for those entirely), and to opportunistically rebuild existing functionality as separate services. Realistically, this is going to take years to complete, but it’s a pretty interesting challenge to completely rebuild a plane, while in-flight, or train, or car, or whatever the analogy is.</p>
<p>Why start this transition? For various reasons. One, for sure is a strategy to remove a lot of technical debt, but the most important is to allow more sense of ownership and team autonomy as we scale. Starting with just a few devs in one room (this is Europe, so no garages), we now have many teams working on OLX (about 8 in Poland, about 3 in Berlin), and sharing one giant codebase makes it hard to create a feeling of “this is ours.” Every release comes with changes from different teams, so in the hypothetical case that things break, <em>whodunnit</em>?</p>
<p>Decoupling at the service level, with solid contracts between services, and good monitoring makes it much easier to feel this ownership, and enables much more autonomy as well.</p>
<h4>The Autonomy</h4>
<p>And this is the other thing that I rarely felt so strongly in other companies: the focus on autonomy. Every team (or “pack” as we call them here) has a pretty significant amount of freedom in terms of product and tech. Packs generally consist of:</p>
<ul>
<li>1 product manager</li>
<li>1 product analyst</li>
<li>1 engineering manager</li>
<li>2–5 engineers</li>
</ul>
<p>And some packs also have:</p>
<ul>
<li>data scientists (e.g. focused on machine learning)</li>
<li>QAs</li>
<li>DevOps</li>
</ul>
<p>This is pretty much all you need to build a product end to end. And that’s exactly the point.</p>
<p>So, how much freedom does a pack have in terms of technology? Quite a lot. We have an internal <a href="https://www.thoughtworks.com/radar" target="_blank">technology radar</a> that we use as a guide. It has “hold” (don’t use), “assess” (worth investigating), “trial” (let’s use for low-impact stuff), and “adopt” (go wild) sections. However, this doesn’t mean that you cannot use e.g. Haskell for something (which I don’t think appears on the radar at all). If you have solid reasons for introducing Haskell, go ahead. However, do realize that few people in the company will be able to help you, because nobody else is using this in production.</p>
<p>Much less controversial technologies on our radar (at the time of this writing), are Go, node.js, Kotlin, React, Redux, serverless framework, etc.</p>
<p>So, you may ask: is this for real? And after about 5 month of freely making all the tech choices within our team (React, Apollo, Go, GraphQL, SQS, DynamoDB, serverless framework in our case), all I have received is reinforcement to do exactly this. We have some constraints, e.g. we want everything to run in AWS, but beyond that: go wild. “Be Empowered” is a company value that comes up just about every day.</p>
<p>However, there’s a <strong>but</strong> to all of this: own what you do. If it blows up, fix it yourself. You build it, you run it.</p>
<h4>The Road Ahead</h4>
<p>I’ve been promoted (OLX is a dynamic environment), and from next month I’ll function as <em>Head of Engineering</em>. I may be a bit too busy to be typing the wordz on the Medium from November. That’s why I’m doing it now. Also, we need (even) more bright minds to join our teams, so I HAVE AN AGENDA.</p>
<figure>

<img data-width="500" data-height="323" src="https://cdn-images-1.medium.com/max/800/0*UbDxHHuoSjei1_yT.jpg">
</figure><p>This will be my first role acting as a manager of managers. I’ve had fancier titles in the past, but there was never an management layer under me. For me this is some pretty new and exciting stuff.</p>
<p>Good times ahead, both in terms of advancing product, tech, and the organization around it.</p>
<p>If you want to join me — and this is something I would recommend :-) — <a href="https://www.olxgroup.com/search/engineering/poland-poznan/all-brands" target="_blank">we’re continuously hiring</a>. It’s an interesting time to be at OLX.</p>

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>46</wp:post_id>
		<wp:post_date>2018-10-16 20:23:58</wp:post_date>
		<wp:post_date_gmt>2018-10-16 18:23:58</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>why-i-joined-olx-group</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Is this the right problem?</title>
		<link>http://zef.me/2020/02/02/is-this-the-right-problem/</link>
		<pubDate>Sun, 02 Feb 2020 18:44:17 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/?p=1857</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>I sometimes joke that one half of my job is approving things, the other half is asking questions. Of course, asking <em>any</em> question isn't all that hard, asking the right question is a skill. However, there are a few tricks. There are a couple of questions that prove valuable over and over. Let's do some branding here and let's call them <em>power questions</em>. Are you ready for some <em>power</em>?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Here's one: "Is this the right problem?"</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>So, here's a common trap — You've just finished a sprint or a quarter of work, and excited to plan the next one. Being an avid <em>The 100x Engineer</em> reader, you remember that <a href="https://100x.engineering/the-well-considered-decision/">your decisions ought to be well-considered</a>, so you spent time documenting the exact problem you're going to solve, the solution space, trade-offs between those solutions and you've picked the one you're betting on <a href="https://100x.engineering/the-power-of-the-narrative/">in a nice narrative</a>. Then, you clearly laid out <a href="https://100x.engineering/what-does-success-look-like/">what success looks like</a>. Boom.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Excellent, let's get started, shall we?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Not quite yet. The question that still needs to be asked is the scoping question: </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Is this the right problem to solve?</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Given <em>everything</em> you could be spending your time on in <em>your universe</em> — and let's define the universe to be what's in your team's scope — is this the most valuable thing you can do given...</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>The amount of time, resources and energy it will take — time you will <em>not</em> be able to use for anything else.</li><li>The expected value you expect to get from it — how does the amount of input (time, resources, energy) weigh against the expected output? Business people call this ROI (Return On Investment).</li><li>Timing —&nbsp;do we need to do this <em>now</em>? Is this the right time? Can, or even, should, we do this later?<br></li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>There is <em>opportunity cost</em> to everything you do. A day spent on one thing means that day will not be spent on something else. So, you need to ask yourself if you're solving the right problem.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In practice, it's quite hard to do this exercise, for various reasons. First, it's super easy to mentally sink knee deep in the problem and solution space very quickly, making it pretty damn hard to conclude that... <em>actually</em>, we shouldn't care about any of this, we should do something completely different... and dump all that mental investment in the trash. Second, some problems are just <em>fun</em> to solve, and some solutions are challenging to implement. You run into something during your last cycle and think: oh, we cannot deal with that now, but let's do that in the next one, it will be fun!</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Yet, since you're reading this site, you care about optimizing impact. Impact is not made by working <em>harder</em>, or working <em>more</em>; it's done by working <em>smart</em> —&nbsp;as cheesy as that sounds. Make sure you spend time on the things that make the most difference.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>And that all starts with asking the right questions.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1857</wp:post_id>
		<wp:post_date>2020-02-02 20:44:17</wp:post_date>
		<wp:post_date_gmt>2020-02-02 18:44:17</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>is-this-the-right-problem</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="100xengineer"><![CDATA[100xengineer]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="highlight"><![CDATA[highlight]]></category>
		<category domain="category" nicename="mindset"><![CDATA[Mindset]]></category>
		<category domain="post_tag" nicename="reflection"><![CDATA[reflection]]></category>
		<wp:postmeta>
			<wp:meta_key>_wp_old_date</wp:meta_key>
			<wp:meta_value><![CDATA[2020-05-02]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[43755787814]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>timeline_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1588441484]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1424196]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>A Seat at the Table</title>
		<link>http://zef.me/2019/12/21/a-seat-at-the-table/</link>
		<pubDate>Sat, 21 Dec 2019 19:46:27 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">http://zefsmusings.com/?p=1915</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:image {"align":"wide"} -->
<figure class="wp-block-image alignwide"><img src="https://images.unsplash.com/photo-1519824656922-02aa979af4cc?ixlib=rb-1.2.1&amp;q=80&amp;fm=jpg&amp;crop=entropy&amp;cs=tinysrgb&amp;w=2000&amp;fit=max&amp;ixid=eyJhcHBfaWQiOjExNzczfQ" alt="A Seat at the Table" /></figure>
<!-- /wp:image -->

<!-- wp:heading {"level":3} -->
<h3 id="or-how-to-fight-the-hierarchy-of-disappointment">Or: How to fight the<em>&nbsp;hierarchy of disappointment</em></h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Chances are that in your company, once it hits a certain size, the&nbsp;<em>hierarchy of disappointment</em>&nbsp;makes an appearance —&nbsp;and, not to be hyperbolic about it, it is slowly killing your company.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>“What the hell is the&nbsp;<em>hierarchy of disappointment</em>!?”</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>At the top of this hierarchy is the&nbsp;<em>Business</em>.</p>
<!-- /wp:paragraph -->

<!-- wp:image -->
<figure class="wp-block-image"><img src="https://100x.engineering/content/images/2019/12/image-1.png" alt="" /></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>In the&nbsp;<em>Business</em>&nbsp;we identify opportunities in the market that are going to be&nbsp;<em>huge</em>&nbsp;(some would say&nbsp;<em>yuge</em>). And all we need to grab them is a tiny bit of&nbsp;<em>product</em>.&nbsp;</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Sadly,&nbsp;<em>Product</em>&nbsp;in this company is a disappointment. Product says “no” to practically everything we ask, and the few things they do agree too, even though they're pretty basic, are delivered at a turtle's pace, and an unpredictable turtle at that. Not sure what&nbsp;<em>Product</em>&nbsp;is doing most of the time, except deliver some stripped-down-to-the-bone version of whatever we told them we needed, after the opportunity has already passed. Clearly they have somehow abstracted from the idea that money needs to be earned to keep this business running.&nbsp;</p>
<!-- /wp:paragraph -->

<!-- wp:image -->
<figure class="wp-block-image"><img src="https://100x.engineering/content/images/2019/12/image-2.png" alt="" /></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>In&nbsp;<em>Product</em>&nbsp;we listen to the voice of the customer, and based on their feedback, behavior and other sources of data, figure out how to make our product&nbsp;<em>even more awesome</em>. Sometimes &nbsp;people from the&nbsp;<em>Business</em>&nbsp;descend from the stairs, and attempt to disrupt our roadmap with short term revenue boosting ideas to hit some arbitrary revenue target they set based on&nbsp;<em>who-knows-what</em>. These ideas are generally not particularly coherent from a product perspective, but hey —&nbsp;when it generates some cash, who cares, right? Luckily, we are good at saying “no” most of the time, and manage to pursue our own roadmap.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Sadly, our roadmap is progressing slowly, because&nbsp;<em>Engineering</em>&nbsp;cannot keep up. We're not very convinced our Engineering guys know what they're doing, because they keep complaining about all the&nbsp;<em>technical debt</em>&nbsp;that's there, and that we need to stop&nbsp;<em>everything</em>&nbsp;to pay it. “Who generated all that technical debt?” we are wondering in Product. Apparently, the Engineering guys cannot write code without having to fix it later, and as a result we cannot build the features that our users are clamoring for and tested so well in our UX lab. On top of that, Engineering generates bugs all over, &nbsp;generates technical debt, and then proceed to complain about how&nbsp;<em>we're</em>&nbsp;not prioritizing&nbsp;<em>them</em>&nbsp;cleaning up their mess.&nbsp;<em>Engineering</em>&nbsp;in this company is a big disappointment.</p>
<!-- /wp:paragraph -->

<!-- wp:image -->
<figure class="wp-block-image"><img src="https://100x.engineering/content/images/2019/12/image-4.png" alt="" /></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>In&nbsp;<em>Engineering</em>, we do the real work. We're writing the code that keeps this company afloat. No code, no product; no product, no business. Simple as that. But we do not get the&nbsp;<em>space</em>&nbsp;to do our job properly. There's always product people chasing our ass, asking us to&nbsp;<em>move faster</em>, to cut corners, and asking what&nbsp;<em>customer value</em>&nbsp;unit tests really provide. We tried to explain technical debt, but we're not really sure they understand the cost of all the gymnastics and duck tape we apply to hit their arbitrary deadlines.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Part of the challenge in&nbsp;<em>Engineering</em>&nbsp;is that our users cannot use the cool features we build some of the time, because our&nbsp;<em>Infrastructure</em>&nbsp;guys cannot seem to keep a simple server running. We deliver them a nice package — and all they have to do is use off the shelf tools — tools that every other company in the universe is also using — and run our software. Yet somehow, this proves too difficult. One day the database goes down, another it turns out they seem to be too slow to provision new servers to handle all the users that want to use awesome new feature.&nbsp;<em>Infrastructure</em>&nbsp;in this company is a big disappointment.</p>
<!-- /wp:paragraph -->

<!-- wp:image -->
<figure class="wp-block-image"><img src="https://100x.engineering/content/images/2019/12/image-5.png" alt="" /></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>We in&nbsp;<em>Infrastructure</em>&nbsp;are the real warriors in this company. While engineering checks out at 5pm, and is having a fun family time, we're on call trying to somehow keep this monstrous piece of “art” that they produced running. It's as inefficient as&nbsp;<em>f***</em>, executes like 200 database queries per request, and then people are surprised we incur so much infrastructure cost because we need the&nbsp;<em>largest machines in the universe</em>&nbsp;to even keep this application running for a few hours before it collapses under its enormous memory leaks. Then, they asks us to reduce infrastructure cost, even though 80% of that cost comes&nbsp;<em>debug logs</em>&nbsp;saturating the network, and all the petabytes of storage it requires to keep them even for a week. Are these people completely blind? This company is a dead end.&nbsp;<em>Exit now.</em></p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>Sounds familiar at any level? Chances are that at least&nbsp;<em>some</em>&nbsp;of this may be going on in your company as we speak,&nbsp;<em>unless</em>&nbsp;you are structured to address it.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>So, what to do?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Invest in tables. Big tables.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The problem largely originates from&nbsp;<a href="https://100x.engineering/from-the-armchair/">the&nbsp;<em>distance trap</em></a>. As I wrote in that article:</p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p>Distance simplifies things.</p><p>On the abstract, everything is easy; when you get down to the detail, hardly anything is.</p></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph -->
<p>So, what to do?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Well, how do you reduce distance?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Get closer.</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>When you think about it, this is what&nbsp;<em>DevOps</em>&nbsp;is about to a large extent. The old model was to have separate engineering and operations teams. This naturally lead to distance, leading to lack of empathy, lack of mutual understanding and lack of productive collaboration. In DevOps,&nbsp;you bring both together in one team,&nbsp;<em>sitting at the same table</em>.&nbsp;<em>Engineering&nbsp;</em>becomes painfully aware of how their code operates in production, and the whole team owns the development and operational aspects of the software&nbsp;<em>together</em>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Agile teams in turn, pull&nbsp;<em>Product</em>&nbsp;and&nbsp;<em>Engineering</em>&nbsp;together. Through&nbsp;<a href="https://100x.engineering/the-100x-engineer/">mutual challenging of each other's ideas</a>, and sitting at the same table,&nbsp;<em>Engineering</em>becomes more aware of the rationale behind the features to be built and what may possibly happen in the future.&nbsp;<em>Product</em>&nbsp;becomes more aware of bottlenecks, and gets visibility in trade-offs and their short and long term impact.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><a href="https://100x.engineering/time-to-value-metric/">AWS takes the next natural step</a>&nbsp;with&nbsp;<em>BusProdDevOps</em>, putting Business, Product, Engineering and Infrastructure together in one team, sitting at the same table. Business sees an opportunity, all functions analyze&nbsp;<em>together</em>&nbsp;what the options and the trade-offs between the options are at&nbsp;<em>all levels</em>, and well-considered decisions are made.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>It's so obvious, yet so rare.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Big tables.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Big tables, and the right people sitting at them. People that want to understand the other perspectives. Business who&nbsp;<em>wants to understand</em>&nbsp;the complexity of Product, Engineering and Infrastructure. Product&nbsp;<em>who wants to understand</em>the urgency with which the Business operates and the financial state of the company. And wants to understand all other functions, and gives feedback on what things are technically easy, what things are hard, and what the consequences are of decisions long and short term. And Infrastructure who can estimate potential scaling issues that may come out of all of this.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>They all sit at that table. Perhaps more than seems necessary, until the gap closes. And all appreciate the full extent of the complexity of this company.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1915</wp:post_id>
		<wp:post_date>2019-12-21 21:46:27</wp:post_date>
		<wp:post_date_gmt>2019-12-21 19:46:27</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>a-seat-at-the-table</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="100xengineer"><![CDATA[100xengineer]]></category>
		<category domain="category" nicename="articles"><![CDATA[Articles]]></category>
		<category domain="post_tag" nicename="highlight"><![CDATA[highlight]]></category>
		<wp:postmeta>
			<wp:meta_key>_wp_old_date</wp:meta_key>
			<wp:meta_value><![CDATA[2020-05-02]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[43757583701]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>timeline_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1588445291]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>The Power of the Narrative</title>
		<link>http://zef.me/2019/12/17/the-power-of-the-narrative/</link>
		<pubDate>Tue, 17 Dec 2019 07:00:00 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/?p=1940</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>One thing I learned to do before giving a talk is to <em>practice it beforehand</em>. I figured this out in high school after blacking out fairly consistently during presentations in front of the class. A harsh start to my career as a speaker.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To avoid this from happening again, I would practice presentations before, by presenting them to with the wall as my audience. It was <em>shocking</em> how often slides with their nice pictures, and occasional bullet point, seemed perfectly logical and sensible while editing them in Powerpoint, until I started to narrate them, and they made no sense at all.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Quality goes even more up when actually <em>writing the narrative down</em>. For instance, the quality of content of my talk version of <em>the 100x engineer</em> improved a lot after forcing myself to <a href="https://100x.engineering/the-100x-engineer/">write it down</a>. While I would never present by reading text word-by-word, the <em>act</em> of writing it down helps and improves quality and validating the logical connections between the parts.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>As with many things in life, Jeff Bezos already <a href="https://slab.com/blog/jeff-bezos-writing-management-strategy/">figured all this out 15 years ago</a>. In 2004 he <strong>banned power point decks </strong>from Amazon, and forced everybody to write <strong>6 page narrative memos</strong> instead. Meetings at Amazon start with ~15 minutes of all participants reading, and only then discussing the matter and making a decision.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Bezos' rationale:</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":1937} -->
<div class="wp-block-image"><figure class="aligncenter"><img src="https://zefsmusings.files.wordpress.com/2020/05/image-03-05-2020-07-21.png" alt="" class="wp-image-1937" /></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p><em>Though Bezos admits that silently reading memos together is the “weirdest meeting culture,” he has to carve out the time because his execs are busy.</em></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><em>“If we don’t, the executives, like high school kids, will try to bluff their way through a meeting,” says the CEO at a recent Forum on Leadership. ”[The memo is] supposed to create the context for what will then be a good discussion.”
</em></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><em>(Source: <a href="https://www.cnbc.com/2018/04/23/what-jeff-bezos-learned-from-requiring-6-page-memos-at-amazon.html">CNBC</a>)</em></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The 6 page memos described are structured like a dissertation defense:</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>The context or question</li><li>Approaches to answer the question — by whom, by which method, and their conclusions</li><li>How is your attempt at answering the question different or the same from previous approaches</li><li>Now what? That is: what’s in it for the customer, the company, and how does the answer to the question enable innovation on behalf of the customer?<br></li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>While we do not ban power points in <a href="https://www.olxgroup.com/">OLX</a> (yet), today, we do have two types of meetings in place where a written narrative is expected:</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>Our RFC-based architecture review process</li><li>Incident reports<br></li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Initially, both meetings started out without high expectations on written documentation. The idea was to basically sketch out planned services (in case of the architecture RFCs) on a whiteboard, or talk though the incident and do <em><a href="https://tech.olx.com/making-mistakes-productive-using-the-five-whys-bacad905b535">5 why's analysis</a>.</em> However, quite quickly we realized our meetings would be much more effective if we'd all get a narrative document beforehand laying out all the facts and plans. In addition, adding a <em>predefined structure</em> to those documents would guide the author on what to talk <em>and think</em> about, before bringing it to the group.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Eventually this evolved into (in our case) Confluence templates for both these types of documents. Here's the one for our incident reports:</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":1938} -->
<div class="wp-block-image"><figure class="aligncenter"><img src="https://zefsmusings.files.wordpress.com/2020/05/image-03-05-2020-07-21-1.png" alt="" class="wp-image-1938" /></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Our architecture RFC template is more elaborate, but guides the author through explaining the <em>goals and non-goals, business context, proposed design and technology stack, timeline for implementation, dependencies, alternative designs considered, operational aspects of the change, security/privacy concerns</em>, and <em>risks</em>. After submitting the document, anybody can comment, challenge and ask questions. Quite often the outcome is that no meeting is required at all. And who doesn't love <em>no meeting</em>?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>One of our product managers used to work for Amazon and also runs his monthly stakeholder update meetings by running through a pre-shared narrative document. These are very effective meetings.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Our experience confirms that there's a lot of value in getting people to write down their plans in plain English, as a narrative. It is a good exercise for the team, making sure they consider all aspect of their solution (or incident), and it creates space for others to understand what work is planned, to challenge it, to point out obvious gaps or propose alternatives. It is also a good way to separate the <a href="https://100x.engineering/the-well-considered-decision/">well-considered decisions</a> from the more ad-hoc <em>YOLO</em> moves.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In general, writing is a valuable skill to possess, yet not everybody has the talent for it. <a href="https://www.sec.gov/Archives/edgar/data/1018724/000119312518121161/d456916dex991.htm">Jeff Bezos on the topic</a>:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><em>Surely to write a world class memo, you have to be an extremely skilled writer? Is it another required element? In my view, not so much, at least not for the individual in the context of teams. The football coach doesn’t need to be able to throw, and a film director doesn’t need to be able to act. But they both do need to recognize high standards for those things and teach realistic expectations on scope. Even in the example of writing a six-page memo, that’s teamwork. Someone on the team needs to have the skill, but it doesn’t have to be you. (As a side note, by tradition at Amazon, authors’ names never appear on the memos – the memo is from the whole team.)</em></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>As the end of the year is approaching, in my group we are considering if we want to expand the role of the written narratives beyond where we use it today. Requiring written narratives for big architectural changes and incidents has had a positive impact on the quality of the decisions we make, especially in the area of software architecture. Setting quarterly goals as OKRs would be an obvious next candidate for this. Today's results and plans for the next quarter are still presented on elaborate slide decks, and sometimes the connection between the two is not obvious. Perhaps that's something to tackle next...</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If you'd like to learn more about Amazon's culture of narrative writing, give these articles a read. They are listed, for your pleasure, <strong>as bullet points</strong>:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><a href="https://slab.com/blog/jeff-bezos-writing-management-strategy/">How Jeff Bezos Turned Narrative into Amazon's Competitive Advantage</a></li><li><a href="https://www.anecdote.com/2018/05/amazons-six-page-narrative-structure/">What might Amazon’s six-page narrative structure look like?</a></li><li><a href="https://www.sec.gov/Archives/edgar/data/1018724/000119312518121161/d456916dex991.htm">Jeff Bezos talking about the 6 page narrative in his yearly shareholder note</a></li><li><a href="https://use-cases.org/2018/01/03/the-evil-genius-of-the-amazon-six-page-narrative/">The Evil Genius of the Amazon Six Page Narrative</a></li></ul>
<!-- /wp:list -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1940</wp:post_id>
		<wp:post_date>2019-12-17 08:00:00</wp:post_date>
		<wp:post_date_gmt>2019-12-17 07:00:00</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>the-power-of-the-narrative</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="100xengineer"><![CDATA[100xengineer]]></category>
		<category domain="category" nicename="articles"><![CDATA[Articles]]></category>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[1939]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[43772549925]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>timeline_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1588483492]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Time to Value: The One Metric to Optimize</title>
		<link>http://zef.me/2019/12/18/time-to-value-the-one-metric-to-optimize/</link>
		<pubDate>Wed, 18 Dec 2019 15:17:58 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">http://zefsmusings.com/?p=1957</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:image -->
<figure class="wp-block-image"><img src="https://100x.engineering/content/images/size/w2000/2019/12/innovation-at-speed-1.png" alt="Time to Value: The One Metric to Optimize" /></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p><a href="https://reinvent.awsevents.com/">Re:Invent</a>&nbsp;happened two weeks ago, and usual there was a lot of good content there. One talk I would recommend to this audience is&nbsp;<a href="https://www.youtube.com/watch?v=8ona5ZTu4_E">"Innovation at speed"</a>&nbsp;by Adrian Crockford, which gives some insight into various aspects of cloud-enabled innovation, but also explains a bit how AWS is structured internally. However, the key message is about the&nbsp;<em>Time to Value</em>&nbsp;metric:</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":1959,"sizeSlug":"large"} -->
<figure class="wp-block-image size-large"><img src="https://zefsmusings.files.wordpress.com/2020/05/image.png?w=733" alt="" class="wp-image-1959" /></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p><br>How much time does it take to go from idea to value for customers? One year? One month? One week? One day? One hour? The lower the number, the faster you can innovate. In order to head to a number in the hours, your whole process needs to be automated and streamlined end to end. If you only look at one metric to measure how fast you can innovate —&nbsp;<em>time to value</em>&nbsp;should be it.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>There's some other parts of this talk that stuck with me.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":1960,"sizeSlug":"large"} -->
<figure class="wp-block-image size-large"><img src="https://zefsmusings.files.wordpress.com/2020/05/image-1.png?w=731" alt="" class="wp-image-1960" /></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>The importance of&nbsp;<strong>company culture and values</strong>. Crockford describes Netflix and Amazon as examples.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":1958,"sizeSlug":"large"} -->
<figure class="wp-block-image size-large"><img src="https://zefsmusings.files.wordpress.com/2020/05/image.png?w=732" alt="" class="wp-image-1958" /></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p><strong>BusProdDevOps</strong>&nbsp;— While many companies are still struggling to integrate their developers and operational functions into one (DevOps), Amazon runs way ahead by merging Product and Business into their same&nbsp;<a href="https://buffer.com/resources/small-teams-why-startups-often-win-against-google-and-facebook-the-science-behind-why-smaller-teams-get-more-done">2 pizza teams</a>&nbsp;as well.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You can <a href="https://www.youtube.com/watch?v=8ona5ZTu4_E">watch the whole session on YouTube</a>. There is also a PDF small book version of this talk called <a href="https://aws.amazon.com/enterprise/executive-insights/content/cloud-for-ceos/">"Cloud for CEOs: Measure innovation with one metric"</a> (guess which metric that is).</p>
<!-- /wp:paragraph -->

<!-- wp:core-embed/youtube {"url":"https:\/\/www.youtube.com\/watch?v=8ona5ZTu4_E\u0026amp;feature=emb_title","type":"rich","providerNameSlug":"","className":"wp-embed-aspect-16-9 wp-has-aspect-ratio"} -->
<figure class="wp-block-embed-youtube wp-block-embed is-type-rich wp-embed-aspect-16-9 wp-has-aspect-ratio"><div class="wp-block-embed__wrapper">
https://www.youtube.com/watch?v=8ona5ZTu4_E&amp;feature=emb_title
</div></figure>
<!-- /wp:core-embed/youtube -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1957</wp:post_id>
		<wp:post_date>2019-12-18 16:17:58</wp:post_date>
		<wp:post_date_gmt>2019-12-18 15:17:58</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>time-to-value-the-one-metric-to-optimize</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="100xengineer"><![CDATA[100xengineer]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_wp_old_date</wp:meta_key>
			<wp:meta_value><![CDATA[2020-05-03]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[43786562517]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>timeline_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1588515577]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Engineering Manager Essential Reads (2019)</title>
		<link>http://zef.me/2019/12/16/engineering-manager-essential-reads-2019/</link>
		<pubDate>Mon, 16 Dec 2019 15:21:01 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">http://zefsmusings.com/?p=1966</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:image {"className":"is-style-default"} -->
<figure class="wp-block-image is-style-default"><img src="https://images.unsplash.com/photo-1550399105-c4db5fb85c18?ixlib=rb-1.2.1&amp;q=80&amp;fm=jpg&amp;crop=entropy&amp;cs=tinysrgb&amp;w=2000&amp;fit=max&amp;ixid=eyJhcHBfaWQiOjExNzczfQ" alt="Engineering Manager Essential Reads (2019)" /></figure>
<!-- /wp:image -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p>"I'd like to become an engineering manager one day, what books should I read?" — Anonymous</p></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph -->
<p>I have three recommendations, and they're ordered on purpose:&nbsp;</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":1967,"sizeSlug":"large"} -->
<figure class="wp-block-image size-large"><img src="https://zefsmusings.files.wordpress.com/2020/05/image.jpeg?w=316" alt="" class="wp-image-1967" /></figure>
<!-- /wp:image -->

<!-- wp:heading -->
<h2 id="the-manager-s-path-a-guide-for-tech-leaders-navigating-growth-and-change"><a href="https://www.goodreads.com/book/show/34616805-the-manager-s-path">The Manager's Path: A Guide for Tech Leaders Navigating Growth and Change</a></h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><em>by Camille Fournier</em></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This is the book to start with. It's the book I wish existed when I started my career. It starts at the individual contributor level and explains the roles and expectations all the way up there to senior tech leadership. Even for people who doubt they want to move up to management the first chapters are worth the read. My recommendation is simple: if you want to move into engineer management at any level, read this book first.&nbsp;</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":1968,"sizeSlug":"large"} -->
<figure class="wp-block-image size-large"><img src="https://zefsmusings.files.wordpress.com/2020/05/image-1.jpeg?w=318" alt="" class="wp-image-1968" /></figure>
<!-- /wp:image -->

<!-- wp:heading -->
<h2 id="an-elegant-puzzle-systems-of-engineering-management"><a href="https://www.goodreads.com/book/show/45303387-an-elegant-puzzle">An Elegant Puzzle: Systems of Engineering Management</a></h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><em>by Will Larson&nbsp;</em></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Whereas "The Manager's Path" more takes a "walking up the hierarchy" chronological approach, "An Elegant Puzzle" looks more at different challenges of the management job such as structuring organizations, cultivating the right culture, and managing people's careers. Will Larson has been in many interesting companies at interesting times of their growth (Stripe, Uber, Digg), so a lot can be learned from his experience.&nbsp;</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":1969,"sizeSlug":"large"} -->
<figure class="wp-block-image size-large"><img src="https://zefsmusings.files.wordpress.com/2020/05/image-2.jpeg?w=267" alt="" class="wp-image-1969" /></figure>
<!-- /wp:image -->

<!-- wp:heading -->
<h2 id="managing-humans-biting-and-humorous-tales-of-a-software-engineering-manager"><a href="https://www.goodreads.com/book/show/1317946.Managing_Humans">Managing Humans: Biting and Humorous Tales of a Software Engineering Manager</a></h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><em>by Michael Lopp</em></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Michael Lopp, on the Internet more widely known as&nbsp;<a href="https://randsinrepose.com/">"rands"</a>&nbsp;has been blogging on engineering management topics for a long time. Like Will Larson, Lopp has had an interesting career (Apple, Pinterest, Slack) and a great writing style. Rather than a well-structured narrative, I consider this book more of a "random grab bag" of great engineering management insight. Absolutely recommended.&nbsp;</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1966</wp:post_id>
		<wp:post_date>2019-12-16 16:21:01</wp:post_date>
		<wp:post_date_gmt>2019-12-16 15:21:01</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>engineering-manager-essential-reads-2019</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="100xengineer"><![CDATA[100xengineer]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_wp_old_date</wp:meta_key>
			<wp:meta_value><![CDATA[2020-05-03]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[43786634304]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>timeline_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1588515710]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Facebook</title>
		<link>http://zef.me/2020/05/01/facebook/</link>
		<pubDate>Fri, 01 May 2020 20:35:51 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2020/05/01/facebook/</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>23</wp:post_id>
		<wp:post_date>2020-05-01 20:35:51</wp:post_date>
		<wp:post_date_gmt>2020-05-01 20:35:51</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>facebook</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>1</wp:menu_order>
		<wp:post_type>nav_menu_item</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="nav_menu" nicename="social"><![CDATA[Social]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_type</wp:meta_key>
			<wp:meta_value><![CDATA[custom]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_menu_item_parent</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object_id</wp:meta_key>
			<wp:meta_value><![CDATA[23]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object</wp:meta_key>
			<wp:meta_value><![CDATA[custom]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_target</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_classes</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_xfn</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_url</wp:meta_key>
			<wp:meta_value><![CDATA[https://facebook.com]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Twitter</title>
		<link>http://zef.me/2020/05/01/twitter/</link>
		<pubDate>Fri, 01 May 2020 20:35:51 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2020/05/01/twitter/</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>24</wp:post_id>
		<wp:post_date>2020-05-01 20:35:51</wp:post_date>
		<wp:post_date_gmt>2020-05-01 20:35:51</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>twitter</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>2</wp:menu_order>
		<wp:post_type>nav_menu_item</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="nav_menu" nicename="social"><![CDATA[Social]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_type</wp:meta_key>
			<wp:meta_value><![CDATA[custom]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_menu_item_parent</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object_id</wp:meta_key>
			<wp:meta_value><![CDATA[24]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object</wp:meta_key>
			<wp:meta_value><![CDATA[custom]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_target</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_classes</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_xfn</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_url</wp:meta_key>
			<wp:meta_value><![CDATA[https://twitter.com]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Instagram</title>
		<link>http://zef.me/2020/05/01/instagram/</link>
		<pubDate>Fri, 01 May 2020 20:35:52 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2020/05/01/instagram/</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>25</wp:post_id>
		<wp:post_date>2020-05-01 20:35:52</wp:post_date>
		<wp:post_date_gmt>2020-05-01 20:35:52</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>instagram</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>3</wp:menu_order>
		<wp:post_type>nav_menu_item</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="nav_menu" nicename="social"><![CDATA[Social]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_type</wp:meta_key>
			<wp:meta_value><![CDATA[custom]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_menu_item_parent</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object_id</wp:meta_key>
			<wp:meta_value><![CDATA[25]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object</wp:meta_key>
			<wp:meta_value><![CDATA[custom]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_target</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_classes</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_xfn</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_url</wp:meta_key>
			<wp:meta_value><![CDATA[https://instagram.com]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Pinterest</title>
		<link>http://zef.me/2020/05/01/pinterest/</link>
		<pubDate>Fri, 01 May 2020 20:35:52 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2020/05/01/pinterest/</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>26</wp:post_id>
		<wp:post_date>2020-05-01 20:35:52</wp:post_date>
		<wp:post_date_gmt>2020-05-01 20:35:52</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>pinterest</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>4</wp:menu_order>
		<wp:post_type>nav_menu_item</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="nav_menu" nicename="social"><![CDATA[Social]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_type</wp:meta_key>
			<wp:meta_value><![CDATA[custom]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_menu_item_parent</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object_id</wp:meta_key>
			<wp:meta_value><![CDATA[26]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object</wp:meta_key>
			<wp:meta_value><![CDATA[custom]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_target</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_classes</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_xfn</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_url</wp:meta_key>
			<wp:meta_value><![CDATA[https://pinterest.com]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>WordPress</title>
		<link>http://zef.me/2020/05/01/wordpress/</link>
		<pubDate>Fri, 01 May 2020 20:35:52 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2020/05/01/wordpress/</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>27</wp:post_id>
		<wp:post_date>2020-05-01 20:35:52</wp:post_date>
		<wp:post_date_gmt>2020-05-01 20:35:52</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>wordpress</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>5</wp:menu_order>
		<wp:post_type>nav_menu_item</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="nav_menu" nicename="social"><![CDATA[Social]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_type</wp:meta_key>
			<wp:meta_value><![CDATA[custom]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_menu_item_parent</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object_id</wp:meta_key>
			<wp:meta_value><![CDATA[27]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object</wp:meta_key>
			<wp:meta_value><![CDATA[custom]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_target</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_classes</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_xfn</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_url</wp:meta_key>
			<wp:meta_value><![CDATA[https://wordpress.com]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Placeholder Image</title>
		<link>http://zef.me/placeholder-image/</link>
		<pubDate>Fri, 01 May 2020 20:35:52 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">http://zefsmusings.files.wordpress.com/2020/05/qi-bin-w4hbafegiac-unsplash.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>28</wp:post_id>
		<wp:post_date>2020-05-01 22:35:52</wp:post_date>
		<wp:post_date_gmt>2020-05-01 20:35:52</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>placeholder-image</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://zefsmusings.files.wordpress.com/2020/05/qi-bin-w4hbafegiac-unsplash.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/d1d/176754826/files/2020/05/qi-bin-w4hbafegiac-unsplash.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:1600;s:6:"height";i:1066;s:4:"file";s:104:"/home/wpcom/public_html/wp-content/blogs.dir/d1d/176754826/files/2020/05/qi-bin-w4hbafegiac-unsplash.jpg";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:50995;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>0*8FXDNOR_M98xNebg</title>
		<link>http://zef.me/2013/04/23/firefox-os-its-all-about-the-apps/08fxdnor_m98xnebg/</link>
		<pubDate>Sat, 02 May 2020 03:45:53 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">http://zefsmusings.files.wordpress.com/2013/04/31422-08fxdnor_m98xnebg.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1782</wp:post_id>
		<wp:post_date>2020-05-02 05:45:53</wp:post_date>
		<wp:post_date_gmt>2020-05-02 03:45:53</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>08fxdnor_m98xnebg</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>205</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://zefsmusings.files.wordpress.com/2013/04/31422-08fxdnor_m98xnebg.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/d1d/176754826/files/2013/04/31422-08fxdnor_m98xnebg.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:640;s:6:"height";i:320;s:4:"file";s:100:"/home/wpcom/public_html/wp-content/blogs.dir/d1d/176754826/files/2013/04/31422-08fxdnor_m98xnebg.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:177039;}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_media_download_success</wp:meta_key>
			<wp:meta_value><![CDATA[1588391153]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_original_import_url</wp:meta_key>
			<wp:meta_value><![CDATA[https://cdn-images-1.medium.com/max/800/0*8FXDNOR_M98xNebg.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>pre_import_url</wp:meta_key>
			<wp:meta_value><![CDATA[https://cdn-images-1.medium.com/max/800/0*8FXDNOR_M98xNebg.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>import_url_remap</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:62:"https://cdn-images-1.medium.com/max/800/0*8FXDNOR_M98xNebg.png";s:68:"http://zefme.files.wordpress.com/2013/04/31422-08fxdnor_m98xnebg.png";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>auto_import</wp:meta_key>
			<wp:meta_value><![CDATA[https://cdn-images-1.medium.com/max/800/0*8FXDNOR_M98xNebg.png]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>0*Jt5Z6xp6o_Pqvef4</title>
		<link>http://zef.me/2013/04/23/firefox-os-its-all-about-the-apps/0jt5z6xp6o_pqvef4/</link>
		<pubDate>Sat, 02 May 2020 03:45:54 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">http://zefsmusings.files.wordpress.com/2013/04/b2019-0jt5z6xp6o_pqvef4.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1783</wp:post_id>
		<wp:post_date>2020-05-02 05:45:54</wp:post_date>
		<wp:post_date_gmt>2020-05-02 03:45:54</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>0jt5z6xp6o_pqvef4</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>205</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://zefsmusings.files.wordpress.com/2013/04/b2019-0jt5z6xp6o_pqvef4.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/d1d/176754826/files/2013/04/b2019-0jt5z6xp6o_pqvef4.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:640;s:6:"height";i:459;s:4:"file";s:100:"/home/wpcom/public_html/wp-content/blogs.dir/d1d/176754826/files/2013/04/b2019-0jt5z6xp6o_pqvef4.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:168490;}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_media_download_success</wp:meta_key>
			<wp:meta_value><![CDATA[1588391154]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_original_import_url</wp:meta_key>
			<wp:meta_value><![CDATA[https://cdn-images-1.medium.com/max/800/0*Jt5Z6xp6o_Pqvef4.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>pre_import_url</wp:meta_key>
			<wp:meta_value><![CDATA[https://cdn-images-1.medium.com/max/800/0*Jt5Z6xp6o_Pqvef4.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>import_url_remap</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:62:"https://cdn-images-1.medium.com/max/800/0*Jt5Z6xp6o_Pqvef4.png";s:68:"http://zefme.files.wordpress.com/2013/04/b2019-0jt5z6xp6o_pqvef4.png";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>auto_import</wp:meta_key>
			<wp:meta_value><![CDATA[https://cdn-images-1.medium.com/max/800/0*Jt5Z6xp6o_Pqvef4.png]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>cropped-qi-bin-w4hbafegiac-unsplash</title>
		<link>http://zef.me/cropped-qi-bin-w4hbafegiac-unsplash/</link>
		<pubDate>Sat, 02 May 2020 04:29:49 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">http://zefsmusings.files.wordpress.com/2020/05/cropped-qi-bin-w4hbafegiac-unsplash.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1785</wp:post_id>
		<wp:post_date>2020-05-02 06:29:49</wp:post_date>
		<wp:post_date_gmt>2020-05-02 04:29:49</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>cropped-qi-bin-w4hbafegiac-unsplash</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://zefsmusings.files.wordpress.com/2020/05/cropped-qi-bin-w4hbafegiac-unsplash.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/d1d/176754826/files/2020/05/cropped-qi-bin-w4hbafegiac-unsplash.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:1063;s:6:"height";i:1063;s:4:"file";s:112:"/home/wpcom/public_html/wp-content/blogs.dir/d1d/176754826/files/2020/05/cropped-qi-bin-w4hbafegiac-unsplash.jpg";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:138361;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Dude, another site!?</title>
		<link>http://zef.me/2020/05/02/dude-another-site/</link>
		<pubDate>Sat, 02 May 2020 16:25:21 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">http://zefsmusings.com/?p=1800</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p><em><strong>TL;DR:</strong> I’m deprecating Zef.me but it’s somewhat stuck on Medium with annoying to migrate links. The 100x Engineer content may move here too in time. </em></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I know. I launched <a href="http://100x.engineering">The 100x Engineer</a> a while ago, and I’ve had <a href="https://zef.me">Zef.me</a> (previously under a different domain) for over 15 years.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>But actually, <em>Zef’s Musings</em> isn’t something new as people in OLX will know. I’ve been using a Facebook Workplace space with this name inside of OLX for a while as my place to brain dump work in progress ideas, as well as other stuff I’ve been up to. The way I solve problems often involves me first writing it down to somehow structure it. If it’s written down anyway, why not share it with a chance of getting some outside input? It’s been working well for me. Some of the content I wrote in Musings before was OLX internal only, but many ideas are shareable and may be interesting to some.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Last week I <a href="https://zef.me/zefs-book-club-no-more-feedback-8a17485bd276">published a part of my “musing”</a> posts on Zef.me and got some useful pointers in responses to it <a href="https://www.linkedin.com/posts/zefhemel_zefs-book-club-no-more-feedback-activity-6659717970815709189-4K31">on LinkedIn</a>. This reinforced my idea of doing this type of thinking or musing, if you will, publicly more often. I tend to be pretty transparent anyway, so why not. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Now obviously, I don’t need to start a whole new website for that. I have Zef.me, right? Yes, except Zef.me is hosted on <a href="http://www.medium.com">Medium</a>, and Medium has been going down hill for a while. The level of pushing towards their subscriber-only content and push for publishers to publish behind their paywall has become increasingly annoying. So, I’ve been thinking of moving out for a while.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>But where? One out was The 100x Engineer which is running on <a href="https://ghost.org/">Ghost</a>. Ghost is a nice open source platform. But, it’s 2020 and I’m honestly no longer willing to deploy a VM somewhere running some node.js or whatever platform, manually managing backups, failover, scaling etc. Not gonna do it. Therefore, The 100x Engineer is hosted on Ghost’s commercial offering. It’s pretty sleek. It’s also pretty darn expensive at around $30 per month. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>What else? Colleagues are running Gatsby-based sites with fancy Github based workflows. They write some templates with React, git push some markdown, generating some static files that are pushed to a CDN, and <em>boom</em>: you have an ultra cheap and scalable site. Call me lazy, but too much work for me. I want an off-the-shelf, low-setup workflow that doesn’t involve me using git. You’d be surprised how often I write stuff on my phone (this post included) and publish it from there. I need low friction.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>What else? Wordpress. I’ve used it in the past. For some years Zef.me ran it, on some VPS that rented. As long as as I maintained it, it was ok. I ran WP sites for my family on the same machine, they got hacked occasionally. That wasn’t cool. I updated my WP install, so things were fine. Except when a few of my posts ended up on Hacker News and Reddit. A cool experience, but it also meant I struggled to keep the site up due the insane account of traffic that WP, at least the way I had it set up, couldn’t handle. Not an experience I’d like to repeat. And again. It’s 2020, I’m not going to install PHP, Apache and MySQL on a VM. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>So... Zef’s Musings is hosted on Wordpress.com, the commercially hosted version. I don’t have to worry about updates, security, or scaling, or backups. There are reasonable enough themes out of the box. Integration with Ulysses, which I use for most of my non-Google doc writing, is there as well. And the cost is much more reasonable than Ghost. Yes, Wordpress is the type of you-don’t-want-to-know-how-the-sausage-is-made platform. But sometimes worse is better. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>What about The 100x Engineer? We’ll see, perhaps I’ll consolidate everything back here at some point. Or use that for more mature ideas. We’ll see. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I’ve now migrated all Zef.me posts here, but couldn’t migrate the permalinks. Hence this new domain. I’ll probably let Zef.me die in time and redirect it here. </p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1800</wp:post_id>
		<wp:post_date>2020-05-02 18:25:21</wp:post_date>
		<wp:post_date_gmt>2020-05-02 16:25:21</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>dude-another-site</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[11]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[43753556846]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>timeline_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1588436724]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Home</title>
		<link>http://zef.me/?page_id=1805</link>
		<pubDate></pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/?page_id=1805</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading {"align":"center","level":1} -->
<h1 class="has-text-align-center">We are Bālāsana, a yoga studio based in Brooklyn, NY.</h1>
<!-- /wp:heading -->

<!-- wp:spacer {"height":32} -->
<div style="height:32px;" aria-hidden="true" class="wp-block-spacer"></div>
<!-- /wp:spacer -->

<!-- wp:image {"align":"wide","id":17,"sizeSlug":"large"} -->
<figure class="wp-block-image alignwide size-large"><img src="https://balasanademo.files.wordpress.com/2019/08/acro-acro-yoga-adult-1881997.jpg?w=1024" alt="" class="wp-image-17" /></figure>
<!-- /wp:image -->

<!-- wp:spacer {"height":32} -->
<div style="height:32px;" aria-hidden="true" class="wp-block-spacer"></div>
<!-- /wp:spacer -->

<!-- wp:paragraph {"align":"center","fontSize":"large"} -->
<p class="has-text-align-center has-large-font-size">In our beautiful studio, learn from our workshops, restore your body and soul with our classes, and feel better about yourself.</p>
<!-- /wp:paragraph -->

<!-- wp:spacer {"height":32} -->
<div style="height:32px;" aria-hidden="true" class="wp-block-spacer"></div>
<!-- /wp:spacer -->

<!-- wp:columns {"verticalAlignment":"center","align":"wide"} -->
<div class="wp-block-columns alignwide are-vertically-aligned-center"><!-- wp:column {"verticalAlignment":"center"} -->
<div class="wp-block-column is-vertically-aligned-center"><!-- wp:heading {"level":4} -->
<h4>Our Classes</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The studio runs daily classes, where all levels are welcome. But if you’re a total beginner then we offer basic classes to help you find the confidence you need to get to know your body.</p>
<!-- /wp:paragraph -->

<!-- wp:button -->
<div class="wp-block-button"><a class="wp-block-button__link" href="https://balasanademo.wordpress.com/classes/">View Classes</a></div>
<!-- /wp:button --></div>
<!-- /wp:column -->

<!-- wp:column {"verticalAlignment":"center"} -->
<div class="wp-block-column is-vertically-aligned-center"><!-- wp:image {"id":23,"sizeSlug":"large"} -->
<figure class="wp-block-image size-large"><img src="https://balasanademo.files.wordpress.com/2019/08/beautiful-beauty-blond-hair-1882004.jpg?w=1024" alt="" class="wp-image-23" /></figure>
<!-- /wp:image --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:spacer {"height":64} -->
<div style="height:64px;" aria-hidden="true" class="wp-block-spacer"></div>
<!-- /wp:spacer -->

<!-- wp:cover {"url":"https:\/\/balasanademo.files.wordpress.com\/2019\/08\/acro-yoga-active-balance-1881993.jpg","id":39,"dimRatio":40,"customOverlayColor":"#000000","align":"full"} -->
<div class="wp-block-cover alignfull has-background-dim-40 has-background-dim" style="background-image:url('https://balasanademo.files.wordpress.com/2019/08/acro-yoga-active-balance-1881993.jpg');background-color:#000000;"><div class="wp-block-cover__inner-container"><!-- wp:paragraph {"align":"center","fontSize":"huge"} -->
<p class="has-text-align-center has-huge-font-size"><strong>For more general information on getting started and yoga as a lifestyle, please visit our&nbsp;blog.</strong></p>
<!-- /wp:paragraph -->

<!-- wp:button {"backgroundColor":"background","textColor":"foreground","align":"center"} -->
<div class="wp-block-button aligncenter"><a class="wp-block-button__link has-text-color has-foreground-color has-background has-background-background-color" href="https://balasanademo.wordpress.com/blog/">View Blog</a></div>
<!-- /wp:button --></div></div>
<!-- /wp:cover -->

<!-- wp:spacer {"height":64} -->
<div style="height:64px;" aria-hidden="true" class="wp-block-spacer"></div>
<!-- /wp:spacer -->

<!-- wp:columns {"verticalAlignment":"center","align":"wide"} -->
<div class="wp-block-columns alignwide are-vertically-aligned-center"><!-- wp:column {"verticalAlignment":"center"} -->
<div class="wp-block-column is-vertically-aligned-center"><!-- wp:heading {"level":4} -->
<h4>Our Teachers</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Our instructors are all different, with diverse lives, styles and backgrounds but what is consistent is that all of them are kind, committed and inspirational.</p>
<!-- /wp:paragraph -->

<!-- wp:button -->
<div class="wp-block-button"><a class="wp-block-button__link" href="https://balasanademo.wordpress.com/teachers/">View Teachers</a></div>
<!-- /wp:button --></div>
<!-- /wp:column -->

<!-- wp:column {"verticalAlignment":"center"} -->
<div class="wp-block-column is-vertically-aligned-center"><!-- wp:image {"id":26,"sizeSlug":"large"} -->
<figure class="wp-block-image size-large"><img src="https://balasanademo.files.wordpress.com/2019/08/balance-clothes-colors-1882003.jpg?w=750" alt="" class="wp-image-26" /></figure>
<!-- /wp:image --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:spacer {"height":64} -->
<div style="height:64px;" aria-hidden="true" class="wp-block-spacer"></div>
<!-- /wp:spacer -->

<!-- wp:group {"backgroundColor":"background-light","align":"full"} -->
<div class="wp-block-group alignfull has-background-light-background-color has-background"><div class="wp-block-group__inner-container"><!-- wp:spacer {"height":32} -->
<div style="height:32px;" aria-hidden="true" class="wp-block-spacer"></div>
<!-- /wp:spacer -->

<!-- wp:columns {"align":"wide"} -->
<div class="wp-block-columns alignwide"><!-- wp:column -->
<div class="wp-block-column"><!-- wp:heading {"align":"center","level":6,"textColor":"primary"} -->
<h6 class="has-primary-color has-text-color has-text-align-center">Discovery Pass (Best Value)</h6>
<!-- /wp:heading -->

<!-- wp:paragraph {"align":"center","textColor":"primary","fontSize":"huge"} -->
<p class="has-text-color has-text-align-center has-huge-font-size has-primary-color"><strong>$50</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"align":"center","textColor":"primary","fontSize":"small"} -->
<p class="has-text-color has-text-align-center has-small-font-size has-primary-color">3 weeks validity</p>
<!-- /wp:paragraph -->

<!-- wp:button {"align":"center"} -->
<div class="wp-block-button aligncenter"><a class="wp-block-button__link" href="https://balasanademo.wordpress.com/classes/">Read More</a></div>
<!-- /wp:button --></div>
<!-- /wp:column -->

<!-- wp:column -->
<div class="wp-block-column"><!-- wp:heading {"align":"center","level":6} -->
<h6 class="has-text-align-center">Complete Beginners Course</h6>
<!-- /wp:heading -->

<!-- wp:paragraph {"align":"center","fontSize":"huge"} -->
<p class="has-text-align-center has-huge-font-size"><strong>$75</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"align":"center","fontSize":"small"} -->
<p class="has-text-align-center has-small-font-size">4-week course</p>
<!-- /wp:paragraph -->

<!-- wp:button {"backgroundColor":"foreground","textColor":"background","align":"center"} -->
<div class="wp-block-button aligncenter"><a class="wp-block-button__link has-text-color has-background-color has-background has-foreground-background-color" href="https://balasanademo.wordpress.com/classes/">Read More</a></div>
<!-- /wp:button --></div>
<!-- /wp:column -->

<!-- wp:column -->
<div class="wp-block-column"><!-- wp:heading {"align":"center","level":6} -->
<h6 class="has-text-align-center">Barre Intensity Course</h6>
<!-- /wp:heading -->

<!-- wp:paragraph {"align":"center","fontSize":"huge"} -->
<p class="has-text-align-center has-huge-font-size"><strong>$90</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"align":"center","fontSize":"small"} -->
<p class="has-text-align-center has-small-font-size">4-week course</p>
<!-- /wp:paragraph -->

<!-- wp:button {"backgroundColor":"foreground","textColor":"background","align":"center"} -->
<div class="wp-block-button aligncenter"><a class="wp-block-button__link has-text-color has-background-color has-background has-foreground-background-color" href="https://balasanademo.wordpress.com/classes/">Read More</a></div>
<!-- /wp:button --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:spacer {"height":32} -->
<div style="height:32px;" aria-hidden="true" class="wp-block-spacer"></div>
<!-- /wp:spacer --></div></div>
<!-- /wp:group -->

<!-- wp:group {"backgroundColor":"foreground-dark","align":"full"} -->
<div class="wp-block-group alignfull has-foreground-dark-background-color has-background"><div class="wp-block-group__inner-container"><!-- wp:spacer {"height":32} -->
<div style="height:32px;" aria-hidden="true" class="wp-block-spacer"></div>
<!-- /wp:spacer -->

<!-- wp:columns {"align":"wide"} -->
<div class="wp-block-columns alignwide"><!-- wp:column -->
<div class="wp-block-column"><!-- wp:heading {"textColor":"background-dark"} -->
<h2 class="has-background-dark-color has-text-color">Bālāsana</h2>
<!-- /wp:heading -->

<!-- wp:paragraph {"textColor":"background-dark"} -->
<p class="has-text-color has-background-dark-color">Founded in 2015 by Joan Smith, Bālāsana, is a renowned yoga studio based in Brooklyn, NY.</p>
<!-- /wp:paragraph --></div>
<!-- /wp:column -->

<!-- wp:column -->
<div class="wp-block-column"><!-- wp:paragraph -->
<p>Do you have questions about our yoga studio or the yoga classes we offer here?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>email@domain.com</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>(123) 456-7890</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>99 Wythe Avenue<br>Brooklyn, NY 11249</p>
<!-- /wp:paragraph --></div>
<!-- /wp:column -->

<!-- wp:column -->
<div class="wp-block-column"><!-- wp:jetpack/business-hours /--></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:spacer {"height":32} -->
<div style="height:32px;" aria-hidden="true" class="wp-block-spacer"></div>
<!-- /wp:spacer --></div></div>
<!-- /wp:group -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1805</wp:post_id>
		<wp:post_date>2020-05-02 16:07:33</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_tft_homepage_template</wp:meta_key>
			<wp:meta_value><![CDATA[pub/balasana]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Home</title>
		<link>http://zef.me/2020/05/02/home/</link>
		<pubDate>Sat, 02 May 2020 14:09:12 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2020/05/02/home/</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1809</wp:post_id>
		<wp:post_date>2020-05-02 16:09:12</wp:post_date>
		<wp:post_date_gmt>2020-05-02 14:09:12</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>home</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>1</wp:menu_order>
		<wp:post_type>nav_menu_item</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="nav_menu" nicename="primary"><![CDATA[Primary]]></category>
		<wp:postmeta>
			<wp:meta_key>_menu_item_classes</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_target</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object</wp:meta_key>
			<wp:meta_value><![CDATA[custom]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object_id</wp:meta_key>
			<wp:meta_value><![CDATA[1809]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_menu_item_parent</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_type</wp:meta_key>
			<wp:meta_value><![CDATA[custom]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_xfn</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_url</wp:meta_key>
			<wp:meta_value><![CDATA[https://www.zefsmusings.com]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_content</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Hello there 👋</title>
		<link>http://zef.me/</link>
		<pubDate>Sat, 02 May 2020 14:32:46 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">http://zefsmusings.com/?page_id=1828</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:spacer {"height":16,"className":"desktop-only"} -->
<div style="height:16px;" aria-hidden="true" class="wp-block-spacer desktop-only"></div>
<!-- /wp:spacer -->

<!-- wp:paragraph -->
<p>My name is Zef Hemel. I use writing as a tool to <strong>structure</strong> my thinking, to <strong>reflect</strong>, and <strong>adapt</strong> as a result. I’m<em> </em>transparent by nature, and have found that sharing the things I’m reading and thinking about — generally around the topics of <strong>technology</strong>, <strong>management</strong> and <strong>leadership</strong> — is not only helpful for myself, it can helpful for others as well. And often, in response, people point me to things I wasn’t yet aware of, or challenge my ideas or conclusions. Now, that sounds like win-all around. Welcome to <em>Zef’s Musings</em>.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Latest Musings 🤔</h2>
<!-- /wp:heading -->

<!-- wp:a8c/blog-posts {"className":"is-style-borders","showImage":false,"moreButton":true,"showAuthor":false,"showAvatar":false,"postsToShow":10,"typeScale":5} /-->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1828</wp:post_id>
		<wp:post_date>2020-05-02 16:32:46</wp:post_date>
		<wp:post_date_gmt>2020-05-02 14:32:46</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>home</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_coblocks_attr</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_coblocks_dimensions</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_coblocks_responsive_height</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_coblocks_accordion_ie_support</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>advanced_seo_description</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>amp_status</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>spay_email</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_starter_page_template</wp:meta_key>
			<wp:meta_value><![CDATA[blog]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>zef</title>
		<link>http://zef.me/zef/</link>
		<pubDate>Sat, 02 May 2020 14:36:34 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">http://zefsmusings.files.wordpress.com/2020/05/zef.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1834</wp:post_id>
		<wp:post_date>2020-05-02 16:36:34</wp:post_date>
		<wp:post_date_gmt>2020-05-02 14:36:34</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>zef</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://zefsmusings.files.wordpress.com/2020/05/zef.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/d1d/176754826/files/2020/05/zef.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:512;s:6:"height";i:512;s:4:"file";s:80:"/home/wpcom/public_html/wp-content/blogs.dir/d1d/176754826/files/2020/05/zef.jpg";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"1";s:8:"keywords";a:0:{}}s:8:"filesize";i:61084;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Archive</title>
		<link>http://zef.me/archive/</link>
		<pubDate>Sat, 02 May 2020 14:51:47 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">http://zefsmusings.com/?page_id=1841</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:search /-->

<!-- wp:archives {"showPostCounts":true} /-->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1841</wp:post_id>
		<wp:post_date>2020-05-02 16:51:47</wp:post_date>
		<wp:post_date_gmt>2020-05-02 14:51:47</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>archive</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_coblocks_attr</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_coblocks_dimensions</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_coblocks_responsive_height</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_coblocks_accordion_ie_support</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>advanced_seo_description</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>amp_status</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>spay_email</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_starter_page_template</wp:meta_key>
			<wp:meta_value><![CDATA[blank]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>http://zef.me/2020/05/02/1844/</link>
		<pubDate>Sat, 02 May 2020 14:55:11 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2020/05/02/1844/</guid>
		<description></description>
		<content:encoded><![CDATA[ ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1844</wp:post_id>
		<wp:post_date>2020-05-02 16:55:11</wp:post_date>
		<wp:post_date_gmt>2020-05-02 14:55:11</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>1844</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>3</wp:menu_order>
		<wp:post_type>nav_menu_item</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="nav_menu" nicename="primary"><![CDATA[Primary]]></category>
		<wp:postmeta>
			<wp:meta_key>_menu_item_type</wp:meta_key>
			<wp:meta_value><![CDATA[post_type]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_menu_item_parent</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object_id</wp:meta_key>
			<wp:meta_value><![CDATA[1841]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object</wp:meta_key>
			<wp:meta_value><![CDATA[page]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_target</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_classes</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_xfn</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_url</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_content</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>1*Yx2ZaQ50ZDCUsG0jqiZODw</title>
		<link>http://zef.me/2019/08/05/on-paper/1yx2zaq50zdcusg0jqizodw/</link>
		<pubDate>Sat, 02 May 2020 18:22:47 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">http://zefsmusings.files.wordpress.com/2019/08/51aec-1yx2zaq50zdcusg0jqizodw.jpeg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1868</wp:post_id>
		<wp:post_date>2020-05-02 20:22:47</wp:post_date>
		<wp:post_date_gmt>2020-05-02 18:22:47</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>1yx2zaq50zdcusg0jqizodw</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>36</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://zefsmusings.files.wordpress.com/2019/08/51aec-1yx2zaq50zdcusg0jqizodw.jpeg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/d1d/176754826/files/2019/08/51aec-1yx2zaq50zdcusg0jqizodw.jpeg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:800;s:6:"height";i:431;s:4:"file";s:107:"/home/wpcom/public_html/wp-content/blogs.dir/d1d/176754826/files/2019/08/51aec-1yx2zaq50zdcusg0jqizodw.jpeg";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:54080;}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_media_download_success</wp:meta_key>
			<wp:meta_value><![CDATA[1588443767]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_original_import_url</wp:meta_key>
			<wp:meta_value><![CDATA[https://cdn-images-1.medium.com/max/800/1*Yx2ZaQ50ZDCUsG0jqiZODw.jpeg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>pre_import_url</wp:meta_key>
			<wp:meta_value><![CDATA[https://cdn-images-1.medium.com/max/800/1*Yx2ZaQ50ZDCUsG0jqiZODw.jpeg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>import_url_remap</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:69:"https://cdn-images-1.medium.com/max/800/1*Yx2ZaQ50ZDCUsG0jqiZODw.jpeg";s:81:"http://zefsmusings.files.wordpress.com/2019/08/51aec-1yx2zaq50zdcusg0jqizodw.jpeg";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>auto_import</wp:meta_key>
			<wp:meta_value><![CDATA[https://cdn-images-1.medium.com/max/800/1*Yx2ZaQ50ZDCUsG0jqiZODw.jpeg]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>http://zef.me/image-03-05-2020-07-21-png/</link>
		<pubDate>Sun, 03 May 2020 05:23:59 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">http://zefsmusings.files.wordpress.com/2020/05/image-03-05-2020-07-21.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1937</wp:post_id>
		<wp:post_date>2020-05-03 07:23:59</wp:post_date>
		<wp:post_date_gmt>2020-05-03 05:23:59</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>image-03-05-2020-07-21-png</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://zefsmusings.files.wordpress.com/2020/05/image-03-05-2020-07-21.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/d1d/176754826/files/2020/05/image-03-05-2020-07-21.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:650;s:6:"height";i:214;s:4:"file";s:99:"/home/wpcom/public_html/wp-content/blogs.dir/d1d/176754826/files/2020/05/image-03-05-2020-07-21.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:96113;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>http://zef.me/image-03-05-2020-07-21-1-png/</link>
		<pubDate>Sun, 03 May 2020 05:24:00 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">http://zefsmusings.files.wordpress.com/2020/05/image-03-05-2020-07-21-1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1938</wp:post_id>
		<wp:post_date>2020-05-03 07:24:00</wp:post_date>
		<wp:post_date_gmt>2020-05-03 05:24:00</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>image-03-05-2020-07-21-1-png</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://zefsmusings.files.wordpress.com/2020/05/image-03-05-2020-07-21-1.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/d1d/176754826/files/2020/05/image-03-05-2020-07-21-1.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:675;s:6:"height";i:735;s:4:"file";s:101:"/home/wpcom/public_html/wp-content/blogs.dir/d1d/176754826/files/2020/05/image-03-05-2020-07-21-1.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:43758;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>http://zef.me/image-03-05-2020-07-23-png/</link>
		<pubDate>Sun, 03 May 2020 05:24:18 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">http://zefsmusings.files.wordpress.com/2020/05/image-03-05-2020-07-23.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1939</wp:post_id>
		<wp:post_date>2020-05-03 07:24:18</wp:post_date>
		<wp:post_date_gmt>2020-05-03 05:24:18</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>image-03-05-2020-07-23-png</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://zefsmusings.files.wordpress.com/2020/05/image-03-05-2020-07-23.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/d1d/176754826/files/2020/05/image-03-05-2020-07-23.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:2000;s:6:"height";i:1333;s:4:"file";s:99:"/home/wpcom/public_html/wp-content/blogs.dir/d1d/176754826/files/2020/05/image-03-05-2020-07-23.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:677788;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>http://zef.me/image-03-05-2020-11-56-png/</link>
		<pubDate>Sun, 03 May 2020 09:57:09 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">http://zefsmusings.files.wordpress.com/2020/05/image-03-05-2020-11-56.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1951</wp:post_id>
		<wp:post_date>2020-05-03 11:57:09</wp:post_date>
		<wp:post_date_gmt>2020-05-03 09:57:09</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>image-03-05-2020-11-56-png</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://zefsmusings.files.wordpress.com/2020/05/image-03-05-2020-11-56.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/d1d/176754826/files/2020/05/image-03-05-2020-11-56.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:720;s:6:"height";i:720;s:4:"file";s:99:"/home/wpcom/public_html/wp-content/blogs.dir/d1d/176754826/files/2020/05/image-03-05-2020-11-56.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:119817;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Your Essence</title>
		<link>http://zef.me/2020/05/03/your-essence/</link>
		<pubDate>Sun, 03 May 2020 09:58:12 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/?p=1952</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph {"dropCap":true} -->
<p class="has-drop-cap">In a <a href="https://zefsmusings.com/2020/04/25/zefs-book-club-no-more-feedback/">previous post I wrote about the "No More Feedback" book</a>. I'm not done with this topic yet. In fact, I skipped a concept Carol Sanford focuses on quite a bit in the book: <em>your essence</em>. I realize how hippie this may sound, but as usual: bear with me.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>So, dear reader, let's continue our journey to make sense of a world without feedback, a world where everything you assumed to be "right" is turned up-side-down.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>One of the great things about people, compared to machines, is that no two people are the same. Nevertheless, many of our practices in life, school and work, either explicitly, or accidentally push towards standardization: fitting a pre-defined mold. Standardized tests in school check if you hit a certain minimum sets of skills and knowledge. Competency matrices used in some companies measure you against expectations for predefined roles and ranks. While nobody will <em>explicitly</em> tell you to be like everybody else, such lists of expectations do show what we value: it's feedback. If you'd like to be a senior engineer, not only do you have to be very strong in writing code, understanding code, testing, architecture, you also need to be fully rounded individual with excellent social skills, influencing skills, display ownership, and be nice as a person, and also: give talks at conferences and write blog posts. If you excel in just a few of this areas, or better yet: areas not on the list&nbsp;— well whatever, you can do those other things too, but they may not help you. Work on those other things on the list to progress your career. Yes yes, I know it's painful, and perhaps it doesn't feel right, but... suck it up. That's life.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>As usual, I'm exaggerating slightly to make a point. Nevertheless, often, systems are optimized to value certain pre-defined, known and general personal traits and skills. Those are the things used to determine salary raises and promotions. You can add more value to the company if you like, but in the ultimate execution of such career path systems, you'll only be incentivized for what's on the job description and competency matrix like everybody else. It's only fair.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Sanford suggests a radically different model: ditch predefined roles, seniority levels, job descriptions, competency matrices. Instead, clarify the company and each individual's <em>essence</em>, and figure out how to optimally align the two.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>What is a person's "essence"? It's the thing that <em>what makes you unique</em>, different than everybody else. A company's essence is what makes the company unique: its vision, the impact it hopes to have on the world, as well as its strategy on getting there.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>When somebody interviews for a job, rather than check-listing a skillset, you're looking for a "meeting of the essences." Is the candidate interested in contributing to the company's mission? Is there obvious value in the candidate's essence to achieve it? If so: go.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I know —&nbsp;this sounds overly idealistic and perhaps out of touch with reality. But doesn't it sound <em>right</em> as well? Skills can be learned, missing experience gained, but matching a company's mission and an employee's potential in helping achieve it —&nbsp;much harder.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>As I reflect on my own career thus far I realize that only once or twice I've had jobs that were easily slotted into a well-defined career path. The first was my job as a PhD candidate (yes, in The Netherlands that's actually considered a job, it's paid and everything, at least in software engineering). Success criteria: publish X articles on ambitious conferences and perhaps a journal or two. Career path: 4 years of PhD, then a post-doc or two, associate professorship, then: full professor. I struggled a bit during my PhD. I cared more about building practical stuff that people could actually use than writing scholarly articles about it. It wasn't all that vital to me if an idea was provably novel (a large part of an academic article is about proving that what you did is different than everybody else), but more the value it provided — even if it was just a mix of existing ideas. Therefore, I did enjoy writing, but more to an audience of potential users, not academics that sometimes seemed more interested in ensuring you don't step into their space than actually new ideas. Nevertheless, I finished my PhD, I met the criteria, and then moved on. I wrote a bit about this frustration in 2011 in <a href="https://zefsmusings.com/2011/03/17/changing-the-world-one-paper-at-a-time/">"Changing the World, One Paper at a Time"</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Then, I joined a start-up. <a href="https://aws.amazon.com/cloud9/">Cloud9 IDE</a> hired me as a "senior developer," but specifically they hired me because they needed somebody who understood parsers, compilers and such. Knowledge not unique to me, but somewhat rare. There was a good match between my interest in using academic ideas (parsing, static code analysis and tooling) and the company's mission to build a kick-ass IDE that was practically usable by users. In other words: it was a good match between essences.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If you'd ask any of my current or former bosses what made them want to hire me, likely few of them will enthusiastically hold up and point to a job description or competency matrix. Most of my roles were rather unspecified. Perhaps part of my "essence" is to thrive in ambiguous situations, and somehow figure out what is needed, rather than relying on predefined job descriptions. "Our company is currently not perfect, you seem like a person that can make a difference. Do your thing." </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>So, what do we do with all of this? Do we drop our job descriptions, competency matrices and performance reviews? Academically that sounds nice, but practically speaking that may not work out or even be possible. However, perhaps it does make sense to <em>at least</em> not double down on such systems too much and leave space for some <em>essence</em>. This is tricky and perhaps controversial. The reality is that sometimes we don't get to choose whether or not to have job descriptions, or performance reviews, it's a given. However, we do have wiggle room —&nbsp;freedom if you will —&nbsp;inside of this framework. What we could do is maintain this space, perhaps even protect it. As usual, balance is everything.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1952</wp:post_id>
		<wp:post_date>2020-05-03 11:58:12</wp:post_date>
		<wp:post_date_gmt>2020-05-03 09:58:12</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>your-essence</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[11]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[43779134707]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>timeline_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1588499893]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>image</title>
		<link>http://zef.me/image/</link>
		<pubDate>Sun, 03 May 2020 14:18:08 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">http://zefsmusings.files.wordpress.com/2020/05/image.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1958</wp:post_id>
		<wp:post_date>2020-05-03 16:18:08</wp:post_date>
		<wp:post_date_gmt>2020-05-03 14:18:08</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>image</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://zefsmusings.files.wordpress.com/2020/05/image.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/d1d/176754826/files/2020/05/image.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:732;s:6:"height";i:412;s:4:"file";s:82:"/home/wpcom/public_html/wp-content/blogs.dir/d1d/176754826/files/2020/05/image.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:85121;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>image</title>
		<link>http://zef.me/image-2/</link>
		<pubDate>Sun, 03 May 2020 14:18:08 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">http://zefsmusings.files.wordpress.com/2020/05/image.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1959</wp:post_id>
		<wp:post_date>2020-05-03 16:18:08</wp:post_date>
		<wp:post_date_gmt>2020-05-03 14:18:08</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>image-2</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://zefsmusings.files.wordpress.com/2020/05/image.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/d1d/176754826/files/2020/05/image.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:733;s:6:"height";i:413;s:4:"file";s:82:"/home/wpcom/public_html/wp-content/blogs.dir/d1d/176754826/files/2020/05/image.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:137033;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>image-1</title>
		<link>http://zef.me/image-1/</link>
		<pubDate>Sun, 03 May 2020 14:18:08 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">http://zefsmusings.files.wordpress.com/2020/05/image-1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1960</wp:post_id>
		<wp:post_date>2020-05-03 16:18:08</wp:post_date>
		<wp:post_date_gmt>2020-05-03 14:18:08</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>image-1</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://zefsmusings.files.wordpress.com/2020/05/image-1.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/d1d/176754826/files/2020/05/image-1.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:731;s:6:"height";i:412;s:4:"file";s:84:"/home/wpcom/public_html/wp-content/blogs.dir/d1d/176754826/files/2020/05/image-1.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:181395;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>0*z43TuPXCcl_-RizQ</title>
		<link>http://zef.me/2019/01/02/so-you-want-to-be-an-engineering-manager/0z43tupxccl_-rizq/</link>
		<pubDate>Sun, 03 May 2020 14:20:52 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">http://zefsmusings.files.wordpress.com/2019/01/c71be-0z43tupxccl_-rizq.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1963</wp:post_id>
		<wp:post_date>2020-05-03 16:20:52</wp:post_date>
		<wp:post_date_gmt>2020-05-03 14:20:52</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>0z43tupxccl_-rizq</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>41</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://zefsmusings.files.wordpress.com/2019/01/c71be-0z43tupxccl_-rizq.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/d1d/176754826/files/2019/01/c71be-0z43tupxccl_-rizq.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:800;s:6:"height";i:419;s:4:"file";s:100:"/home/wpcom/public_html/wp-content/blogs.dir/d1d/176754826/files/2019/01/c71be-0z43tupxccl_-rizq.jpg";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:24819;}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_media_download_success</wp:meta_key>
			<wp:meta_value><![CDATA[1588515652]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_original_import_url</wp:meta_key>
			<wp:meta_value><![CDATA[https://cdn-images-1.medium.com/max/800/0*z43TuPXCcl_-RizQ.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>pre_import_url</wp:meta_key>
			<wp:meta_value><![CDATA[https://cdn-images-1.medium.com/max/800/0*z43TuPXCcl_-RizQ.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>import_url_remap</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:62:"https://cdn-images-1.medium.com/max/800/0*z43TuPXCcl_-RizQ.jpg";s:74:"http://zefsmusings.files.wordpress.com/2019/01/c71be-0z43tupxccl_-rizq.jpg";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>auto_import</wp:meta_key>
			<wp:meta_value><![CDATA[https://cdn-images-1.medium.com/max/800/0*z43TuPXCcl_-RizQ.jpg]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>image</title>
		<link>http://zef.me/image-3/</link>
		<pubDate>Sun, 03 May 2020 14:21:06 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">http://zefsmusings.files.wordpress.com/2020/05/image.jpeg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1967</wp:post_id>
		<wp:post_date>2020-05-03 16:21:06</wp:post_date>
		<wp:post_date_gmt>2020-05-03 14:21:06</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>image-3</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://zefsmusings.files.wordpress.com/2020/05/image.jpeg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/d1d/176754826/files/2020/05/image.jpeg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:316;s:6:"height";i:475;s:4:"file";s:83:"/home/wpcom/public_html/wp-content/blogs.dir/d1d/176754826/files/2020/05/image.jpeg";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:34572;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>image-1</title>
		<link>http://zef.me/image-1-2/</link>
		<pubDate>Sun, 03 May 2020 14:21:06 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">http://zefsmusings.files.wordpress.com/2020/05/image-1.jpeg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1968</wp:post_id>
		<wp:post_date>2020-05-03 16:21:06</wp:post_date>
		<wp:post_date_gmt>2020-05-03 14:21:06</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>image-1-2</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://zefsmusings.files.wordpress.com/2020/05/image-1.jpeg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/d1d/176754826/files/2020/05/image-1.jpeg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:318;s:6:"height";i:470;s:4:"file";s:85:"/home/wpcom/public_html/wp-content/blogs.dir/d1d/176754826/files/2020/05/image-1.jpeg";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:30619;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>image-2</title>
		<link>http://zef.me/image-2-2/</link>
		<pubDate>Sun, 03 May 2020 14:21:06 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">http://zefsmusings.files.wordpress.com/2020/05/image-2.jpeg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1969</wp:post_id>
		<wp:post_date>2020-05-03 16:21:06</wp:post_date>
		<wp:post_date_gmt>2020-05-03 14:21:06</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>image-2-2</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://zefsmusings.files.wordpress.com/2020/05/image-2.jpeg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/d1d/176754826/files/2020/05/image-2.jpeg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:267;s:6:"height";i:400;s:4:"file";s:85:"/home/wpcom/public_html/wp-content/blogs.dir/d1d/176754826/files/2020/05/image-2.jpeg";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:46594;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Muselets</title>
		<link>http://zef.me/?page_id=1972</link>
		<pubDate></pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">http://zefsmusings.com/?page_id=1972</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:a8c/blog-posts {"tags":[null]} /-->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1972</wp:post_id>
		<wp:post_date>2020-05-03 16:26:28</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
	</item>
	<item>
		<title>cropped-thinking.png</title>
		<link>http://zef.me/cropped-thinking-png/</link>
		<pubDate>Mon, 04 May 2020 14:36:44 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.files.wordpress.com/2020/05/cropped-thinking.png</guid>
		<description></description>
		<content:encoded><![CDATA[https://zefsmusings.files.wordpress.com/2020/05/cropped-thinking.png]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1976</wp:post_id>
		<wp:post_date>2020-05-04 16:36:44</wp:post_date>
		<wp:post_date_gmt>2020-05-04 14:36:44</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>cropped-thinking-png</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://zefsmusings.files.wordpress.com/2020/05/cropped-thinking.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/d1d/176754826/files/2020/05/cropped-thinking.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_context</wp:meta_key>
			<wp:meta_value><![CDATA[site-icon]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:512;s:6:"height";i:512;s:4:"file";s:93:"/home/wpcom/public_html/wp-content/blogs.dir/d1d/176754826/files/2020/05/cropped-thinking.png";s:5:"sizes";a:4:{s:13:"site_icon-270";a:4:{s:4:"file";s:28:"cropped-thinking-270x270.png";s:5:"width";i:270;s:6:"height";i:270;s:9:"mime-type";s:9:"image/png";}s:13:"site_icon-192";a:4:{s:4:"file";s:28:"cropped-thinking-192x192.png";s:5:"width";i:192;s:6:"height";i:192;s:9:"mime-type";s:9:"image/png";}s:13:"site_icon-180";a:4:{s:4:"file";s:28:"cropped-thinking-180x180.png";s:5:"width";i:180;s:6:"height";i:180;s:9:"mime-type";s:9:"image/png";}s:12:"site_icon-32";a:4:{s:4:"file";s:26:"cropped-thinking-32x32.png";s:5:"width";i:32;s:6:"height";i:32;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:22122;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>thinking</title>
		<link>http://zef.me/thinking-2/</link>
		<pubDate>Mon, 04 May 2020 14:38:11 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">http://zefsmusings.files.wordpress.com/2020/05/thinking-1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1978</wp:post_id>
		<wp:post_date>2020-05-04 16:38:11</wp:post_date>
		<wp:post_date_gmt>2020-05-04 14:38:11</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>thinking-2</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://zefsmusings.files.wordpress.com/2020/05/thinking-1.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/d1d/176754826/files/2020/05/thinking-1.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:254;s:6:"height";i:264;s:4:"file";s:87:"/home/wpcom/public_html/wp-content/blogs.dir/d1d/176754826/files/2020/05/thinking-1.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:55355;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>cropped-thinking-1.png</title>
		<link>http://zef.me/cropped-thinking-1-png/</link>
		<pubDate>Mon, 04 May 2020 14:38:25 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.files.wordpress.com/2020/05/cropped-thinking-1.png</guid>
		<description></description>
		<content:encoded><![CDATA[https://zefsmusings.files.wordpress.com/2020/05/cropped-thinking-1.png]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1979</wp:post_id>
		<wp:post_date>2020-05-04 16:38:25</wp:post_date>
		<wp:post_date_gmt>2020-05-04 14:38:25</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>cropped-thinking-1-png</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://zefsmusings.files.wordpress.com/2020/05/cropped-thinking-1.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/d1d/176754826/files/2020/05/cropped-thinking-1.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_context</wp:meta_key>
			<wp:meta_value><![CDATA[site-icon]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:512;s:6:"height";i:512;s:4:"file";s:95:"/home/wpcom/public_html/wp-content/blogs.dir/d1d/176754826/files/2020/05/cropped-thinking-1.png";s:5:"sizes";a:4:{s:13:"site_icon-270";a:4:{s:4:"file";s:30:"cropped-thinking-1-270x270.png";s:5:"width";i:270;s:6:"height";i:270;s:9:"mime-type";s:9:"image/png";}s:13:"site_icon-192";a:4:{s:4:"file";s:30:"cropped-thinking-1-192x192.png";s:5:"width";i:192;s:6:"height";i:192;s:9:"mime-type";s:9:"image/png";}s:13:"site_icon-180";a:4:{s:4:"file";s:30:"cropped-thinking-1-180x180.png";s:5:"width";i:180;s:6:"height";i:180;s:9:"mime-type";s:9:"image/png";}s:12:"site_icon-32";a:4:{s:4:"file";s:28:"cropped-thinking-1-32x32.png";s:5:"width";i:32;s:6:"height";i:32;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:149802;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>The Great Decision Purge</title>
		<link>http://zef.me/2020/05/04/the-great-decision-purge/</link>
		<pubDate>Mon, 04 May 2020 17:54:21 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/?p=1980</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph {"dropCap":true} -->
<p class="has-drop-cap">Sorry for the link bait title. It was either this or “27 ideas on how to make better decisions,” and I've developed a spam filter in my brain that filters out titles with numbers in them. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Ok, let's go on topic.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>A while ago I wrote about <a href="https://zefsmusings.com/2018/02/02/the-well-considered-decision/">well-considered decisions</a>. I argued documenting decisions in a somewhat structured way is a great way to create trust and document the rationale behind things. Later I wrote about <a href="https://zefsmusings.com/2019/12/17/the-power-of-the-narrative/">Amazon’s culture of writing narrative memos to make decisions</a>. Then, I wrote about <a href="https://zefsmusings.com/2020/04/25/zefs-book-club-no-more-feedback/">the No More Feedback book</a> which argues it's better to rely on self reflection than on outside feedback.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Recently I've been thinking about how to leverage these ideas to improve how we make decisions in companies. Here's a couple of things I'd like to achieve:</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>Ensure decisions are <strong>well-considered</strong>. That is: they're well thought-through and not random, ad-hoc or YOLO.</li><li>Decisions are <strong>transparent</strong>. That is: they are documented, so we understand <em>what</em> problem there was to solve, <em>what</em> was the decision on how to solve it, <em>who</em> made it and <em>why</em>.</li><li>Decisions are made as <strong>close to the action as possible</strong>. At every step up in the organizational hierarchy, knowledge and context about the problem and its potential solutions is lost, and decisions get worse.</li><li>The decision maker can <strong>self-evaluate his or her decision to an as large degree as possible</strong>. This reduces the need for outside feedback, which we now all know is toxic. </li><li>Even if you're not used to being empowered to make decisions, you're <strong>guided to do this well on your own</strong> without much support.<br></li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Both Amazon and Proctor &amp; Gamble have formats for this. Amazon calls them <a href="https://www.rightattitudes.com/2016/06/17/amazon-mock-press-release/">mock press releases</a>, P&amp;G calls them <a href="https://www.rightattitudes.com/2016/06/14/procter-gamble-one-page-memo/">one-page memos</a>. Both force the author to structure their pitches in a particular way. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Amazon’s format is very much in character by making it customer-obsessed (hence the press release format). Here's the Amazon outline for such press releases:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><strong>Heading</strong>: Name the product in a way the reader (i.e. your target customers) will understand.</li><li><strong>Sub-Heading</strong>: Describe who the market for the product is and what benefit they get. One sentence only underneath the title.</li><li><strong>Summary</strong>: Give a summary of the product and the benefit. Assume the reader will not read anything else so make this paragraph good.</li><li><strong>Problem</strong>: Describe the problem your product solves.</li><li><strong>Solution</strong>: Describe how your product elegantly solves the problem.</li><li><strong>Quote from You</strong>: A quote from a spokesperson in your company.</li><li><strong>How to Get Started</strong>: Describe how easy it is to get started.</li><li><strong>Customer Quote</strong>: Provide a quote from a hypothetical customer that describes how they experienced the benefit.</li><li><strong>Closing and Call to Action</strong>: Wrap it up and give pointers where the reader should go next.<br></li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>P&amp;G's format has some similarities:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><strong>Statement of Purpose:</strong> An introductory sentence that concisely and succinctly states the reason for the recommendation. Provides a context for the memo as a whole.</li><li> <strong>Background</strong>: Factual analysis that connects the purpose of the memo to the strategic objectives of the company or the brand. Also provides facts in relation to the problem the recommendation is supposed to address.</li><li> <strong>Recommendation</strong>: The specific proposal on how to solve the problem or exploit the opportunity detailed in the background section.</li><li> <strong>Rationale</strong>: The reasons for the recommendation, and the logic by which the recommendation was reached.</li><li> <strong>Discussion</strong>: Details of the recommendation, anticipated questions or areas of concern, risk assessment, identification of other alternatives, details of the recommendation.</li><li> <strong>Next Steps</strong>: Who will be following through on the recommendation, what target dates they would be working towards, what actions they would be taking to execute the recommendation.<br></li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>In OLX internally we've been experimenting with a similar format based on P&amp;G's, expanded a bit. Whenever we come up with some new organizational initiative, like setting up some new role, some new team, some new big meeting —&nbsp;we write a pitch for it. So far, we've not widely shared these, as this is still in an experimental phase. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Here's our (current) version of the pitch format (I'm cheating a bit, in fact this is slightly more elaborate than what we've been using):</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li><strong>Background</strong>: What is the context in which a decision is required, and what is the <em>problem to be solved</em>.</li><li><strong>Why now?</strong> There's opportunity cost in even thinking about making a decision, why is this something to be decided and acted on <em>right now</em>?</li><li><strong>Proposal:</strong> Succinct description of the proposed solution.</li><li><strong>Rationale:</strong> What is the rationale behind this proposal for a solution, why is it a good idea?</li><li><strong>What success looks like</strong>: How will we know if this proposal, once implemented, was successful?</li><li><strong>Alternatives considered</strong>: What would be alternatives to the proposal, and why are these worse options than the main proposal?</li><li><strong>Frequently asked questions</strong>: Imagine what people will ask about this proposal, and how you would answer them.</li><li><strong>Next steps</strong>: What are the next steps to make this proposal move forward?<br></li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>In addition, we aim for such a pitch to be <strong>between 1-3 pages</strong>. This is because <em>some of us</em> tend to be quite elaborate in our writing 😇. Brevity and to-the-pointness is paramount.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>When the author is happy with a draft, or somehow gets stuck writing it, we share these pitches between each other for input.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Here's a few things we found after doing a couple of these:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>The need to pitch an idea with this structure <strong>killed many ideas early</strong>, even without having to bother other people with it. Simply the act of properly thinking through some ideas made it clear they were just... bad.</li><li>Forcing ourselves to <strong>think about alternatives</strong> sometimes made us pivot to actually use the alternative, instead of the original idea.</li><li>Writing a pitch takes a lot of time. Not the act of writing, but the actual reflection and thinking required to <strong>make it good</strong> (also see the Bezos quote a bit later).</li><li>Once the pitch is solid, actually <strong>deciding on the go or no-go becomes almost trivial</strong>.</li><li>Actually <strong>creating the urgency</strong> for people to read the pitches and to comment on them remains a challenge. Although the length limit helps somewhat.<br></li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Here's what Jeff Bezos <a href="https://www.sec.gov/Archives/edgar/data/1018724/000119312518121161/d456916dex991.htm">has said about Amazon’s six-page memos</a>:</p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p>Often, when a memo isn’t great, it’s not the writer’s inability to recognize the high standard, but instead a wrong expectation on scope: they mistakenly believe a high-standards, six-page memo can be written in one or two days or even a few hours, when really it might take a week or more! They’re trying to perfect a handstand in just two weeks, and we’re not coaching them right. The great memos are written and re-written, shared with colleagues who are asked to improve the work, set aside for a couple of days, and then edited again with a fresh mind. They simply can’t be done in a day or two. The key point here is that you can improve results through the simple act of teaching scope – that a great memo probably should take a week or more.</p></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph -->
<p>This is consistent with what we found as well: making good decisions is hard work, but on the other hand: it should be. Especially if they're high-impact decisions.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Given this experience, here's an exercise I'd be very interested in doing: I'll call it ”The great decision purge“: write pitches for all existing organizational initiatives from the past, and when failing to do so successfully — ditch the initiative.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>My gut feel is that this would simplify our organizations a lot. Organizational debt is a thing after all. Unless I just coined that term unknowingly (you're welcome). We all have stuff happening in our companies we just do because we've always done it. Sometimes nobody really knows why. The decision purge is a way to reset, and the pitch format described way to avoid such cruft in the future.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>And a nice side-effect is you'd end up with excellent documentation on why things are set up they way they are. </p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1980</wp:post_id>
		<wp:post_date>2020-05-04 19:54:21</wp:post_date>
		<wp:post_date_gmt>2020-05-04 17:54:21</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>the-great-decision-purge</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="decisions"><![CDATA[decisions]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="olx"><![CDATA[olx]]></category>
		<category domain="post_tag" nicename="reflection"><![CDATA[reflection]]></category>
		<category domain="post_tag" nicename="wip"><![CDATA[wip]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[43833633198]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>timeline_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1588614862]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Launching a Rebranded OLX: Why Now?</title>
		<link>http://zef.me/2020/05/05/launching-a-rebranded-olx-why-now/</link>
		<pubDate>Tue, 05 May 2020 07:29:38 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">http://zefsmusings.com/?p=1988</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:quote -->
<blockquote class="wp-block-quote"><p>“The world is burning, let's respond with a new logo and nicer fonts!” — nobody, ever</p></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph -->
<p>Let me spend a quick couple of paragraphs on what happens behind the scenes when a large company deeply invests in a rebranding, and then, unexpectedly, is faced with a completely new reality. I thought it would be worth sharing.&nbsp;<strong>#BeOpen</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Over a year ago the process of a rebranded OLX for Europe started. To be honest, it was way overdue. Not only does the “old” OLX look dated, it also has a lot of design debt and inconsistencies across channels (desktop, PWA, native apps). Rebranding was an opportunity to clean a lot of stuff up. The planned release: April 1 2020. After a lot of preparation work, the last 3 months we almost entirely dedicated to this rebranding effort. All our native app developers, and almost all front-end developers, and a bunch of back-end developers worked their asses off to get this done quickly and efficiently, and clean up some technical debt along the way as a bonus. Excitement was building, marketing campaigns planned.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><em>And then... the Corona crisis hit.&nbsp;</em></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>And the question arose:&nbsp;<em>is this the time to push our new brand live?</em>&nbsp;Is this appropriate? Won't this look a bit... out of touch?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>After many discussions, we decided it was best to start rolling out anyway. Without a big marketing push of course. The alternative (postponing the release for a few months for when things go a bit more back to "normal") would be wasteful:</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>Internally we'd have to&nbsp;<strong>maintain two branches of our UI</strong>&nbsp;at all times. We're working hard to actually adapt our product to our ever changing reality —&nbsp;especially now, and maintaining two versions of our UI would... definitely not help.</li><li>The rebranding actually comes with plenty of UX improvements, so the experience is actually&nbsp;<strong>better</strong>, not just nicer looking.</li><li>With our new brand we have a completely new design system that will actually simplify a lot of the implementation work, so we can actually release things&nbsp;<strong>faster</strong><em>&nbsp;</em>with the new brand.</li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Plenty of reasons to get this brand and everything that comes with it rolled out, and continue cracking.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>So, that's what's been happening. We've been rolling out rebranded sites over the last month or so, and today released the big one: <a href="https://www.olx.pl">OLX.pl</a>.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1988</wp:post_id>
		<wp:post_date>2020-05-05 09:29:38</wp:post_date>
		<wp:post_date_gmt>2020-05-05 07:29:38</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>launching-a-rebranded-olx-why-now</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="olx"><![CDATA[olx]]></category>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[1989]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[43855438627]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>timeline_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1588663780]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_b7f3d0a3bdf4b845311d8079dd1b8950</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>OLX.pl rebranded</title>
		<link>http://zef.me/screen-shot-2020-05-05-at-09-25-43/</link>
		<pubDate>Tue, 05 May 2020 07:26:16 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">http://zefsmusings.files.wordpress.com/2020/05/screen-shot-2020-05-05-at-09.25.43.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1989</wp:post_id>
		<wp:post_date>2020-05-05 09:26:16</wp:post_date>
		<wp:post_date_gmt>2020-05-05 07:26:16</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>screen-shot-2020-05-05-at-09-25-43</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://zefsmusings.files.wordpress.com/2020/05/screen-shot-2020-05-05-at-09.25.43.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/d1d/176754826/files/2020/05/screen-shot-2020-05-05-at-09.25.43.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:2288;s:6:"height";i:990;s:4:"file";s:111:"/home/wpcom/public_html/wp-content/blogs.dir/d1d/176754826/files/2020/05/screen-shot-2020-05-05-at-09.25.43.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:207544;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Zef&#039;s Management Readme</title>
		<link>http://zef.me/zefs-management-readme-b504aaad903e/</link>
		<pubDate>Thu, 07 May 2020 06:57:32 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">http://zefsmusings.com/?page_id=2050</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p><a href="https://zefsmusings.com/2018/06/15/zefs-management-readme/">Moved here</a></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2050</wp:post_id>
		<wp:post_date>2020-05-07 08:57:32</wp:post_date>
		<wp:post_date_gmt>2020-05-07 06:57:32</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>zefs-management-readme-b504aaad903e</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_coblocks_attr</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_coblocks_dimensions</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_coblocks_responsive_height</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_coblocks_accordion_ie_support</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>advanced_seo_description</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>amp_status</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>spay_email</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_starter_page_template</wp:meta_key>
			<wp:meta_value><![CDATA[blank]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Zef’s Book Club: No More Feedback</title>
		<link>http://zef.me/zefs-book-club-no-more-feedback-8a17485bd276/</link>
		<pubDate>Thu, 07 May 2020 07:01:13 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">http://zefsmusings.com/?page_id=2055</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p><a href="https://zefsmusings.com/2020/04/25/zefs-book-club-no-more-feedback/">Moved here</a></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2055</wp:post_id>
		<wp:post_date>2020-05-07 09:01:13</wp:post_date>
		<wp:post_date_gmt>2020-05-07 07:01:13</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>zefs-book-club-no-more-feedback-8a17485bd276</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_coblocks_attr</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_coblocks_dimensions</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_coblocks_responsive_height</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_coblocks_accordion_ie_support</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>advanced_seo_description</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>amp_status</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>spay_email</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_starter_page_template</wp:meta_key>
			<wp:meta_value><![CDATA[blank]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>I Hate Puzzles, am I still a Programmer?</title>
		<link>http://zef.me/i-hate-puzzles-am-i-still-a-programmer-590607b53777/</link>
		<pubDate>Thu, 07 May 2020 07:28:43 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">http://zefsmusings.com/?page_id=2058</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p><a href="https://zefsmusings.com/2011/02/27/i-hate-puzzles-am-i-still-a-programmer/">Moved here</a></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2058</wp:post_id>
		<wp:post_date>2020-05-07 09:28:43</wp:post_date>
		<wp:post_date_gmt>2020-05-07 07:28:43</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>i-hate-puzzles-am-i-still-a-programmer-590607b53777</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_coblocks_attr</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_coblocks_dimensions</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_coblocks_responsive_height</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_coblocks_accordion_ie_support</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>advanced_seo_description</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>amp_status</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>spay_email</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_starter_page_template</wp:meta_key>
			<wp:meta_value><![CDATA[blank]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Pick Your Battles</title>
		<link>http://zef.me/pick-your-battles-a5fa1025cb3e/</link>
		<pubDate>Thu, 07 May 2020 07:29:44 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">http://zefsmusings.com/?page_id=2061</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p><a href="https://zefsmusings.com/2012/12/13/pick-your-battles/">Moved here</a>.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2061</wp:post_id>
		<wp:post_date>2020-05-07 09:29:44</wp:post_date>
		<wp:post_date_gmt>2020-05-07 07:29:44</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>pick-your-battles-a5fa1025cb3e</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_coblocks_attr</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_coblocks_dimensions</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_coblocks_responsive_height</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_coblocks_accordion_ie_support</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>advanced_seo_description</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>amp_status</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>spay_email</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_starter_page_template</wp:meta_key>
			<wp:meta_value><![CDATA[blank]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Zef&#039;s Law</title>
		<link>http://zef.me/zefs-law-d8ef48b2d721/</link>
		<pubDate>Thu, 07 May 2020 07:30:29 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">http://zefsmusings.com/?page_id=2064</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p><a href="https://zefsmusings.com/2012/12/18/zefs-law/">Moved here</a>.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2064</wp:post_id>
		<wp:post_date>2020-05-07 09:30:29</wp:post_date>
		<wp:post_date_gmt>2020-05-07 07:30:29</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>zefs-law-d8ef48b2d721</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_coblocks_attr</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_coblocks_dimensions</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_coblocks_responsive_height</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_coblocks_accordion_ie_support</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>advanced_seo_description</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>amp_status</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>spay_email</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_starter_page_template</wp:meta_key>
			<wp:meta_value><![CDATA[blank]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Judgement is a silent killer</title>
		<link>http://zef.me/judgment-is-a-silent-killer-ca547e128598/</link>
		<pubDate>Thu, 07 May 2020 07:31:09 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">http://zefsmusings.com/?page_id=2067</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p><a href="https://zefsmusings.com/2016/09/28/judgment-is-a-silent-killer/">Moved here</a>.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2067</wp:post_id>
		<wp:post_date>2020-05-07 09:31:09</wp:post_date>
		<wp:post_date_gmt>2020-05-07 07:31:09</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>judgment-is-a-silent-killer-ca547e128598</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_coblocks_attr</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_coblocks_dimensions</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_coblocks_responsive_height</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_coblocks_accordion_ie_support</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>advanced_seo_description</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>amp_status</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>spay_email</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_starter_page_template</wp:meta_key>
			<wp:meta_value><![CDATA[blank]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>The 100x Engineer</title>
		<link>http://zef.me/the-100x-engineer-6d50a690a866/</link>
		<pubDate>Thu, 07 May 2020 07:31:47 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">http://zefsmusings.com/?page_id=2070</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p><a href="https://zefsmusings.com/2017/12/28/the-100x-engineer/">Moved here</a>.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2070</wp:post_id>
		<wp:post_date>2020-05-07 09:31:47</wp:post_date>
		<wp:post_date_gmt>2020-05-07 07:31:47</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>the-100x-engineer-6d50a690a866</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_coblocks_attr</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_coblocks_dimensions</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_coblocks_responsive_height</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_coblocks_accordion_ie_support</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>advanced_seo_description</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>amp_status</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>spay_email</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_starter_page_template</wp:meta_key>
			<wp:meta_value><![CDATA[blank]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>cropped-zef.jpg</title>
		<link>http://zef.me/cropped-zef-jpg/</link>
		<pubDate>Fri, 08 May 2020 06:37:52 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.files.wordpress.com/2020/05/cropped-zef.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[https://zefsmusings.files.wordpress.com/2020/05/cropped-zef.jpg]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2078</wp:post_id>
		<wp:post_date>2020-05-08 08:37:52</wp:post_date>
		<wp:post_date_gmt>2020-05-08 06:37:52</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>cropped-zef-jpg</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://zefsmusings.files.wordpress.com/2020/05/cropped-zef.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/d1d/176754826/files/2020/05/cropped-zef.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_context</wp:meta_key>
			<wp:meta_value><![CDATA[site-icon]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:512;s:6:"height";i:512;s:4:"file";s:88:"/home/wpcom/public_html/wp-content/blogs.dir/d1d/176754826/files/2020/05/cropped-zef.jpg";s:5:"sizes";a:4:{s:13:"site_icon-270";a:4:{s:4:"file";s:23:"cropped-zef-270x270.jpg";s:5:"width";i:270;s:6:"height";i:270;s:9:"mime-type";s:10:"image/jpeg";}s:13:"site_icon-192";a:4:{s:4:"file";s:23:"cropped-zef-192x192.jpg";s:5:"width";i:192;s:6:"height";i:192;s:9:"mime-type";s:10:"image/jpeg";}s:13:"site_icon-180";a:4:{s:4:"file";s:23:"cropped-zef-180x180.jpg";s:5:"width";i:180;s:6:"height";i:180;s:9:"mime-type";s:10:"image/jpeg";}s:12:"site_icon-32";a:4:{s:4:"file";s:21:"cropped-zef-32x32.jpg";s:5:"width";i:32;s:6:"height";i:32;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:45738;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Making Sense of “Time to Value”</title>
		<link>http://zef.me/2020/05/08/making-sense-of-time-to-value/</link>
		<pubDate>Fri, 08 May 2020 14:19:31 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/?p=2080</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph {"dropCap":true} -->
<p class="has-drop-cap">Last year <a href="https://zef.me/2019/12/18/time-to-value-the-one-metric-to-optimize/">I wrote a few words</a> about the “Time to Value” metric mentioned by Adrian Cockcroft in his <a href="https://www.youtube.com/watch?v=8ona5ZTu4_E&amp;feature=emb_logo">“Innovation at Speed”</a> talk at Re:Invent last year.  This talk is about how to get better at software-based innovation (obviously, this involves using the cloud heavily —&nbsp;that’s why AWS is talking about it). Since in OLX we’re also looking at how to get a bit better at measuring our product development performance, I decided to reflect a little bit on this <em>time to value</em> metric to better understand what it means, what type of behavior the metric incentivizes and how to evaluate if that’s something your company is ready for (or even interested in). As usual here, these thoughts are quite raw.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>So, the first question to ask is: is “innovation” relevant to you? Do you need to, even want to, innovate at your company? Likely, the answer is going to be “yes.” Of course, not nearly all the work to be done would immediately be classified as <em>innovative</em>, but on the other hand, there aren’t that many well-treaded paths either.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>As I mentioned in a previous post, we just came out of a <a href="https://zef.me/2020/05/05/launching-a-rebranded-olx-why-now/">rebranding exercise</a>. Is rebranding innovation? It’s not like nobody has ever rebranded before. OLX has even done this. In many countries our product used to be called something completely different, and was then rebranded to OLX. Been there, done that. So, this rebranding should be a simple slam dunk, right? Not so much, because with every new look come opportunities to confuse and upset people, move some buttons around, remove some options, reshuffle some others. You may not think of this as <em>revolutionary</em> innovation, but it does involve diving into the unknown and therefore most practices we apply when “innovating” apply: experimenting, testing, researching, iterating.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>So yes, chances are that in your company too, innovation is something you want to, and need to do. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>“So,” Adrian Cockcroft says, “Time to Value is your one metric to optimize!” And Cockcroft is a VP-level important dude at Amazon, and previously at Netflix, so let’s not dismiss his suggestion out of the gate.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>What is <em>time to value</em> then? <em>Time to value</em> is defined as the time between the moment you “do some work” and for that work to provide value to customers (live on production, ready for people to use). If you work in a company that has a yearly software release cycle, obviously this <em>time to value</em> is very high (up to a year). If we want to be able to compete in today’s world —&nbsp;Cockcroft's argument goes —&nbsp;we have to move that number down from months to weeks, or ideally days or less.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>How to do that? </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The first step is to figure out a way to measure this <em>time to value</em>. Now this is where things get tricky already. What’s suggested during the talk is that the clock starts ticking once “somebody does some work,” but what does that mean?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Let’s say I’m an engineer in my company and during my morning shower I think: “You know what, if we reshuffle some of these buttons and make one of them much more prominent, I think more customers will actually discover and use this new feature we built!” So, I drive to the office (this hypothetical scenario takes place pre- or post-COVID times), open my laptop, adjust some HTML and CSS, commit my change and perhaps configure it to behind some A/B test, see it flow through our build, test and deploy timelines and —&nbsp;voila, it’s live to some percentage of customers, and I eagerly track the effects on conversion of my reshuffled buttons. <em>Stop the clock.</em> That’s your time to value.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>We could at this stage get into an argument trying to quantify the amount of value brought compared to the amount of time invested, but that’s a topic for another day (maybe).</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>But, what if you’re not a “highly empowered engineer” that, without discussion with the rest of the team, just YOLO deploys his or her shower idea? Is that, in fact, even something we want to encourage? To me personally this is the ideal scenario, although not necessarily how everybody works today. I like it for a few reasons:</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>Since this all happens in a time span of maybe a few hours, is run as an experiment and easily rolled back — cost and risk are low, but positive impact could be high.</li><li>I used “highly empowered engineer” somewhat cynically here, but for me engineers that actively participate in deciding what to build is something I love seeing. This may not immediately need to translate to everybody in the team just doing whatever they think is best in some uncoordinated way, but some level of that —&nbsp;I’d encourage it.<br /></li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>This mode of working or measuring may not always be a good fit, though. It’s a fit once you have your product at a level where the core is solid and you can iterate. But, that’s not always the case.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Many company spend a significant amount of time on “big bet” style projects. It takes quite a lot of baseline work to get to something that provides value. Perhaps even six months or more. And six months is not the order of magnitude “time to value” we’re looking for.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Nevertheless, once over that first release bump, follow-up iterations can happen more quickly, and your <em>time to value</em> should drop significantly. One recent OLX example that would make Adrian Cockcroft proud would be the project we did adding video conferencing functionality to our light-weight applicant-tracking system that’s now integrated with OLX’s job category. The goal was to allow job interviews to take place online, which became quite relevant when COVID hit us hard. This project went from “hey, I have an idea” to customer value in about two weeks, because it was heavily built on off-the-shelf AWS components (which is why Adrian would be very proud). Two weeks for a feature like that is not bad at all. I have to admit here I wasn't in support of developing this feature given the limited time available, partially because I didn't think it could be done this quickly — I was proven wrong.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>When innovation reaches <em>that</em> level of speed, you can experiment more freely. If such a feature would take 3-6 months to build, likely we’d first spend weeks or months doing design sprints, market research, build prototypes, test it in our UX labs with potential customers. But once you can go from “doing some work” to value in 2 weeks, why not just build it and see what happens?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Anyway, I think <em>Time to Value</em> is a great metric to look at at an organizational level, but at the team level, it’s tougher for teams that are in the stage of building huge things from the ground up, <em>unless we find a way to launch such initiatives much more incrementally</em>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>And the latter is in fact one of Cockcroft's core points:</p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p>“There is no economy of scale in software — smaller changes are better.”</p></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph -->
<p>The fewer projects we have to do in such big-bang iterations, the better, and that fact is accurately reflected in <em>time to value</em>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This Adrian Cockcroft guy, not so crazy!</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2080</wp:post_id>
		<wp:post_date>2020-05-08 16:19:31</wp:post_date>
		<wp:post_date_gmt>2020-05-08 14:19:31</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>making-sense-of-time-to-value</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[43994173702]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>timeline_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1588947572]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>0*v1hNfSwrXqHMKb87</title>
		<link>http://zef.me/2019/08/16/what-does-success-look-like/0v1hnfswrxqhmkb87/</link>
		<pubDate>Fri, 08 May 2020 17:11:58 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">http://zefsmusings.files.wordpress.com/2019/08/b7473-0v1hnfswrxqhmkb87.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2095</wp:post_id>
		<wp:post_date>2020-05-08 19:11:58</wp:post_date>
		<wp:post_date_gmt>2020-05-08 17:11:58</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>0v1hnfswrxqhmkb87</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>35</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://zefsmusings.files.wordpress.com/2019/08/b7473-0v1hnfswrxqhmkb87.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/d1d/176754826/files/2019/08/b7473-0v1hnfswrxqhmkb87.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:765;s:6:"height";i:600;s:4:"file";s:100:"/home/wpcom/public_html/wp-content/blogs.dir/d1d/176754826/files/2019/08/b7473-0v1hnfswrxqhmkb87.jpg";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:146506;}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_media_download_success</wp:meta_key>
			<wp:meta_value><![CDATA[1588957918]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_original_import_url</wp:meta_key>
			<wp:meta_value><![CDATA[https://cdn-images-1.medium.com/max/800/0*v1hNfSwrXqHMKb87.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>pre_import_url</wp:meta_key>
			<wp:meta_value><![CDATA[https://cdn-images-1.medium.com/max/800/0*v1hNfSwrXqHMKb87.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>import_url_remap</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:62:"https://cdn-images-1.medium.com/max/800/0*v1hNfSwrXqHMKb87.jpg";s:74:"http://zefsmusings.files.wordpress.com/2019/08/b7473-0v1hnfswrxqhmkb87.jpg";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>auto_import</wp:meta_key>
			<wp:meta_value><![CDATA[https://cdn-images-1.medium.com/max/800/0*v1hNfSwrXqHMKb87.jpg]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>1*ywPUqazGTMz39Mn-Gm0XNw</title>
		<link>http://zef.me/2018/03/29/from-the-armchair/1ywpuqazgtmz39mn-gm0xnw/</link>
		<pubDate>Fri, 08 May 2020 17:11:59 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">http://zefsmusings.files.wordpress.com/2018/03/07f4e-1ywpuqazgtmz39mn-gm0xnw.jpeg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2101</wp:post_id>
		<wp:post_date>2020-05-08 19:11:59</wp:post_date>
		<wp:post_date_gmt>2020-05-08 17:11:59</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>1ywpuqazgtmz39mn-gm0xnw</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>158</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://zefsmusings.files.wordpress.com/2018/03/07f4e-1ywpuqazgtmz39mn-gm0xnw.jpeg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/d1d/176754826/files/2018/03/07f4e-1ywpuqazgtmz39mn-gm0xnw.jpeg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:1024;s:6:"height";i:683;s:4:"file";s:107:"/home/wpcom/public_html/wp-content/blogs.dir/d1d/176754826/files/2018/03/07f4e-1ywpuqazgtmz39mn-gm0xnw.jpeg";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:134719;}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_media_download_success</wp:meta_key>
			<wp:meta_value><![CDATA[1588957919]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_original_import_url</wp:meta_key>
			<wp:meta_value><![CDATA[https://cdn-images-1.medium.com/max/1200/1*ywPUqazGTMz39Mn-Gm0XNw.jpeg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>pre_import_url</wp:meta_key>
			<wp:meta_value><![CDATA[https://cdn-images-1.medium.com/max/1200/1*ywPUqazGTMz39Mn-Gm0XNw.jpeg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>import_url_remap</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:70:"https://cdn-images-1.medium.com/max/1200/1*ywPUqazGTMz39Mn-Gm0XNw.jpeg";s:81:"http://zefsmusings.files.wordpress.com/2018/03/07f4e-1ywpuqazgtmz39mn-gm0xnw.jpeg";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>auto_import</wp:meta_key>
			<wp:meta_value><![CDATA[https://cdn-images-1.medium.com/max/1200/1*ywPUqazGTMz39Mn-Gm0XNw.jpeg]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>0*qX6QBVGkXdhDhQJM</title>
		<link>http://zef.me/2018/08/27/be-present/0qx6qbvgkxdhdhqjm/</link>
		<pubDate>Fri, 08 May 2020 17:11:59 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">http://zefsmusings.files.wordpress.com/2018/08/346da-0qx6qbvgkxdhdhqjm.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2102</wp:post_id>
		<wp:post_date>2020-05-08 19:11:59</wp:post_date>
		<wp:post_date_gmt>2020-05-08 17:11:59</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>0qx6qbvgkxdhdhqjm</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>50</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://zefsmusings.files.wordpress.com/2018/08/346da-0qx6qbvgkxdhdhqjm.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/d1d/176754826/files/2018/08/346da-0qx6qbvgkxdhdhqjm.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:720;s:6:"height";i:501;s:4:"file";s:100:"/home/wpcom/public_html/wp-content/blogs.dir/d1d/176754826/files/2018/08/346da-0qx6qbvgkxdhdhqjm.jpg";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:27094;}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_media_download_success</wp:meta_key>
			<wp:meta_value><![CDATA[1588957919]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_original_import_url</wp:meta_key>
			<wp:meta_value><![CDATA[https://cdn-images-1.medium.com/max/800/0*qX6QBVGkXdhDhQJM.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>pre_import_url</wp:meta_key>
			<wp:meta_value><![CDATA[https://cdn-images-1.medium.com/max/800/0*qX6QBVGkXdhDhQJM.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>import_url_remap</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:62:"https://cdn-images-1.medium.com/max/800/0*qX6QBVGkXdhDhQJM.jpg";s:74:"http://zefsmusings.files.wordpress.com/2018/08/346da-0qx6qbvgkxdhdhqjm.jpg";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>auto_import</wp:meta_key>
			<wp:meta_value><![CDATA[https://cdn-images-1.medium.com/max/800/0*qX6QBVGkXdhDhQJM.jpg]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>1*s7_Q_i3BIvdhVyVel5tKLg</title>
		<link>http://zef.me/2018/03/06/getting-value-out-of-i-quit/1s7_q_i3bivdhvyvel5tklg/</link>
		<pubDate>Fri, 08 May 2020 17:11:59 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">http://zefsmusings.files.wordpress.com/2018/03/aad9f-1s7_q_i3bivdhvyvel5tklg.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2105</wp:post_id>
		<wp:post_date>2020-05-08 19:11:59</wp:post_date>
		<wp:post_date_gmt>2020-05-08 17:11:59</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>1s7_q_i3bivdhvyvel5tklg</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>52</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://zefsmusings.files.wordpress.com/2018/03/aad9f-1s7_q_i3bivdhvyvel5tklg.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/d1d/176754826/files/2018/03/aad9f-1s7_q_i3bivdhvyvel5tklg.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:800;s:6:"height";i:400;s:4:"file";s:106:"/home/wpcom/public_html/wp-content/blogs.dir/d1d/176754826/files/2018/03/aad9f-1s7_q_i3bivdhvyvel5tklg.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:251796;}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_media_download_success</wp:meta_key>
			<wp:meta_value><![CDATA[1588957919]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_original_import_url</wp:meta_key>
			<wp:meta_value><![CDATA[https://cdn-images-1.medium.com/max/800/1*s7_Q_i3BIvdhVyVel5tKLg.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>pre_import_url</wp:meta_key>
			<wp:meta_value><![CDATA[https://cdn-images-1.medium.com/max/800/1*s7_Q_i3BIvdhVyVel5tKLg.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>import_url_remap</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:68:"https://cdn-images-1.medium.com/max/800/1*s7_Q_i3BIvdhVyVel5tKLg.png";s:80:"http://zefsmusings.files.wordpress.com/2018/03/aad9f-1s7_q_i3bivdhvyvel5tklg.png";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>auto_import</wp:meta_key>
			<wp:meta_value><![CDATA[https://cdn-images-1.medium.com/max/800/1*s7_Q_i3BIvdhVyVel5tKLg.png]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>1*MUx0Y5i22o4WSTNZCZKo0A</title>
		<link>http://zef.me/2018/03/05/my-fault-by-default/1mux0y5i22o4wstnzczko0a/</link>
		<pubDate>Fri, 08 May 2020 17:11:59 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">http://zefsmusings.files.wordpress.com/2018/03/dcf92-1mux0y5i22o4wstnzczko0a.jpeg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2106</wp:post_id>
		<wp:post_date>2020-05-08 19:11:59</wp:post_date>
		<wp:post_date_gmt>2020-05-08 17:11:59</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>1mux0y5i22o4wstnzczko0a</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>72</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://zefsmusings.files.wordpress.com/2018/03/dcf92-1mux0y5i22o4wstnzczko0a.jpeg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/d1d/176754826/files/2018/03/dcf92-1mux0y5i22o4wstnzczko0a.jpeg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:783;s:6:"height";i:613;s:4:"file";s:107:"/home/wpcom/public_html/wp-content/blogs.dir/d1d/176754826/files/2018/03/dcf92-1mux0y5i22o4wstnzczko0a.jpeg";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:52948;}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_media_download_success</wp:meta_key>
			<wp:meta_value><![CDATA[1588957919]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_original_import_url</wp:meta_key>
			<wp:meta_value><![CDATA[https://cdn-images-1.medium.com/max/800/1*MUx0Y5i22o4WSTNZCZKo0A.jpeg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>pre_import_url</wp:meta_key>
			<wp:meta_value><![CDATA[https://cdn-images-1.medium.com/max/800/1*MUx0Y5i22o4WSTNZCZKo0A.jpeg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>import_url_remap</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:69:"https://cdn-images-1.medium.com/max/800/1*MUx0Y5i22o4WSTNZCZKo0A.jpeg";s:81:"http://zefsmusings.files.wordpress.com/2018/03/dcf92-1mux0y5i22o4wstnzczko0a.jpeg";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>auto_import</wp:meta_key>
			<wp:meta_value><![CDATA[https://cdn-images-1.medium.com/max/800/1*MUx0Y5i22o4WSTNZCZKo0A.jpeg]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>1*WR3IisvzMZ1N-5YC-AekpA</title>
		<link>http://zef.me/2018/02/02/the-well-considered-decision/1wr3iisvzmz1n-5yc-aekpa/</link>
		<pubDate>Fri, 08 May 2020 17:12:01 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">http://zefsmusings.files.wordpress.com/2018/02/55001-1wr3iisvzmz1n-5yc-aekpa.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2107</wp:post_id>
		<wp:post_date>2020-05-08 19:12:01</wp:post_date>
		<wp:post_date_gmt>2020-05-08 17:12:01</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>1wr3iisvzmz1n-5yc-aekpa</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>149</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://zefsmusings.files.wordpress.com/2018/02/55001-1wr3iisvzmz1n-5yc-aekpa.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/d1d/176754826/files/2018/02/55001-1wr3iisvzmz1n-5yc-aekpa.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:1600;s:6:"height";i:1000;s:4:"file";s:106:"/home/wpcom/public_html/wp-content/blogs.dir/d1d/176754826/files/2018/02/55001-1wr3iisvzmz1n-5yc-aekpa.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:1679764;}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_media_download_success</wp:meta_key>
			<wp:meta_value><![CDATA[1588957921]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_original_import_url</wp:meta_key>
			<wp:meta_value><![CDATA[https://cdn-images-1.medium.com/max/2560/1*WR3IisvzMZ1N-5YC-AekpA.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>pre_import_url</wp:meta_key>
			<wp:meta_value><![CDATA[https://cdn-images-1.medium.com/max/2560/1*WR3IisvzMZ1N-5YC-AekpA.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>import_url_remap</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:69:"https://cdn-images-1.medium.com/max/2560/1*WR3IisvzMZ1N-5YC-AekpA.png";s:80:"http://zefsmusings.files.wordpress.com/2018/02/55001-1wr3iisvzmz1n-5yc-aekpa.png";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>auto_import</wp:meta_key>
			<wp:meta_value><![CDATA[https://cdn-images-1.medium.com/max/2560/1*WR3IisvzMZ1N-5YC-AekpA.png]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>1*qPbRedDRgqfqVgGbRNYw6Q</title>
		<link>http://zef.me/2016/12/23/disciplined-continuous-improvement/1qpbreddrgqfqvggbrnyw6q/</link>
		<pubDate>Fri, 08 May 2020 17:12:00 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">http://zefsmusings.files.wordpress.com/2016/12/c45f1-1qpbreddrgqfqvggbrnyw6q.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2112</wp:post_id>
		<wp:post_date>2020-05-08 19:12:00</wp:post_date>
		<wp:post_date_gmt>2020-05-08 17:12:00</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>1qpbreddrgqfqvggbrnyw6q</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>107</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://zefsmusings.files.wordpress.com/2016/12/c45f1-1qpbreddrgqfqvggbrnyw6q.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_import_session_id</wp:meta_key>
			<wp:meta_value><![CDATA[5eace900a0c98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/d1d/176754826/files/2016/12/c45f1-1qpbreddrgqfqvggbrnyw6q.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:800;s:6:"height";i:448;s:4:"file";s:106:"/home/wpcom/public_html/wp-content/blogs.dir/d1d/176754826/files/2016/12/c45f1-1qpbreddrgqfqvggbrnyw6q.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:379565;}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_media_download_success</wp:meta_key>
			<wp:meta_value><![CDATA[1588957920]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_original_import_url</wp:meta_key>
			<wp:meta_value><![CDATA[https://cdn-images-1.medium.com/max/800/1*qPbRedDRgqfqVgGbRNYw6Q.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>pre_import_url</wp:meta_key>
			<wp:meta_value><![CDATA[https://cdn-images-1.medium.com/max/800/1*qPbRedDRgqfqVgGbRNYw6Q.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>import_url_remap</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:68:"https://cdn-images-1.medium.com/max/800/1*qPbRedDRgqfqVgGbRNYw6Q.png";s:80:"http://zefsmusings.files.wordpress.com/2016/12/c45f1-1qpbreddrgqfqvggbrnyw6q.png";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>auto_import</wp:meta_key>
			<wp:meta_value><![CDATA[https://cdn-images-1.medium.com/max/800/1*qPbRedDRgqfqVgGbRNYw6Q.png]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Maks</title>
		<link>http://zef.me/maks/</link>
		<pubDate>Thu, 14 May 2020 19:13:14 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">http://zefsmusings.files.wordpress.com/2020/05/maks.jpeg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2116</wp:post_id>
		<wp:post_date>2020-05-14 21:13:14</wp:post_date>
		<wp:post_date_gmt>2020-05-14 19:13:14</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>maks</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://zefsmusings.files.wordpress.com/2020/05/maks.jpeg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:3024;s:6:"height";i:4032;s:4:"file";s:82:"/home/wpcom/public_html/wp-content/blogs.dir/d1d/176754826/files/2020/05/maks.jpeg";s:5:"sizes";a:0:{}s:10:"image_meta";a:14:{s:8:"aperture";s:3:"1.8";s:6:"credit";s:0:"";s:6:"camera";s:20:"iPad Pro (10.5-inch)";s:7:"caption";s:0:"";s:17:"created_timestamp";s:10:"1589398732";s:9:"copyright";s:0:"";s:12:"focal_length";s:4:"3.99";s:3:"iso";s:3:"160";s:13:"shutter_speed";s:17:"0.043478260869565";s:5:"title";s:0:"";s:11:"orientation";s:1:"1";s:8:"keywords";a:0:{}s:8:"latitude";d:52.39378611111111;s:9:"longitude";d:16.895983333333334;}s:8:"filesize";i:1844239;}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/d1d/176754826/files/2020/05/maks.jpeg]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>No More Requirements</title>
		<link>http://zef.me/2020/05/29/no-more-requirements/</link>
		<pubDate>Fri, 29 May 2020 13:34:50 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/?p=2135</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph {"dropCap":true} -->
<p class="has-drop-cap">In a previous company, I had an engineer work on a feature for the better part of three months. The feature was well-specified, all requirements were clear. When the work was done, and the feature delivered, a demo session was organized. As the product manager demoed the feature, describing the scenario in which our customer would use it, the engineer said: “Oh, <em>that's</em> what it's used for? I could have built something different that filled that need in three days.”</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>A few weeks ago I wrote about <a href="https://zef.me/2020/04/25/zefs-book-club-no-more-feedback/">No More Feedback</a>, with a nod to the title of that book, let me share another disruptive idea that I'll phrase as <strong>“no more requirements.”</strong> I found this idea buried in another book that I’m reading called  <a href="https://amzn.to/2B665r0">A Seat at the Table</a>. The book describes how the role of “IT” has evolved a lot the past decades, but still is nowhere near where it ought to be. Many companies still carry heritage from a time that considered “IT” as non-core to the business —&nbsp;a supporting function, effectively. While the “IT department” may technically be part of the company, it is considered one that may well be outsourced. Therefore, a lot of IT terminology is <em>contractor terminology</em>. It is designed to be very specific and enforceable, like in a contract. As a result, it is also quite disconnected from the business itself. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>At the core this disconnect? The concept of <strong>requirements</strong>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><em>For the purpose of this article I’ll limit the definition of “IT” to software development work: product teams.</em></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Crudely formulated, the relationship between “the business” and “IT” looked (and often still looks) as follows: “We — the business — have figured out how we shall achieve our business goals. Part of this strategy requires changes to functionality in our product, therefore we have formulated these changes as a list of <em>requirements</em>. Please, dear IT, tell us how much time it will take to implement them. We shall then review the estimates, and negotiate where necessary. Once committed, we expect timely delivery of exactly what was asked.”</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You may think: that sounds an awful lot like old-style waterfall, but even companies that (claim to) practice Agile, work this way at some level.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>What's the problem?</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>There's a huge-ass assumption buried in this way of working:</p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p><strong>The fulfillment of requirements leads to desired business results.</strong></p></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph -->
<p>If they don’t, we’re screwed. <strong>Even</strong> if the implemented functionality fulfills all requirements perfectly, and <strong>even</strong> in the hypothetical case that they're delivered <em>on time</em> (hah!), your business impact may be zero, zilch. Yet your product teams will claim success. “We did it! All checkboxes checked, on time, on budget. High five, party time!”</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>We spend so much time on ironing out exact requirements, estimating them, negotiating and then... failure.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Who's to blame? Product teams will tell you that probably the requirements were wrong. Assumptions were made that simply didn’t pan out. “We did what was asked, don’t look at us!” The business will claim the product team was simply too slow. Chances are, deadlines slipped, because of the two reasons just mentioned — which will be hard to deny. So perhaps we have to focus on speeding up. How do we measure product team performance anyway? “Story points!?” That sounds like a made up term, <em>are you serious</em>? Alright, if that's the best we got, then how do we speed up the number of these “story points” delivered?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>While a seemingly attractive path for further exploration, in reality it’s an unproductive rabbit hole. In “A Seat at the Table,” the author argues to take a few steps back: it’s the idea of <em>requirements</em> where problems begin. Requirements can make sense for a provider-supplier type of relationship, but they come at a big cost: the cost of flexibility and creativity caused by the <strong>complete loss of context</strong>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The moment anybody is given a requirement, they mentally shut down and fulfilling the requirement becomes the goal. It doesn’t matter what the bigger objective is — it becomes irrelevant, we have a checklist of acceptance criteria now. <em>Let’s go!</em></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>And that's how a customer problem that could have been solved in mere days becomes a three month project.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Expected outcomes</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>So, what’s the alternative?</p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p>Rather than asking to fulfill <strong>requirements</strong>, we should ask to fulfill <strong>expected outcomes</strong>.</p></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph -->
<p>A hand in the room shoots up.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>“I’m sorry sir,” an engineer asks, “but... isn't it the job of business and product to translate business goals to things for us to implement?”</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Yes and no. <em>Yes</em>, it is the <em>expertise</em> of business and product to figure out where to go and what to build. They are aware of the competitive landscape, they are aware of the needs of the customers, and and may have great ideas of how to fulfill those needs. However: <em>No</em>, that doesn't mean we should build a wall with a tiny little window through which JIRA tickets are passed with ironclad requirements and acceptance criteria we can easily rewrite into <a href="https://www.guru99.com/gherkin-test-cucumber.html">Gherkin</a> so that our BDD tests turn red, we type code until they turn green — and then go home feeling productive — another few story points scored. <em>Yes!</em></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To earn that <a href="https://zef.me/2019/12/21/a-seat-at-the-table/">seat at the table</a>, we have to break down this wall and <em>own</em> the expected outcomes. <em>Progress made towards expected outcomes</em> ought to be the only thing that makes us feel “productive.” For that to be possible, though, we have to understand <em>what</em> we're building, <em>why</em>, understand <em>how</em>, and be convinced the changes we make will indeed have the expected outcome.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>And if not, flag it, and suggest alternatives.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Another hand goes up: “That sounds hard! I prefer just to focus on delivering my tickets on time. I just read this blog post about back-handed estimation poker we can try to improve our estimates!” That's great, but a product company isn’t the best environment for this way of working. Perhaps it would be better to look for some contractor position where you're paid per hour.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>How do we get there? How do we shift from <em>requirements</em> to <em>expected outcomes</em>?</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Shared goals</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>It starts with <em>shared goals</em>. If success of product teams and business aren’t aligned, it’s an uphill battle, it has to start there. If the company has revenue and growth goals, let product teams take those as their goals as well.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Another hand in my make-belief audience shoots up.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>“I’m sorry to interrupt again sir,” — it’s that same engineer again — “but, we have little control over revenue that is generated. We don’t set the prices, we don’t do sales. Should we really be judged on how well those business guys are doing their job?” A fair challenge, and I’d say: <em>welcome to business reality</em>. Since it’s Friday, let’s pull a <a href="https://en.wikipedia.org/wiki/Freaky_Friday_(2003_film)">Freaky Friday</a> and switch sides for a moment. Imagine you’re on the “business” side where <em>you’re</em> the one with revenue and growth goals, whereas product teams have whatever goals they feel are appropriate. You know you cannot hit your goals without support from product teams. You’ll say: “but, we have little control over the functionality product teams give us to work with. Should we really be judged on work that largely depends on product teams doing their job?”</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>🤔</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The reality of a business is we’re in this together, and we cannot fully control success or failure. <strong>#dealwithit</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>How do we do get there, then? Let’s make this a bit more practical. One way to implement shared goals, used by many large companies are <a href="https://en.wikipedia.org/wiki/OKR">OKRs</a>. OKRs stands for “Objectives and Key Results.” When implemented well, business and product teams <em>share</em> a set of objectives among each other, and figure out how to measure progress towards achieving that objective.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For example:</p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p><strong>Objective:</strong> Become the dominant marketplace for buying and selling art.</p><p><strong>Key result:</strong> raise the number of pieces of art sold from 1k to 10k per month.</p></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph -->
<p>The <em>objective</em> describes the larger goal, the <em>key result</em> (often more than one) attaches a number to what success looks like. If it doesn’t have a number in it, it’s not a key result. Note the absence of any feature list or requirements. All we have is expected outcomes.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>What is happening now is that different parts of the organization, given our shared goals, think: what can <em>we</em> do to attain this objective?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Marketing may plan advertising campaigns to drive traffic. Product teams may come up with features that may convert that traffic into more sales. These ideas are what we call <em>initiatives</em>. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>What's super important to realize is that <em>all initiatives are a bet</em>, a guess: If we buy a TV ad, 1 million new people will visit our website. If we build Apple Pay integration, 10% more people will end up buying a piece of art. Some may work out, some may not. To reduce risk, on the product side we tend to run some tests first. We may ask actual customers if they'd buy more if they’d be able to pay with Apple Pay. We may even put a fake “Pay with Apple” button on our actual website to see if people will click it. If everything checks out, we develop a simple version of the feature to see if indeed the number of sales goes up. If not, we pivot to another initiative. Perhaps payment options aren't the blocker after all.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Usually, there is no lack of solid ideas about what to do. The tricky part is to decide which ones to go after first; to prioritize them.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>The role of engineering</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>This is where engineers earn their seat at the table. When plans are discussed on where to go next, how to achieve our shared goals, I see at least four clear ways engineers can contribute:</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li><strong>Effort estimation:</strong> The expertise and knowledge of existing systems and state of technology in general should help assess how much effort is required to implement initiatives. At least roughly speaking, and at least relative to other initiatives. This can affect the order of implementation.</li><li><strong>Suggesting similar, but cheaper alternatives:</strong> Understanding the context and expected outcomes, knowing the state of existing systems and technology, we can often come up with variants of initiatives that are a lot easier to implement, but may have similar results.</li><li><strong>Out of the box thinking:</strong> Tech people have a different background, they think differently — I’ve seen many cases where fresh initiatives come from the tech side of things, simply because they have a different perspective. #diversity</li><li><strong>Planning:</strong> Understanding the larger (long-term) goals, we can think about how to develop the required functionality in the most effective way possible. What parts can be reused, what are the dependencies? What increments can we build to bring <a href="https://zef.me/2020/05/08/making-sense-of-time-to-value/">value faster</a>?<br></li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>So here’s my ask: before moving that JIRA ticket<sup><a id="ffn1" href="#fn1" class="footnote">1</a></sup> from “To Do” to “In Progress” understand where it fits in. What initiative is this part of? What key result are we trying to move with that initiative, and do you buy it? This is your precious time we’re talking about — is this the best use of it, or could you spend it on something that has more impact?</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li id="fn1">Used for rhetorical reasons. Generally the time of moving a ticket on a board is not the most productive time to reflect on things like this. It’d be better to make sure you’re part of the planning process earlier on. <a href="#ffn1">↩</a></li></ol>
<!-- /wp:list -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2135</wp:post_id>
		<wp:post_date>2020-05-29 15:34:50</wp:post_date>
		<wp:post_date_gmt>2020-05-29 13:34:50</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>no-more-requirements</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="articles"><![CDATA[Articles]]></category>
		<category domain="post_tag" nicename="highlight"><![CDATA[highlight]]></category>
		<category domain="category" nicename="mindset"><![CDATA[Mindset]]></category>
		<wp:postmeta>
			<wp:meta_key>_oembed_time_b24c0b4a51e22280448c6f87085dfb64</wp:meta_key>
			<wp:meta_value><![CDATA[1591369546]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_b24c0b4a51e22280448c6f87085dfb64</wp:meta_key>
			<wp:meta_value><![CDATA[<div class="embed-twitter"><blockquote class="twitter-tweet" data-width="500" data-dnt="true"><p lang="en" dir="ltr">When I grow up I want to become <a href="https://twitter.com/rands?ref_src=twsrc%5Etfw">@rands</a>.</p>&mdash; Zef Hemel (@zef) <a href="https://twitter.com/zef/status/712237471082352640?ref_src=twsrc%5Etfw">March 22, 2016</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></div>]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[44837365255]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>timeline_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1590759291]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>More Thoughts on Alternatives to Feedback</title>
		<link>http://zef.me/2020/06/05/more-thoughts-on-alternatives-to-feedback/</link>
		<pubDate>Fri, 05 Jun 2020 15:09:41 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/?p=2139</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>In April I wrote about the <a href="https://zef.me/2020/04/25/zefs-book-club-no-more-feedback/">No More Feedback</a> book. Ever since it’s been in the back of my mind, and I’ve played with and researched some ideas on this topic. Let me share some of my <em>musings</em> and insights.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>A brief recap of the core idea of “No More Feedback” (in case you haven’t lost sleep over it like I have) — again, this is my summary of the book, not my own conclusion (although I do buy into it):</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Feedback is based on the premise that <strong>we need other people to tell us if we are doing well</strong> (and what “well” means), because we cannot assess this successfully ourselves. And, as it turns out, <strong>people are really bad at it</strong>: cognitive biases, self interest, judgement with limited context, violent communication. It’s a mess. Yes, we can work very hard to improve feedback, but it takes more and more of people’s time, lots of training and in the end people still feel bad and the results are questionable. <strong>Feedback is a fundamentally broken concept, and we should avoid it.</strong> The alternative? <strong>Self reflection</strong>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>It’s one of those disruptive ideas, in the same vein as my <em>aha!</em> moment when I finally understood nonviolent communication. Not familiar with nonviolent communication? <a href="https://zef.me/2016/09/28/judgment-is-a-silent-killer/">I wrote about it in the past</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Different from nonviolent communication, which basically gives you a formulaic alternative to harsh, in-your-face judgement — “No More Feedback” does not. At least not one that you can introduce step-by-step without having to rebuild society from scratch, which I’d consider a mild distraction from my job description. Nevertheless, it’s an idea I cannot simply forget, or ignore. Once you buy into it, it leads to a physical cringe every time somebody asks “do you have any feedback for me?” It happens to me regularly — it’s almost literally on my job description, so what to do?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>My first approach was to simply avoid the term. Rather than feedback, I’d have <em>input</em>. “I have some input for you!” Lame, I know. Theoretically you could argue that input is easier to ignore (we’ve all written a function that ignores all inputs and just returns 42), and carries less judgement with it. “It’s just input, use it at your peril.” For instance, “when you said X in that meeting, I saw people roll their eyes.” It’s an objective observation, not a judgement, it’s input, not feedback. Ignore it if you like, interpret it as you like. <a href="https://knowyourmeme.com/memes/its-something">It’s something</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Let’s keep going.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Briefly after writing my previous note on the topic, we had one of our regular internal knowledge sharing sessions (with lightning-style talks). I really appreciated a couple of the talks. In the past I would sometimes reach out to the speakers afterwards with some... feedback. But that was off limits now, right? So what to do? Silence? <strong>Appeal to their inner ability to self reflect?</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Actually, yeah, that’s partially what I ended up doing.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I asked something along the lines of “Hey, thank you for your talk. Were you happy with how it went?” Self reflection! They’d answer, then I’d tell them what I thought was the significance of their talk: “I think a lot of people learned something about CloudFront because of your talk, CDNs are not something all are exposed to day-to-day and I think it’s healthy to be more aware of this part of our stack.” It’s not feedback, it hints at the significance of the effort. <strong>Context as a gift</strong>, if you will. While a nice attempt, I wasn’t fully happy with it. This may have been a replacement for some sort of appreciation round, but the goal of feedback is to make the receiver better, does giving them context do that?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In the <a href="https://www.linkedin.com/posts/zefhemel_zefs-book-club-no-more-feedback-activity-6659717970815709189-4K31">LinkedIn comments</a> of my previous post on No More Feedback, somebody pointed me to <a href="https://www.marshallgoldsmith.com/articles/try-feedforward-instead-feedback/">“FeedForward”</a>. At first I thought this was a joke. <em>Lame name</em>. It wasn’t. The key idea of FeedForward is to purely focus on the future without reference to the past (hence “forward” <strong>clever right!?</strong>):</p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p>Ask for feedforward — for two suggestions for the future that might help them achieve a positive change in their selected behavior. If participants have worked together in the past, they are not allowed to give ANY feedback about the past. They are only allowed to give ideas for the future.</p></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph -->
<p>Who knew LinkedIn could be useful for something else than being harassed by recruiters!</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This idea is similar to what they supposedly <a href="https://engineering.aweber.com/plussing-learning-and-working-in-a-collaborative-environment/">do at Disney called “Plussing”</a>:</p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p>No one says, “No, but…”</p><p>Only, “Yes, and…”</p><p>Instead of subtracting… plussing.</p></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph -->
<p>So the idea is to purely suggest <em>how to make things even awesomer</em>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Next week, the new book from <a href="https://randsinrepose.com">Michael Lopp (a.k.a. “rands”)</a> will come out: <a href="https://amzn.to/3073pE1">“The Art of Leadership: Small things done well.”</a> I say next week, but if you use the “hack” of just... buying it as a Kindle book on Amazon, you’ll get it instantly.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I read it over the weekend.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>A few years ago I <a href="https://twitter.com/zef/status/712237471082352640?s=21">publicly admitted on the twitters</a>:</p>
<!-- /wp:paragraph -->

<!-- wp:core-embed/twitter {"url":"https:\/\/twitter.com\/zef\/status\/712237471082352640?s=21","type":"rich","providerNameSlug":"","className":""} -->
<figure class="wp-block-embed-twitter wp-block-embed is-type-rich"><div class="wp-block-embed__wrapper">
https://twitter.com/zef/status/712237471082352640?s=21
</div></figure>
<!-- /wp:core-embed/twitter -->

<!-- wp:paragraph -->
<p>This was a poor choice of words, <em>becoming</em> would be slightly disturbing — especially to his wife, I’d imagine, but you get the point. Lopp is one of my engineering management heroes: experienced, appears to know what he’s talking about, funny, and a good writer. Until very recently he was VP Engineering at Slack, and previously he worked at Apple and Netscape. I often recommend his previous book <a href="https://www.amazon.com/Managing-Humans-Humorous-Software-Engineering-ebook/dp/B01J53IE1O/ref=sr_1_2?dchild=1&amp;qid=1591279361&amp;refinements=p_27%3AMichael+Lopp&amp;s=books&amp;sr=1-2">Managing Humans</a> to engineering managers.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Why am I mentioning this? Lopp talks about the importance of feedback a lot. There’s two chapters in the book fully dedicated to it (both also available as blog posts, so follow the links): one about <a href="https://randsinrepose.com/archives/rainbows-and-unicorns/">positive feedback in the shape of compliments</a>, and <a href="https://randsinrepose.com/archives/say-the-hard-thing/">one about negative feedback</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>What are you doing to me Lopp, haven’t you heard!? Anyway, of these two ideas the one about complements seems the least “wrong.” A compliment is defined as:</p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p>a selfless, well-articulated, and timely recognition of achievement.</p></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph -->
<p>Breaking that down:</p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p><strong>Recognition</strong> is what you’re trying to provide, but how do you go about this? Is this a compliment you want to land 1:1 at the moment the achievement occurs, or is it the type of compliment that you want to tuck away so you can land it in front of the entire team for maximum recognition? I don’t know. There are so many contextual variables to consider here that it’s hard to give universal advice. Do they need to hear it? Or do others need to hear it about them? Understand what behavior you want to recognize, and why, and make a call.</p><p><strong>Timeliness</strong> is the easiest attribute to understand. My default is to compliment as quickly as possible because I believe it’s the most effective way to reinforce behavior. That’s what we’re doing here, right? The blandest version of what you’re saying is, “This thing you do is important.” The less time you take to make the compliment, the more they’re going to remember — not the compliment itself, but the act that led to the compliment.</p><p><strong>Well-articulated</strong> is the attribute that is the hardest to define and the most important. Let’s start with what looks like a horrible compliment. The vapid “Good job!” seems like an F, right? Not true. A well-timed “Good job!” can be an effective and timely recognition of achievement. Even better, how about this?</p><p>“Thank you for taking the time to build the technical overview document for Q&amp;A. The feature you built is great, and now we better understand not only how to test it, but how to support it.”</p><p>This compliment specifically documents the act, the value, and the impact. It is that detailed articulation that will make it most memorable.</p></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph -->
<p>Note that last example, I think that’s “context as a gift,” no? Great minds think alike. I struggle with the “good job” part still, because it suggests I am to judge what’s good and what is bad behavior. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Anyhoo.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>So we have a few ideas that I’d graciously classify as “better than nothing” in our journey to improve or eliminate feedback from our lives. Although I’m sure Carol Sanford (author of <em>No More Feedback</em>) would <em>still</em> classify them as toxic:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>The lame idea of using the word “input” instead of “feedback” —&nbsp;<em>meh</em>.</li><li>“Thank you, this is why I think this matters” —&nbsp;context as a gift.</li><li>FeedForward and plussing: “This is how you can improve this even more.”</li><li>Compliments: “selfless, well-articulated, and timely recognition of achievement.”<br></li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>And so the journey continues.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2139</wp:post_id>
		<wp:post_date>2020-06-05 17:09:41</wp:post_date>
		<wp:post_date_gmt>2020-06-05 15:09:41</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>more-thoughts-on-alternatives-to-feedback</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="communication"><![CDATA[Communication]]></category>
		<category domain="category" nicename="technique"><![CDATA[Technique]]></category>
		<wp:postmeta>
			<wp:meta_key>timeline_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1591369782]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_time_c97c245be22439031a720cb207ce13ce</wp:meta_key>
			<wp:meta_value><![CDATA[1591369783]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_time_b24c0b4a51e22280448c6f87085dfb64</wp:meta_key>
			<wp:meta_value><![CDATA[1591369830]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_c97c245be22439031a720cb207ce13ce</wp:meta_key>
			<wp:meta_value><![CDATA[<div class="embed-twitter"><blockquote class="twitter-tweet" data-width="550" data-dnt="true"><p lang="en" dir="ltr">When I grow up I want to become <a href="https://twitter.com/rands?ref_src=twsrc%5Etfw">@rands</a>.</p>&mdash; Zef Hemel (@zef) <a href="https://twitter.com/zef/status/712237471082352640?ref_src=twsrc%5Etfw">March 22, 2016</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></div>]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_73621156a9741de03efabe431f37c883</wp:meta_key>
			<wp:meta_value><![CDATA[<div class="embed-twitter"><blockquote class="twitter-tweet" data-width="550" data-dnt="true"><p lang="en" dir="ltr">When I grow up I want to become <a href="https://twitter.com/rands?ref_src=twsrc%5Etfw">@rands</a>.</p>&mdash; Zef Hemel (@zef) <a href="https://twitter.com/zef/status/712237471082352640?ref_src=twsrc%5Etfw">March 22, 2016</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></div>]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_time_73621156a9741de03efabe431f37c883</wp:meta_key>
			<wp:meta_value><![CDATA[1591369723]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[45111537558]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_time_f5ab271ea310a68693231fc889f28bf0</wp:meta_key>
			<wp:meta_value><![CDATA[1591369782]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_f5ab271ea310a68693231fc889f28bf0</wp:meta_key>
			<wp:meta_value><![CDATA[<div class="embed-twitter"><blockquote class="twitter-tweet" data-width="550" data-dnt="true"><p lang="en" dir="ltr">When I grow up I want to become <a href="https://twitter.com/rands?ref_src=twsrc%5Etfw">@rands</a>.</p>&mdash; Zef Hemel (@zef) <a href="https://twitter.com/zef/status/712237471082352640?ref_src=twsrc%5Etfw">March 22, 2016</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></div>]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_b24c0b4a51e22280448c6f87085dfb64</wp:meta_key>
			<wp:meta_value><![CDATA[<div class="embed-twitter"><blockquote class="twitter-tweet" data-width="500" data-dnt="true"><p lang="en" dir="ltr">When I grow up I want to become <a href="https://twitter.com/rands?ref_src=twsrc%5Etfw">@rands</a>.</p>&mdash; Zef Hemel (@zef) <a href="https://twitter.com/zef/status/712237471082352640?ref_src=twsrc%5Etfw">March 22, 2016</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></div>]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_time_81b752e7808883c25c695d14514b34f8</wp:meta_key>
			<wp:meta_value><![CDATA[1593686826]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_81b752e7808883c25c695d14514b34f8</wp:meta_key>
			<wp:meta_value><![CDATA[<div class="embed-twitter"><blockquote class="twitter-tweet" data-width="500" data-dnt="true"><p lang="en" dir="ltr">Introducing the GoLD Stack: GoLang + Lambda + DynamoDB.</p>&mdash; Santiago Martínez Q. (@SMartinezQu) <a href="https://twitter.com/SMartinezQu/status/1269764595813683200?ref_src=twsrc%5Etfw">June 7, 2020</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></div>]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>http://zef.me/image-02-07-2020-13-58-png/</link>
		<pubDate>Thu, 02 Jul 2020 15:08:11 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">http://zefsmusings.files.wordpress.com/2020/07/image-02-07-2020-13-58.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2147</wp:post_id>
		<wp:post_date>2020-07-02 17:08:11</wp:post_date>
		<wp:post_date_gmt>2020-07-02 15:08:11</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>image-02-07-2020-13-58-png</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://zefsmusings.files.wordpress.com/2020/07/image-02-07-2020-13-58.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:880;s:6:"height";i:587;s:4:"file";s:99:"/home/wpcom/public_html/wp-content/blogs.dir/d1d/176754826/files/2020/07/image-02-07-2020-13-58.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:146494;}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/d1d/176754826/files/2020/07/image-02-07-2020-13-58.png]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>The GoLD Stack: A Management Perspective</title>
		<link>http://zef.me/2020/07/02/the-gold-stack-2/</link>
		<pubDate>Thu, 02 Jul 2020 15:24:46 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/?p=2148</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>I only heard the term “GoLD stack” a few weeks ago. As far as I’ve been able to trace it back, it was coined in <a href="https://twitter.com/smartinezqu/status/1269764595813683200?s=21">a tweet</a> (of course) by Santiago Martinez Q.</p>
<!-- /wp:paragraph -->

<!-- wp:core-embed/twitter {"url":"https:\/\/twitter.com\/smartinezqu\/status\/1269764595813683200?s=21","type":"rich","providerNameSlug":"","className":""} -->
<figure class="wp-block-embed-twitter wp-block-embed is-type-rich"><div class="wp-block-embed__wrapper">
https://twitter.com/smartinezqu/status/1269764595813683200?s=21
</div></figure>
<!-- /wp:core-embed/twitter -->

<!-- wp:paragraph -->
<p>It stuck with me for two reasons:</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>It’s a short, catchy name.</li><li>It subtly alludes to being a silver bullet (which we all know doesn’t exist, but <a href="https://zef.me/2018/12/17/the-silver-bullet-romantic/">I still romanticize about</a>).</li><li>We actually use it in OLX, and have positive experience with it in our teams focused on our Jobs category.</li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Some of the people in my team have already written over time about how to use this stack in practice and why we’re excited about it, e.g.:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><a href="https://dev.to/prozz/how-i-go-31jj">Why we like Go</a></li><li><a href="https://dev.to/prozz/serverless-in-go-how-to-write-testable-lambdas-4925">How to write testable lambdas in Go</a></li><li><a href="https://tlakomy.com/why-im-excited-about-serverless">Why even our front-end engineers like serverless</a></li><li><a href="https://maciejwinnicki.com/a-better-way-of-deploying-go-services-with-serverless-framework/">About deploying Go lambda with the serverless framework</a></li><li><a href="https://twitter.com/mthenw/status/1272549552265072640?s=21">How GoLD enables a more cost-aware culture</a></li><li>My colleague from real-estate wrote about <a href="https://dev.to/szymanskilukasz/why-companies-will-adopt-serverless-sooner-than-you-think-27m7">how serverless can give you a competitive edge</a></li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Realizing there’s a catchy name for this stack now, I thought it would be good to jump on this “branding” opportunity. I mildly pushed Paweł to write it up, and he wrote <a href="https://dev.to/prozz/introduction-to-the-gold-stack-5b66">a nice introductory article</a> on the GoLD stack as a result, focused on the technical aspects.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Now, in turn, let me do my part and give you the management perspective of why I’m excited about GoLD.</p>
<!-- /wp:paragraph -->

<!-- wp:quote {"className":"is-style-large"} -->
<blockquote class="wp-block-quote is-style-large"><p>In my mind the GoLD stack could become the <a href="https://en.wikipedia.org/wiki/LAMP_(software_bundle)">LAMP</a> of the 2020s.</p></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph -->
<p>Management people like to think in dimensions, so here are the four dimensions I will cover to show you I’m right (in case you’d even doubt me):</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>Scaling and cost transparency</li><li>Time to value</li><li>Onboarding</li><li>Culture and recruitment</li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>To be clear, while GoLD nicely captures the core of the stack, it doesn’t describe a full one. In our context, in addition to using Go to write our Lambdas, and using DynamoDB as the main data store, we deploy using the <a href="https://www.serverless.com/">serverless framework</a>, and are heavy users of SNS, SQS, Kinesis, and S3 as well. </p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Scaling and cost transparency</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>When AWS launched 14 years ago one of its selling points was “pay for what you use.” In those early days, with primarily S3 and EC2 as services offered, this meant: you pay for the data you store, and the hours you run your VMs. Still, for the compute part it didn’t really matter if you used all of the CPU cycles, memory or allocated disk space — you picked your instance type, and you paid for the whole thing independent of “internal” utilization. If you outgrew your instance, you either scaled horizontally by adding another instance, or vertically by spinning up a bigger instance. Over the past 14 years the AWS offering evolved a lot into two dimensions (yes, dimensions again):</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>A suite of “serverful” services, where visibly you spin up a cluster of EC2 instances (and associated services) that are preconfigured and managed by AWS to run some specific service, such as most of RDS, ElastiCache, Redshift, ECS, and EKS. AWS takes a lot of the operational burden (maintenance, backups, sometimes upgrades, sometimes scaling) but the way you provision these is still at the level of EC2 instances, so you select instance types, cluster sizes, scaling policies, availability zones etc.</li><li>A suite of “serverless” services, where the level of abstraction is higher and you tend to pay per request, messages passed, CPU cycles consumed, storage used, and are pretty much oblivious to the resources that power them behind the scenes — services like this include SNS, SQS, S3, Lambda, DynamoDB, and API gateway.</li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Now intuitively, while you lose some level of control with the serverless options, what’s good is there’s a <em>very</em> close correlation between actual use and cost. If your lambda is never invoked, your cost will be close to $0, if you never put an object in S3, you pay nothing. But if you do see use, it’s fairly easy to calculate and track what the cost would be and exactly where the money goes.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This tends to be much more implicit with many of the “serverful” services, where you pay e.g. for a 3 node DB cluster which will initially be underutilized, eventually reach capacity and then you need to scale it. The granularity is always measured in nodes, though, not e.g. number of read or write operations to particular tables like DynamoDB.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Aren’t serverless solutions more expensive at scale, though? I think there are cases where it may be, but in our use and experience thus far at OLX — consistently the conclusion has been that it’s been surprisingly affordable, and cheaper than serverful options. In all transparency though, we’re still early in the journey of pushing GoLD into areas with our highest traffic.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Time to value</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Project built on the GoLD stack seem to see their first production release more quickly than non-GoLD projects, and quicker iterations after. This means: a <a href="https://zef.me/2020/05/08/making-sense-of-time-to-value/">short time-to-value cycle</a>, which I’ve written about in the past. To be honest, I don’t have a large set of datapoints to prove this, but this is my impression. It’s not clear to what extent this has technological reasons or more of a cultural background (I’ll get to culture later). </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>From a technical perspective, it makes sense. Assuming you have an AWS account ready to go, all you need to do is install the serverless framework, look at some example serverless.yml file with Go examples, perhaps add a DynamoDB table definition, and <code>sls deploy</code> and you essentially have a production ready setup, no prepared additional infrastructure required (such as kubernetes, ECS, EB or database clusters). </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Because solutions built on the GoLD stack (or serverless in general) tend to involve a mix or a number of AWS services that are hard to fully emulate locally, testing in “production” (actual AWS) is largely inevitable. Sure, you write most of <a href="https://dev.to/prozz/serverless-in-go-how-to-write-testable-lambdas-4925">your automated tests at the lambda level</a>, but to truly test the integrated whole, the best way to get confidence is to push it to either a staging environment on AWS, but since that “staging environment” is effectively the same thing as production — why not push it to production as well? Feature flags control access to features anyway, right? <em>You are using feature flags, right?</em></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If it’s <em>technically</em> easy to push to production, you just do it more often, because why not? It adds to the level of confidence you have that things actually work the way they should, even if customers don’t get to interact with all of it yet.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Another hint about why the GoLD stack may have a shorter Time to Value is nicely visualized <a href="https://specify.io/concepts/serverless-baas-faas">in this graphic</a> (under “Serverless”):</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":2147} -->
<div class="wp-block-image"><figure class="aligncenter"><img src="https://zefsmusings.files.wordpress.com/2020/07/image-02-07-2020-13-58.png" alt="" class="wp-image-2147" /></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>You simply get a larger part of your stack “for free,” which saves time. To read more about the angle of why serverless makes a lot of business sense, read <a href="https://dev.to/szymanskilukasz/why-companies-will-adopt-serverless-sooner-than-you-think-27m7">Łukasz’ excellent post on the topic</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Onboarding</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>As alluded to, deploying something basic on a GoLD stack is quite trivial, and an engineer can likely do this on her first day even if starting out with an empty AWS account.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Go as a language</strong> is relatively simple. To some it may feel unnecessarily low-level, but once you get over the fact you have pointer and non-pointer types, people with a solid programming background tend to be productive in Go in a matter of days. And quickly, you simply know the entire language, and it’s a matter of learning the “Go way” to solve problems. Go is very explicit, there’s little magic, relatively few “gotchas” compared to other languages, and there’s little room for clever APIs that allow you to write that <code>for</code>-loop in a single line, like other languages like Kotlin, Ruby, Rust and Scala would let developers do. Likely, you just have to suck it up and write out the <code>for</code>-loop every time, but at least anybody new to the project (and even new to the language) will instantly understand what’s going on, without being aware of magic provided by macros, reflection, aspects, or dynamic code generation.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>From a management perspective, there’s a lot to like about Go as well: it’s a relatively mature language, has a mature ecosystem, has solid backing from Google and others, it has proven to scale to large code bases (types help) if that would be required (ideally it wouldn’t be, lambda ought to be small), and it comes with a toolchain that eliminates the need for unproductive discussions, such as:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>How code ought to be formatted (<code>go fmt</code> decides)</li><li>What package manager to use (<code>go mod</code>)</li><li>How to keep code clean and consistent: some things like capitalization of type and function names change semantics, and various types of dead code, like dead imports and dead variable declarations simply result in compile-time errors, <code>go vet</code> checks for various other pitfalls</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Of course, the default toolchain doesn’t predefine everything, but it’s a solid baseline.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>On AWS lambda, Go is a <a href="https://docs.aws.amazon.com/lambda/latest/dg/golang-handler.html">first-class citizen</a>, you don’t need custom runtimes to run it, and the Go <a href="https://aws.amazon.com/sdk-for-go/">AWS SDK</a> is well maintained.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Lambda as a runtime</strong> is easy to grasp. The event model may be a bit of a mind bend if you’re not used to thinking this way (but that may be a good thing —&nbsp;I’ll talk about cultural aspects later). But conceptually there’s not that much you need to understand to write lambdas: you write Go code, compile it, zip up the binary (which the serverless framework will upload to S3), and when certain events occur (such as SNS notifications, SQS messages, incoming API Gateway calls, DynamoDB stream events) your code is pulled down and run in some environment where your only real lever is how much memory you allocate to it (although this <a href="https://dev.to/byrro/how-to-optimize-lambda-memory-and-cpu-4dj1">has implications on CPU as well, which is a bit of a gotcha</a>).</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Running Go on lambdas is a good fit, because Go compiles into a single binary, which is quick for the lambda environment to pull down and boot. Also, since Go processes require relatively little memory, you can run them in low-memory (and therefore cheaper) configurations if that makes sense. There’s a lot of ado about lambda cold starts (whether your lambda invocation will boot up a new lambda process or reuse an already running one, which obviously is more performant), but if you write in Go this is of relatively little concern — in this sense it’s probably one of the fastest options. There’s a story (not sure about the source) that the original API Gateway implementation runs on AWS Lambda with the logic implemented on top of the Java runtime, which has serious cost implications (because Java cold starts are slower and the JVM consumes quite a bit of memory). The new HTTP API offering is supposedly implemented in Go, and as a result <a href="https://aws.amazon.com/api-gateway/pricing/">significantly cheaper</a>. Needs citation.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>DynamoDB as a database</strong> is probably the tougher case in terms of onboarding. A little while ago <a href="https://www.dynamodbbook.com/">The DynamoDB Book</a> came out, essentially a must read if you would like to use this service. Going through it, my main learning is that you need to be willing to <em>unlearn</em> almost everything you learned about database design assuming you grew up with relational databases (as I did). Which, for some, is going to be exciting, but for others may be too much of a whack out of their comfort zone, and not a good fit.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>As a database, you get a flexible enough database (once you understand how to properly model things) that scales like butter. You pay only for the data stored and operations performed. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Which naturally transitions us to the last dimension: culture and recruitment.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Culture and recruitment</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>There’s a few ways that I see the GoLD affecting engineering culture:</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li><strong>Cost awareness </strong>— because of the pay-for-use model, engineers become very sensitive and aware of cost and closely monitor it.</li><li><strong>DevOps built-in</strong> — we have one SRE for two teams, but much of the infrastructure work (in serverless.yml) is done by engineers. There’s just less to learn and worry about than some alternatives like kubernetes, so even simpleton engineers can manage the infra 😛. </li><li><strong>Focus on monitoring </strong>— without proper monitoring, it’s rather hard to even debug basic issues on this stack. Since there’s so many interconnected, but loosely coupled parts, it is simply impractical not to invest in monitoring early. Luckily AWS publishes plenty of CloudWatch metrics about every deployed resources, and aggregates logs from lambda automatically — all that remains to be done is putting it together with dashboards and alerts.</li><li>The <strong>type of people </strong>attracted to this stack is a bit different — let me expand on that in the context of recruitment.</li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p><strong>On recruitment.</strong> Let’s be realistic. GoLD may be cool, but it’s far from being mainstream. The chances you will be able to recruit people with many years of GoLD experience on their CV is very low.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>While this is a clear disadvantage compared to recruiting for e.g. engineers working on a LAMP stack, or a Java/Spring stack — a population that is <em>significantly</em> larger. It does provide an opportunity to recruit for a different mindset and culture — one that is less focused on reusing stack-specific knowledge acquired over the years, and more comfortable stepping out of their comfort zone and struggle a bit while learning something different. Something <em>quite</em> different, both in the language, architectural and data model dimensions.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>However, to be able to support such a thing, you do need to bootstrap this process somehow. It happened to be me (humility alert) who brought the GoLD stack (then still unnamed) to OLX, with no experience in this stack whatsoever. Over time we made some key hires that compensated for this sheer lack of experience, and worked our way out of all my rookie mistakes (most of the code I wrote back 2 years ago when we started this journey, has been rewritten by now).</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>However, the result is that we, by now, have a solid foundation on how to structure our code, write tests, model data, structure our pipelines, as well as some reusable libraries used across projects. With this in place, the scaling in terms of teams can happen. A few months ago we onboarded an existing team (with no previous Go, Dynamo or serverless background) to the GoLD stack, which, within a quarter of close collaboration with a more experience team, was perfectly able to stand on its own feet. We have also hired some new people, or moved people internally previously working in different roles (such as front-end) that had limited previous experience, and onboarded them quickly. We’re pretty confident we can scale further when we need to. But the openness and mindset needs to be there.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>We’re not in a hyper growth mode in terms of scaling teams right now (also due to COVID), so we still have to see how easy it will be to recruit more people with this profile, but I’m hopeful.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>The management perspective</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>In management there’s a lot of angles (I won’t use the word “dimensions” again, so let me switch to synonyms) to consider when deciding on technology stacks: maturity of the ecosystem, productivity, reliability, availability of talent able — and willing — to work on the stack in the short, but also long term. There’s no silver bullet solution to this challenge. However... luckily there’s a GoLD bullet solution 🙃</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2148</wp:post_id>
		<wp:post_date>2020-07-02 17:24:46</wp:post_date>
		<wp:post_date_gmt>2020-07-02 15:24:46</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>the-gold-stack-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_oembed_time_4412d6b73e4f6dcfc6b638913a6acd9a</wp:meta_key>
			<wp:meta_value><![CDATA[1603463248]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_4412d6b73e4f6dcfc6b638913a6acd9a</wp:meta_key>
			<wp:meta_value><![CDATA[<div class="embed-twitter"><blockquote class="twitter-tweet" data-width="550" data-dnt="true"><p lang="en" dir="ltr">Introducing the GoLD Stack: GoLang + Lambda + DynamoDB.</p>&mdash; Santiago M. (@SantiagoMQui) <a href="https://twitter.com/SantiagoMQui/status/1269764595813683200?ref_src=twsrc%5Etfw">June 7, 2020</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></div>]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_time_506cbf5ef9a8338b2745360dbc037a28</wp:meta_key>
			<wp:meta_value><![CDATA[1593703487]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_time_5505d0ca90d281dae2a9744e0b03f47b</wp:meta_key>
			<wp:meta_value><![CDATA[1593702687]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[the-gold-stack]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[46112357642]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_time_81b752e7808883c25c695d14514b34f8</wp:meta_key>
			<wp:meta_value><![CDATA[1593703575]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_81b752e7808883c25c695d14514b34f8</wp:meta_key>
			<wp:meta_value><![CDATA[<div class="embed-twitter"><blockquote class="twitter-tweet" data-width="500" data-dnt="true"><p lang="en" dir="ltr">Introducing the GoLD Stack: GoLang + Lambda + DynamoDB.</p>&mdash; Santiago Martínez Q. (@SMartinezQu) <a href="https://twitter.com/SMartinezQu/status/1269764595813683200?ref_src=twsrc%5Etfw">June 7, 2020</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></div>]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>timeline_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1593703487]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_5505d0ca90d281dae2a9744e0b03f47b</wp:meta_key>
			<wp:meta_value><![CDATA[<div class="embed-twitter"><blockquote class="twitter-tweet" data-width="550" data-dnt="true"><p lang="en" dir="ltr">Introducing the GoLD Stack: GoLang + Lambda + DynamoDB.</p>&mdash; Santiago Martínez Q. (@SMartinezQu) <a href="https://twitter.com/SMartinezQu/status/1269764595813683200?ref_src=twsrc%5Etfw">June 7, 2020</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></div>]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_time_c8abff15b14c2f160dbabf23b4afc415</wp:meta_key>
			<wp:meta_value><![CDATA[1593703489]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_c8abff15b14c2f160dbabf23b4afc415</wp:meta_key>
			<wp:meta_value><![CDATA[<div class="embed-twitter"><blockquote class="twitter-tweet" data-width="550" data-dnt="true"><p lang="en" dir="ltr">Introducing the GoLD Stack: GoLang + Lambda + DynamoDB.</p>&mdash; Santiago Martínez Q. (@SMartinezQu) <a href="https://twitter.com/SMartinezQu/status/1269764595813683200?ref_src=twsrc%5Etfw">June 7, 2020</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></div>]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_506cbf5ef9a8338b2745360dbc037a28</wp:meta_key>
			<wp:meta_value><![CDATA[<div class="embed-twitter"><blockquote class="twitter-tweet" data-width="550" data-dnt="true"><p lang="en" dir="ltr">Introducing the GoLD Stack: GoLang + Lambda + DynamoDB.</p>&mdash; Santiago Martínez Q. (@SMartinezQu) <a href="https://twitter.com/SMartinezQu/status/1269764595813683200?ref_src=twsrc%5Etfw">June 7, 2020</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></div>]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Zef’s Razor</title>
		<link>http://zef.me/2020/07/30/zefs-razor/</link>
		<pubDate>Thu, 30 Jul 2020 07:03:15 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/?p=2170</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>I have a core belief. One that even when I mention it to people makes <em>myself</em> think: “Oh, that’s so cute Zef, I hope nobody will ever burst that cutesy little bubble of yours!”</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Ready?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Here goes.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>People have good intentions.</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I know, right? <em>So cute!</em></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Now I know, people do terrible things to each other and always have. I don’t want to downplay that fact. However, all of this horribleness seems to have resulted in many people assuming the <em>worst</em> in people by default, also in corporate environments. And assuming the worst in people is immensely harmful, and frankly, a <a href="https://muselet.substack.com/p/fixed-the-muselet-0-get-on-the-party">terrible party killer</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Therefore, I’m actively trying to push back on the assuming-the-worst assumption, by starting at the complete other end: unless explicitly, unambiguously proven otherwise, <strong>I will assume people have good intentions.</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>And so far I’ve yet to encounter exceptions. I may be lucky, and at some level I’m expecting to be proven wrong any day now, but it’s been years since I started to operate under this assumption, and so far it has never happened.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>“Seriously, Zef, have you never seen anybody do something that was obviously malicious or political?”</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Of course, I’ve seen people do things that <em>could be interpreted</em> as malicious or political. However, whenever that happens, I see it as my duty to figure out what “the real story” is. What is this person’s context? Why did that person say that thing? What did this person mean? I do this detective work using advanced techniques including <em>empathy</em> and <em>talking to them</em>. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>“Yowowow, you <em>what</em> now!?”</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>It’s kinda crazy, I agree.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>But, guess what? Every single time the conclusion is the same: it wasn’t meant the way it sounded. As it turns out: this person —&nbsp;a pretty decent human being as well.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Every. Single. Time. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You may have heard of <a href="https://en.wikipedia.org/wiki/Hanlon%27s_razor">Hanlon’s razor</a>:</p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p>“Never attribute to <em>malice</em> that which is adequately explained by <em>stupidity</em>.”</p></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph -->
<p>It’s a funny <a href="https://en.wikipedia.org/wiki/Aphorism">aphorism</a> (that’s a fancy word for such things, I’ll use this term too —&nbsp;makes me look smart). However, I find it <em>mildly</em> cynical. Honestly, just like me believing people have good intentions, I also don’t believe they’re stupid. Yeah, I clearly think a lot of people. Again, you may <em>think</em> somebody’s stupid based on what they say, but if you take the time to dive into their context, intentions, almost every single time you’ll find — actually, this person: not so stupid after all.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Therefore, I feel it is my duty to coin my own variant of Hanlon’s razor, which —&nbsp;self-centered that I am — I shall name <strong>Zef’s razor</strong>:</p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p>“Never attribute to <em>malice</em> that which is adequately explained by <em>miscommunication</em>.”</p></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph -->
<p>Slightly less pointy, perhaps, but much more in line with my values and core beliefs.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>One of those core beliefs is that, even though we’re super reliant on it as a species, people <em>suck</em> at communication. Ever noticed that? It's shocking we haven't gone extinct as a result, frankly speaking. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I should admit that I sometimes envy people that don’t think the way I do. If you think much more black and white, your life is much simpler. You’re either in or out; stupid or not; good or bad; with us or with the terrorists. It’s an attractive way to see the world. People get elected president with such mindsets. It gets you places.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>But no. I can’t.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>As I alluded to in my previous email: if somebody seems to be saying something stupid, or something that seems malicious —&nbsp;it’s on me to dig in and understand what’s really going on. Perhaps to see if I will finally disprove my theory about people’s good intentions.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>So far, no dice. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I should add that while this all may sound very idealistic and nice, it has caused me trouble in the past.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In cases of conflict between people around me, I effectively never pick sides, even if people expect me to, or feel I should. In such cases I immediately jump into “detective mode” trying to <em>debug</em> the situation: Who said what to whom, what did they mean, where did that come from? Ah! So that’s your side of the story. What about the other side? Ah! That makes sense as well. I get it now, nobody’s fully right or wrong, but all meant well. Check.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Academically, this is a nice exercise. And it helps me reconfirm my <em>people have good intentions</em> hypothesis, but for the people in question that are hungry for my support — it’s not always very comforting. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Sorry, I still prefer it to the alternative of allowing me to think “yeah, that person is just evil and this is just one of their classic moves.” Nope, ain’t gonna happen.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Never attribute to malice that which is adequately explained by miscommunication.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Zef’s razor.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>PS:</strong> Zef’s razor is not the first aphorism I named after myself. About 8 years ago I coined <a href="https://zef.me/2012/12/18/zefs-law/">“Zef’s Law”</a> based on my experience at that time operating a reasonably large web application (Cloud9 IDE). In a sense it was <a href="https://en.wikipedia.org/wiki/Murphy%27s_law">Murphy’s Law</a> (“anything that can go wrong will go wrong”) <em>scaled up</em> and slightly more strongly worded.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Zef’s law:</p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p>“Everything that can possibly go wrong, will immediately blow up in your face.” </p></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph -->
<p>That was 8 years ago, it was time for something new.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2170</wp:post_id>
		<wp:post_date>2020-07-30 09:03:15</wp:post_date>
		<wp:post_date_gmt>2020-07-30 07:03:15</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>zefs-razor</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[47147507078]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>timeline_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1596092596]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>The Muselet</title>
		<link>http://zef.me/the-muselet/</link>
		<pubDate>Thu, 30 Jul 2020 07:07:07 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/?page_id=2175</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2175</wp:post_id>
		<wp:post_date>2020-07-30 09:07:07</wp:post_date>
		<wp:post_date_gmt>2020-07-30 07:07:07</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>the-muselet</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_customize_changeset_uuid</wp:meta_key>
			<wp:meta_value><![CDATA[abee4b15-e466-4b1b-a5e5-12d4c5c58022]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>The Muselet</title>
		<link>http://zef.me/2020/07/30/the-muselet/</link>
		<pubDate>Thu, 30 Jul 2020 07:07:07 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/2020/07/30/the-muselet/</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2178</wp:post_id>
		<wp:post_date>2020-07-30 09:07:07</wp:post_date>
		<wp:post_date_gmt>2020-07-30 07:07:07</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>the-muselet</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>2</wp:menu_order>
		<wp:post_type>nav_menu_item</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="nav_menu" nicename="primary"><![CDATA[Primary]]></category>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object_id</wp:meta_key>
			<wp:meta_value><![CDATA[2178]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_menu_item_parent</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_type</wp:meta_key>
			<wp:meta_value><![CDATA[custom]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_content</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_xfn</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_url</wp:meta_key>
			<wp:meta_value><![CDATA[https://muselet.zef.me]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_classes</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_target</wp:meta_key>
			<wp:meta_value><![CDATA[_blank]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object</wp:meta_key>
			<wp:meta_value><![CDATA[custom]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Phil’s Last Dance</title>
		<link>http://zef.me/2020/08/14/phils-last-dance/</link>
		<pubDate>Fri, 14 Aug 2020 11:06:43 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">http://zef.me/?p=2180</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph {"dropCap":true} -->
<p class="has-drop-cap">“I don’t often do this,” my boss said, “but I’d almost&nbsp;<em>insist</em>&nbsp;on you watching&nbsp;<a href="https://www.netflix.com/title/80203144?s=i&amp;trkid=0">The Last Dance</a>. Let’s talk about it afterwards.”</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>My boss used to be a pretty serious basketball player. He often makes basketball references. “You cannot always be&nbsp;<a href="https://en.wikipedia.org/wiki/Scottie_Pippen">Pippen</a>,” he’d say, “sometimes you have to be&nbsp;<a href="https://en.wikipedia.org/wiki/Michael_Jordan">MJ</a>.”</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Solid advice! If... well, you know who those people are, and what they represent.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To get the right vibe while reading the rest of this post, and to ensure you have the proper experience, be sure you play <a href="https://open.spotify.com/track/5xXL4i9L2ZbKBtENNh8fWY?si=YreRq-MUSE-QAJwo2aMK5Q">“Step into a World” by KRS-One</a> in the background. In a loop. <em>Ad nauseam.</em> It’s part of the experience.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In fact, to really optimize the value out of this email, simply watch&nbsp;<em>The Last Dance</em>&nbsp;right now. It’s just 10 hours. I’ll wait.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Back? Cool. How was it?&nbsp;</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>While watching it myself, I realized I completely forgot how big of a deal&nbsp;<em>The Chicago Bulls</em>&nbsp;and basketball were during the ‘90s. I was in primary school at the time, I was not attracted to sports in any way, but I played basketball with friends. I had a Chicago Bulls cap. On the&nbsp;<a href="https://en.wikipedia.org/wiki/Game_Boy">Gameboy</a>&nbsp;that me and my brother saved up for,&nbsp;<a href="https://en.wikipedia.org/wiki/NBA_Jam">NBA Jam</a>&nbsp;was one of our first games. And one of the first VHS tapes we bought was&nbsp;<a href="https://www.imdb.com/title/tt0117705/">Space Jam</a>&nbsp;— best movie ever, if you haven’t seen it let me sell you on it: Bugs Bunny, Michael Jordan&nbsp;<em>in space</em>. I know, right? Solid winner.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Also, honestly, simply watching those basketball moves, dunk after dunk, with KRS-One in the background is just...&nbsp;<em>cool</em>. It’s just cool.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If only software or management was 10% this cool. It isn’t.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>But this is not a site about random Netflix shows (yet). So, why would a <em>sports documentary</em> be worth watching as a person interested in managing engineers?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>One of the things that makes engineering management interesting to me is the sheer amount of dimensions to it. Based on the challenges you face day to day you’ll be sucked into sometimes the people topics, sometimes the technology topics, sometimes communication topics.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>And then, you watch a Netflix show, and you’re reminded of a management topic that wasn’t completely top of mind, and you start&nbsp;<em>musing</em>&nbsp;on it: am I thinking about and doing enough in this area myself? Can we apply lessons from basketball to the world of software?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>So what is that area in&nbsp;<em>The Last Dance</em>&nbsp;for me?</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Coaching</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>If you look at the three key players in The Bulls (MJ, Pippen, Rodman), none of them by themselves would have been enough to win all those NBA championships. Not even MJ. It wasn’t the act of scouting and recruiting those three guys into the team either. Nor was it just putting these individuals into one team. Obviously, there was a huge amount of&nbsp;<em>potential</em>&nbsp;created there, but that potential needs to be tapped, and&nbsp;<em>this is the role of the coach</em>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This is completely relevant to software teams. You, as an engineering manager, recruited, inherited or through some other means got a group of individuals handed to you. Now, how do you turn that group of individuals full of potential into a coherent, productive team? Honestly, that’s a pretty succinct job description of what is expected from an engineering manager. There’s many tactics to this job, but coaching for sure is a vital one.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>It’s my impression the sports world is far ahead of our industry when it comes to mastery (and appreciation) of this coaching role. Over the last years I’ve read a good few books about coaching, many coming from sports people: for instance&nbsp;<a href="https://amzn.to/2XrNa21">The Score Takes Care of Itself</a>&nbsp;(by baseball coach Bill Walsh) or&nbsp;<a href="https://amzn.to/2D7ZuOd">Leading</a>&nbsp;(by soccer coach Alex Ferguson). Even&nbsp;<a href="https://amzn.to/3kbxb1J">the coach that had the biggest impact on Sillicon Valley, Bill Campbell,</a>&nbsp;had a college football coaching background.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>So, while you&nbsp;<em>thought</em>&nbsp;you were watching a documentary about Michael Jordan, the real hero of the story is&nbsp;<a href="https://en.wikipedia.org/wiki/Phil_Jackson">Phil Jackson</a>, their coach. You didn’t realize? No worries, neither did the makers of the documentary. Sadly.<img src="https://cdn.substack.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F31961c69-78f3-4636-bcf7-64b323f23d83_840x490.jpeg" alt="" /></p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2><strong>Phil’s challenge</strong></h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Here’s the Phil Jackson challenge translated to our world:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Imagine your employer hired the world’s best software engineer. To draw the parallel with MJ, let’s say this this is a&nbsp;<em>he</em>. He’s insanely talented. Productive. Smart. He knows he’s good too. Also: as a result, he’s (excuse my French) kind of a&nbsp;<em>dick</em>. Yes, a brilliant jerk.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Now let’s assume you need to embed this engineer into your team (I’m not sure this be the go-to scenario in our industry, but let’s assume). Luckily, your employer hired two more extremely talented guys (and a bunch of extra “padding”).</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The second person is a real team player, also extremely talented, originally hired as an intern and therefore significantly underpaid. He knows it too. Due to COVID, you cannot raise his salary. He’s pretty affected by this, and acts out from time to time at unpredictable times.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><a target="_blank" href="https://cdn.substack.com/image/fetch/c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F31961c69-78f3-4636-bcf7-64b323f23d83_840x490.jpeg" rel="noreferrer noopener">The third person is another go getter. He will get things done through sheer force. He’s also quite a character, and not extremely reliable. He parties hard, ends up marrying a&nbsp;</a><a href="https://en.wikipedia.org/wiki/Carmen_Electra">Baywatch actress</a>, and may sometimes just disappear for a few days “to blow off steam.” When he’s there, though, he brings the value.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>“You’re welcome,” your employer says. “These are some of the top people in the industry. We expect great things from them! If you don’t make it happen, no worries, you’re — how does Trump put it — just fired.”</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In addition to these guys, you have a bunch of other people in the team. They’re pretty amazing too. In other teams they would be the top players, but with those other three guys around —&nbsp;they play second fiddle. And they know it, with varying levels of frustration. Some may threaten to leave the company if they don’t see a path to the top, and some actually do.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This is the Phil Jackson challenge. Enjoy!</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>As mentioned, our insight into what Phil Jackson was doing behind the scenes is limited, as this is really an MJ documentary (at least the documentary makers thought so, so that’s how it’s structured).</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>We do learn a few things though.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>One, Phil spends&nbsp;<strong>significant time with his players one-on-one</strong>, coaching them to be their best-possible self.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Probably the most visible accomplishment here is that Phil, somehow, manages to convince MJ that he actually needs his team for more than just passing him the ball whenever it’s not already present in his hands. He’s teaching him to rely on his team, and sometimes handing things over to them to get them done. You can tell this is hard for MJ, but you can see that the championship winning only starts when he gives more to his team and relies more on them. And then, from time to time, in key games, the deciding shot isn’t made by MJ but by other people in the team.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I’m sure Phil Jackson did similar work with with Pippen, Rodman and the rest of the team. Jackson’s approach to each, for sure, was 100% different. MJ is no Pippen, Pippen is no Rodman, and Rodman is... skipping his 1:1 time with Phil, because he’s&nbsp;<a href="https://people.com/sports/dennis-rodman-once-left-michael-jordan-and-the-bulls-to-wrestle-with-hulk-hogan-during-the-nba-finals/">wrestling with Hulk Hogan</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Whenever it comes to coaching, I’m reminded of this quote from the&nbsp;<a href="https://amzn.to/3k6oGW0">Trillion Dollar Coach</a>&nbsp; —&nbsp;a great book about Bill Campbell, founder of Intuit and later coach to a shocking number of big names in Silicon Valley (emphasis mine):</p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p>When Brad Smith took over as CEO of Intuit, Bill told him that he would go to bed every night thinking about those eight thousand souls who work for him. What are they thinking and feeling? How can I make them the best they can be? Ronnie Lott says, when talking about two coaches he worked closely with, Bill Walsh and Bill Campbell: “<strong>Great coaches lie awake at night thinking about how to make you better.</strong>They relish creating an environment where you get more out of yourself. Coaches are like great artists getting the stroke exactly right on a painting. They are painting relationships. Most people don’t spend a lot of time thinking about how they are going to make someone else better. But that’s what coaches do. It’s what Bill Campbell did, he just did it on a different field.”</p></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph -->
<p>So,&nbsp;<strong>individualization</strong>&nbsp;is the first task of a coach.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The second thing is bringing the people together as a group. Sadly, we don’t get to see a lot about this in the documentary (other than some yoga session shots), but I found&nbsp;<a href="https://www.newyorker.com/news/q-and-a/how-the-nba-has-changed-since-the-jordan-rules">a New Yorker interview with Sam Smith</a>&nbsp;(journalist also appearing in&nbsp;<em>The Last Dance</em>, the guy that wrote the nasty “Jordan Rules” book) with a bit more insight:</p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p>One of his [Phil Jackson’s] strengths that was often overlooked or unappreciated was this great ability he had to bring a group together. He grew up in congregations. His parents were Pentecostal ministers. So he treated his team like a congregation, and with a combination of being aware of the needs of the individual while also promoting and celebrating the group. I wasn’t in a lot of the yoga sessions, but I’d be on the bus, and we would be in, like, Seattle. And he would go, “We’re going to Portland.” Everybody else flew. He said, “We’re going to take the bus, because I want you guys to see what the countryside is, the beautiful countryside up here.” So we’re taking a bus from Seattle, we’re getting off, having to eat.</p></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph -->
<p>This has changed in modern NBA life:</p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p>Nothing like that exists anymore. They have their own trainers and they have their own staffs, and they don’t even want to work out with the team half the time.</p></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph -->
<p>So:</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>Invest deeply in your team as&nbsp;<strong>individuals</strong>: lose sleep over how to make your people better.</li><li>Invest deeply in making your team work as a&nbsp;<strong>group</strong>.</li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Easy.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Think about how you can be more of a Phil to your team.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>PS: I never realized is how much teams like&nbsp;<em>The Bulls</em>&nbsp;at the time were built around a single star. A lot of the “team work” seemed to be (at least initially) focused on “how do we get the ball to MJ?” This is such an anti-pattern in our line of work. We constantly ask: where are our bottlenecks, how do we remove them? Bus factor, bus factor, bus factor! No such question seemed to be the priority at&nbsp;<em>The Bulls</em>. Luckily, Michael Jordan was such an insane talent that even&nbsp;<strong>with food poisoning and high fever</strong>&nbsp;he was able to perform his bottleneck role. Yay, I guess?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Speaking about the documentary with my boss afterwards, he gave some background about how different teams in the NBA have different strategies around this. Some, like the Bulls at that time, indeed built their team around a single superstar. Then, when that group is no longer sustainable, e.g. due to cost or simply because they get too old, the whole team is flipped over and “rebuilt.” Other teams have more of a long-term sustainable model, where new talent is constantly brought in, slowly groomed to take over from other players. There’s a clear succession plan and strategy.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>PPS: This post was originally published as an issue of my weekly newsletter “<a href="https://muselet.substack.com/">The Muselet</a>.” Liked it? Consider <a href="https://muselet.substack.com/">subscribing</a>.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2180</wp:post_id>
		<wp:post_date>2020-08-14 13:06:43</wp:post_date>
		<wp:post_date_gmt>2020-08-14 11:06:43</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>phils-last-dance</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="highlight"><![CDATA[highlight]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[47702255674]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>timeline_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1597403204]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>The Human Need to Vent</title>
		<link>http://zef.me/2020/08/19/the-human-need-to-vent/</link>
		<pubDate>Wed, 19 Aug 2020 17:57:04 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">http://zef.me/?p=2185</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p id="1dbc">All hands meeting&nbsp;<em>around the globe</em>&nbsp;have taken a turn for the worse since the COVID crisis hit, as people have been forced to start working from home. I thought it was just in my company, but talking to some friends working elsewhere, it seems to be a pattern. Q&amp;A sessions get more passive-aggressive questions than usual, seemingly ridiculous questions are asked, and a lot of frustration aired.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="8b6f">What’s going on?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="540b">I’ve been thinking about this, and discussing this with various people. It’s likely a combination of many factors. Let’s look at some dimensions and potential sources of&nbsp;<strong>smacks</strong>&nbsp;in people’s faces that accumulated over time. Some people have been affected by just a couple of these, or even had an opposite response. Some people will have been disproportionally hit and are in a particularly bad place right now.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="531b">Dimension 1: COVID.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="db3d">This one hit us in phases.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="18f4">Phase 1: Panic. COVID hit, offices started to close, everybody all of a sudden had to work from home —&nbsp;<strong>smack</strong>. People were scared. They didn’t know what to expect regarding their health, worried about themselves, their family —&nbsp;<strong>smack</strong>. Will there be food? Will I still have a job? Will I have enough toilet paper? Are we near the zombie apocalypse?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="2ac1">Phase 2: Adjustment. Ok, this is going to last a while, and we’re in a pretty locked down mode. The first effects on the economy started to appear, people being laid off. Certain parts of the economy are just completely on hold. Thank god, we’re not in the restaurant, hotel, travel industry. My home situation rather sucks though. Kids running around. No space to work, constant distraction, how long is this going to last?&nbsp;<strong>Smack</strong>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="7293">Phase 3: Hope. For some companies, after the economy reopened, business results went back up. Things are slowly getting back to normal, right? Phew.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="7f1b">Dimension 2: growth opportunities. Many companies, in response to crisis and ambiguity about what will happen next, locked many things down. Perhaps salaries were frozen&nbsp;<strong>smack</strong>, promotions frozen&nbsp;<strong>smack</strong>, bonuses canceled&nbsp;<strong>smack</strong>, recruitment stopped&nbsp;<strong>smack</strong>. Many people that had been promised certain positions and growth opportunities are, for now, stuck, because nothing is moving.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="37d8">We can handle a lot of setbacks when the overall “environment trend” is positive. But the environment (especially due to COVID) hasn’t been too supportive — again, in most industries. And while we’re heading into a somewhat more positive direction now, it’s not enough to recover from all those smacks along the way. It will take time.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="fadf">And what’s amplifying all of this — and this is where I’d like to get to the somewhat more constructive topic —&nbsp;<strong>we have fewer spaces to vent</strong>.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 id="de72">To Vent or Not To Vent</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p id="5ac4">I didn’t know the term “to vent” until I read Michael Lopp (rands) article&nbsp;<a href="https://randsinrepose.com/archives/the-update-the-vent-and-the-disaster/" target="_blank" rel="noreferrer noopener">”The Update, The Vent, and The Disaster”</a>&nbsp;about types of 1x1s and their importance.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="d500">To vent is to complain, to throw it all out. To share what’s on your mind with other people. Not necessarily for other people to solve, but just to get it out of your system.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="8f4f">It doesn’t&nbsp;<em>solve</em>&nbsp;anything, but at least it makes us feel a little bit better.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="e066">Under normal circumstances our “venting opportunities” are plentiful. We have our colleagues sitting around us. We meet people at the coffee machine. We vent during our 1x1 with our manager. We vent over beers with our friends at a bar.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="0123">But… we haven’t been able to do many of those things for quite a while. At least not unless particular effort was put in creating such “venting opportunities.”</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="6e09">And I think at least&nbsp;<em>some</em>&nbsp;of what we’re seeing in these All Hands: cropped up frustration and not enough space to vent. So, we act out during the All Hands Q&amp;A. I wouldn’t call this the core of the problem by any stretch, but it’s probably some low hanging fruit we can pick.&nbsp;<a href="https://knowyourmeme.com/memes/its-something" target="_blank" rel="noreferrer noopener">It’s something</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="64a6">So, here’s something to think about — and I will do the same — how can we create more venting places?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="0abf">Here’s just a couple of ideas that some teams are using:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>A Slack channel for “random stuff” — doesn’t need to be work related, just randomness.</li><li>A daily “coffee Zoom” — once upon a time Google created Google Hangouts, which is purely by its name is exactly what we need: a place to hang out. An open space, you can join or not. Say something, just listen. Let people vent.</li><li>Regular 1x1s with the primary question: “what’s on your mind?” Then just sit back and listen.</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p id="58ad">And here’s another one: create some space in your regular team meetings for venting.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="d9c9">I have a weekly sync with two colleague engineering directors. Last week, the first 10 minutes consisted of a vent from one of them about the new mop he bought, how expensive it was, and how he couldn’t figure out how the hell it worked (because he threw out the box with instructions immediately). Luckily, another director was able to provide guidance.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="2bc6">It’s silly. We needed it. It helped.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="a9c0">And remember: the goal of a vent is not to be constructive, necessarily. Apparently it’s a very “male” specific thing to assume that if people throw problems at you, you’re expected to solve them. That’s not what venting is about. It’s just about release.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="847e">Of course, ultimately we need to address the underlying problems, but venting helps.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2185</wp:post_id>
		<wp:post_date>2020-08-19 19:57:04</wp:post_date>
		<wp:post_date_gmt>2020-08-19 17:57:04</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>the-human-need-to-vent</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[47896699601]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>timeline_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1597859827]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>http://zef.me/6f2a1fe5-c788-472a-91b1-34c8b04c95b0-jpeg/</link>
		<pubDate>Sun, 06 Sep 2020 07:52:32 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">http://zefsmusings.files.wordpress.com/2020/09/6f2a1fe5-c788-472a-91b1-34c8b04c95b0.jpeg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2189</wp:post_id>
		<wp:post_date>2020-09-06 09:52:32</wp:post_date>
		<wp:post_date_gmt>2020-09-06 07:52:32</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>6f2a1fe5-c788-472a-91b1-34c8b04c95b0-jpeg</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://zefsmusings.files.wordpress.com/2020/09/6f2a1fe5-c788-472a-91b1-34c8b04c95b0.jpeg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/d1d/176754826/files/2020/09/6f2a1fe5-c788-472a-91b1-34c8b04c95b0.jpeg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:4032;s:6:"height";i:3024;s:4:"file";s:114:"/home/wpcom/public_html/wp-content/blogs.dir/d1d/176754826/files/2020/09/6f2a1fe5-c788-472a-91b1-34c8b04c95b0.jpeg";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"1";s:8:"keywords";a:0:{}}s:8:"filesize";i:3216160;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>http://zef.me/draggedimage-jpeg/</link>
		<pubDate>Sun, 06 Sep 2020 07:52:45 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">http://zefsmusings.files.wordpress.com/2020/09/draggedimage.jpeg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2190</wp:post_id>
		<wp:post_date>2020-09-06 09:52:45</wp:post_date>
		<wp:post_date_gmt>2020-09-06 07:52:45</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>draggedimage-jpeg</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://zefsmusings.files.wordpress.com/2020/09/draggedimage.jpeg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:3264;s:6:"height";i:2448;s:4:"file";s:90:"/home/wpcom/public_html/wp-content/blogs.dir/d1d/176754826/files/2020/09/draggedimage.jpeg";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"1";s:8:"keywords";a:0:{}}s:8:"filesize";i:3058833;}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/d1d/176754826/files/2020/09/draggedimage.jpeg]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Tony-os, Pathos, Logos</title>
		<link>http://zef.me/2020/09/06/the-muselet-6-tony-os-pathos-logos/</link>
		<pubDate>Sun, 06 Sep 2020 07:55:45 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/?p=2191</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>In the Netflix documentary <a href="https://www.netflix.com/title/80102204?s=i&amp;trkid=14170286">“I’m not your guru”</a> motivational speaker <a href="https://en.wikipedia.org/wiki/Tony_Robbins">Tony Robbins</a> is followed during one of his annual events during which a “small audience” of just 2,500 people (he often does events for 50k people in stadiums) come to a resort in Florida for 6 days, paying about $6k for their <a href="https://www.tonyrobbins.com/events/date-with-destiny/">“Date with Destiny.”</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>We get to admire Tony’s glamorous Florida home, just a 20 min drive away from the resort. We see his enormous in-house gym. We see some of his art. We see he has a small, square, cold-water pool in his garden that he jumps in for 10 seconds, for some sort of motivational cool-down before a huge-ass black SUV pulls up to bring him to the resort <em>just in time</em> for the events of that day to start. As he gets out of his SUV, somebody puts his wireless microphone on him. Tony proceeds to do a walk-and-talk with his crew discussing the “mood in the room,” (by that time the audience has been warmed up with loud music and motivational fluffers for an hour or two), he does a few jumps on a small trampoline, makes a Michael Jackson-style twirl, and walks through the curtains on stage while pumping his fists. The audience goes crazy.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Tony Robbins is not what I'd describe as <em>my type of guy.</em></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The excessive display of wealth, his bragging about own accomplishments, name dropping left and right who he’s worked with (Clinton, Mother Teresa, Al Gore, Trump among many others — in case you’re wondering), the swearing. Promoting work through <em>infomercials</em>. And an audience that hopes to get their life fixed by paying a few thousand dollars for a seminar.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I’d consider myself pretty tolerant to people of all walks of life — I’m Dutch, this is (supposedly) our national pride. But this... is too much. Even for me.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I vividly remember watching this documentary in a hotelroom, just after arriving in Berlin for a visit to our office there. I had just picked up a way-too-large bucket of KFC fried chicken, and ate it sitting at the tiny hotel desk, staring at my laptop screen in disbelief.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>What the actual f? Who is this guy, and why do people show up for this?</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":2189} -->
<div class="wp-block-image"><figure class="aligncenter"><img src="https://zefsmusings.files.wordpress.com/2020/09/6f2a1fe5-c788-472a-91b1-34c8b04c95b0.jpeg" alt="" class="wp-image-2189" /></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>But then, 1 hour and 6 minutes into the documentary, Tony does an “intervention” with a girl from Brazil named Dawn (screenshot above). Her story is pretty horrific, I won’t repeat it here.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>And everything changes.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For over an hour I’ve been thinking “how can this be, this guy is not real, this is a scam,” but then, as he talks to this girl. I buy in. This is legit. I cannot judge if this really has long lasting effect on people, but <em>Tony</em> is real. He wants to help people, and this is his way to do it. This is coming from the right place.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Since then, I bought some of his books, I rewatched the documentary once more. I watched numerous interviews. I watched his <a href="https://youtu.be/BwFOwyoH-3g">TED talk</a> (the original TED, not the TEDx’s where seemingly everybody can get on stage). And, I must admit I have started to appreciate many of his philosophies. I won’t delute this post with what those philosophies are exactly, that’s not the point. I’m not convinced of his methods. I’m not a fan of his style. But that doesn’t mean the message is wrong.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>A week or two ago, I finally sat down with my wife to watch the documentary with her. I gave her limited background. Watching somebody else watch something you’ve already seen yourself is always fun. I saw the same level of disgust in her face. Afterwards, we talked about it for quite some time. Unlike me, she wasn’t able to get over the Tony-as-a-personality barrier. When I explained his concepts to her, she got it, and also bought in to an extent. But watching this coming from him —&nbsp;nope, impossible. Wasn’t going to happen.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>However, as I wrote a few weeks ago covering <a href="https://zef.me/2020/08/14/phils-last-dance/">The Last Dance</a>:</p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p>this is not a newsletter about random Netflix shows (yet). So, why would a sports documentary be worth watching as a person interested in managing engineers?</p></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph -->
<p>Or in this case: a documentary about a motivational speaker?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Tony Robbins and my reaction to him is an excellent case study on the importance of <em>ethos</em>. </strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Oh my god, that must be the longest introduction to the actual topic in <strong>blogging history</strong>. You’re welcome.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>How do you convince somebody of something? How do you persuade people into action? How do you change somebody’s world view?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This is what the art of <a href="https://en.wikipedia.org/wiki/Rhetoric">rhetoric</a> is all about:</p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p>Rhetoric (/ˈrɛtərɪk/) is the art of persuasion, which along with grammar and logic, is one of the three ancient arts of discourse. Rhetoric aims to study the capacities of writers or speakers needed to inform, persuade, or motivate particular audiences in specific situations.</p></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph -->
<p>Rhetoric was heavily studied in the time of the ancient greeks, and Aristotle was of the people who started to codify this art form. He identified the three “audience appeals”:</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li><a href="https://en.wikipedia.org/wiki/Ethos">Ethos</a> — appeal to character.</li><li><a href="https://en.wikipedia.org/wiki/Pathos">Pathos</a> — appeal to emotion.</li><li><a href="https://en.wikipedia.org/wiki/Logos">Logos</a> — appeal to logic.</li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Now I will not turn this into a lecture on rhetoric. If you’d like to learn more about this topic I will recommend you one of my favorite books of all time: <a href="https://amzn.to/3fX8Zgj">Thank You for Arguing</a> —&nbsp;which has an incredible mix of theory, practical knowledge, examples and humor.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I’m bringing this up because I mentioned my “journey” with Tony is an example of the importance of ethos. How is that?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>While I was highly unspecific about what Tony’s real message is, if you know me a little bit, you’d expect that it’s likely to be logical. I’m a reasonably logical thinker. That logical message — the <em>logos</em> — was present in the Tony documentary very clearly. <strong>But I didn’t buy it. </strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If you even skim through the documentary quickly, you will see a lot of people crying, cheering, laughing. There is no lack of emotion — <em>pathos</em> — here. Even I, as a cold, level-headed, emotionally stable Dutch person approached tearing up with some of the stories. But until, indeed, that 1 hour and 6 minute moment, <strong>I didn’t buy it</strong>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Why did I not buy it? Because Tony <em>as a person</em>, as a character — his <em>ethos</em>, is so repulsive to me. Quoting myself a few paragraphs back:</p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p>Tony Robbins is not what I'd describe as <em>my type of guy.</em></p></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph -->
<p>Tony is not like me. Nor is he somebody I aspire to become. Therefore, it’s <em>extremely hard</em> for me to buy what he’s selling. That’s how people work. That’s ethos and rhetoric in action<sup><a id="ffn1" href="#fn1" class="footnote">1</a></sup>. If you cannot identify with the person who’s trying to convince you of something, if you’re too dissimilar, it’s not going to fly. Ain’t gonna happen. Unless the <em>pathos</em> gets extremely strong (again: 1 hour and 6 minutes in), and the resistance from the <em>ethos</em> level cracks.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Which brings me to my usual “cool story bro’, so why would I care?” trope.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Chances are high that you at some point will want to influence people, or convince them of something. The rules of ethos, pathos and logos apply to everybody —&nbsp;if they apply to Tony, they will apply to you too. <strong>If people don’t buy into <em>you</em>, they won’t buy into your ideas.</strong> Therefore, it’s vital that you level with people. It’s highly unbeneficial to distance yourself from your audience. The more you emphasize the distance (e.g. “I’m your boss, you do what I say”) the less buy-in you’ll be able to get.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Move to a higher floor. Move into a corner office. Get yourself a desk on an elevated podium (so you can look down on people). Get yourself a throne. Guess what: people will be less inclined to naturally believe what you’re telling them.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This is one of the struggles I have in more senior management positions. With most engineers, there’s a two, sometimes three level hierarchy gap between them and me. As a result, it’s essentially unavoidable to <em>not</em> be disconnected, and therefore for people to not really buy what I’m selling. Why would they care what I think (other than by authority, which doesn’t really count in this context)? What do <em>I</em> know about their reality, glancing down from my giant-ass Florida home with 3 infinity pools?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>What can we do to avoid this?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Some ideas:</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>Be (or appear) like your audience. In an engineering management context: if you can show you can contribute technically, that will help — you’re still “one of us,” so you probably know what you’re talking about and you're worth listening to.</li><li><a href="https://zef.me/2017/04/07/seek-first-to-understand/">Deeply understand your audience</a>. Listen what people have to say, and show you <em>really</em> understand their context.</li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Now, you may ask: so why is Tony Robbins so successful then? Well, not everybody is like me (and my wife). There’s clearly a huge audience in the world that thinks he’s great as a person: The American dream impersonated. Strong. Powerful. Just their type of guy! Somebody they aspire to be. And then, it works. If you’re a cold, level-headed Dutch person, it doesn’t (or at least it’s harder).</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>However, is this really <em>ethos</em>, or are motivational speakers in general just problematic for an audience like me?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I have a counter example: <a href="https://en.wikipedia.org/wiki/Simon_Sinek">Simon Sinek</a>. His message isn’t the same, but he’s also of the leadership “motivational speaker” persuasion. I think he’s great. He’s more modest. Funny. He may live in a giant-ass house, but even in he does —&nbsp;he doesn’t rub it in your face. Just my type of guy. Somebody more like what I aspire to be. So I’m buying whatever he’s selling (including all his books), no questions asked.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I even saw him live once (he was so close I could almost touch him, OMG OMG!!!1one)<br><img class="alignnone size-full wp-image-2190" src="https://zefsmusings.files.wordpress.com/2020/09/draggedimage.jpeg" width="3264" height="2448"></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>By the way, if you’re not familiar with Simon, do yourself a favor: <a href="https://youtu.be/qp0HIF3SfI4">the golden circle</a>, <a href="https://youtu.be/ReRcHdeUG9Y">why leaders eat last</a>, <a href="https://youtu.be/3vX2iVIJMFQ">the infinite game</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>So rhetorics. It’s a real thing. If your job involves convincing other people of things (spoiler alert: it does), considering familiarizing yourself with this art form, and start by leveling with your audience.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>And read <a href="https://amzn.to/2QhSb9s">“Thank You For Arguing,”</a> you won’t regret it.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>PS: This post was originally published as an issue of my weekly newsletter “<a href="https://muselet.substack.com/">The Muselet</a>.” Liked it? Consider <a href="https://muselet.substack.com/">subscribing</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li id="fn1">Rhetoric in Action would be an amazing Manning.com book, by the way <a href="#ffn1">↩</a></li></ol>
<!-- /wp:list -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2191</wp:post_id>
		<wp:post_date>2020-09-06 09:55:45</wp:post_date>
		<wp:post_date_gmt>2020-09-06 07:55:45</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>the-muselet-6-tony-os-pathos-logos</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>timeline_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1599378946]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[48519564374]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>This is on You</title>
		<link>http://zef.me/2020/09/14/this-is-on-you/</link>
		<pubDate>Mon, 14 Sep 2020 07:07:40 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/?p=2196</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:quote -->
<blockquote class="wp-block-quote"><p>I am very disappointed in all of you.</p><p>Just a few years ago, when <em>Joe</em> had a baby, the whole company would chip in. We were able to buy a great present. And now, just 17 people out of 120!? What happened to you, why don’t you care?</p></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph -->
<p>This is the gist of an email sent as part of a company-wide email thread attempting to collect some money to buy a present for a first-time father. This particular paraphrased paragraph was sent by the CEO. Not just the CEO chimed in with disappointed messages, many other senior leaders of the company sent messages of a similar tone.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>When this happened (quite a few years ago, and a few jobs back), I had just joined the company’s management team a few weeks earlier. As the rookie in this position, I wasn’t super confident it was my place to point out the (to me) obvious, but after some deliberation I decided to do it anyway (not as a <em>reply-all</em>, don’t worry, in fact it was during a meeting): </p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p>You are the leaders of this company, it is your <em>job</em> to create the right company culture. If you don’t like what you’re seeing, don’t look anywhere but yourself.</p><p>This is on you.</p></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph -->
<p>Those that know me for some time will know <a href="https://zef.me/2018/03/05/my-fault-by-default/">Extreme Ownership</a> is one of my hobby horses. It comes up in all sorts of contexts: something is not as it is supposed to be, so we’re looking for a scapegoat.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>“I didn’t get that job, because that other person is more political.”</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>“<a href="https://zef.me/2018/03/06/getting-value-out-of-i-quit/">This person resigned</a>, because that other company basically lured them in.”</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>“We lost all that production data, because Larry didn’t enable backups.”</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><em>Bullshit</em>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If you’re the supposed leader of this group, this is on you. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>It's hard not to draw parallels with parenting to make this point even more clear. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>As a parent you cannot <em>yell</em> at your kid: “Stop yelling!”</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>When I phrase it like this, it sounds almost ridiculous. Yet, people do it all the time. I do it all the time. This is simple in theory, but pretty damn hard in practice.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>A father of a 6 year old once complained to me that his son was addicted to violent cartoons and playing games on his phone. I had to bite my lip not to ask: so, who lets him watch those cartoons, and also: WHO GAVE HIM THAT PHONE? It's like giving drugs to someone every day and then being surprised they become an addict. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This is on you.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Coming back to this CEO’s email we started with. The thing here is: if you care about creating a culture with a strong sense of community and generosity, that doesn't just happen by thinking happy thoughts. Do you consistently invest in creating this feeling of community, especially as the company grows? Do you structure the company to support it? Are you yourself an example of generosity?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If not, this is on you. If yes, it’s still on you. What more can you do, because it's clearly not working.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I first documented this “discovery” <a href="https://zef.me/2015/10/09/what-are-you-going-to-do-about-it/">a few years ago</a>:</p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p>I just moved up to the VP of Engineering position at Cloud9 IDE, and we were having a rough time with keeping the site running. Sometimes a few nights a week I would get a 2 a.m. call because the system was down and needed to be fixed. I spent many sleepless nights under high pressure, and I found it immensely frustrating. I felt victimized, and often felt others in the company didn’t feel the same responsibility I did to stick around and fix problems until completion.</p><p>At some point I sent an elaborate complaining email to everybody in the company. <em>This</em> was wrong, and <em>that</em>, and <em>that</em>, and I hadn’t slept in weeks, why did nobody else care?</p></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph -->
<p>My boss at that time was kind enough to slap me in the face with reality:</p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p>“If anybody can do anything about it, it’s you — you’re the VP of Engineering.” and there it was: “So, what are you going to do about it?”</p><p>He was so right. Both my complaints (stability problems and the attitude of people) were 100% my responsibility. If I couldn’t fix them, I was in the wrong position. What really happened here is that I faced a problem and chose to complain about it, rather than figure out a way to fix it.</p></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph -->
<p>I’ve since learned that there are <a href="https://zef.me/2020/08/19/the-human-need-to-vent/">valid reasons to vent</a>. To let all frustration out. It's healthy. That’s fine. As long you don’t expect any change as a result.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To actually make <em>change</em> happen, ask yourself: <strong>what are <em>you</em> going to do about it?</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Which, coincidentally, also happens to be the <em>only</em> thing we have control over, so we may as well focus our energy there.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>PS: This post was originally published as an issue of my weekly newsletter “<a href="https://muselet.substack.com/">The Muselet</a>.” Liked it? Consider&nbsp;<a href="https://muselet.substack.com/">subscribing</a>.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2196</wp:post_id>
		<wp:post_date>2020-09-14 09:07:40</wp:post_date>
		<wp:post_date_gmt>2020-09-14 07:07:40</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>this-is-on-you</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="highlight"><![CDATA[highlight]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[48798767870]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>timeline_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1600067261]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>It Doesn&#039;t Matter What You Say</title>
		<link>http://zef.me/2020/09/18/it-doesnt-matter/</link>
		<pubDate>Fri, 18 Sep 2020 11:14:48 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/?p=2201</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>An exercise:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>✏️ Stand in front of a group, and say something meaningful on a topic the audience cares about.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>No, no, that’s not all,&nbsp;here comes the hard part:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>✏️  Now, look around the room (realistically: zoom room). Hopefully you see familiar faces. Now do this exercise in <em>empathic listening</em>: for each audience member (yes, this is a <code>foreach</code> loop), mentally put yourself in their shoes, or ears, or whatever. Mentally recreate their context: their history in the company, their role, their hopes and dreams, their frustration, everything you know about them including their mood that day. Now replay what you just said. Got that? Now, what did this person just <em>hear</em>?</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p><strong>Sanity check sidebar:</strong> If, when you do this, you just hear your own words echoed back to you —&nbsp;I’m sorry, but you’re not ready. In that case, repeat the exercise, but remove the “putting yourself in their shoes part” and <em>literally</em> ask the people in the room: can you paraphrase what I just said?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Heard something different now? Good, let’s get back to the main program.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>“Crap. That's not what I intended at all...”</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>“Luckily,” you may think, “<em>technically</em> that's not what I said, claimed, or stated so: <em>haha</em> — I would win that court case!”</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You’re absolutely right. However, unless you're willing to fight every individual’s interpretation of what you say in court, here's your reality:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>It doesn't matter what you say, the only thing that matters is what people hear. </strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Welcome to wondrous world of leadership communication! A world in which you basically cannot win, but, on the flip side, you can always attempt to get better.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>I write a “weekly update” email to all product and engineering managers in my company every week, and also publish it on our internal <a href="https://www.workplace.com/">workplace</a> (essentially Facebook for internal use), where anybody in the company can read it. The purpose of this weekly email evolved over time. It started as a type of status email, but eventually I started to use it as a channel to openly talk about challenges I see in the company and how I think (in fact: <em>muse</em> —&nbsp;it’s where “Zef’s musings” started) about solving them. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Let me give credit where credit is due: my updates evolved in this direction based my reading of <a href="https://en.wikipedia.org/wiki/Steven_Sinofsky">Steven Sinofsky</a>’s <a href="https://amzn.to/329nQAH">”One Strategy”</a> book, which crudely could be described as an annotated stringing together of internal blog posts he wrote while trying to unify Microsoft’s Windows strategy, post-<a href="https://en.wikipedia.org/wiki/Windows_Vista">Vista</a>. The posts covered various topics that had come up: the direction in which they were going, the rationale behind restructuring of the organization, expectations from various roles in the company, and various other issues he was seeing and how he thought about them — very similar to what I’m attempting to do. So thanks Steven, I owe you one!</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I think it’s healthy to acknowledge problems that exist, and ideally give people some sense we’re either:</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li><em>actively</em> addressing them, or</li><li>there’s a <em>plan</em> to address them, or</li><li>we’re actively asking people to <em>help us</em> address them, or</li><li>we’ve explicitly decided <em>not to</em> address them (for now)<br></li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>All of the above (in my mind) are better than seemingly ignoring the stampede of elephants in the room.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I feel there’s a lot of value in trying to be more transparent as a company this way. Nevertheless, it’s super duper hard to do well, and the more contentious the topic, the more slippery the slope.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Why? Because for me to do this <em>perfectly</em>, I need to run the exercise we started this post with, not with a few people in a room, but with potentially hundreds of people in a company —&nbsp;many of which I’ve never met, and many of which don’t me that well. If I want to push it, it’s even wise to consider what would happen if this type of message “leaks”  outside the company.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Obviously, it’s not practically possible to this perfectly, but we can approximate by classifying our audience into clusters and then performing an exercise in <em>empathic reading</em>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Here’s my process:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I start with an initial draft, then I attempt to read the message putting myself in shoes of various shapes and sizes:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>How would somebody completely new to the company read this? Is there a risk of “oh my god, this place is a mess, where is the exit!?”</li><li>How would somebody who <em>previously</em> was completely ignorant of this challenge take this? “I was very happy before, but now that you pointed to this problem, yikes!”</li><li>How would somebody who’s in the middle of this challenge take this? “You’re completely missing the point!” “That’s actually not a good representation of what the problem is.” “I never said that!”</li><li>Could anybody think I’m specifically calling them out (without name of course), even though I’m not? “Dude, if you got a problem with me, just talk to me, don’t broadcast this to the company!”</li><li>How would my boss’ boss’ boss take this? “Wow, it seems like there’s quite some challenges over there, should I be worried?”</li><li>How would somebody who is borderline toxic take this? In other words: what is the most negative interpretation of this message?</li><li>How would the outside world read this if this message were to “leak”?</li><li>Over time I built up a “pool” of people that have had strong responses to my messages in this past (good or bad), so I usually consider them specifically.<br></li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Now that I revealed my process, you may think it’s completely bonkers to put this much effort into it, but hey&nbsp;🤷 —&nbsp;this is what I do.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I’ve been doing this for a good number of months now, and so far I’d classify the result as worth it. Mostly I get appreciation for the effort. And it’s a useful exercise in structuring thoughts for myself.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>However, every week or two, there’s a bit of a blow up. Somebody interpreted something in a way I had not anticipated in my 10x rereads attempting to take all my audience “personas” in mind. Perhaps I hadn’t considered this particular person, or perhaps I had just not anticipated how this person could take it accurately. It sucks every time this happens, there are a few relationships that have suffered as a result.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Realistically, this is unavoidable and likely just the cost of the game. However, this is also where the learning starts: I do try to take each such case seriously, and think how to avoid them in the future (if possible).</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Here’s one of the learnings: sometimes I'm quite proud of a clever way of phrasing something. Something I write <em>hints</em> at something, but <em>technically</em> without making any concrete promises. Noice!</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>No. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In practice, this is often the root cause of these blow outs. “But... in <em>this</em> update you wrote X!” With my retort: “haha! — well, <em>technically</em>...”</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>It doesn’t matter what you <em>write</em>, the only thing that matters is what people <em>read</em>.</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Although I’m known to have an <a href="https://zef.me/2020/04/25/zefs-book-club-no-more-feedback/">ambiguous relationship</a> <a href="https://zef.me/2020/06/05/more-thoughts-on-alternatives-to-feedback/">with “feedback,”</a> I do use “likes,” “hearts,” “sads,” or whatever reactions Workplace offers, or comments or replies on these emails/posts. Especially if they came from an unexpected source, I often reread the message to see if I can figure out what they heard, and if that can explain the reaction. While I’m sure there’s some level of vanity here (oh my, this and this important person “liked” it! 10 likes! 20 likes!  Dopamine rush!) —&nbsp;the <em>technical</em> reason I do this is to train my empathy muscle.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Let me link this back to what I wrote about previously (<a href="https://zef.me/2020/09/14/this-is-on-you/">This is on You</a>), since it equally applies here: while it’s sometimes hard to predict how a message lands, it doesn’t mean the “sender” is less responsible for the crash. Or, phrased more to the point:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If people don’t <em>hear</em> what you <em>intended</em> to say — tough cookies — <strong>this is on you</strong>.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p><em>This post was originally published as an issue of my weekly newsletter “<a href="https://muselet.substack.com/">The Muselet</a>.” Liked it? Consider <a href="https://muselet.substack.com/">subscribing</a>.</em></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2201</wp:post_id>
		<wp:post_date>2020-09-18 13:14:48</wp:post_date>
		<wp:post_date_gmt>2020-09-18 11:14:48</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>it-doesnt-matter</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="highlight"><![CDATA[highlight]]></category>
		<wp:postmeta>
			<wp:meta_key>timeline_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1600427689]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[48956674185]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[it-doesnt-matter-what-you-say]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>The Regrettable Invention of Impactback</title>
		<link>http://zef.me/2020/09/27/impactback/</link>
		<pubDate>Sun, 27 Sep 2020 18:04:59 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/?p=2206</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:quote -->
<blockquote class="wp-block-quote"><p>I wanted to to tell you this last week as a reaction to your last piece, but it sounded like feedback, so I dropped it.</p></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph -->
<p>It appears the result of my <a href="https://zef.me/2020/04/25/zefs-book-club-no-more-feedback/">public musing on toxicity of feedback</a> has resulted in <em>feedback deprivation</em>: a few people have admitted they would have given me feedback (also positive) on various things —&nbsp;but, because I’ve fallen off the feedback religion, they didn’t.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I understand, but it also made me realize that being completely feedback deprived is a bit like talking to a wall. Or in my case, like writing letters to Santa. I hope he enjoys them, but I never hear back. And it makes me feel a bit insecure. Did Santa get any value out of all the letters I wrote to him?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You can self-reflect all you want, but many of the things we do in my profession aren’t that easily tracked day-to-day on a KPI dashboard. It’s extremely useful to get at least <em>hints</em> on if something is happening.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Essentially what I need is a system that roughly looks as follows:</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>I take some action, e.g. forward an email, say something during a meeting —&nbsp;you know, management stuff</li><li>I need to understand the <em>impact</em> this action has on people</li><li>I then need to decide whether to <em>adapt</em> my approach based on whether the impact found in step 2 has had the (to me) desired effect</li><li><code>GOTO 1</code><br></li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>You could describe this as some sort of cycle where the end <em>feeds back</em> into the beginning. But what to call it...</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>🤔</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>All joking aside, there’s a subtle difference with common feedback practice in this loop: in most feedback loops step 2 generally isn’t “clean” data. It tends to come with judgement: good, bad; above expectations, below expectations.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Classic feedback example:</p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p>In that meeting you publicly disagreed with me. How dare you! <strong>Never</strong> do that again!</p></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph -->
<p>The judgement: disagreeing with me in public is bad bad bad. Thumbs down. No no.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>That aspect is the potentially “toxic” part. Sure, if this feedback is coming from your boss, it’s worth to <em>listen</em>, but perhaps it’s better not to act on it. Your boss may not like you public disagreement, but is <em>not</em> speaking up in the company’s best interest?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>As a feedback receiver, the input signal that I need is the <em>impact</em> my action had. I, in turn, will then be able to judge if this was satisfactory or not. Your boss not being happy being disagreed with is just one such impact signal, but perhaps the impact your disagreement had on others made it all worth it.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>So... all I need to hear is <em>impact back</em>. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Impactback</strong>. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>That's one terrible term I just coined there. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Terrible.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>But what's done is done. There’s no turning back.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Here is the format for <em>impactback</em>:</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>Describe the situation/action in question</li><li>Describe the impact it had on you, others, the environment<br></li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>“When you disagreed with me in that meeting (1), I got angry because I felt it undermined my authority (2).”</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>“Ever since you gave that talk about <a href="https://www.cypress.io/">Cypress</a> (1), I’ve noticed many more engineers add end-to-end tests to their code (2).”</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>“Whenever you lean back eating your sandwich (1), mom and dad have a lot more bread crumbs to clean from the floor (2).”</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>“When you called me an doody head (1) it made me feel teary tear (2).”</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>No judgement, just facts. It’s for the receiving end to figure out how to use this input, to judge if the impact was desired or not.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Those familiar with <a href="https://zef.me/2016/09/28/judgment-is-a-silent-killer/">nonviolent communication</a> (NVC) will immediately see the parallel. The key thing in nonviolent communication is to separate observation from judgement (and then flush the judgement down the toilet). So, if the term <em>impactback</em> won’t fly (spoiler alert: it won’t), we can rebrand this thing as NVF —&nbsp;<strong>N</strong>on<strong>v</strong>iolent <strong>F</strong>eedback. </p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Impact reactions</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>I’m on a roll, so let me riff on this some more and challenge one of the core mechanics of social networks. 🤯</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The judgement part of feedback is very much encoded in the tools we use. Look at Facebook with its judgmental “like” button — sitting there, mocking us. Do we really want to know if people <em>liked</em> something, or would we prefer to understand its impact?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I’ll speak for myself: I don’t really care if you <em>like</em> what I write; what I care about is whether it gave you something — anything, ideally something beyond the pure enjoyment of my excessive use of the <a href="https://www.thepunctuationguide.com/em-dash.html">em-dash</a>. Did you learn something? Did I change your perspective on something? Did I make you reflect on something? Ultimately, that’s what I’m after. Sure, it’s no secret, I enjoy writing, but there’s a reason I’m posting these things in a public place and not just send them as letters to Santa. I hope they are somehow useful. I hope they make some sort of difference. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To lower the barrier to entry, perhaps social networks should consider adapting their reactions systems to be <em>impact-based</em>, rather than <em>judgement-based</em>, for instance:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>😄 this made me laugh</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>😭 this made me sad</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>🤯 I'm in a state of <em>mindus blownus</em></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>🤓 I learned something</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>🙄 this confused the crap out of me</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>🤷 whatever</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I’d much prefer it. You? <a href="https://en.wikipedia.org/wiki/Mark_Zuckerberg">Zuck</a>, are you listening?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Anyway: <em>impactback</em> —&nbsp;terrible name, excellent concept — if I may say so myself.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p><em>This post was originally published as an issue of my weekly newsletter <a href="https://muselet.substack.com/">“The Muselet.”</a> Liked it? Consider <a href="https://muselet.substack.com/">subscribing</a>.</em></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2206</wp:post_id>
		<wp:post_date>2020-09-27 20:04:59</wp:post_date>
		<wp:post_date_gmt>2020-09-27 18:04:59</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>impactback</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
			<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>timeline_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1601229899]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[49296663936]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>http://zef.me/image-01-10-2020-21-39-jpeg/</link>
		<pubDate>Sun, 11 Oct 2020 09:59:42 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">http://zefsmusings.files.wordpress.com/2020/10/image-01-10-2020-21-39.jpeg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2209</wp:post_id>
		<wp:post_date>2020-10-11 11:59:42</wp:post_date>
		<wp:post_date_gmt>2020-10-11 09:59:42</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>image-01-10-2020-21-39-jpeg</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://zefsmusings.files.wordpress.com/2020/10/image-01-10-2020-21-39.jpeg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/d1d/176754826/files/2020/10/image-01-10-2020-21-39.jpeg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:800;s:6:"height";i:494;s:4:"file";s:100:"/home/wpcom/public_html/wp-content/blogs.dir/d1d/176754826/files/2020/10/image-01-10-2020-21-39.jpeg";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:258402;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>The truth about Bill Gates</title>
		<link>http://zef.me/2020/10/11/the-truth-about-bill-gates/</link>
		<pubDate>Sun, 11 Oct 2020 10:00:48 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/?p=2210</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph {"dropCap":true} -->
<p class="has-drop-cap">Some months ago I watched <a href="https://www.netflix.com/title/80184771?s=i&amp;trkid=255824129">Inside Bill’s Brain</a> —&nbsp;the Netflix (yes, Netflix again) documentary about — <em>shocker</em> — Bill Gates’ brain.</p>
<!-- /wp:paragraph -->

<!-- wp:image -->
<figure class="wp-block-image"><img src="https://pmcvariety.files.wordpress.com/2019/09/bills-brain-netflix.jpg?w=600" alt="" /></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>The premise of the documentary as I remember is the following: Bill Gates is an extremely intelligent inventor that first revolutionized software with Microsoft, and has since put his brain towards solving many of the world’s poverty and health problems through the Bill and Melinda Gates Foundation. How does he do this? How does his mind work? Find out —&nbsp;<em>subscribe to Netflix now</em>!</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I get it, this is a real-life <a href="https://en.wikipedia.org/wiki/A_Beautiful_Mind_(film)">A Beautiful Mind</a>-like story opportunity. People love to hear about the truly unique, wonderfully smart people that walk this earth. The individuals that single-handedly changed the course of mankind.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>And personally, I think a lot of Bill Gates: his successes, the work he’s done through his foundation, and the work he’s doing now to fight COVID (by <a href="https://www.bbc.com/news/52847648">implanting chips into our brains</a> and everything). By no means do I want to dismiss any of that.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>However, the focus on his brain is rather silly. I feel that, just like with <a href="https://zef.me/2020/08/14/phils-last-dance/">The Last Dance</a>, this documentary buried the lede.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To illustrate my issue, let me point you to yet <em>another</em> Netflix production: <a href="https://www.netflix.com/title/80101899?s=i&amp;trkid=255824129">The Founder</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><em>The Founder</em> is a dramatized telling of the founding of McDonald’s —&nbsp;yes, the fast-food chain. McDonald’s was founded by two brothers who pioneered creating processes to produce fast-food both efficiently and of reasonable quality (think: <a href="https://en.wikipedia.org/wiki/Scientific_management">scientific management</a> applied to just-in-time food production). The original McDonald’s restaurant was very successful, but their original attempts to franchise the business failed. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Why? The reason for this is described in one of few books with a number in the title that I’d actually recommend — <a href="https://amzn.to/3jmna17">The 21 Irrefutable Laws of Leadership</a>. In fact, it’s part of Law #1:</p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p><strong>The Law of the Lid:</strong> Leadership Ability Determines a Person’s Level of Effectiveness</p></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph -->
<p>From the book:</p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p>The idea of franchising restaurants wasn't new. It had been around for several decades. To the McDonald brothers, it looked like a way to make money without having to open another restaurant themselves. In 1952, they got started, but their effort was a dismal failure. The reason was simple. They lacked the leadership necessary to make a larger enterprise effective. Dick and Maurice were good at efficient, cut costs, and increase profits. They were efficient <em>managers</em>. But they were not leaders. Their thinking patterns clamped a lid down on what they could do and become. At the height of their success, Dick and Maurice found themselves smack-dab against the Law of the Lid.</p></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph -->
<p>But then they met Ray Kroc. Ray had no particular restaurant related smarts, but he had another skill&nbsp;— leadership:</p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p>The leadership lid in Ray Kroc's life was sky high. Between 1955 and 1959, Kroc succeeded in opening 100 restaurants. Four years after that, there were 500 McDonald's. Today the company has opened more than 31,000 restaurants in 119 countries.' Leadership ability-or more specifically the lack of leadership ability-was the lid on the McDonald brothers' effectiveness.</p></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph -->
<p>And this brings us back to Bill Gates. The <em>real</em> story is that sure, he is a smarty. He is an creator and inventor, like the McDonald’s brothers. But he is a <em>leader too</em>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Microsoft employs 156k people today. Bill Gates was leading those people. If Microsoft would have been a one-person software shop, <em>it would have made no impact on the world</em>. However, Bill was able to scale it to 156k people and it’s changed a couple of things. Subsequently, he used the moneys that he earned to start the <a href="https://www.gatesfoundation.org/">Melinda and Bill Gates Foundation</a> to solve inequality and poverty. Regarding the Foundation, Bill was smart enough (it’s all about his brain, after all) to understand that just throwing money around randomly doesn’t solve all that much, especially the amounts that Bill has to spend. To make a difference, you need to be able to attract a group of people around you to scale that effort. Bill did that. The Bill and Melinda Gates Foundations employs almost 1.5k people.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Obviously, it’s not just about the sheer amount of people employed —&nbsp;but the amount of products, projects, impact that scales along with it. Running organizations of such a size is no walk in the park.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":2209} -->
<div class="wp-block-image"><figure class="aligncenter"><img src="https://zefsmusings.files.wordpress.com/2020/10/image-01-10-2020-21-39.jpeg" alt="" class="wp-image-2209" /></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>While the documentary highlights example after example of how Bill <em>himself</em> is involved in designing  various things, including some sort of toilet, the more relevant skill is different. The achievement of Bill Gates isn’t that he has an amazingly high IQ or that he reads a lot of books. It’s that he figured out to how to attract a shit ton of talent around him, and <em>scale his impact</em>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Honestly, Bill may as well have been a dumb-ass, as long as he would have been able to surround himself with lots of smart people that help him achieve his vision.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>But likely, that wouldn’t have made as attractive a documentary as dissecting a successful man’s brain.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2210</wp:post_id>
		<wp:post_date>2020-10-11 12:00:48</wp:post_date>
		<wp:post_date_gmt>2020-10-11 10:00:48</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>the-truth-about-bill-gates</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_coblocks_accordion_ie_support</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_coblocks_responsive_height</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_coblocks_dimensions</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_coblocks_attr</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[49797147426]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_is_tweetstorm</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>timeline_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1602410449]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>spay_email</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>amp_status</wp:meta_key>
			<wp:meta_value><![CDATA[disabled]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Highlights</title>
		<link>http://zef.me/highlights/</link>
		<pubDate>Sat, 17 Oct 2020 18:22:31 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">http://zef.me/highlights/</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2216</wp:post_id>
		<wp:post_date>2020-10-17 20:22:31</wp:post_date>
		<wp:post_date_gmt>2020-10-17 18:22:31</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>highlights</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[11]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>No More Praise</title>
		<link>http://zef.me/2020/10/23/no-more-praise/</link>
		<pubDate>Fri, 23 Oct 2020 14:27:26 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/?p=2217</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:quote -->
<blockquote class="wp-block-quote"><p>“Praise in public, criticize in private.”</p></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph {"dropCap":true} -->
<p class="has-drop-cap">Take any feedback training, read almost any management book, this is the advice you’ll hear. It’s so wide-spread that it’s just considered fact. This how things ought to be done. Period.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>But should it?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Think back to your school years. You sit in the classroom and your teacher is handing out the graded papers you submitted a week earlier. He stops in front your desk and rather than giving your paper to you, he holds it up in the air. “Kids,” he says, “this particular one was an excellent piece of work. The best paper by far. Well researched, well written. An example to all!”</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>How do you feel? I bet it feels great, doesn’t it? You feel seen, your work is acknowledged and appreciated.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>A month passes. You sit in the classroom and your teacher is handing out marked papers you submitted a week earlier. He stops in front of your desk and hands you your graded paper and moves on. Then he stops at the desk next to you and pauses, holds up your neighbor’s paper in the air. “Kids,” he says, “this particular one was an excellent piece of work.” You get the drill.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>How do you feel? Not as great as the month before. For one, you worked very hard on this paper as well, probably just as hard, or even harder than on the previous one, but you get nothing in return. You were “featured” before, but not this time, so... how should you take that?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Second, you’re now in a similar position as everybody else in the classroom a month before. Somebody else gets public praise, but you don't. What mindset does that put you in? Is it a constructive one?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>“Oh, John was praised for his paper, for sure I will talk to him to figure out what he did well, so I can learn from him and be just as awesome as he!”</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Haha, very cute. Phat chance. More likely:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>“What’s the point? I worked so hard, and I’m not seen.” </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>“Everybody knows John is the teacher’s pet, so of course he gets picked.”</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>“I worked with John, and I actually gave him the idea for his paper. Why does he get all the credit?”</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This is not specific to school, the same thing happens at work. I’m sure your company has some sort of internal newsletter, calling out of specific people during all hands meeting, some sort of “employee of the month” type thing.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Do they work? </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In fact, what does success look like for this type of public praise?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>As far as I know, the goal is to highlight cases (people, projects) that are good examples of our expectations — role models. The intended impact is to kill two birds with one stone:</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>Praising people publicly should reinforce <em>the people mentioned</em> to feel acknowledged, appreciated and encouraged to keep going in the same manner, or even step up more.</li><li>It should encourage <em>others</em> to have a role model, to clarify what’s expected, and to grow to perform at a similar level.<br></li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Is that what happens?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For the people highlighted: I’m concerned about how much of a “drug” this becomes. I notice this in myself. In certain contexts I’m sometimes called out in this type of way. Absolutely, it feels good when that happens. So good, in fact, that I notice myself hoping that certain meetings head into a direction where I may be called out again, and almost feel disappointed when I’m not. That’s pretty shitty. <em>Public praise is addictive.</em> And addiction never leads to anything good. That’s for the one person highlighted, what about everybody else?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Here’s my experience attempting to publicly praise certain projects and individuals for their contributions; the experience spans multiple companies, multiple cultures. The result: praise always, consistently, backfires to some degree (sometimes more visibly than others).</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>A typical public praise announcement to the company:</p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p>We launched product X this week. This is an amazing achievement, and we’d like to thank Hank, Simone, Joe and Hannah for their hard work!</p></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph -->
<p>10 minutes later, some replies:</p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p>You forgot to mention Freddie and Jamie!</p></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph -->
<p>and</p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p>Product X couldn’t have been launched if it weren’t for team Y, should you not mention them too?</p></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph -->
<p>and</p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p>Our product Z also launched, but it’s not mentioned. Are we not that much of a big deal?</p></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph -->
<p>and</p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p>I realize that product X team is closer to you, and therefore gets all the attention, but please don’t forget about everybody else that just work hard to keep this company going!</p></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph -->
<p>The idea behind this announcement was: “we care about delivering stuff, so we should highlight successful cases of delivery.” Did it work, though? Do you think other teams are more motivated to push their products live too?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>While the intention of public praise is good, I don’t believe it’s actually effective.</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>So, what’s the alternative? </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The baseline alternative is to simply not do it. Stop praising in public. That’s easy. What would we lose if we would?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For the people no longer receiving praise: they will feel less seen.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>“I put in all this effort, all these long nights and weekends and... crickets. Why would I even bother?”</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Feeling seen and appreciated is a pretty basic need, so we need to fill it. How about private acknowledgement and appreciation instead? Would that be that be less effective for the person in question than public praise? </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>“Congrats on launching product X, Hannah! We see how much effort you and your team put into this, it’s a critical project for the success of the company, and appreciate it a lot.” </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Does that check the “feeling seen and appreciated” checkbox? I’d imagine it does. It would for me. It’s only if we have comparison (“why do you do this privately with me, and publicly with others”) that this would be problematic. One advantage over doing this publicly is that inclusiveness isn’t an issue (“what about this and this person, this team, that product!?”). Note that I subtly changed the message to be more <a href="https://zef.me/2020/09/27/impactback/">impact based</a>, rather than judgement based.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>What about public reinforcement that we care about teams delivering stuff (in this case), can we achieve that without public praise? I’d say so, just cut the announcement down.</p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p>It was a good week in terms of delivery this week. We launched product X, as well as product Z!</p></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph -->
<p>We should still make sure that once we mention even one example, we mention all, but praising specific people and teams isn’t essential to emphasize the “we care about delivering stuff” message.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In short: no more praise, instead: acknowledgement and appreciation (focusing on impact) in private; reinforcement of what we care about and contributions to it in public.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Let’s try.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2217</wp:post_id>
		<wp:post_date>2020-10-23 16:27:26</wp:post_date>
		<wp:post_date_gmt>2020-10-23 14:27:26</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>no-more-praise</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpas_is_tweetstorm</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>spay_email</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>amp_status</wp:meta_key>
			<wp:meta_value><![CDATA[disabled]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_coblocks_accordion_ie_support</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>timeline_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1603463247]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[50253462792]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_coblocks_dimensions</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_coblocks_responsive_height</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_coblocks_attr</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>http://zef.me/image-23-10-2020-16-15-jpeg/</link>
		<pubDate>Tue, 03 Nov 2020 09:25:19 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">http://zefsmusings.files.wordpress.com/2020/11/image-23-10-2020-16-15.jpeg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2221</wp:post_id>
		<wp:post_date>2020-11-03 10:25:19</wp:post_date>
		<wp:post_date_gmt>2020-11-03 09:25:19</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>image-23-10-2020-16-15-jpeg</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://zefsmusings.files.wordpress.com/2020/11/image-23-10-2020-16-15.jpeg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:704;s:6:"height";i:528;s:4:"file";s:100:"/home/wpcom/public_html/wp-content/blogs.dir/d1d/176754826/files/2020/11/image-23-10-2020-16-15.jpeg";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:18225;}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/d1d/176754826/files/2020/11/image-23-10-2020-16-15.jpeg]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Reality Doesn’t Exist</title>
		<link>http://zef.me/2020/11/03/reality-doesnt-exist/</link>
		<pubDate>Tue, 03 Nov 2020 09:26:53 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/?p=2222</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:quote -->
<blockquote class="wp-block-quote"><p>The first responsibility of a leader is to define reality. The last is to say thank you.</p></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph {"dropCap":true} -->
<p class="has-drop-cap">These are essentially the first sentences in the first book on leadership I ever read: <a href="https://amzn.to/2FSz1p3">Leadership is an Art</a> by Max Depree, probably about 8 years ago.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>“Define reality” — what does that really mean? Isn’t there just one, like, “real” reality — and some see it, and some don’t? Case study: Donald J. Trump?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>It took me quite some years to realize that in fact, no: there is no such thing as <code>#onereality</code>, we all have our own, and we have the power to shape it.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In Buddhism, this is called “emptiness,” which <a href="https://en.wikipedia.org/wiki/%C5%9A%C5%ABnyat%C4%81">Wikipedia unhelpfully describes as follows</a> (selective quoting):</p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p>All things are empty of intrinsic existence and nature.</p></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph -->
<p><em>Ah, of course!</em></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The classic example to illustrate this concept is the example of a pen.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Yes, this:</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":2221} -->
<div class="wp-block-image"><figure class="aligncenter"><img src="https://zefsmusings.files.wordpress.com/2020/11/image-23-10-2020-16-15.jpeg" alt="" class="wp-image-2221" /></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>What is a pen, <em>really</em>? To you and me, it’s likely a tool we can use to write. To a dog, it’s likely a chewing toy. To an ant, it’s likely an unwanted obstacle. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>So, what is the “real” answer? What is a pen, <em>really</em>?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The answer is there’s no one reality. It’s different for everybody, based on who we are and our previous experience in relation to the object. The object in itself is “empty”: the only reason you and I treat it as a writing device is because of <em>us</em>, not the <em>object</em> itself.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Of course, this is not just the case for a pen, it’s true for everything.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>And this brings us back to the Max Depree quote: what leaders need to do is help define this reality for people. Something happened —&nbsp;how do we frame it?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Website went down:</strong> revenue lost <em>or</em> opportunity for <a href="https://zef.me/2018/09/04/making-mistakes-productive-using-the-five-whys/">a lot of valuable learning</a>?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Somebody resigns:</strong> problem because of inevitable slow-down in work to be done <em>or</em> opportunity to hire somebody even better, or bring in some fresh blood into the team?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Start-up went bankrupt:</strong> all that money, time and effort down the drain <em>or</em> so many lessons learned?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Pandemic:</strong> end of humanity as we know it <em>or</em> the time we learned remote working is more viable than previously understood?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Shed burned to the ground:</strong> stuff gone forever <em>or</em> effective way to get rid of old junk?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Glass:</strong> half empty <em>or</em> half full?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Everything is going to shit:</strong> we’re doooooomed <em>or</em> boy, once we make it out, we will have grown so much as people!</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Which one is it? There’s no “real” answer, it’s just a viewpoint and way of looking at it.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Well, not <strong>just</strong> — it actually matters a lot how we define reality for ourselves and others. One definition can drain our energy or even push us into depression, another can give us energy to do more.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Viktor Frankl, a famous Austrian psychologist <a href="https://www.brainyquote.com/quotes/viktor_e_frankl_131417">said</a>:</p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p>“Everything can be taken from a man but one thing: the last of human freedoms — to choose one's attitude in any given set of circumstances, to choose one's own way.”</p></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph -->
<p>Same concept, phrased differently. Frankl is a Nazi death camp survivor. I would be quite comfortable describing a death camp as a “challenging environment” to keep defining reality in an optimistic manner, but Frankl attributes his survival to exactly this ability.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>So, this is what we must do as well. And this is where a lot of our energy should go. That’s why Depree describes it as our “first responsibility.”</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>There’s a lot of stuff going on in the world right now that most people would label as “not great.” It’s our job to make sense of it all, and find the framing, the definition of this reality to keep us going, and <em>ideally</em> even pushes us to be better getting out of it than we were going in.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Is hard? Yes. It is energy draining? Absolutely. Can we always keep this up? Who knows, but let’s try anyway. There’s a learning opportunity in everything.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Thank you.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2222</wp:post_id>
		<wp:post_date>2020-11-03 10:26:53</wp:post_date>
		<wp:post_date_gmt>2020-11-03 09:26:53</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>reality-doesnt-exist</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpas_is_tweetstorm</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>amp_status</wp:meta_key>
			<wp:meta_value><![CDATA[disabled]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>spay_email</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_coblocks_accordion_ie_support</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_coblocks_responsive_height</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_coblocks_attr</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_coblocks_dimensions</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[50640239199]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
			<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>timeline_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1604395614]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Guaranteed Success in 5 Simple Steps</title>
		<link>http://zef.me/2020/11/25/guaranteed-success-in-5-simple-steps/</link>
		<pubDate>Wed, 25 Nov 2020 08:20:09 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/?p=2226</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Contrary to popular belief, achieving your goals is simple.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><em>Simple</em> — I said — not <em>easy</em>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Here’s the universal recipe:</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>Decide where you want to go, and how you will know when you get there.</li><li>Establish where you are right now.</li><li>Decide what you're <em>not</em> willing to sacrifice to achieve your goals.</li><li>Iterate:<br><ol>
			<li><em>Decide</em> on an initiative that you <em>hypothesize</em> will make an impact on getting closer to your goal.</li>
			<li><em>Implement</em> the initiative.</li>
			<li><em>Evaluate</em> if you got closer to your destination and at what cost (sacrificing the right thing?), learn from this experience.</li>
			<li>There yet? <code>GOTO 5</code>, else: <code>GOTO 4.1</code></li>
		</ol></li><li>Done.<br></li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Whether you’re doing food shopping, or running a large corporation; doing something highly technical (e.g. TDD), or something with people (performance reviews) —&nbsp;the above framework will apply. Nevertheless, it’s most valuable in scenarios where the destination is known while route to get there is not —&nbsp;so where some along-the-way course correction is required.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Don’t believe me?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Scrum sprint cycle:</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li><strong>Decide where you want to go, and how you will know when you get there:</strong> sprint goal, user stories with acceptance criteria.</li><li><strong>Establish where you are right now:</strong> at the beginning of the sprint, with 0 story points delivered.</li><li><strong>Decide what you're <em>not</em> willing to sacrifice to achieve your goals:</strong> often not a huge focus in Scrum, but could be definition of done (tests written, code reviewed etc.), not adding to technical debt.</li><li><strong>Iterate:</strong><br><ol>
			<li><strong>Decide on an initiative that you hypothesize will make an impact on getting closer to your goals:</strong> pick the top user story from “To do.”</li>
			<li><strong>Implement the initiative:</strong> Write the code that implements the user story.</li>
			<li><strong>Evaluate if you got closer to your destination and at what cost, learn from this experience:</strong> code review, code tested, ticket signed off, whatever else your definition of done says. Take notes on things that went wrong for separate retrospective cycle. </li>
			<li><strong>There yet? <code>GOTO 5</code>, else: <code>GOTO 4.1</code>:</strong> Only there when all user stories are done.</li>
		</ol></li><li><strong>Done:</strong> sprint fully delivered.<br></li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Food shopping for the week:</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li><strong>Decide where you want to go, and how you will know when you get there:</strong> Determine your food needs for the upcoming week, prepare a shopping list.</li><li><strong>Establish where you are right now:</strong> check your fridge for food you already have and cross out those items from the shopping list.</li><li><strong>Decide what you're <em>not</em> willing to sacrifice to achieve your goals:</strong> Money in wallet &gt; 0.</li><li><strong>Iterate:</strong><br><ol>
			<li><strong>Decide on an initiative that you hypothesize will make an impact on getting closer to your goals:</strong> pick the top item from your shopping list.</li>
			<li><strong>Implement the initiative:</strong> find it in your store, put it in your cart.</li>
			<li><strong>Evaluate if you got closer to your destination and at what cost, learn from this experience:</strong> you got closer, keep going. Perhaps consider reordering shopping list based on store lay-out next time?</li>
			<li><strong>There yet? <code>GOTO 5</code>, else: <code>GOTO 4.1</code>:</strong> There yet when shopping list is empty.</li>
		</ol></li><li><strong>Done:</strong> Pay, leave store.<br></li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>OKRs:</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li><strong>Decide where you want to go, and how you will know when you get there:</strong> Formulate objectives (general direction) and key results (metrics that will determine if you achieved your objectives as well as target values for the quarter).</li><li><strong>Establish where you are right now:</strong> determine the current values for your key results so you know how far you have to push.</li><li><strong>Decide what you're <em>not</em> willing to sacrifice to achieve your goals:</strong> formulate health metrics and their acceptable ranges.</li><li><strong>Iterate:</strong><br><ol>
			<li><strong>Decide on an initiative that you hypothesize will make an impact on getting closer to your goals:</strong> Brainstorm ideas with your team on how to move your metrics closer to the target values for the quarter.</li>
			<li><strong>Implement the initiative:</strong> Test or implement your idea.</li>
			<li><strong>Evaluate if you got closer to your destination and at what cost, learn from this experience:</strong> Did the initiative have the desired effect? If not, what else to try? If yes, how do we push further? </li>
			<li><strong>There yet? <code>GOTO 5</code>, else: <code>GOTO 4.1</code>:</strong> There when you hit your target values.</li>
		</ol></li><li><strong>Done:</strong> Ready for the next quarter, <code>GOTO 1</code>.<br></li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Running Microsoft in the ‘80-‘90s:</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li><strong>Decide where you want to go, and how you will know when you get there:</strong> Put a computer on every desk.</li><li><strong>Establish where you are right now:</strong> Early ‘80s: no computers on desks.</li><li><strong>Decide what you're <em>not</em> willing to sacrifice to achieve your goals:</strong> nothing.</li><li><strong>Iterate:</strong><br><ol>
			<li><strong>Decide on an initiative that you hypothesize will make an impact on getting closer to your goals:</strong> Build out a software ecosystem, starting with an operating system, following essential applications to run on top of it, ensure there’s hardware to run it on.</li>
			<li><strong>Implement the initiative:</strong> Buy an operating system, build on top of it. Next iteration: expand functionality, add more products.</li>
			<li><strong>Evaluate if you got closer to your destination and at what cost, learn from this experience:</strong> Evaluate strategy, adjust where required. </li>
			<li><strong>There yet? <code>GOTO 5</code>, else: <code>GOTO 4.1</code>:</strong> Mission was more or less accomplished around the ‘00s, so time define a new mission.</li>
		</ol></li><li><strong>Done</strong><br></li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>I’ll stop here, but you could map things like test-driven development (TDD), code reviews, performance improvements plans, lean-startup aspects (validated learning) in this model as well.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This is an interesting academic exercise. I could now argue you no longer have to read many of the business books written on these topics, because they can be summarized with what I just described —&nbsp;which wouldn’t be really true, but still make for a good laugh (hah! business books right, nothing you cannot summarize in a 5 item bullet list!).</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>However, this abstraction allows us to look at some of the interesting aspects, I’d like to briefly cover two:</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>Nesting</li><li>Cycle time<br></li></ol>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3>Nesting</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>To run your organization, you will likely be nesting many of these goal setting processes, for instance: you start a company with a particular vision in mind, an ultimate goal to attain (<a href="https://amzn.to/329yk2G">ideally one you will never quite reach</a>, but can make progress towards). Inside that framework, you may set annual goals, based on those various part of the organization may set quarterly OKRs, in product parts of the organization, those OKRs may be translated into Scrum sprints, which in terms will be translated into tickets with a loop for e.g. code reviews. That’s cool, we are engineers, we like to nest our loops.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Cycle time</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>A core aspect of this goal achievement recipe is the <em>Iterate</em> cycle. In most contexts there’s a lot of value in attempting to tighten those loops so you get feedback early and can adjust early.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>When you do TDD, there’s a lot of value in the ability to be able to run all your tests in just a few seconds. The moment that becomes minutes, or longer, the value decreases or you have to be more smart about the tests your run, so you can bring down the time again to get feedback.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The same is true in e.g. validated learning (lean startup style): you come up with some idea or feature and you want to invest the least possible effort to validate if it has the desired effect. Initially, it may take you a month to run one experiment, but by investing in your testing infrastructure and process, you can cut this down significantly. Companies like Facebook and Google are famous for running thousands of experiments simultaneously. This is partially a function of the number of engineers they have working on the product, but they also have the infrastructure in place to validate many assumptions in mere hours.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Shorter cycles are usually better.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>There’s an exception to this. Steps 4.1 (planning), 4.3 (evaluation and retrospection) may add significant overhead, making 4.2 (where the “real work” happens) too insignificant.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For instance, consider Scrum sprints. Common practice is to have two or one week cycles, so why not one-day cycles, or cycles of an hour? This is the point where the process is too heavy and gets in the way. If you want to do a mini-scrum sprint every day, you’d likely spend more time planning, reprioritizing, discussing, estimating, retrospecting than if you’d do this once every two weeks, and the benefit is likely not there.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In cases like this either you experiment with what cycle time is optimal, or you invest significantly in reducing the time you need to spend in steps 4.1 and 4.3.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Green Cars</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>How many green cars have you seen looking through the window today? Likely, you won’t know. However, now that I’ve asked the question, likely you will start noticing green cars.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Similarly, now that you have this ultimate goal setting recipe in mind, you will start to recognize it everywhere. In fact, likely you will recognize elements of it, but <em>bits and pieces will be missing</em>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Now comes the interesting question: why are they missing?  <a href="https://zef.me/2019/08/16/what-does-success-look-like/">Is it really clear what success look like?</a> Have we consciously thought about what sacrifices we’re willing to make to get there? Do we take the time to reflect and retrospect on how things have been going before we jump into the next thing?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>And if not, is that ok?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><em>This post was originally published as an issue of my weekly newsletter <a href="https://muselet.substack.com/">“The Muselet.”</a> Liked it? Consider <a href="https://muselet.substack.com/">subscribing</a>.</em></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2226</wp:post_id>
		<wp:post_date>2020-11-25 09:20:09</wp:post_date>
		<wp:post_date_gmt>2020-11-25 08:20:09</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>guaranteed-success-in-5-simple-steps</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpas_is_tweetstorm</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[51454589351]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>amp_status</wp:meta_key>
			<wp:meta_value><![CDATA[disabled]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_coblocks_accordion_ie_support</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_coblocks_responsive_height</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>timeline_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1606292410]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_coblocks_dimensions</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_coblocks_attr</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
			<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>spay_email</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Product TDD</title>
		<link>http://zef.me/2020/12/09/product-tdd/</link>
		<pubDate>Wed, 09 Dec 2020 08:10:00 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/?p=2230</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p><a href="https://en.wikipedia.org/wiki/Test-driven_development">Wikipedia</a>:</p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p><strong>Test-driven development (TDD)</strong> is a software development process relying on software requirements being converted to test cases before software is fully developed, and tracking all software development by repeatedly testing the software against all test cases. This is opposed to software being developed first and test cases created later.</p></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph -->
<p>Once you get into it, TDD is a beautifully satisfying experience: we write the specification of software to be built in the form of programmatic tests; these tests will all initially fail (turn red). Then, the fun starts: as we write the code that implements the spec, and as we run the tests, write more code, run the tests again over and over, more and more of the red lights will turn green. Dopamine galore. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>And then, after some time: <em>boom</em>. All tests turn green and... we’re done! It’s a great feeling. Not only is it clear we accomplished our goal, we now also have the tests that ensure our code will keep working according to spec tomorrow, next week and next year. We’re building up a <a href="https://en.wikipedia.org/wiki/Regression_testing">regression suite</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>TDD is awesome.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>However, there’s a big hidden assumption in TDD.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>It assumes our specification is correct. It assumes we know what we need to build. Not <em>plan</em> to build, mind you; <em>need</em> to build.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Do we <em>really</em> know, though?</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Defining success</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Frankly, in some areas we most likely do, and we can probably safely nail down our requirements with a specification. Certain areas of product development have more or less been figured out, at least at the rudimentary level. For instance, having people sign up for an account, having them reset their password when the forget, adding an item to a shopping cart on an e-commerce site. Or we may just “borrow” some proven ideas from our competition (to return later). We can write specs for these, have engineers implement them, push them live and be reasonably convinced customers will be happy with them.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>But those are “table stake” pieces of functionality, not differentiators. Customers don’t decide to use our product over the competition because of our awesome sign-up form, or how marvelously we copied the functionality from the competitor. The value ought to be elsewhere.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>And these are the areas where it’s far <em>less clear</em> how to make customers successful. We may <em>think</em> we have a pretty good idea of how to do this, but too often, we’re... just wrong. Dead wrong.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Anybody who’s ever attended a session in a UX lab where a version of their product was tested by a regular off-the-street customer will have received their share of facial pounding with reality. Often we are shockingly bad at predicting how people perceive or use our products. <em>Even if</em> (and that’s a big <em>if</em>) they understand how to use our product, they do batshit crazy, unanticipated stuff. They zoom their web browser to 200%, because they cannot find their glasses. They get lost, because a link opened in a new tab in their web browser. They casually dismiss the value of a feature that you’ve invested months in developing. Real people don’t behave as we expect them to.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>So, if that’s the case, how do we adapt our approach? </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>We apply TDD. At the product level.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>We start with clearly defining what success looks like from the customer’s perspective. Next, we translate this picture of success into a metric that we can track closely. Then, we set a target value for this metric. With this, we have our framework in place, we can now <em>test</em> if we’re there or not; if our light is green or red.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p><strong>Sidebar:</strong> if this somehow reminds you of <a href="https://zef.me/2020/11/25/guaranteed-success-in-5-simple-steps/">my universal recipe for success</a> — well, what can I say, it’s universal.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>We gave my mother a picture of the kids printed on canvas for her birthday this year. I arranged this online: I uploaded a picture, cropped it, adjusted a few things, and had it shipped to my mother’s address. Let’s use this service as an example to make things a bit more concrete.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For this service, we could define success as follows:</p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p>70% of customers who upload at least one picture complete the purchase process successfully.</p></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph -->
<p>Conceptually, we could now apply TDD at this much higher level of abstraction. A type of “Product TDD” if you will. We can create a dashboard we’ll use to track this metric over time and shiny red and green lights signifying if the goal is achieved. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Initially the lights would be red, and then the fun starts. However, it’s a different type of fun. It’s fun that no longer starts with a clear mental picture of the code you need to write to make the light flip from red to green, it requires a much wider set of skills. It requires research: if currently only 30% of customers complete the purchase process, <em>where</em> do they drop off? You need to collect tracking data for this. Once you figure out where they drop off, can you figure out <em>why</em> they drop off? </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Sometimes you can just ask (like we do in a UX lab), or <a href="https://www.hotjar.com/">you just spy on them</a>, but that’s not always the solution. It’s good to find obvious hurdles, but it doesn’t scale. Your next best bet is to <em>experiment</em>.</p>
<!-- /wp:paragraph -->

<!-- wp:image -->
<figure class="wp-block-image"><img src="https://i.imgflip.com/4ns5ej.jpg" alt="" /></figure>
<!-- /wp:image -->

<!-- wp:heading -->
<h2>Experiment all the things</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>If people drop off at the payment page, is it the price that scares them?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>What would happen if we tell them the price much earlier in the process? Let’s try. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Do they drop off because they don’t find a payment method that suits them? We notice we have a lot iOS users. Perhaps if we offer Apple Pay, would that help? Let’s try.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>We <em>try</em> by splitting our audience in two: one part gets to see the old version, the second gets to the adjusted version, then we compare results. This is what we call <a href="https://en.wikipedia.org/wiki/A/B_testing">A/B testing</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>After we try, and the results show significant improvement, we switch everybody to the new version. When it doesn’t work, we discard the functionality. Then: on to the next experiment!</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>One aspect that makes TDD so satisfying is the fast feedback loop. If you write your tests in a somewhat efficient manner, you tend to get feedback on the progress you’ve made within a few seconds, at most minutes.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Sadly, this will be very hard to achieve with “Product TDD.” However, it is very much worth thinking and investing in making this cycle as short as possible.  Yes, we’re back to <a href="https://zef.me/2020/11/25/guaranteed-success-in-5-simple-steps/">optimizing cycle time</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>There’s various parameters that will affect this cycle time:</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li><strong>Volume:</strong> how big is your audience? If you get a few orders per week on your website, it will take a very long time to get any reliable feedback on whether your flow improvements have the desired effect. If you get hundreds of purchases per minute, you will get this feedback much more quickly. </li><li><strong>Lead versus lag metrics:</strong> certain metrics are “laggy” — they will change value with a significantly delay. For instance, if your purchase flow consists of eight screens and you measure the conversion of the entire flow (like in the metric we used as our example), it’s likely it will take people around an hour to go through the whole flow. This means that in the most ideal case, assuming you have significant volume, it will take a few hours or maybe a day to know if your change had any impact. However, if you narrow down your conversion at a screen-level of granularity, you can come up with less laggy <em>lead metrics</em> that are reasonable predictors of the lag metric at the screen level. For instance, you could set target conversion rates per screen and thereby cut the feedback cycle time potentially eight times (in this case).</li><li><strong>Time to experiment:</strong> How much time does it take to go from “hey, I got an idea” to that experiment running on production? These ranges may vary wildly. If you release your product twice per year, an experimental approach becomes essentially impractical. However, even if you release multiple times per day, you need the proper infrastructure in place to run experiments. Tools to A/B test and distinguish differences in behavior between the versions, quality controls in place, deployment pipelines etc.</li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Similar to “regular” TDD, the beauty of this approach is that once you have the tests in place, even after all lights have gone green, the automation investment will have long-term value. Once achieved, your metrics and their targets can simply be turned into health metrics that can be monitored for regressions.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Perhaps later elsewhere in your product you unintentionally introduce a change that breaks the conversion of your purchase flow. You track this already, so you will be notified when this happens. This way you effectively build up a product-level regression suite.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>As I said: TDD is awesome, its concepts should be used more widely.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p><em>This post was originally published as an issue of my weekly newsletter <a href="https://muselet.substack.com/">“The Muselet.”</a> Liked it? Consider <a href="https://muselet.substack.com/">subscribing</a>.</em></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2230</wp:post_id>
		<wp:post_date>2020-12-09 09:10:00</wp:post_date>
		<wp:post_date_gmt>2020-12-09 08:10:00</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>product-tdd</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_oembed_48f32b08ebe92b837f2c75add703de96</wp:meta_key>
			<wp:meta_value><![CDATA[<div class="embed-twitter"><blockquote class="twitter-tweet" data-width="500" data-dnt="true"><p lang="en" dir="ltr">I don&#39;t know what they put in the water in Poznan, but it sure isn&#39;t servers. <a href="https://t.co/NFe22wvqlU">https://t.co/NFe22wvqlU</a> <a href="https://t.co/ajVHBKIYDQ">pic.twitter.com/ajVHBKIYDQ</a></p>&mdash; Zack Kanter (@zackkanter) <a href="https://twitter.com/zackkanter/status/1346195315318112256?ref_src=twsrc%5Etfw">January 4, 2021</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></div>]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
			<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[52008221380]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_time_48f32b08ebe92b837f2c75add703de96</wp:meta_key>
			<wp:meta_value><![CDATA[1611134181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>timeline_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1607501401]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>What They Put in the Water</title>
		<link>http://zef.me/2021/01/20/what-they-put-in-the-water/</link>
		<pubDate>Wed, 20 Jan 2021 09:22:15 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/?p=2233</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:embed {"url":"https:\/\/twitter.com\/zackkanter\/status\/1346195315318112256","type":"rich","providerNameSlug":"twitter","responsive":true,"className":""} -->
<figure class="wp-block-embed is-type-rich is-provider-twitter wp-block-embed-twitter"><div class="wp-block-embed__wrapper">
https://twitter.com/zackkanter/status/1346195315318112256
</div></figure>
<!-- /wp:embed -->

<!-- wp:paragraph {"dropCap":true} -->
<p class="has-drop-cap">Other than&nbsp;<a href="https://twitter.com/alexbdebrie/status/1346197483937001475?s=21">“robot clams,”</a>&nbsp;Poznań (the city where I live)&nbsp;is not a particularly special place by any objective measure — and I say this with all the love in the world.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Sure, it’s a special place to&nbsp;<em>me</em>&nbsp;— it’s my home, I’ve been living here for 9 years now: my kids were born here, we have friends here, we know where to shop, we know where the good restaurants are, we live happily and comfortably. But objectively speaking:&nbsp;<a href="https://en.wikipedia.org/wiki/Pozna%C5%84">Poznań</a>&nbsp;is anything but a second Silicon Valley&nbsp;— not of the world, not of Europe, not even of Poland. With a population of about half a million people it’s not particularly big. It’s not particularly rich either —&nbsp;financially Poland is on the rise, but still behind on the “west.” Overall the trend is for Polish people to move out, not for foreigners to move in. Poznań does have two universities with decent computer science programs, but nothing particularly spectacular (as far as I’m aware). The majority of software companies here are outsourcing companies with western customers. There are a few product companies, but you can probably count them on one hand.&nbsp;</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>With this in mind, when I moved here 9 years ago, the first three years I worked remotely for Dutch and US companies. I’m not a big risk taker, and with somewhat of a network in place back home, taking a remote job seemed like the right way to go.&nbsp;</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>During those first three “remote years” I had the opportunity to work with great people with all kinds of diverse backgrounds, ranging from people that had worked at Apple, Google, Amazon; people that had no formal education at all, those that had gone to famous universities (Stanford, Harvard) with PhDs, as well as former professors; people from nations all around: US, Canada, India, China, Australia, Brazil, Italy, Spain, Germany, Russia.&nbsp;</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Then, when after those three years, I decided to give working for companies in Poznań a try, my expectations weren’t particularly high. Compared to previous companies where the talent pool was&nbsp;<em>the world</em>, it was likely all downhill from there, right?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>But it wasn’t.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Over the last 6 or so years I’ve worked for 3 different companies in Poznań. One&nbsp;<a href="https://www.stxnext.com/">outsourcing company</a>, one&nbsp;<a href="https://www.egnyte.com/">product company</a>&nbsp;with the head-office in the Bay Area and engineering office in Poznań, and&nbsp;<a href="https://www.olxgroup.com/">one product company</a>&nbsp;that has tech hubs all over the world (with three in Europe), but with the largest business here in Poland.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In every single one of them I’ve found world-class people with tons of potential. Sometimes that potential had flourished to some local level. I’ve seen some crazy impressive technical solutions to tough problems. I’ve been to local meetups where people showed mind-blowing things. But you’ll likely never have seen or experienced much of that. There was potential, but somehow… it rarely made it to the world stage.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Why?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>My theory: the environment wasn't there —&nbsp;as&nbsp;<a href="https://muselet.zef.me/p/fixed-the-muselet-0-get-on-the-party">hobby-horse-y</a>&nbsp;as that may sound.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Why do (or did, pre-pandemic) so many engineers and entrepreneurs move to Silicon Valley? I’ve spent time there. The water is&nbsp;<em>terrible</em>, for sure that’s not it. So what then?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Indeed, the nurturing environment.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Not the nature (although a lot of California is unfairly beautiful) — the companies, the people, the start-up infrastructure. This is where you go to attempt to launch the next big thing, this is where all the action is, this is where you can learn so much stuff, this is where some get rich.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The success of Silicon Valley and the fact that it exists in the Bay Area can be explained by a&nbsp;<a href="https://en.wikipedia.org/wiki/Silicon_Valley#History_(pre-1970s)">mix of historical and environmental factors</a>. Can this not be replicated elsewhere? Theoretically it can, and many cities attempt to do so by actively trying to cultivate a similar environment in their location of choice. Various cities in Europe aim to become “the Silicon Valley of Europe.” None have taken over (so far), but they try.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>But we don’t have to wait for our governments to build the next Silicon Valley in our backyard. We can attempt to create micro-environments essentially anywhere. Like… in Poznań. Why not? I hear the water is pretty nice there. Robot clams.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The tweet we started out with is from the CEO of&nbsp;<a href="https://www.stedi.com/">Stedi</a>, a company that has been successfully attracting some of the&nbsp;<em>who's-who</em>&nbsp;in the&nbsp;<a href="https://en.wikipedia.org/wiki/Serverless_computing">Serverless</a>&nbsp;world. They ended up with 4 people from this small city in Poland. How did that happen?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I happen to know three of these guys reasonably well and was a participant in their journey over the last years. They all worked in my group at OLX. Therefore, I feel somewhat qualified to give my interpretation of the “making of.” At the start of the journey one was a principal engineer at&nbsp;<a href="https://www.serverless.com/">serverless</a>&nbsp;(so that one you could’ve seen coming), one was a front-end engineer specialized in&nbsp;jQuery, and another was a computer science student looking for an internship. At the end they are all serverless engineers at Stedi.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Clearly, something went both very well, and terribly wrong.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>As painful as it is, this is one of the best things that can happen in your career: you know you’re on to something, at the same time there’s sufficient failure to learn from.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Let me start with the&nbsp;<em>on-to-something</em>&nbsp;aspect: here’s my inferred&nbsp;<em>ultimate recipe for management success</em>. Not to be hyperbolic or anything.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Here goes:</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li><strong>Create an attractive environment</strong>&nbsp;that has a clear vision and direction, but leaves ample autonomy.<br></li><li><strong>Recruit a few key players</strong>&nbsp;into this environment&nbsp;— key players that can attract more talent into the group, but perhaps more importantly: excel at pulling other people up to their level (and potentially beyond).<br></li><li><strong>Sustain it</strong>: do whatever in your power to let this environment keep up with the group’s growth.<br></li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Usually people conveniently forget to mention that knowing a recipe is one thing, executing it successfully is a whole different story.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This is one of those cases.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Therefore at this point I have to admit that there may be a step (4), but as you will have figured out by now —&nbsp; (1) and (2) of this process worked quite well, but ultimately (3) was a tough one —&nbsp;which is why these guys now work at Stedi (so maybe they at some point they will tell me what step 4 is, if any).</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Here’s some of the back story.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>My part of their journey started when I joined OLX Group almost 3 years ago. I myself joined because it offered (1) — the attractive environment. The concept was: we are a stable corporation, we have the resources, and we want to attempt to bootstrap a new product in a start-up like environment —&nbsp;it’s greenfield, with few constrains, pick your technology stack, we have a product concept that still needs validation, but you are pretty much autonomous. This environmental setup was created by a mix of business, product and tech leaders are the time who deserve a lot of credit. This is what planted the seed.&nbsp;<strong>“(1) Create an attractive environment.”</strong>&nbsp;✅</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Tomek (the jQuery guy) was the first to be recruited (but had to quit on me in our previous company first, as he had done the company before —&nbsp;it’s our tradition). I was quickly recruited thereafter as his engineering manager. To test the “how far can I push autonomy” waters, during my interview process I asked the CTO the question “If I were to say ‘I’d like to build everything on AWS lambda,’ how would you respond?” His answer was “then I would say ‘you’re hired.’”&nbsp;<strong>“(2) Recruit a few key players into this environment.”</strong>&nbsp;✅</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>And so we started. We had limited engineering power to reinvent anything, and limited support in terms of infrastructure. This AWS Lambda and serverless thing may not have been as much as an&nbsp;<em>out there</em>&nbsp;idea as I had intended it to be during my interview. I vaguely remembered that&nbsp;<a href="https://twitter.com/mthenw">one other guy</a>&nbsp;(Maciej) I had once been in touch with in Poznań happened to work at Serverless Inc., so I invited him for lunch. “Sure,” he told me, “given your use case, I see no reason why you shouldn’t go fully serverless.”&nbsp;</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>So we did.&nbsp;<strong>”(1 continued) …but leaves ample autonomy.”</strong>&nbsp;✅</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Lacking any backend engineers or significant infrastructure help, I built the first version of our backend and infrastructure myself. The general back-end direction for the company at that time was Go, and I complemented that with various AWS serverless offerings. This stack would later be dubbed the&nbsp;<a href="https://zef.me/2020/07/02/the-gold-stack-2/">GoLD stack</a>. I encouraged my team members to overstep their (jQuery) boundaries and help out too, owning everything end-to-end. In the mean time we recruited internal and external people with back-end skills superior to mine. I found out Maciej (still at Serverless) had management ambitions, so when I got promoted myself, I recruited him to replace me in my former role.&nbsp;<strong>“(2) Recruit a few key players into this environment…”</strong>&nbsp;(generation 2) ✅</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Things went quickly from there. We attempted to create an environment where knowledge exchange was the default so people would speak at internal events, organize workshops, tweet, blog and speak at conferences. Many did and were quite successful at it. Maciej hired two more high-potential engineers,&nbsp;<a href="https://twitter.com/wm_matuszewski">one as an intern</a>.&nbsp;<strong>“(2 continued) …that can attract more talent into the group…”</strong>&nbsp;✅</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>He then proceeded to systematically pull them up: “ok, so you’ve shown you can do front-end, how about back-end, now how about an AWS certification, now how about…” Wherever the goalposts were put, these guys went. Practically all members of this team grew significantly during this time. Partially this was due to talent, but also largely because they were given the push, space and opportunity to do so (a.k.a. “management”).&nbsp;<strong>”(2 continued) …but perhaps more importantly, excel at pulling other people up to their level (and potentially beyond).”</strong>&nbsp;✅</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Now, this is where you’re challenged as a manager and company. Can you keep up the pace when this happens? Can you offer the right opportunities for career growth, impact, compensation?&nbsp;<strong>“(3) Sustain it: do whatever in your power to let this environment keep up with the group’s growth.”</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Even thought this didn’t end amazingly well (for us), that only makes it a better source for learning. What it showed me is the impact good environments can have. Definitely, you need to find the right people, but that will only get you so far. “Nurture” is key and perhaps more important than “nature.”</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This is why the Poznań angle is relevant: if it can happen here, it can happen anywhere. Therefore, perhaps as a viable alternative to roaming the world to find those few “10x engineers,” you may instead decide to spend your time investing in creating the right environment for the people (virtually) sitting right in front of you. Once it’s in place, it may just grow by itself and expand into your own little Silicon Valley (if you can sustain it long enough).</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>There is nothing in the water in Poznań. The raw material is the same everywhere, it just requires filtering, processing and enrichment. It just requires management.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>“Just.”</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><em>This post was originally published as an issue of my weekly newsletter <a href="https://muselet.substack.com/">“The Muselet.”</a> Liked it? Consider <a href="https://muselet.substack.com/">subscribing</a>.</em></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2233</wp:post_id>
		<wp:post_date>2021-01-20 10:22:15</wp:post_date>
		<wp:post_date_gmt>2021-01-20 09:22:15</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>what-they-put-in-the-water</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
			<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_time_3f021351d6eef103b78541aea1acd9ed</wp:meta_key>
			<wp:meta_value><![CDATA[1611134226]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_coblocks_attr</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_3f021351d6eef103b78541aea1acd9ed</wp:meta_key>
			<wp:meta_value><![CDATA[<div class="embed-twitter"><blockquote class="twitter-tweet" data-width="550" data-dnt="true"><p lang="en" dir="ltr">I don&#39;t know what they put in the water in Poznan, but it sure isn&#39;t servers. <a href="https://t.co/NFe22wvqlU">https://t.co/NFe22wvqlU</a> <a href="https://t.co/ajVHBKIYDQ">pic.twitter.com/ajVHBKIYDQ</a></p>&mdash; Zack Kanter (@zackkanter) <a href="https://twitter.com/zackkanter/status/1346195315318112256?ref_src=twsrc%5Etfw">January 4, 2021</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></div>]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_coblocks_dimensions</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_coblocks_responsive_height</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_coblocks_accordion_ie_support</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>amp_status</wp:meta_key>
			<wp:meta_value><![CDATA[disabled]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>spay_email</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_is_tweetstorm</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_48f32b08ebe92b837f2c75add703de96</wp:meta_key>
			<wp:meta_value><![CDATA[<div class="embed-twitter"><blockquote class="twitter-tweet" data-width="500" data-dnt="true"><p lang="en" dir="ltr">I don&#39;t know what they put in the water in Poznan, but it sure isn&#39;t servers. <a href="https://t.co/NFe22wvqlU">https://t.co/NFe22wvqlU</a> <a href="https://t.co/ajVHBKIYDQ">pic.twitter.com/ajVHBKIYDQ</a></p>&mdash; Zack Kanter (@zackkanter) <a href="https://twitter.com/zackkanter/status/1346195315318112256?ref_src=twsrc%5Etfw">January 4, 2021</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></div>]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[53673135038]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>timeline_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1611134536]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_3a6756b26975caa5aff35324d4f9ea82</wp:meta_key>
			<wp:meta_value><![CDATA[<div class="embed-twitter"><blockquote class="twitter-tweet" data-width="550" data-dnt="true"><p lang="en" dir="ltr">I don&#39;t know what they put in the water in Poznan, but it sure isn&#39;t servers. <a href="https://t.co/NFe22wvqlU">https://t.co/NFe22wvqlU</a> <a href="https://t.co/ajVHBKIYDQ">pic.twitter.com/ajVHBKIYDQ</a></p>&mdash; Zack Kanter (@zackkanter) <a href="https://twitter.com/zackkanter/status/1346195315318112256?ref_src=twsrc%5Etfw">January 4, 2021</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></div>]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_time_3a6756b26975caa5aff35324d4f9ea82</wp:meta_key>
			<wp:meta_value><![CDATA[1611134537]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_time_48f32b08ebe92b837f2c75add703de96</wp:meta_key>
			<wp:meta_value><![CDATA[1611134616]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Fertile Mid-Stations</title>
		<link>http://zef.me/2021/01/29/fertile-mid-stations/</link>
		<pubDate>Fri, 29 Jan 2021 16:06:49 +0000</pubDate>
		<dc:creator>zef83</dc:creator>
		<guid isPermaLink="false">https://zefsmusings.wordpress.com/?p=2239</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph {"dropCap":true} -->
<p class="has-drop-cap">Should it be a company’s ambition to keep people forever? For my parents’ generation and before it was common to stay with a company for your whole career. In some cultures this is still the case. Things look quite differently now, so isn’t it time to re-evaluate if we should adapt our approach to how we position our company as an employer as a result?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I remember reading an article where <a href="https://en.wikipedia.org/wiki/Richard_Branson">Richard Branson</a> spoke about the millennial generation, and how to adapt to their “impatience” and “instant gratification” needs.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This is how I would summarize Branson’s perspective (I couldn’t find the article):</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Millennials are flighty; they are impatient. You can expect them to move around. Rather than trying to fight it, accept it and adapt. Don’t aim to be their final destination —&nbsp;the place they grow up and work the rest of their career. Instead,&nbsp;try to be a <strong>fertile mid-station.</strong> Make sure you create an environment that can teach them plenty of things and helps them grow. In the mean time, make sure they add value to your company quickly. Then, when they want to leave, let them go. No hard feelings. If their experience was good, they will tell their friends.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This is also how I look at all the companies I’ve worked at. I did not leave a single one because they were “bad.” It’s never black and white. Most companies aren’t inherently good or bad, they just vary in how much of a match they are for your particular needs and interests, and the current state of your career. They vary in levels of organization, rate of change, compensation, type of challenges. That doesn’t allow us to judge them to be either good or bad, it all depends.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For instance, a stable company may be boring to some people: if things change all the time, you will likely learn quicker — but for others this may be super stressful. An outsourcing company may not be good if you care a lot about feeling ownership of the product you work on, but if you’re looking for variety and to build up your technical skills in many different projects, such a company may be a great fit.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>As a result, I’d happily recommend any of my previous employers to you&nbsp;<em>after first listening to what you’re interested in.</em> And no, that recommendation will never be “ok, if you’re interested in a super shitty company, definitely go to X.” 🙃 </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>There’s no such thing as the ultimate employer. And likely what type of employer is good for you will evolve over time.</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Ok, I can tell you’re bought into this idea.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>So, how do we adapt as a result? I see two areas of focus:</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>Adapting how we get people in</li><li>Adapting how we let people go (in the non euphemistic sense)<br></li></ol>
<!-- /wp:list -->

<!-- wp:paragraph {"dropCap":true} -->
<p class="has-drop-cap">I’ve been running some “people manager” interview trainings this week. The people manager interview is the recruitment stage where we focus on the candidate’s motivation, soft skills etc. The part I always emphasize is trying to focus on <em>the match</em>. The two-way match: what do we need as a company <em>right now</em> (or near future), and what is this candidate looking for <em>right now</em> (or near future)?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You may see a super smart and competent candidate, but know they’re not a good match <em>right now</em>. Nevertheless, that may change in a year or two down the line. That’s perfectly fine, and a good reason to during this interview also get a sense of their future trajectory. I’m not sure if current applicant tracking systems support this very well to be honest. Yes, I’m sure you can keep candidates on record so you can ping them again in the future, even if they didn’t successfully go through the process —&nbsp;but not sure if you can take potential future career matches into account. PRODUCT OPPORTUNITY.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>But now let’s focus on the tougher part: letting people go. I don’t want to go to the extreme of actively pushing people out because that would be best for <em>them</em> — I’m not ready for myself yet, probably. Nevertheless, we can still be more open to the idea that when people are stagnating, it may actually be good for them to leave. And perhaps we should be more OK with even suggesting it as an option. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Two years ago “Manager READMEs” where a thing, <a href="https://zef.me/2018/06/15/zefs-management-readme/">so I wrote one</a>. Here’s a relevant part:</p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p>It is also my job to ensure you’re sufficiently challenged and growing. If you’re bored, tell me. There are always opportunities for change, either in my team, or in another; I will even support you if you feel you need to join another company in order to achieve your goals (my employers don’t always appreciate this).</p></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph -->
<p>How far should we go to keep people on board? When we know they’re thinking of leaving, or even got an offer, should we throw a promotion at them, <a href="https://en.wikipedia.org/wiki/Golden_handcuffs">golden handcuff</a> them? Likely, that’s hardly ever an effective <em>long-term</em> strategy. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Having people quit on you is always tough, but not all cases are the same. You can classify these cases into two categories:</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>The job they leave to is an improvement for them (again: for their particular needs, interests and stage of career), and likely better than what you can offer in your company right now.</li><li>They leave to get out of their current job.<br></li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Determining which category you’re dealing with is a hard, because the person in question will almost always present it as a case of (1). It’s probably healthy to always reflect on <a href="https://zef.me/2018/03/06/getting-value-out-of-i-quit/">their true motivation</a>, and looking inward at your responsibility as a manager is the right place to start. In many cases it will turn out you did something wrong: didn’t offer the right opportunities, didn’t see the particular needs — there’s learning opportunity.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Nevertheless, if you accept the “fertile mid-station” model, you know this was bound to happen at some point, so&nbsp;let them go and support them in the process.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Easier said than done, though. This is hard, because you have to deal with various biases:</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>You may really like this person, or value their contribution — you want them to stay because it’s good for <em>you</em>. </li><li>This is going to cause you trouble — you will need to find a replacement, there will be some level of drama.</li><li>It may reflect badly on you as a manager. “What is this manager doing that people quit!?”</li><li>You know grass always seems greener elsewhere, so you’re worried they’re making a naive mistake. At least here you know what you’re going to get —&nbsp;the “known evil” argument.<br></li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>It’s never easy as a manager.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Nevertheless, looking back, as an employee — I’ve never regretted a single job switch. Maybe I got lucky.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The value I got out of my jobs varied greatly, but I always got something out of it. We are lucky enough to be in an industry where demand is high, so we’ll always find something else if things don’t pan out. Also: if you accept the mid-station model, people may return to you at some later stage, another reason to make leaving a somewhat positive experience. I have one colleague that has left and rejoined the company twice already, every time in a different enough role that made sense for him at that stage of his career. Cool!</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If you look at this at a market macro level this is probably going to be healthy too. If people make strategic job switches, they will grow more quickly as people. Therefore, as a whole market, the rate of people growth goes up. As a result, we get more value out of the limited “resources” (love to use that term) that we have. Wins all around.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>So, let’s stop optimizing our companies to be a “final destination.” That’s likely not going to work out very well. Instead, let’s accept our role as “fertile mid-stations.” However, that should not stop us from remaining self critical. Always use the moments that people do decide to make a switch as an opportunity to reflect and fix things that are broken.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p><em>This post was originally published as an issue of my weekly newsletter <a href="https://muselet.substack.com/">“The Muselet.”</a> Liked it? Consider <a href="https://muselet.substack.com/">subscribing</a>.</em></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2239</wp:post_id>
		<wp:post_date>2021-01-29 17:06:49</wp:post_date>
		<wp:post_date_gmt>2021-01-29 16:06:49</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>fertile-mid-stations</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
			<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[54066245423]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_coblocks_attr</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_coblocks_dimensions</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_coblocks_responsive_height</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_coblocks_accordion_ie_support</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>amp_status</wp:meta_key>
			<wp:meta_value><![CDATA[disabled]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>spay_email</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_is_tweetstorm</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>timeline_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1611936411]]></wp:meta_value>
		</wp:postmeta>
	</item>
</channel>
</rss>
